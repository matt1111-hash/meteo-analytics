#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Global Weather Analyzer - Main Application Entry Point (MVC Refactored)
F≈ëalkalmaz√°s bel√©p√©si pont - MVC architekt√∫r√°val.

Ez a modul tartalmazza a Global Weather Analyzer alkalmaz√°s f≈ë bel√©p√©si pontj√°t.
Az √∫j MVC architekt√∫ra miatt jelent≈ësen egyszer≈±s√∂d√∂tt.

Refaktor√°lt architekt√∫ra: 
- AppController k√∂zponti logika
- MainWindow komponens koordin√°ci√≥
- Modul√°ris design, thread pool management
"""

import sys
import os
import signal
import traceback
from pathlib import Path
from typing import Optional

# PySide6 import with error handling
try:
    from PySide6.QtWidgets import QApplication, QMessageBox
    from PySide6.QtCore import Qt
    from PySide6.QtGui import QIcon
except ImportError as e:
    print("‚ùå PySide6 import hiba!")
    print("Telep√≠tse a sz√ºks√©ges f√ºgg≈ës√©geket:")
    print("pip install -r requirements-base.txt")
    print(f"R√©szletes hiba: {e}")
    sys.exit(1)

# Project imports
try:
    from src.config import AppInfo, ensure_directories
    from src.gui.main_window import MainWindow
except ImportError as e:
    print("‚ùå Modul import hiba!")
    print("Ellen≈ërizze a projekt strukt√∫r√°t √©s a PYTHONPATH-t.")
    print(f"R√©szletes hiba: {e}")
    sys.exit(1)


class WeatherAnalyzerApp:
    """
    Global Weather Analyzer egyszer≈±s√≠tett alkalmaz√°s oszt√°ly.
    
    Az √∫j MVC architekt√∫ra miatt jelent≈ësen egyszer≈±s√∂d√∂tt:
    - A MainWindow kezeli a komponens koordin√°ci√≥t
    - Az AppController kezeli az √ºzleti logik√°t
    - Ez az oszt√°ly csak a minim√°lis bootstrap funkci√≥kat tartalmazza
    """
    
    def __init__(self):
        """Alkalmaz√°s inicializ√°l√°sa."""
        self.app: Optional[QApplication] = None
        self.main_window: Optional[MainWindow] = None
        
        # Signal handlers be√°ll√≠t√°sa
        self._setup_signal_handlers()
    
    def _setup_signal_handlers(self) -> None:
        """System signal handlers be√°ll√≠t√°sa."""
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
    
    def _signal_handler(self, signum, frame) -> None:
        """System signal kezel≈ë."""
        print(f"\nüõë Signal {signum} fogadva. Alkalmaz√°s le√°ll√≠t√°sa...")
        self.shutdown()
    
    def initialize(self) -> bool:
        """
        Alkalmaz√°s inicializ√°l√°sa.
        
        Returns:
            Sikeres inicializ√°l√°s-e
        """
        try:
            print("üöÄ Global Weather Analyzer ind√≠t√°sa (MVC architekt√∫ra)...")
            
            # === QAPPLICATION L√âTREHOZ√ÅSA ===
            
            self.app = QApplication(sys.argv)
            self.app.setApplicationName(AppInfo.NAME)
            self.app.setApplicationVersion(AppInfo.VERSION)
            self.app.setOrganizationName("Weather Analytics")
            
            # === ALKALMAZ√ÅS IKON ===
            
            self._set_application_icon()
            
            # === K√ñNYVT√ÅRAK BIZTOS√çT√ÅSA ===
            
            ensure_directories()
            print("‚úÖ Projekt k√∂nyvt√°rak ellen≈ërizve")
            
            # === F≈ê ABLAK L√âTREHOZ√ÅSA ===
            
            # Az √∫j MVC architekt√∫r√°ban a MainWindow maga kezeli:
            # - AppController l√©trehoz√°s√°t
            # - Komponensek inicializ√°l√°s√°t  
            # - Signal-slot √∂sszek√∂t√©seket
            # - Worker management-et
            
            self.main_window = MainWindow()
            print("‚úÖ MainWindow l√©trehozva (MVC komponensekkel)")
            
            print("‚úÖ Alkalmaz√°s sikeresen inicializ√°lva!")
            return True
            
        except Exception as e:
            print(f"‚ùå Inicializ√°l√°si hiba: {e}")
            traceback.print_exc()
            self._show_error("Inicializ√°l√°si hiba", str(e))
            return False
    
    def _set_application_icon(self) -> None:
        """Alkalmaz√°s ikon be√°ll√≠t√°sa."""
        try:
            icon_path = Path(__file__).parent / "assets" / "icon.png"
            if icon_path.exists():
                self.app.setWindowIcon(QIcon(str(icon_path)))
            else:
                print("‚ÑπÔ∏è Alkalmaz√°s ikon nem tal√°lhat√≥ (nem kritikus)")
        except Exception as e:
            print(f"‚ö†Ô∏è Ikon be√°ll√≠t√°si hiba: {e}")
    
    def run(self) -> int:
        """
        Alkalmaz√°s futtat√°sa.
        
        Returns:
            Alkalmaz√°s exit k√≥dja
        """
        try:
            if not self.initialize():
                return 1
            
            # === F≈ê ABLAK MEGJELEN√çT√âSE ===
            
            self.main_window.show()
            
            print("üéâ Alkalmaz√°s sikeresen elindult!")
            print("üìç V√°lasszon telep√ºl√©st az id≈ëj√°r√°si adatok lek√©rdez√©s√©hez.")
            print("üèóÔ∏è MVC Architekt√∫ra:")
            print("   üìã AppController - √úzleti logika")
            print("   üñºÔ∏è  MainWindow - UI koordin√°ci√≥")
            print("   üéõÔ∏è  ControlPanel - Bemenet kezel√©s")
            print("   üìä ResultsPanel - Eredm√©nyek megjelen√≠t√©s")
            
            # === EVENT LOOP IND√çT√ÅSA ===
            
            return self.app.exec()
            
        except KeyboardInterrupt:
            print("\n‚ö†Ô∏è Felhaszn√°l√≥ megszak√≠totta az alkalmaz√°st")
            return 0
        except Exception as e:
            print(f"‚ùå Runtime hiba: {e}")
            traceback.print_exc()
            self._show_error("Runtime hiba", str(e))
            return 1
    
    def shutdown(self) -> None:
        """Alkalmaz√°s graceful le√°ll√≠t√°sa."""
        try:
            print("üõë Alkalmaz√°s le√°ll√≠t√°sa...")
            
            # === MAIN WINDOW BEZ√ÅR√ÅSA ===
            
            # A MainWindow closeEvent met√≥dusa automatikusan:
            # - Elmenti a be√°ll√≠t√°sokat
            # - Le√°ll√≠tja az AppController-t
            # - Az AppController le√°ll√≠tja a Worker-eket
            
            if self.main_window:
                self.main_window.close()
                print("‚úÖ MainWindow bez√°rva")
            
            # === QAPPLICATION LE√ÅLL√çT√ÅSA ===
            
            if self.app:
                self.app.quit()
                print("‚úÖ QApplication le√°ll√≠tva")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Le√°ll√≠t√°si hiba: {e}")
    
    def _show_error(self, title: str, message: str) -> None:
        """Hiba√ºzenet megjelen√≠t√©se."""
        if self.app:
            QMessageBox.critical(None, title, message)
        else:
            print(f"‚ùå {title}: {message}")


def check_requirements() -> bool:
    """
    Alapvet≈ë k√∂vetelm√©nyek ellen≈ërz√©se.
    
    Returns:
        Megfelelnek-e a k√∂vetelm√©nyek
    """
    # === PYTHON VERZI√ì ===
    
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8+ sz√ºks√©ges!")
        print(f"Jelenlegi verzi√≥: {sys.version}")
        return False
    
    # === PROJEKT STRUKT√öRA ===
    
    project_root = Path(__file__).parent
    
    # ‚úÖ JAV√çTOTT: Modul√°ris results_panel strukt√∫ra ellen≈ërz√©se
    required_paths = [
        project_root / "src",
        project_root / "src" / "gui",
        project_root / "src" / "config.py",
        project_root / "src" / "gui" / "main_window.py",
        project_root / "src" / "gui" / "app_controller.py",
        project_root / "src" / "gui" / "control_panel.py",
        # ‚úÖ JAV√çTOTT: Modul√°ris results_panel mappa √©s f√°jlok ellen≈ërz√©se
        project_root / "src" / "gui" / "results_panel",
        project_root / "src" / "gui" / "results_panel" / "__init__.py",
        project_root / "src" / "gui" / "results_panel" / "results_panel.py",
        project_root / "src" / "gui" / "results_panel" / "quick_overview_tab.py",
        project_root / "src" / "gui" / "results_panel" / "detailed_charts_tab.py",
        project_root / "src" / "gui" / "results_panel" / "data_table_tab.py",
        project_root / "src" / "gui" / "results_panel" / "extreme_events_tab.py",
        project_root / "src" / "gui" / "results_panel" / "utils.py"
    ]
    
    missing_files = []
    for path in required_paths:
        if not path.exists():
            missing_files.append(str(path))
    
    if missing_files:
        print("‚ùå Hi√°nyz√≥ f√°jlok:")
        for file in missing_files:
            print(f"   - {file}")
        return False
    
    # === MODUL√ÅRIS RESULTS PANEL VALID√ÅCI√ì ===
    
    try:
        # ‚úÖ JAV√çTOTT: Results panel modul√°ris import teszt
        from src.gui.results_panel import ResultsPanel, QuickOverviewTab
        print("‚úÖ Results panel modul√°ris architekt√∫ra: OK")
        
    except ImportError as e:
        print(f"‚ùå Results panel import hiba: {e}")
        print("A modul√°ris results_panel strukt√∫ra hib√°s!")
        return False
    
    # === REQUIREMENTS ELLEN≈êRZ√âSE ===
    
    try:
        # PySide6 ellen≈ërz√©se
        import PySide6
        print(f"‚úÖ PySide6 verzi√≥: {PySide6.__version__}")
        
        # httpx ellen≈ërz√©se
        import httpx
        print(f"‚úÖ httpx verzi√≥: {httpx.__version__}")
        
        # pandas ellen≈ërz√©se
        import pandas
        print(f"‚úÖ pandas verzi√≥: {pandas.__version__}")
        
        # matplotlib ellen≈ërz√©se
        import matplotlib
        print(f"‚úÖ matplotlib verzi√≥: {matplotlib.__version__}")
        
    except ImportError as e:
        print(f"‚ùå Hi√°nyz√≥ f√ºgg≈ës√©g: {e}")
        print("Telep√≠tse a hi√°nyz√≥ csomagokat:")
        print("pip install -r requirements-base.txt")
        return False
    
    return True


def main() -> int:
    """
    F≈ë bel√©p√©si pont.
    
    Returns:
        Exit k√≥d
    """
    print("=" * 70)
    print(f"  {AppInfo.NAME}")
    print(f"  Verzi√≥: {AppInfo.VERSION}")
    print(f"  Meteorol√≥giai adatelemz≈ë alkalmaz√°s")
    print(f"  Architekt√∫ra: MVC (Model-View-Controller)")
    print("=" * 70)
    
    # === K√ñVETELM√âNYEK ELLEN≈êRZ√âSE ===
    
    print("\nüîç K√∂vetelm√©nyek ellen≈ërz√©se...")
    
    if not check_requirements():
        print("\n‚ùå A k√∂vetelm√©nyek nem teljes√ºlnek!")
        print("Telep√≠tse a hi√°nyz√≥ f√ºgg≈ës√©geket:")
        print("pip install -r requirements-base.txt")
        return 1
    
    print("‚úÖ Minden k√∂vetelm√©ny teljes√ºl!")
    
    # === ALKALMAZ√ÅS P√âLD√ÅNY L√âTREHOZ√ÅSA √âS FUTTAT√ÅSA ===
    
    weather_app = WeatherAnalyzerApp()
    
    try:
        return weather_app.run()
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Alkalmaz√°s megszak√≠tva (Ctrl+C)")
        weather_app.shutdown()
        return 0
        
    except Exception as e:
        print(f"\n‚ùå V√°ratlan hiba: {e}")
        traceback.print_exc()
        weather_app.shutdown()
        return 1


if __name__ == "__main__":
    exit_code = main()
    print(f"\nüëã Alkalmaz√°s le√°llt (exit code: {exit_code})")
    sys.exit(exit_code)
