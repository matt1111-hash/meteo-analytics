#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Universal Weather Research Platform - Main Window Module - ANALYTICS ‚Üí MAP SYNC FIX BEFEJEZVE + HIB√ÅS JELZ√âSEK ELT√ÅVOL√çTVA!
Refaktor√°lt f≈ë alkalmaz√°s ablak modulja - CLEAN ARCHITECTURE SINGLE CITY F√ìKUSSZAL + TREND ANALYTICS TAB + ANALYTICS ‚Üí T√âRK√âP AUTOMATIKUS INTEGR√ÅCI√ì + MULTI-CITY R√âGI√ì/MEGYE SUPPORT + SIGNAL CONNECTIONS IMPLEMENT√ÅLVA + HIB√ÅS JELZ√âSEK ELT√ÅVOL√çTVA.

üö® ANALYTICS ‚Üí MAP SYNC FIX BEFEJEZVE + HIB√ÅS JELZ√âSEK ELT√ÅVOL√çTVA:
‚úÖ _setup_control_panel_connections() met√≥dus implement√°lva
‚úÖ Debug wrappers minden signal t√≠pushoz
‚úÖ Signal connections: analysis_parameters_changed, weather_parameters_changed, date_range_changed, parameters_bundle_changed
‚úÖ ControlPanel ‚Üí HungarianMapTab direkt signal connections
‚úÖ Comprehensive parameter bundle alap√∫ sync
‚úÖ Debug logging minden signal emit-n√©l
üîß HIB√ÅS JELZ√âSEK ELT√ÅVOL√çTVA: analytics_panel.analysis_completed hib√°s bek√∂t√©sek t√∂r√∂lve!

üî• ANALYTICS VIEW REFAKTOR√ÅL√ÅS BEFEJEZVE + HIB√ÅS JELZ√âSEK ELT√ÅVOL√çTVA:
‚úÖ _handle_analytics_view_query() handler met√≥dus k√©sz
‚úÖ _on_multi_city_result_ready_for_views() sz√©toszt√≥ met√≥dus implement√°lva
‚úÖ AnalyticsView.multi_city_query_requested signal connection
‚úÖ AnalyticsView.update_with_multi_city_result() publikus slot bek√∂t√©se
‚úÖ Analytics gombok ‚Üí k√∂zponti lek√©rdez≈ë rendszer integr√°ci√≥
‚úÖ Signal chain: AnalyticsView ‚Üí MainWindow ‚Üí MultiCityEngine ‚Üí HungarianMapTab
‚úÖ Duplik√°lt lek√©rdez≈ë logika elt√°vol√≠t√°sa AnalyticsView-b√≥l
üîß HIB√ÅS JELZ√âSEK ELT√ÅVOL√çTVA: analytics_completed ‚Üí t√©rk√©p hib√°s friss√≠t√©s t√∂r√∂lve!

üéâ MULTI-CITY R√âGI√ì/MEGYE T√âRK√âP INTEGR√ÅCI√ì 100% BEFEJEZVE:
‚úÖ multi_city_weather_requested signal kezel√©s implement√°lva
‚úÖ _handle_multi_city_weather_request() handler met√≥dus k√©sz  
‚úÖ Multi-City Engine teljes integr√°ci√≥
‚úÖ R√©gi√≥/megye lek√©rdez√©s ‚Üí t√©rk√©p overlay automatikus gener√°l√°s
‚úÖ AnalyticsResult objektum k√∂zvetlen √°tad√°s HungarianMapTab-nek (NO DICT CONVERSION!)
‚úÖ Analytics View bypass - k√∂zvetlen t√©rk√©p friss√≠t√©s
‚úÖ Error handling multi-city requestekhez
‚úÖ Debug √ºzenetek teljes workflow k√∂vet√©s√©hez

üå§Ô∏è TISZTA ANALYTICS ‚Üí T√âRK√âP INTEGRATION:
‚úÖ Csak a k√∂zponti, param√©terezett adatkezel√©s marad
‚úÖ Hib√°s, fel√ºl√≠r√≥ jelz√©sek elt√°vol√≠tva
‚úÖ Query type alap√∫ t√©rk√©pi param√©ter be√°ll√≠t√°s
‚úÖ Egy√©rtelm≈± adatfolyam: AnalyticsView ‚Üí MainWindow ‚Üí HungarianMapTab

üîß KRITIKUS JAV√çT√ÅS - WINDSPEED METRIC BEFEJEZ√âSE:
‚úÖ QUERY_TYPE_TO_PARAMETER mapping implement√°lva
‚úÖ "windiest_today" ‚Üí "Sz√©l" param√©ter mapping
‚úÖ handle_multi_city_weather_request TELJES implement√°ci√≥
‚úÖ 2-l√©p√©ses koordin√°ci√≥: param√©ter be√°ll√≠t√°s + adat √°tad√°s
‚úÖ Enhanced debug logging minden l√©p√©shez

F√ÅJL HELYE: src/gui/main_window.py
"""

from typing import Optional, List, Dict, Any
from datetime import datetime

from PySide6.QtWidgets import (
    QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QStackedWidget,
    QSplitter, QStatusBar, QMenuBar, QMessageBox, QToolBar, QLabel,
    QSizePolicy
)
from PySide6.QtCore import Qt, QSettings, Signal, QSize
from PySide6.QtGui import QAction, QIcon, QActionGroup

from ..config import AppInfo, GUIConfig
from .utils import (
    GUIConstants, ThemeType, get_source_display_name, get_optimal_data_source,
    format_provider_usage, calculate_provider_costs, get_provider_warning_level,
    format_provider_status, get_provider_icon, format_cost_summary
)
from .theme_manager import get_theme_manager, register_widget_for_theming, ThemeManager
from .color_palette import ColorPalette
from .app_controller import AppController
from .control_panel import ControlPanel
from .results_panel import ResultsPanel
from .data_widgets import WeatherDataTable
from .workers.data_fetch_worker import WorkerManager
from .dialogs import ExtremeWeatherDialog
from .analytics_view import AnalyticsView
from .map_view import MapView
from .trend_analytics_tab import TrendAnalyticsTab
from .hungarian_map_tab import HungarianMapTab


class MainWindow(QMainWindow):
    """
    üö® ANALYTICS ‚Üí MAP SYNC FIX BEFEJEZVE + HIB√ÅS JELZ√âSEK ELT√ÅVOL√çTVA + üî• ANALYTICS VIEW REFAKTOR√ÅL√ÅS BEFEJEZVE + üéâ MULTI-CITY R√âGI√ì/MEGYE T√âRK√âP INTEGR√ÅCI√ì 100% BEFEJEZVE + üå§Ô∏è TISZTA ANALYTICS ‚Üí T√âRK√âP INTEGRATION + üöÄ TREND ANALYTICS INTEGR√ÅCI√ì BEFEJEZVE - CLEAN ARCHITECTURE SINGLE CITY F√ìKUSSZAL + SPLITTER CONSTRAINTS OPTIMALIZ√ÅLVA + ANALYTICS EGYSZER≈∞S√çTETT INTEGR√ÅCI√ì + PROVIDER STATUS BAR + THEMEMANAGER + DUAL-API + MAP VIEW INTEGR√ÅCI√ì + TREND ANALYTICS TAB + üîß WINDSPEED METRIC TELJES JAV√çT√ÅS.
    """
    
    # üîß KRITIKUS: QUERY TYPE ‚Üí T√âRK√âP PARAM√âTER MAPPING - WINDSPEED JAV√çT√ÅS!
    QUERY_TYPE_TO_PARAMETER = {
        "hottest_today": "H≈ëm√©rs√©klet",
        "coldest_today": "H≈ëm√©rs√©klet", 
        "windiest_today": "Sz√©l",        # ‚Üê EZ A KRITIKUS JAV√çT√ÅS!
        "wettest_today": "Csapad√©k",
        "rainiest_today": "Csapad√©k",
        "sunniest_today": "H≈ëm√©rs√©klet",
        "temperature_range": "H≈ëm√©rs√©klet"
    }
    
    # Signalok a t√©ma kezel√©shez
    theme_changed = Signal(str)  # theme name
    view_changed = Signal(str)   # view name
    
    # üåç Provider signalok
    provider_status_updated = Signal(str)  # provider status message
    
    def __init__(self):
        """F≈ëablak inicializ√°l√°sa - ANALYTICS ‚Üí MAP SYNC FIX BEFEJEZVE + ANALYTICS VIEW REFAKTOR√ÅL√ÅS BEFEJEZVE + HIB√ÅS JELZ√âSEK ELT√ÅVOL√çTVA."""
        super().__init__()
        
        print("üö® DEBUG: ANALYTICS ‚Üí MAP SYNC FIX BEFEJEZVE + ANALYTICS VIEW REFAKTOR√ÅL√ÅS BEFEJEZVE + HIB√ÅS JELZ√âSEK ELT√ÅVOL√çTVA MainWindow __init__ started")
        
        # QSettings a be√°ll√≠t√°sok perziszt√°l√°s√°hoz
        self.settings = QSettings("Weather Analytics", AppInfo.NAME)
        
        # üé® THEMEMANAGER INTEGR√ÅCI√ì
        self.theme_manager = get_theme_manager()
        self.color_palette = ColorPalette()
        
        # üåç PROVIDER STATUS TRACKING
        self.current_provider = "auto"
        self.provider_usage_stats = {}
        self.provider_cost_summary = ""
        self.provider_warning_level = None
        
        # === MVC KOMPONENSEK L√âTREHOZ√ÅSA ===
        
        print("üéØ DEBUG: Creating CLEAN AppController with DUAL-API...")
        # Controller (Model + business logic)
        self.controller = AppController()
        print("‚úÖ DEBUG: CLEAN AppController created with DUAL-API support")
        
        # Worker Manager (a Controller haszn√°lja, de referencia kell a UI-hoz)
        self.worker_manager = self.controller.worker_manager
        
        # === VIEW KOMPONENSEK ===
        
        # Navig√°ci√≥s toolbar
        self.toolbar: Optional[QToolBar] = None
        
        # Stacked Widget a n√©zetek v√°lt√°s√°hoz
        self.stacked_widget: Optional[QStackedWidget] = None
        
        # VIEW REFERENCI√ÅK
        self.current_view_name = "single_city"  # üßπ Single City az alap√©rtelmezett
        self.current_theme = ThemeType.LIGHT  # üé® √öJ: T√©ma tracking
        
        # SingleCity view komponensei (K√ñZPONTI FUNKCIONALIT√ÅS)
        self.control_panel: Optional[ControlPanel] = None
        self.results_panel: Optional[ResultsPanel] = None
        self.data_table: Optional[WeatherDataTable] = None
        
        # üìä ANALYTICS VIEW KOMPONENS - REFAKTOR√ÅLT!
        self.analytics_panel: Optional[AnalyticsView] = None
        
        # üó∫Ô∏è MAP VIEW KOMPONENS
        self.map_view: Optional[MapView] = None
        
        # üå§Ô∏è HUNGARIAN MAP TAB KOMPONENS - √öJ!
        self.hungarian_map_tab: Optional[HungarianMapTab] = None
        
        # üìà TREND ANALYTICS KOMPONENS - √öJ!
        self.trend_analytics_tab: Optional[TrendAnalyticsTab] = None
        
        # üåç STATUS BAR PROVIDER WIDGETS
        self.provider_status_label: Optional[QLabel] = None
        self.usage_status_label: Optional[QLabel] = None
        self.cost_status_label: Optional[QLabel] = None
        
        # === UI INICIALIZ√ÅL√ÅSA ===
        
        print("üñºÔ∏è DEBUG: Setting up UI...")
        self._setup_window()
        self._init_navigation_toolbar()
        self._init_stacked_views()
        self._init_menu_bar()
        self._init_status_bar_with_provider_display()
        print("‚úÖ DEBUG: UI setup complete")
        
        # === üßπ CLEAN SIGNAL CHAIN ===
        
        print("üîó DEBUG: Connecting CLEAN signals...")
        self._connect_mvc_signals()
        print("‚úÖ DEBUG: CLEAN SIGNAL CHAIN CONNECTED")
        
        # === üö® ANALYTICS ‚Üí MAP SYNC SIGNAL CONNECTIONS ===
        
        print("üö® DEBUG: Setting up ANALYTICS ‚Üí MAP SYNC signal connections...")
        self._setup_control_panel_connections()
        print("‚úÖ DEBUG: ANALYTICS ‚Üí MAP SYNC SIGNAL CONNECTIONS CONNECTED")
        
        # === üé® THEMEMANAGER SETUP ===
        
        print("üé® DEBUG: Setting up ThemeManager integration...")
        self._setup_theme_integration()
        print("‚úÖ DEBUG: ThemeManager integration complete")
        
        # === BE√ÅLL√çT√ÅSOK BET√ñLT√âSE ===
        
        self._load_settings()
        
        print("‚úÖ DEBUG: ANALYTICS ‚Üí MAP SYNC FIX BEFEJEZVE + ANALYTICS VIEW REFAKTOR√ÅL√ÅS BEFEJEZVE + HIB√ÅS JELZ√âSEK ELT√ÅVOL√çTVA MainWindow initialized")
    
    def _setup_window(self) -> None:
        """üîß LAYOUT CONSTRAINTS OPTIMALIZ√ÅLT ablak alapbe√°ll√≠t√°sai - THEMEMANAGER INTEGR√ÅCI√ìVAL + DUAL-API."""
        self.setWindowTitle(f"{AppInfo.NAME} - {AppInfo.VERSION} (Analytics ‚Üí Map Sync Fix + Analytics View Refaktor√°l√°s + Hib√°s Jelz√©sek Elt√°vol√≠tva)")
        
        # üîß OPTIMALIZ√ÅLT ABLAK M√âRETEK
        self.setGeometry(
            GUIConstants.MAIN_WINDOW_X,
            GUIConstants.MAIN_WINDOW_Y,
            1400,  # üîß SZ√âLESEBB ABLAK
            900    # üîß MAGASABB ABLAK
        )
        self.setMinimumSize(
            1200,  # üîß NAGYOBB MIN WIDTH
            700    # üîß NAGYOBB MIN HEIGHT
        )
        
        # üé® WIDGET REGISZTR√ÅCI√ì THEMEMANAGER-HEZ
        register_widget_for_theming(self, "navigation")
        
        # üé® T√©ma rendszer integr√°ci√≥ - alap√©rtelmezett light theme
        self._apply_theme_internal(ThemeType.LIGHT)
        
        print("üîß DEBUG: Window setup complete")
    
    def _setup_theme_integration(self) -> None:
        """
        üé® ThemeManager integr√°ci√≥ be√°ll√≠t√°sa.
        """
        print("üé® DEBUG: Setting up ThemeManager integration...")
        
        # ThemeManager signalok feliratkoz√°sa
        self.theme_manager.theme_changed.connect(self._on_theme_manager_changed)
        
        # Widget regisztr√°ci√≥k f≈ë komponensekhez
        register_widget_for_theming(self, "navigation")
        
        print("‚úÖ DEBUG: ThemeManager integration setup complete")
    
    def _on_theme_manager_changed(self, theme_name: str) -> None:
        """
        üé® ThemeManager t√©ma v√°ltoz√°s kezel√©se.
        
        Args:
            theme_name: √öj t√©ma neve ("light" vagy "dark")
        """
        print(f"üé® DEBUG: MainWindow received ThemeManager theme change: {theme_name}")
        
        # T√©ma tracking friss√≠t√©se
        try:
            self.current_theme = ThemeType(theme_name)
        except ValueError:
            self.current_theme = ThemeType.LIGHT
        
        # Splitter t√©ma friss√≠t√©se
        self._update_splitter_theme(theme_name == "dark")
        
        # Saj√°t signal kibocs√°t√°sa backward compatibility-hez
        self.theme_changed.emit(theme_name)
        
        print(f"‚úÖ DEBUG: MainWindow theme change handled: {theme_name}")
    
    def _init_navigation_toolbar(self) -> None:
        """
        Navig√°ci√≥s eszk√∂zt√°r l√©trehoz√°sa CLEAN architekt√∫r√°hoz + THEMEMANAGER + ANALYTICS - DASHBOARD CLEANUP BEFEJEZVE + TREND ANALYTICS.
        """
        print("üß≠ DEBUG: Creating navigation toolbar...")
        
        # Eszk√∂zt√°r l√©trehoz√°sa
        self.toolbar = QToolBar("Navig√°ci√≥")
        self.toolbar.setMovable(False)
        self.toolbar.setToolButtonStyle(Qt.ToolButtonTextBesideIcon)
        self.toolbar.setIconSize(QSize(24, 24))
        
        # üé® WIDGET REGISZTR√ÅCI√ì THEMEMANAGER-HEZ
        register_widget_for_theming(self.toolbar, "navigation")
        
        # === NAVIG√ÅCI√ìS AKCI√ìK ===
        
        # üèôÔ∏è Pontszer≈± Elemz√©s (K√ñZPONTI N√âZET)
        self.single_city_action = QAction("V√°ros Elemz√©s", self)
        self.single_city_action.setToolTip("Egyetlen v√°ros r√©szletes id≈ëj√°r√°si elemz√©se - K√ñZPONTI FUNKCI√ì")
        self.single_city_action.triggered.connect(lambda: self._switch_view("single_city"))
        self.single_city_action.setCheckable(True)
        self.single_city_action.setChecked(True)  # üßπ Single City az alap√©rtelmezett
        self.toolbar.addAction(self.single_city_action)
        
        # üìä Analytics (REFAKTOR√ÅLT FUNKCI√ì)
        self.analytics_action = QAction("Analitika", self)
        self.analytics_action.setToolTip("Id≈ëj√°r√°si elemz√©sek √©s statisztik√°k (refaktor√°lt)")
        self.analytics_action.triggered.connect(lambda: self._switch_view("analytics"))
        self.analytics_action.setCheckable(True)
        self.toolbar.addAction(self.analytics_action)
        
        # üìà Trend Elemz≈ë (M≈∞K√ñDIK!)
        self.trend_action = QAction("Trend Elemz√©s", self)
        self.trend_action.setToolTip("Hossz√∫ t√°v√∫ klimatikus trendek elemz√©se professional vizualiz√°ci√≥kkal")
        self.trend_action.triggered.connect(lambda: self._switch_view("trend_analysis"))
        self.trend_action.setCheckable(True)
        self.toolbar.addAction(self.trend_action)
        
        # üó∫Ô∏è Interakt√≠v T√©rk√©p (M≈∞K√ñDIK!)
        self.map_action = QAction("T√©rk√©p", self)
        self.map_action.setToolTip("Interakt√≠v id≈ëj√°r√°si t√©rk√©p")
        self.map_action.triggered.connect(lambda: self._switch_view("map_view"))
        self.map_action.setCheckable(True)
        self.toolbar.addAction(self.map_action)
        
        self.toolbar.addSeparator()
        
        # ‚öôÔ∏è Be√°ll√≠t√°sok
        self.settings_action = QAction("Be√°ll√≠t√°sok", self)
        self.settings_action.setToolTip("Alkalmaz√°s be√°ll√≠t√°sok")
        self.settings_action.triggered.connect(lambda: self._switch_view("settings"))
        self.settings_action.setCheckable(True)
        self.toolbar.addAction(self.settings_action)
        
        # === AKCI√ìK CSOPORTOS√çT√ÅSA (k√∂lcs√∂n√∂s kiz√°r√°s) ===
        
        self.view_action_group = QActionGroup(self)
        self.view_action_group.addAction(self.single_city_action)
        self.view_action_group.addAction(self.analytics_action)
        self.view_action_group.addAction(self.trend_action)
        self.view_action_group.addAction(self.map_action)
        self.view_action_group.addAction(self.settings_action)
        
        # Eszk√∂zt√°r hozz√°ad√°sa az ablakhoz
        self.addToolBar(Qt.TopToolBarArea, self.toolbar)
        
        print("‚úÖ DEBUG: Navigation toolbar created")
    
    def _init_stacked_views(self) -> None:
        """
        üö® ANALYTICS ‚Üí MAP SYNC FIX BEFEJEZVE + HIB√ÅS JELZ√âSEK ELT√ÅVOL√çTVA + üî• ANALYTICS VIEW REFAKTOR√ÅL√ÅS BEFEJEZVE + üéâ MULTI-CITY R√âGI√ì/MEGYE T√âRK√âP INTEGR√ÅCI√ì 100% BEFEJEZVE + üå§Ô∏è TISZTA ANALYTICS ‚Üí T√âRK√âP INTEGRATION + üöÄ TREND ANALYTICS INTEGR√ÅCI√ì BEFEJEZVE QStackedWidget inicializ√°l√°sa k√ºl√∂nb√∂z≈ë n√©zetekkel.
        """
        print("üìö DEBUG: Creating stacked views...")
        
        # K√∂zponti widget √©s layout
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # üé® WIDGET REGISZTR√ÅCI√ì
        register_widget_for_theming(central_widget, "container")
        
        main_layout = QVBoxLayout(central_widget)
        main_layout.setContentsMargins(5, 5, 5, 5)
        main_layout.setSpacing(0)
        
        # === STACKED WIDGET L√âTREHOZ√ÅSA ===
        
        self.stacked_widget = QStackedWidget()
        register_widget_for_theming(self.stacked_widget, "container")
        main_layout.addWidget(self.stacked_widget)
        
        # === VIEW-K L√âTREHOZ√ÅSA ===
        
        # 1. Single City View (K√ñZPONTI FUNKCIONALIT√ÅS)
        single_city_view = self._create_single_city_view_constraints_optimized()
        self.stacked_widget.addWidget(single_city_view)  # INDEX 0
        
        # 2. Analytics View (REFAKTOR√ÅLT VERZI√ì)
        analytics_view = self._create_analytics_view_refactored()
        self.stacked_widget.addWidget(analytics_view)  # INDEX 1
        
        # 3. Trend Analysis View (VAL√ìDI TREND ANALYTICS TAB!)
        trend_view = self._create_trend_analysis_view()
        self.stacked_widget.addWidget(trend_view)  # INDEX 2
        
        # 4. Map View (VAL√ìDI HUNGARIAN MAP TAB!)
        map_view = self._create_hungarian_map_view()
        self.stacked_widget.addWidget(map_view)  # INDEX 3
        
        # 5. Settings View (PLACEHOLDER)
        settings_view = self._create_settings_placeholder()
        self.stacked_widget.addWidget(settings_view)  # INDEX 4
        
        # === ALAP√âRTELMEZETT N√âZET BE√ÅLL√çT√ÅSA ===
        
        self.stacked_widget.setCurrentIndex(0)  # Single City View alap√©rtelmezett
        
        print("‚úÖ DEBUG: Stacked views created")
    
    def _create_single_city_view_constraints_optimized(self) -> QWidget:
        """
        üîß KRITIKUS SPLITTER CONSTRAINTS OPTIMALIZ√ÅLT - Single City View l√©trehoz√°sa - FINAL FIX RESPONSIVE LAYOUT.
        """
        print("üîß DEBUG: Creating SPLITTER CONSTRAINTS OPTIMALIZ√ÅLT Single City View...")
        
        view = QWidget()
        register_widget_for_theming(view, "container")
        
        layout = QVBoxLayout(view)
        layout.setContentsMargins(2, 2, 2, 2)
        layout.setSpacing(0)
        
        # === üîß KRITIKUS JAV√çT√ÅS: SPLITTER CONSTRAINTS OPTIMALIZ√ÅLT ===
        
        main_splitter = QSplitter(Qt.Horizontal)
        
        print("üîß DEBUG: Configuring OPTIMALIZ√ÅLT splitter...")
        
        # üîß KRITIKUS SPLITTER BE√ÅLL√çT√ÅSOK - OPTIMALIZ√ÅLT
        main_splitter.setHandleWidth(18)  # üîß SZ√âLESEBB HANDLE
        main_splitter.setChildrenCollapsible(False)  # üîß Panel-ek nem csukhat√≥k √∂ssze
        main_splitter.setOpaqueResize(True)  # üîß Val√≥s idej≈± √°tm√©retez√©s
        
        # üé® SPLITTER WIDGET REGISZTR√ÅCI√ì THEMEMANAGER-HEZ
        register_widget_for_theming(main_splitter, "splitter")
        
        # === BAL OLDAL: CONTROL PANEL - OPTIMALIZ√ÅLT CONSTRAINTS ===
        
        print("üéõÔ∏è DEBUG: Creating ControlPanel with FINAL OPTIMALIZ√ÅLT size constraints...")
        self.control_panel = ControlPanel(self.worker_manager)
        
        # üé® CONTROL PANEL WIDGET REGISZTR√ÅCI√ì
        register_widget_for_theming(self.control_panel, "container")
        
        # üîß KRITIKUS: OPTIMALIZ√ÅLT PANEL SIZE CONSTRAINTS - FINAL FIX
        self.control_panel.setMinimumWidth(320)  # üîß OPTIMALIZ√ÅLT MIN
        self.control_panel.setMaximumWidth(520)  # üîß SZ√âLESEBB MAX
        
        # üîß EXPLICIT SIZE POLICY BE√ÅLL√çT√ÅS
        self.control_panel.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Expanding)
        
        main_splitter.addWidget(self.control_panel)
        print(f"‚úÖ DEBUG: ControlPanel added with FINAL OPTIMALIZ√ÅLT constraints: {320}-{520}px")
        
        # === JOBB OLDAL: RESULTS PANEL - EXPANDABLE OPTIMALIZ√ÅLVA ===
        
        print("üìä DEBUG: Creating ResultsPanel with OPTIMALIZ√ÅLT expand capability...")
        self.results_panel = ResultsPanel()
        
        # üé® RESULTS PANEL WIDGET REGISZTR√ÅCI√ì
        register_widget_for_theming(self.results_panel, "container")
        
        # üîß RESULTS PANEL OPTIMALIZ√ÅLT CONSTRAINTS
        self.results_panel.setMinimumWidth(450)  # üîß NAGYOBB MINIMUM
        # Nincs maximum width - expand√°lhat
        
        # üîß EXPLICIT SIZE POLICY BE√ÅLL√çT√ÅS
        self.results_panel.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        
        main_splitter.addWidget(self.results_panel)
        print("‚úÖ DEBUG: ResultsPanel added with OPTIMALIZ√ÅLT expand capability")
        
        # === üîß KRITIKUS: STRETCH FACTOR KONFIGUR√ÅCI√ìK OPTIMALIZ√ÅLVA ===
        
        print("üîß DEBUG: Setting OPTIMALIZ√ÅLT stretch factors...")
        
        # üîß OPTIMALIZ√ÅLT Stretch factor be√°ll√≠t√°s:
        # 0 = Control Panel (fix sz√©less√©g 320-520px k√∂z√∂tt)
        # 1 = Results Panel (kit√∂lti a teljes marad√©k helyet)
        main_splitter.setStretchFactor(0, 0)  # üîß Control panel fix
        main_splitter.setStretchFactor(1, 1)  # üîß Results panel teljes stretch
        
        print("‚úÖ DEBUG: OPTIMALIZ√ÅLT stretch factors set")
        
        # === üîß KRITIKUS: INITIAL SIZES OPTIMALIZ√ÅLT - FINAL FIX ===
        
        # üîß OPTIMALIZ√ÅLT kezdeti m√©retek
        total_width = 1400  # üîß √öj ablak sz√©less√©g
        control_width = 420  # üîß OPTIMALIZ√ÅLT control panel width
        results_width = total_width - control_width - 20  # üîß Marad√©k a results panel-nek
        
        main_splitter.setSizes([control_width, results_width])
        
        print(f"‚úÖ DEBUG: OPTIMALIZ√ÅLT initial sizes set - Control: {control_width}px, Results: {results_width}px")
        
        # === LAYOUT FINALIZ√ÅL√ÅS ===
        
        layout.addWidget(main_splitter)
        
        print("üîß DEBUG: SPLITTER CONSTRAINTS OPTIMALIZ√ÅLT Single City View created")
        
        return view
    
    def _create_analytics_view_refactored(self) -> QWidget:
        """
        üìä Analytics View l√©trehoz√°sa - REFAKTOR√ÅLT IMPLEMENT√ÅCI√ì + THEMEMANAGER + SIGNAL INTEGRATION.
        """
        print("üìä DEBUG: Creating REFAKTOR√ÅLT AnalyticsView with ThemeManager + Signal Integration...")
        
        # Refaktor√°lt AnalyticsView l√©trehoz√°sa
        self.analytics_panel = AnalyticsView()  # üîß REFAKTOR√ÅLT VERZI√ì
        
        # üé® WIDGET REGISZTR√ÅCI√ì
        register_widget_for_theming(self.analytics_panel, "container")
        
        print("‚úÖ DEBUG: REFAKTOR√ÅLT AnalyticsView created with ThemeManager + Signal Integration")
        return self.analytics_panel
    
    def _create_trend_analysis_view(self) -> QWidget:
        """
        üìà Trend Analysis view l√©trehoz√°sa - VAL√ìDI TRENDANALYTICSTAB KOMPONENS + THEMEMANAGER.
        """
        print("üìà DEBUG: Creating real TrendAnalyticsTab component with ThemeManager...")
        
        # Val√≥di TrendAnalyticsTab komponens l√©trehoz√°sa
        self.trend_analytics_tab = TrendAnalyticsTab()
        
        # üé® WIDGET REGISZTR√ÅCI√ì THEMEMANAGER-HEZ
        register_widget_for_theming(self.trend_analytics_tab, "container")
        
        print("‚úÖ DEBUG: Real TrendAnalyticsTab component created with ThemeManager")
        return self.trend_analytics_tab
    
    def _create_hungarian_map_view(self) -> QWidget:
        """
        üå§Ô∏è Hungarian Map view l√©trehoz√°sa - VAL√ìDI HUNGARIAN MAP TAB KOMPONENS + THEMEMANAGER + WEATHER INTEGRATION.
        """
        print("üå§Ô∏è DEBUG: Creating real HungarianMapTab component with ThemeManager + Weather Integration...")
        
        # Val√≥di HungarianMapTab komponens l√©trehoz√°sa
        self.hungarian_map_tab = HungarianMapTab()
        
        # üé® WIDGET REGISZTR√ÅCI√ì THEMEMANAGER-HEZ
        register_widget_for_theming(self.hungarian_map_tab, "container")
        
        print("‚úÖ DEBUG: Real HungarianMapTab component created with ThemeManager + Weather Integration")
        return self.hungarian_map_tab
    
    def _create_settings_placeholder(self) -> QWidget:
        """Settings view placeholder l√©trehoz√°sa + THEMEMANAGER."""
        view = QWidget()
        register_widget_for_theming(view, "container")
        layout = QVBoxLayout(view)
        
        placeholder = self._create_placeholder_content(
            "Be√°ll√≠t√°sok",
            "Fejleszt√©s alatt - F√ÅZIS 8",
            [
                "‚Ä¢ Alkalmaz√°s be√°ll√≠t√°sok k√∂zpontos√≠t√°sa",
                "‚Ä¢ API konfigur√°ci√≥k",
                "‚Ä¢ T√©ma √©s megjelen√©s be√°ll√≠t√°sok",
                "‚Ä¢ Nyelvi be√°ll√≠t√°sok",
                "‚Ä¢ Export preferenci√°k"
            ]
        )
        layout.addWidget(placeholder)
        
        return view
    
    def _create_placeholder_content(self, title: str, subtitle: str, features: list) -> QWidget:
        """Egys√©ges placeholder tartalom l√©trehoz√°sa + THEMEMANAGER."""
        placeholder = QWidget()
        register_widget_for_theming(placeholder, "container")
        
        layout = QVBoxLayout(placeholder)
        layout.setAlignment(Qt.AlignCenter)
        layout.setSpacing(15)
        
        # F≈ëc√≠m
        title_label = QLabel(title)
        title_label.setAlignment(Qt.AlignCenter)
        register_widget_for_theming(title_label, "text")
        layout.addWidget(title_label)
        
        # Alc√≠m
        subtitle_label = QLabel(subtitle)
        subtitle_label.setAlignment(Qt.AlignCenter)
        register_widget_for_theming(subtitle_label, "text")
        layout.addWidget(subtitle_label)
        
        # Funkci√≥k list√°ja
        features_widget = QWidget()
        register_widget_for_theming(features_widget, "text")
        features_layout = QVBoxLayout(features_widget)
        
        for feature in features:
            feature_label = QLabel(feature)
            feature_label.setAlignment(Qt.AlignLeft)
            register_widget_for_theming(feature_label, "text")
            features_layout.addWidget(feature_label)
        
        layout.addWidget(features_widget)
        
        return placeholder
    
    def _switch_view(self, view_name: str) -> None:
        """
        N√©zet v√°lt√°s kezel√©se.
        
        Args:
            view_name: N√©zet neve ("single_city", "analytics", "trend_analysis", "map_view", "settings")
        """
        print(f"üîÑ DEBUG: Switching to view: {view_name}")
        
        # View index mapping
        view_indices = {
            "single_city": 0,    # SINGLE CITY K√ñZPONTI N√âZET
            "analytics": 1,      # REFAKTOR√ÅLT ANALYTICS VIEW
            "trend_analysis": 2, # üìà VAL√ìDI TREND ANALYTICS TAB
            "map_view": 3,       # üå§Ô∏è VAL√ìDI HUNGARIAN MAP TAB
            "settings": 4
        }
        
        if view_name not in view_indices:
            print(f"‚ö†Ô∏è DEBUG: Unknown view name: {view_name}")
            return
        
        # N√©zet v√°lt√°s
        self.current_view_name = view_name
        view_index = view_indices[view_name]
        self.stacked_widget.setCurrentIndex(view_index)
        
        # Signal kibocs√°t√°sa
        self.view_changed.emit(view_name)
        
        # St√°tusz friss√≠t√©se
        view_titles = {
            "single_city": "V√°ros Elemz√©s (K√∂zponti)",
            "analytics": "Analitika (Refaktor√°lt)",
            "trend_analysis": "Trend Elemz√©s (Professional)",
            "map_view": "T√©rk√©p (Multi-City R√©gi√≥/Megye + Weather)",
            "settings": "Be√°ll√≠t√°sok"
        }
        
        if hasattr(self, 'status_bar'):
            # üåç Provider status megtart√°sa view v√°lt√°skor
            self._update_provider_status_display()
        
        print(f"‚úÖ DEBUG: View switched to: {view_name} (index: {view_index})")
    
    def _init_menu_bar(self) -> None:
        """Men√ºs√°v inicializ√°l√°sa."""
        menubar = self.menuBar()
        register_widget_for_theming(menubar, "navigation")
        
        # === F√ÅJL MEN√ú ===
        file_menu = menubar.addMenu("üìÅ F√°jl")
        
        # Export akci√≥
        export_action = QAction("üìä Adatok export√°l√°sa...", self)
        export_action.setShortcut("Ctrl+E")
        export_action.triggered.connect(self._export_data)
        export_action.setEnabled(False)  # Kezdetben letiltva
        file_menu.addAction(export_action)
        self.export_action = export_action  # Referencia a k√©s≈ëbbi enged√©lyez√©shez
        
        file_menu.addSeparator()
        
        # Kil√©p√©s akci√≥
        exit_action = QAction("üö™ Kil√©p√©s", self)
        exit_action.setShortcut("Ctrl+Q")
        exit_action.triggered.connect(self.close)
        file_menu.addAction(exit_action)
        
        # === N√âZET MEN√ú ===
        view_menu = menubar.addMenu("üëÅÔ∏è N√©zet")
        
        # Navig√°ci√≥
        view_menu.addAction(self.single_city_action)
        view_menu.addAction(self.analytics_action)  # REFAKTOR√ÅLT ANALYTICS
        view_menu.addAction(self.trend_action)  # üìà VAL√ìDI TREND ANALYTICS
        view_menu.addAction(self.map_action)  # üéâ MULTI-CITY R√âGI√ì/MEGYE HUNGARIAN MAP TAB
        view_menu.addAction(self.settings_action)
        
        view_menu.addSeparator()
        
        # üé® T√âMA V√ÅLT√ÅS - THEMEMANAGER INTEGR√ÅCI√ì
        light_theme_action = QAction("‚òÄÔ∏è Vil√°gos t√©ma", self)
        light_theme_action.triggered.connect(lambda: self._apply_theme(ThemeType.LIGHT))
        view_menu.addAction(light_theme_action)
        
        dark_theme_action = QAction("üåô S√∂t√©t t√©ma", self)
        dark_theme_action.triggered.connect(lambda: self._apply_theme(ThemeType.DARK))
        view_menu.addAction(dark_theme_action)
        
        view_menu.addSeparator()
        
        # Extr√©m id≈ëj√°r√°s ablak
        extreme_action = QAction("‚ö° Extr√©m id≈ëj√°r√°s...", self)
        extreme_action.setShortcut("Ctrl+X")
        extreme_action.triggered.connect(self._show_extreme_weather)
        extreme_action.setEnabled(False)  # Kezdetben letiltva
        view_menu.addAction(extreme_action)
        self.extreme_action = extreme_action
        
        # === S√öG√ì MEN√ú ===
        help_menu = menubar.addMenu("‚ùì S√∫g√≥")
        
        about_action = QAction("‚ÑπÔ∏è N√©vjegy...", self)
        about_action.triggered.connect(self._show_about)
        help_menu.addAction(about_action)
    
    def _init_status_bar_with_provider_display(self) -> None:
        """
        üåç ENHANCED STATUS BAR inicializ√°l√°sa Provider Display-jel + THEMEMANAGER + DUAL-API.
        """
        print("üåç DEBUG: Creating enhanced status bar with provider display...")
        
        self.status_bar = QStatusBar()
        register_widget_for_theming(self.status_bar, "navigation")
        self.setStatusBar(self.status_bar)
        
        # === üåç PROVIDER STATUS WIDGETS L√âTREHOZ√ÅSA ===
        
        # 1. Provider Status Label
        self.provider_status_label = QLabel("ü§ñ Automatikus routing")
        self.provider_status_label.setToolTip("Akt√≠v adatforr√°s provider")
        register_widget_for_theming(self.provider_status_label, "text")
        self.status_bar.addPermanentWidget(self.provider_status_label)
        
        # 2. Usage Status Label  
        self.usage_status_label = QLabel("üíé 0/10000 (0%)")
        self.usage_status_label.setToolTip("API haszn√°lat statisztika")
        register_widget_for_theming(self.usage_status_label, "text")
        self.status_bar.addPermanentWidget(self.usage_status_label)
        
        # 3. Cost Status Label
        self.cost_status_label = QLabel("üí∞ $0.00/h√≥")
        self.cost_status_label.setToolTip("Becs√ºlt havi k√∂lts√©g")
        register_widget_for_theming(self.cost_status_label, "text")
        self.status_bar.addPermanentWidget(self.cost_status_label)
        
        # === KEZDETI PROVIDER STATUS ===
        
        self.status_bar.showMessage("‚úÖ Single City k√∂zponti n√©zet akt√≠v - üö® Analytics ‚Üí Map sync BEFEJEZVE - üî• Analytics View REFAKTOR√ÅL√ÅS BEFEJEZVE - üîß Hib√°s Jelz√©sek ELT√ÅVOL√çTVA - üó∫Ô∏è Hungarian Map Tab integr√°lva - üìà Trend Analytics m≈±k√∂dik. [Tiszta t√©rk√©pi param√©ter sync + WINDSPEED JAV√çT√ÅS!]")
        
        # Provider info inicializ√°l√°sa
        self._initialize_provider_status()
        
        print("‚úÖ DEBUG: Enhanced status bar created with provider display")
    
    def _initialize_provider_status(self) -> None:
        """
        üåç Provider status inicializ√°l√°sa - Controller-t≈ël sz√°rmaz√≥ inform√°ci√≥kkal.
        """
        try:
            print("üåç DEBUG: Initializing provider status...")
            
            # Provider info lek√©rdez√©se a Controller-t≈ël
            provider_info = self.controller.get_provider_info()
            
            self.current_provider = provider_info.get('current_provider', 'auto')
            self.provider_usage_stats = provider_info.get('usage_stats', {})
            
            # Provider status friss√≠t√©se
            self._update_provider_status_display()
            
            print("‚úÖ DEBUG: Provider status initialized")
            
        except Exception as e:
            print(f"‚ùå DEBUG: Provider status initialization error: {e}")
            # Fallback to default values
            self.current_provider = "auto"
            self.provider_usage_stats = {}
            self._update_provider_status_display()
    
    def _update_provider_status_display(self) -> None:
        """
        üåç Provider status display friss√≠t√©se a status bar-ban.
        """
        try:
            # 1. Provider Status friss√≠t√©se
            provider_status = format_provider_status(
                self.current_provider, 
                True,  # is_current
                self.provider_usage_stats
            )
            
            provider_icon = get_provider_icon(self.current_provider)
            self.provider_status_label.setText(f"{provider_icon} {provider_status}")
            
            # 2. Usage Status friss√≠t√©se
            if self.current_provider == 'open-meteo':
                usage_text = "üåç Ingyenes (korl√°tlan)"
            elif self.current_provider == 'auto':
                usage_text = "ü§ñ Smart routing"
            else:
                # Premium provider usage
                formatted_usage = format_provider_usage(self.provider_usage_stats)
                usage_text = formatted_usage.get(self.current_provider, "üíé 0/10000 (0%)")
            
            self.usage_status_label.setText(usage_text)
            
            # 3. Cost Status friss√≠t√©se
            cost_summary = format_cost_summary(self.provider_usage_stats)
            self.cost_status_label.setText(cost_summary)
            
            # 4. Warning level ellen≈ërz√©se
            warning_level = None
            if self.current_provider != 'open-meteo' and self.current_provider != 'auto':
                warning_level = get_provider_warning_level(self.current_provider, self.provider_usage_stats)
            
            # Warning styling alkalmaz√°sa
            self._apply_warning_styling(warning_level)
            
            print(f"‚úÖ DEBUG: Provider status display updated: {self.current_provider}")
            
        except Exception as e:
            print(f"‚ùå DEBUG: Provider status display update error: {e}")
    
    def _apply_warning_styling(self, warning_level: Optional[str]) -> None:
        """
        üåç Warning level alapj√°n styling alkalmaz√°sa status bar widget-ekre.
        
        Args:
            warning_level: "info", "warning", "critical" vagy None
        """
        if warning_level == "critical":
            # Kritikus - piros sz√≠nez√©s
            self.usage_status_label.setStyleSheet("color: #dc2626; font-weight: bold;")
            self.cost_status_label.setStyleSheet("color: #dc2626; font-weight: bold;")
        elif warning_level == "warning":
            # Figyelmeztet√©s - s√°rga sz√≠nez√©s
            self.usage_status_label.setStyleSheet("color: #f59e0b; font-weight: bold;")
            self.cost_status_label.setStyleSheet("color: #f59e0b;")
        elif warning_level == "info":
            # Info - k√©k sz√≠nez√©s
            self.usage_status_label.setStyleSheet("color: #3b82f6;")
            self.cost_status_label.setStyleSheet("color: #3b82f6;")
        else:
            # Norm√°lis - alap√©rtelmezett sz√≠nek
            self.usage_status_label.setStyleSheet("")
            self.cost_status_label.setStyleSheet("")
    
    def _setup_control_panel_connections(self) -> None:
        """
        üö® KRITIKUS: ANALYTICS ‚Üí MAP SYNC SIGNAL CONNECTIONS IMPLEMENT√ÅL√ÅSA!
        
        Ez a met√≥dus kapcsolja √∂ssze a ControlPanel signalokat a HungarianMapTab-bel,
        hogy automatikus legyen a t√©rk√©p sync minden param√©ter v√°ltoz√°skor.
        """
        print("üö® DEBUG: Setting up ANALYTICS ‚Üí MAP SYNC signal connections...")
        
        if not self.control_panel:
            print("‚ùå DEBUG: ControlPanel is None - cannot setup signal connections!")
            return
        
        if not self.hungarian_map_tab:
            print("‚ùå DEBUG: HungarianMapTab is None - cannot setup signal connections!")
            return
        
        # === DEBUG WRAPPER MET√ìDUSOK ===
        
        def debug_analytics_params_changed(params: Dict[str, Any]):
            print(f"üö® DEBUG [CONTROL‚ÜíMAP]: analysis_parameters_changed signal received")
            print(f"üö® DEBUG: Analytics params: {params}")
        
        def debug_weather_params_changed(params: Dict[str, Any]):
            print(f"üö® DEBUG [CONTROL‚ÜíMAP]: weather_parameters_changed signal received") 
            print(f"üö® DEBUG: Weather params: {params}")
        
        def debug_date_range_changed(start_date: str, end_date: str):
            print(f"üö® DEBUG [CONTROL‚ÜíMAP]: date_range_changed signal received")
            print(f"üö® DEBUG: Date range: {start_date} ‚Üí {end_date}")
        
        def debug_bundle_changed(bundle: Dict[str, Any]):
            print(f"üö® DEBUG [CONTROL‚ÜíMAP]: parameters_bundle_changed signal received")
            print(f"üö® DEBUG: Bundle keys: {list(bundle.keys()) if bundle else 'NO BUNDLE'}")
        
        # === SIGNAL CONNECTIONS IMPLEMENT√ÅL√ÅSA ===
        
        # 1. Analysis Parameters Changed
        if hasattr(self.control_panel, 'analysis_parameters_changed'):
            self.control_panel.analysis_parameters_changed.connect(debug_analytics_params_changed)
            
            # Ellen≈ërizz√ºk hogy l√©tezik-e az update_analysis_parameters met√≥dus
            if hasattr(self.hungarian_map_tab, 'update_analysis_parameters'):
                self.control_panel.analysis_parameters_changed.connect(
                    self.hungarian_map_tab.update_analysis_parameters
                )
                print("‚úÖ DEBUG: ControlPanel.analysis_parameters_changed ‚Üí HungarianMapTab.update_analysis_parameters CONNECTED")
            else:
                print("‚ö†Ô∏è DEBUG: HungarianMapTab.update_analysis_parameters method NOT FOUND!")
        else:
            print("‚ö†Ô∏è DEBUG: ControlPanel.analysis_parameters_changed signal NOT FOUND!")
        
        # 2. Weather Parameters Changed  
        if hasattr(self.control_panel, 'weather_parameters_changed'):
            self.control_panel.weather_parameters_changed.connect(debug_weather_params_changed)
            
            # Ellen≈ërizz√ºk hogy l√©tezik-e az update_weather_parameters met√≥dus
            if hasattr(self.hungarian_map_tab, 'update_weather_parameters'):
                self.control_panel.weather_parameters_changed.connect(
                    self.hungarian_map_tab.update_weather_parameters
                )
                print("‚úÖ DEBUG: ControlPanel.weather_parameters_changed ‚Üí HungarianMapTab.update_weather_parameters CONNECTED")
            else:
                print("‚ö†Ô∏è DEBUG: HungarianMapTab.update_weather_parameters method NOT FOUND!")
        else:
            print("‚ö†Ô∏è DEBUG: ControlPanel.weather_parameters_changed signal NOT FOUND!")
        
        # 3. Date Range Changed
        if hasattr(self.control_panel, 'date_range_changed'):
            self.control_panel.date_range_changed.connect(debug_date_range_changed)
            
            # Ellen≈ërizz√ºk hogy l√©tezik-e az update_date_range met√≥dus
            if hasattr(self.hungarian_map_tab, 'update_date_range'):
                self.control_panel.date_range_changed.connect(
                    self.hungarian_map_tab.update_date_range
                )
                print("‚úÖ DEBUG: ControlPanel.date_range_changed ‚Üí HungarianMapTab.update_date_range CONNECTED")
            else:
                print("‚ö†Ô∏è DEBUG: HungarianMapTab.update_date_range method NOT FOUND!")
        else:
            print("‚ö†Ô∏è DEBUG: ControlPanel.date_range_changed signal NOT FOUND!")
        
        # 4. Parameters Bundle Changed (COMPREHENSIVE)
        if hasattr(self.control_panel, 'parameters_bundle_changed'):
            self.control_panel.parameters_bundle_changed.connect(debug_bundle_changed)
            
            # Ellen≈ërizz√ºk hogy l√©tezik-e a refresh_with_new_parameters met√≥dus
            if hasattr(self.hungarian_map_tab, 'refresh_with_new_parameters'):
                self.control_panel.parameters_bundle_changed.connect(
                    self.hungarian_map_tab.refresh_with_new_parameters
                )
                print("‚úÖ DEBUG: ControlPanel.parameters_bundle_changed ‚Üí HungarianMapTab.refresh_with_new_parameters CONNECTED")
            else:
                print("‚ö†Ô∏è DEBUG: HungarianMapTab.refresh_with_new_parameters method NOT FOUND!")
        else:
            print("‚ö†Ô∏è DEBUG: ControlPanel.parameters_bundle_changed signal NOT FOUND!")
        
        # === KIEG√âSZ√çT≈ê SIGNAL CONNECTIONS ===
        
        # Force sync API (ha van)
        if hasattr(self.control_panel, 'force_map_sync') and hasattr(self.hungarian_map_tab, 'force_refresh'):
            def debug_force_sync():
                print("üö® DEBUG [CONTROL‚ÜíMAP]: force_map_sync triggered")
            
            # Manual trigger opci√≥
            def trigger_force_sync():
                debug_force_sync()
                if hasattr(self.hungarian_map_tab, 'force_refresh'):
                    self.hungarian_map_tab.force_refresh()
            
            # Ezt nem k√∂tj√ºk automatikusan signalhoz, hanem API-k√©nt haszn√°lhat√≥
            self.control_panel._manual_map_sync = trigger_force_sync
            print("‚úÖ DEBUG: Manual force_map_sync API setup complete")
        
        print("üö® ‚úÖ DEBUG: ANALYTICS ‚Üí MAP SYNC signal connections COMPLETED!")
        
        # === TESZTEL√âSI TRIGGER (OPCION√ÅLIS) ===
        
        # Trigger egy initial sync-et hogy l√°ssuk m≈±k√∂dik-e
        if hasattr(self.control_panel, 'emit_parameter_change_signals'):
            print("üö® DEBUG: Triggering initial parameter sync for testing...")
            try:
                self.control_panel.emit_parameter_change_signals()
                print("‚úÖ DEBUG: Initial parameter sync triggered successfully")
            except Exception as e:
                print(f"‚ö†Ô∏è DEBUG: Initial parameter sync error: {e}")
    
    def _connect_mvc_signals(self) -> None:
        """
        üéâ KRITIKUS: MULTI-CITY R√âGI√ì/MEGYE T√âRK√âP INTEGR√ÅCI√ì 100% BEFEJEZ√âSE + üî• ANALYTICS VIEW REFAKTOR√ÅL√ÅS BEFEJEZ√âSE + üå§Ô∏è TISZTA ANALYTICS ‚Üí T√âRK√âP INTEGRATION + üöÄ TREND ANALYTICS INTEGR√ÅCI√ì BEFEJEZVE + üßπ CLEAN MVC komponensek signal-slot √∂sszek√∂t√©se + DASHBOARD CLEANUP BEFEJEZVE + ANALYTICS EGYSZER≈∞S√çTETT INTEGR√ÅCI√ì + DUAL-API + PROVIDER STATUS + HIB√ÅS JELZ√âSEK ELT√ÅVOL√çTVA.
        """
        
        print("üîó DEBUG: Starting CLEAN signals with MULTI-CITY R√âGI√ì/MEGYE T√âRK√âP INTEGR√ÅCI√ì 100% BEFEJEZ√âSE + ANALYTICS VIEW REFAKTOR√ÅL√ÅS + HIB√ÅS JELZ√âSEK ELT√ÅVOL√çTVA...")
        
        # === üåç PROVIDER STATUS SIGNALOK ===
        
        print("üåç DEBUG: Connecting Provider Status signals...")
        
        # Provider v√°lt√°s
        def debug_provider_selected(provider_name: str):
            print(f"üåç DEBUG [CONTROLLER‚ÜíMAIN_WINDOW]: provider_selected: {provider_name}")
        
        self.controller.provider_selected.connect(debug_provider_selected)
        self.controller.provider_selected.connect(self._on_provider_selected)
        print("‚úÖ DEBUG: Controller.provider_selected ‚Üí MainWindow._on_provider_selected CONNECTED")
        
        # Usage statistics friss√≠t√©se
        def debug_provider_usage_updated(usage_stats: dict):
            print(f"üåç DEBUG [CONTROLLER‚ÜíMAIN_WINDOW]: provider_usage_updated: {len(usage_stats)} providers")
        
        self.controller.provider_usage_updated.connect(debug_provider_usage_updated)
        self.controller.provider_usage_updated.connect(self._on_provider_usage_updated)
        print("‚úÖ DEBUG: Controller.provider_usage_updated ‚Üí MainWindow._on_provider_usage_updated CONNECTED")
        
        # Warning events
        def debug_provider_warning(provider_name: str, usage_percent: int):
            print(f"üåç DEBUG [CONTROLLER‚ÜíMAIN_WINDOW]: provider_warning: {provider_name} {usage_percent}%")
        
        self.controller.provider_warning.connect(debug_provider_warning)
        self.controller.provider_warning.connect(self._on_provider_warning)
        print("‚úÖ DEBUG: Controller.provider_warning ‚Üí MainWindow._on_provider_warning CONNECTED")
        
        # Fallback notifications
        def debug_provider_fallback(from_provider: str, to_provider: str):
            print(f"üåç DEBUG [CONTROLLER‚ÜíMAIN_WINDOW]: provider_fallback: {from_provider} ‚Üí {to_provider}")
        
        self.controller.provider_fallback.connect(debug_provider_fallback)
        self.controller.provider_fallback.connect(self._on_provider_fallback)
        print("‚úÖ DEBUG: Controller.provider_fallback ‚Üí MainWindow._on_provider_fallback CONNECTED")
        
        # === CONTROLPANEL ‚Üí CONTROLLER SIGNALOK ===
        
        print("üéõÔ∏è DEBUG: Connecting ControlPanel ‚Üí Controller signals...")
        
        if self.control_panel:
            # üåç Provider v√°ltoz√°s signal
            if hasattr(self.control_panel, 'provider_changed'):
                def debug_control_panel_provider_changed(provider_name: str):
                    print(f"üåç DEBUG [CONTROL_PANEL‚ÜíCONTROLLER]: provider_changed: {provider_name}")
                
                self.control_panel.provider_changed.connect(debug_control_panel_provider_changed)
                self.control_panel.provider_changed.connect(
                    self.controller.handle_provider_change
                )
                print("‚úÖ DEBUG: ControlPanel provider_changed ‚Üí Controller.handle_provider_change CONNECTED")
            
            # Keres√©s signal
            def debug_control_panel_search_requested(query: str):
                print(f"üîç DEBUG [CONTROL_PANEL‚ÜíCONTROLLER]: search_requested: '{query}' (DUAL-API)")
            
            self.control_panel.search_requested.connect(debug_control_panel_search_requested)
            self.control_panel.search_requested.connect(
                self.controller.handle_search_request
            )
            print("‚úÖ DEBUG: ControlPanel search_requested ‚Üí Controller.handle_search_request CONNECTED (DUAL-API)")
            
            # V√°ros kiv√°laszt√°s signal
            def debug_control_panel_city_selected(name: str, lat: float, lon: float, data: dict):
                source = data.get('preferred_source', 'unknown')
                print(f"üìç DEBUG [CONTROL_PANEL‚ÜíCONTROLLER]: city_selected: {name} ({lat:.4f}, {lon:.4f}) source: {source}")
            
            self.control_panel.city_selected.connect(debug_control_panel_city_selected)
            self.control_panel.city_selected.connect(
                self.controller.handle_city_selection
            )
            print("‚úÖ DEBUG: ControlPanel city_selected ‚Üí Controller.handle_city_selection CONNECTED (DUAL-API)")
            
            # Weather data k√©r√©sek
            def debug_control_panel_weather_requested(lat: float, lon: float, start: str, end: str, params: dict):
                use_case = params.get('use_case', 'single_city')
                optimal_source = get_optimal_data_source(use_case)
                print(f"üå§Ô∏è DEBUG [CONTROL_PANEL‚ÜíCONTROLLER]: weather_data_requested ({lat:.4f}, {lon:.4f}) ‚Üí {optimal_source}")
            
            self.control_panel.weather_data_requested.connect(debug_control_panel_weather_requested)
            self.control_panel.weather_data_requested.connect(
                self.controller.handle_weather_data_request
            )
            print("‚úÖ DEBUG: ControlPanel weather_data_requested ‚Üí Controller.handle_weather_data_request CONNECTED (DUAL-API)")
            
            # üéâ KRITIKUS: MULTI-CITY WEATHER REQUESTED SIGNAL - √öJ!
            def debug_control_panel_multi_city_requested(analysis_type: str, region_id: str, start_date: str, end_date: str, params: dict):
                print(f"üéâ DEBUG [CONTROL_PANEL‚ÜíMAIN_WINDOW]: multi_city_weather_requested: {analysis_type} '{region_id}' ({start_date} ‚Üí {end_date})")
                print(f"üéâ DEBUG: Multi-city params: {params}")
            
            if hasattr(self.control_panel, 'multi_city_weather_requested'):
                self.control_panel.multi_city_weather_requested.connect(debug_control_panel_multi_city_requested)
                self.control_panel.multi_city_weather_requested.connect(
                    self._handle_multi_city_weather_request
                )
                print("üéâ ‚úÖ KRITIKUS: ControlPanel.multi_city_weather_requested ‚Üí MainWindow._handle_multi_city_weather_request CONNECTED!")
            else:
                print("‚ùå DEBUG: ControlPanel.multi_city_weather_requested signal NOT FOUND!")
            
        else:
            print("‚ùå DEBUG: ControlPanel is None!")
        
        # === üî• ANALYTICS VIEW REFAKTOR√ÅL√ÅS SIGNAL INTEGR√ÅCI√ì + HIB√ÅS JELZ√âSEK ELT√ÅVOL√çTVA ===
        
        if self.analytics_panel and self.control_panel:
            print("üî• DEBUG: Connecting REFAKTOR√ÅLT Analytics Panel signals + HIB√ÅS JELZ√âSEK ELT√ÅVOL√çTVA...")
            
            # üîó KRITIKUS: ControlPanel ‚Üí AnalyticsView direct connection
            def debug_control_panel_location_changed(location):
                print(f"üîó DEBUG [CONTROL_PANEL‚ÜíANALYTICS]: location_changed: {location}")
            
            if hasattr(self.control_panel, 'location_changed'):
                self.control_panel.location_changed.connect(debug_control_panel_location_changed)
                self.control_panel.location_changed.connect(
                    self.analytics_panel.on_location_changed
                )
                print("‚úÖ DEBUG: ControlPanel.location_changed ‚Üí AnalyticsView.on_location_changed CONNECTED")
            
            # üîó KRITIKUS: ControlPanel city_selected ‚Üí AnalyticsView kompatibilit√°s
            def debug_control_panel_city_to_analytics(name: str, lat: float, lon: float, data: dict):
                print(f"üîó DEBUG [CONTROL_PANEL‚ÜíANALYTICS]: city_selected‚Üílocation_changed: {name}")
                # Dictionary objektum l√©trehoz√°sa az AnalyticsView sz√°m√°ra
                location_dict = {
                    'name': name,
                    'latitude': lat,
                    'longitude': lon,
                    **data
                }
                self.analytics_panel.on_location_changed(location_dict)
            
            self.control_panel.city_selected.connect(debug_control_panel_city_to_analytics)
            print("‚úÖ DEBUG: ControlPanel.city_selected ‚Üí AnalyticsView.on_location_changed COMPATIBILITY CONNECTED")
            
            # üî• √öJ: ANALYTICS VIEW REFAKTOR√ÅLT SIGNAL CONNECTIONS - EZ VOLT A HI√ÅNYZ√ì R√âSZ!
            
            # AnalyticsView.multi_city_query_requested ‚Üí MainWindow handler
            def debug_analytics_multi_city_query_requested(query_type: str, region_name: str):
                print(f"üî• DEBUG [ANALYTICS‚ÜíMAIN_WINDOW]: multi_city_query_requested: {query_type}, {region_name}")
            
            if hasattr(self.analytics_panel, 'multi_city_query_requested'):
                self.analytics_panel.multi_city_query_requested.connect(debug_analytics_multi_city_query_requested)
                self.analytics_panel.multi_city_query_requested.connect(
                    self._handle_analytics_view_query
                )
                print("üî• ‚úÖ KRITIKUS: AnalyticsView.multi_city_query_requested ‚Üí MainWindow._handle_analytics_view_query CONNECTED!")
            else:
                print("‚ùå DEBUG: AnalyticsView.multi_city_query_requested signal NOT FOUND!")
            
            # üîó Analytics refaktor√°lt signalok visszafel√© (CSAK A TISZT√ÅK!)
            def debug_analytics_analysis_started():
                print("üî• DEBUG [ANALYTICS‚ÜíMAIN_WINDOW]: analysis_started (refaktor√°lt)")
            
            self.analytics_panel.analysis_started.connect(debug_analytics_analysis_started)
            self.analytics_panel.analysis_started.connect(
                lambda: self.status_bar.showMessage("üî• Analytics elemz√©s folyamatban... (refaktor√°lt)")
            )
            print("‚úÖ DEBUG: AnalyticsView.analysis_started ‚Üí MainWindow status update CONNECTED")
            
            # üîß HIB√ÅS JELZ√âS ELT√ÅVOL√çTVA: analytics_completed signal connection T√ñR√ñLVE!
            # Az al√°bbi blokk KOMMENTEZVE - ez volt a hib√°s jelz√©s:
            # -----------------------------------------------------------------
            # # Analytics befejez√©s
            # def debug_analytics_analysis_completed():
            #     print("üî• DEBUG [ANALYTICS‚ÜíMAIN_WINDOW]: analysis_completed (refaktor√°lt)")
            # 
            # self.analytics_panel.analysis_completed.connect(
            #     lambda: self.status_bar.showMessage("‚úÖ Analytics elemz√©s k√©sz (refaktor√°lt)")
            # )
            # print("‚úÖ DEBUG: AnalyticsView.analysis_completed ‚Üí MainWindow status update CONNECTED")
            # -----------------------------------------------------------------
            print("üîß DEBUG: analytics_completed signal connection ELT√ÅVOL√çTVA (hib√°s jelz√©s)")
            
            # Analytics hib√°k
            def debug_analytics_error_occurred(error_msg: str):
                print(f"‚ùå DEBUG [ANALYTICS‚ÜíMAIN_WINDOW]: error_occurred: {error_msg}")
            
            self.analytics_panel.error_occurred.connect(debug_analytics_error_occurred)
            self.analytics_panel.error_occurred.connect(
                lambda msg: self.status_bar.showMessage(f"‚ùå Analytics hiba: {msg}")
            )
            print("‚úÖ DEBUG: AnalyticsView.error_occurred ‚Üí MainWindow status update CONNECTED")
            
        else:
            print("‚ö†Ô∏è DEBUG: Analytics panel or Control panel is None - signalok nem kapcsol√≥dnak")
        
        # === üå§Ô∏è KRITIKUS: TISZTA ANALYTICS ‚Üí T√âRK√âP INTEGRATION (HIB√ÅS JELZ√âSEK ELT√ÅVOL√çTVA) ===
        
        # üîß HIB√ÅS JELZ√âS ELT√ÅVOL√çTVA: analytics_completed ‚Üí t√©rk√©pi friss√≠t√©s blokk T√ñR√ñLVE!
        # Az al√°bbi teljes blokk KOMMENTEZVE - ez volt a hib√°s, fel√ºl√≠r√≥ jelz√©s:
        # -----------------------------------------------------------------
        # if self.analytics_panel and self.hungarian_map_tab:
        #     print("üå§Ô∏è DEBUG: Connecting ANALYTICS ‚Üí HUNGARIAN MAP TAB WEATHER INTEGRATION signals...")
        #     
        #     # üå§Ô∏è KRITIKUS: Analytics View analytics_completed ‚Üí Hungarian Map Tab set_analytics_result
        #     def debug_analytics_to_map_integration():
        #         print(f"üå§Ô∏è DEBUG [ANALYTICS‚ÜíMAP]: analytics_completed signal received - starting weather integration")
        #         
        #         # Analytics eredm√©ny lek√©rdez√©se
        #         analytics_data = self.analytics_panel.get_current_data() if self.analytics_panel else None
        #         print(f"üå§Ô∏è DEBUG: Analytics data keys: {list(analytics_data.keys()) if analytics_data else 'NO DATA'}")
        #         
        #         # Analytics eredm√©ny √°tad√°sa a t√©rk√©pnek (weather overlay automatikus gener√°l√°s)
        #         if self.hungarian_map_tab and hasattr(self.hungarian_map_tab, 'set_analytics_result') and analytics_data:
        #             try:
        #                 # Analytics eredm√©ny konvert√°l√°sa AnalyticsResult objektumm√° (ha sz√ºks√©ges)
        #                 self.hungarian_map_tab.set_analytics_result(analytics_data)
        #                 print("‚úÖ DEBUG: Analytics result successfully passed to Hungarian Map Tab")
        #                 
        #                 # Status update
        #                 self.status_bar.showMessage("üå§Ô∏è Analytics eredm√©ny √°tadva t√©rk√©pnek - Weather overlay gener√°l√°s...")
        #                 
        #             except Exception as e:
        #                 print(f"‚ùå DEBUG: Analytics ‚Üí Map integration error: {e}")
        #                 self.status_bar.showMessage(f"‚ùå Analytics ‚Üí T√©rk√©p integr√°ci√≥ hiba: {e}")
        #         else:
        #             print("‚ùå DEBUG: Hungarian Map Tab or set_analytics_result method or analytics data not available")
        #     
        #     # Analytics eredm√©ny ‚Üí Map automatikus kapcsolat
        #     if hasattr(self.analytics_panel, 'analysis_completed'):
        #         self.analytics_panel.analysis_completed.connect(debug_analytics_to_map_integration)
        #         print("üå§Ô∏è ‚úÖ KRITIKUS: AnalyticsView.analysis_completed ‚Üí HungarianMapTab.set_analytics_result CONNECTED!")
        #     else:
        #         print("‚ùå DEBUG: AnalyticsView.analysis_completed signal not found")
        # -----------------------------------------------------------------
        print("üîß DEBUG: HIB√ÅS ANALYTICS ‚Üí MAP INTEGRATION signals ELT√ÅVOL√çTVA (analytics_completed hib√°s bek√∂t√©s)")
        print("‚úÖ DEBUG: Most m√°r csak a TISZTA, k√∂zponti adatkezel√©s marad (_on_multi_city_result_ready_for_views)")
        
        # === üìà TREND ANALYTICS SIGNALOK ===
        
        if self.trend_analytics_tab and self.control_panel:
            print("üìà DEBUG: Connecting TREND ANALYTICS TAB signals...")
            
            # üîó KRITIKUS: ControlPanel city_selected ‚Üí TrendAnalyticsTab set_location
            def debug_control_panel_city_to_trend(name: str, lat: float, lon: float, data: dict):
                print(f"üîó DEBUG [CONTROL_PANEL‚ÜíTREND_ANALYTICS]: city_selected‚Üíset_location: {name} ({lat:.4f}, {lon:.4f})")
                self.trend_analytics_tab.set_location(name, lat, lon)
            
            self.control_panel.city_selected.connect(debug_control_panel_city_to_trend)
            print("‚úÖ DEBUG: ControlPanel.city_selected ‚Üí TrendAnalyticsTab.set_location CONNECTED")
            
            # üîó TrendAnalyticsTab signalok visszafel√©
            def debug_trend_analysis_started():
                print("üìà DEBUG [TREND_ANALYTICS‚ÜíMAIN_WINDOW]: analysis_started")
            
            self.trend_analytics_tab.analysis_started.connect(debug_trend_analysis_started)
            self.trend_analytics_tab.analysis_started.connect(
                lambda: self.status_bar.showMessage("üìà Trend elemz√©s folyamatban...")
            )
            print("‚úÖ DEBUG: TrendAnalyticsTab.analysis_started ‚Üí MainWindow status update CONNECTED")
            
            # Trend analysis befejez√©s
            def debug_trend_analysis_completed(results: dict):
                city_name = results.get('city_name', 'Unknown')
                print(f"üìà DEBUG [TREND_ANALYTICS‚ÜíMAIN_WINDOW]: analysis_completed: {city_name}")
            
            self.trend_analytics_tab.analysis_completed.connect(debug_trend_analysis_completed)
            self.trend_analytics_tab.analysis_completed.connect(self._on_trend_analysis_completed)
            print("‚úÖ DEBUG: TrendAnalyticsTab.analysis_completed ‚Üí MainWindow._on_trend_analysis_completed CONNECTED")
            
            # Trend analysis hib√°k
            def debug_trend_error_occurred(error_msg: str):
                print(f"‚ùå DEBUG [TREND_ANALYTICS‚ÜíMAIN_WINDOW]: error_occurred: {error_msg}")
            
            self.trend_analytics_tab.error_occurred.connect(debug_trend_error_occurred)
            self.trend_analytics_tab.error_occurred.connect(self._on_trend_analysis_error)
            print("‚úÖ DEBUG: TrendAnalyticsTab.error_occurred ‚Üí MainWindow._on_trend_analysis_error CONNECTED")
            
            # Trend location selection
            def debug_trend_location_selected(name: str, lat: float, lon: float):
                print(f"üìç DEBUG [TREND_ANALYTICS‚ÜíMAIN_WINDOW]: location_selected: {name} ({lat:.4f}, {lon:.4f})")
            
            self.trend_analytics_tab.location_selected.connect(debug_trend_location_selected)
            print("‚úÖ DEBUG: TrendAnalyticsTab.location_selected signal CONNECTED")
            
        else:
            print("‚ö†Ô∏è DEBUG: Trend Analytics tab or Control panel is None - signalok nem kapcsol√≥dnak")
        
        # === CONTROLLER ‚Üí GUI VISSZACSATOL√ÅS ===
        
        print("üì° DEBUG: Connecting Controller ‚Üí GUI response signals...")
        
        # Geocoding results
        def debug_controller_geocoding_results(results: list):
            print(f"üìç DEBUG [CONTROLLER‚ÜíGUI]: geocoding_results_ready: {len(results)} results (DUAL-API)")
        
        self.controller.geocoding_results_ready.connect(debug_controller_geocoding_results)
        
        if self.control_panel:
            self.controller.geocoding_results_ready.connect(
                self.control_panel._on_geocoding_completed
            )
            print("‚úÖ DEBUG: Controller.geocoding_results_ready ‚Üí ControlPanel._on_geocoding_completed CONNECTED")
        
        # === WEATHER DATA SIGNALS ===
        
        # Id≈ëj√°r√°si adatok k√©szek
        def debug_controller_weather_data_ready(data: dict):
            daily_data = data.get("daily", {})
            record_count = len(daily_data.get("time", []))
            data_source = data.get("data_source", "Unknown")
            source_type = data.get("source_type", "unknown")
            print(f"üìä DEBUG [CONTROLLER‚ÜíMAIN_WINDOW]: weather_data_ready: {record_count} records from {data_source} (type: {source_type})")
        
        self.controller.weather_data_ready.connect(debug_controller_weather_data_ready)
        self.controller.weather_data_ready.connect(
            self._on_weather_data_received
        )
        print("‚úÖ DEBUG: Controller.weather_data_ready ‚Üí MainWindow._on_weather_data_received CONNECTED (DUAL-API)")
        
        # üîó KRITIKUS: Controller ‚Üí AnalyticsView data pipeline
        if self.analytics_panel:
            def debug_controller_weather_data_to_analytics(data: dict):
                print("üîó DEBUG [CONTROLLER‚ÜíANALYTICS]: weather_data_ready ‚Üí update_data")
            
            self.controller.weather_data_ready.connect(debug_controller_weather_data_to_analytics)
            self.controller.weather_data_ready.connect(
                self.analytics_panel.update_data
            )
            print("‚úÖ DEBUG: Controller.weather_data_ready ‚Üí AnalyticsView.update_data CONNECTED")
        
        # === CONTROLLER ‚Üí MAIN WINDOW √ÅLTAL√ÅNOS SIGNALOK ===
        
        # Hibakezel√©s
        def debug_controller_error_occurred(message: str):
            print(f"‚ùå DEBUG [CONTROLLER‚ÜíMAIN_WINDOW]: error_occurred: '{message}'")
        
        self.controller.error_occurred.connect(debug_controller_error_occurred)
        self.controller.error_occurred.connect(self._show_error)
        print("‚úÖ DEBUG: Controller.error_occurred ‚Üí MainWindow._show_error CONNECTED")
        
        # St√°tusz friss√≠t√©sek
        def debug_controller_status_updated(message: str):
            print(f"üìù DEBUG [CONTROLLER‚ÜíMAIN_WINDOW]: status_updated: '{message}'")
        
        self.controller.status_updated.connect(debug_controller_status_updated)
        self.controller.status_updated.connect(self._update_status)
        print("‚úÖ DEBUG: Controller.status_updated ‚Üí MainWindow._update_status CONNECTED")
        
        # Progress friss√≠t√©sek
        def debug_controller_progress_updated(worker_type: str, progress: int):
            print(f"‚è≥ DEBUG [CONTROLLER‚ÜíMAIN_WINDOW]: progress_updated: {worker_type} {progress}%")
        
        self.controller.progress_updated.connect(debug_controller_progress_updated)
        self.controller.progress_updated.connect(self._update_progress)
        print("‚úÖ DEBUG: Controller.progress_updated ‚Üí MainWindow._update_progress CONNECTED")
        
        # === CONTROLPANEL KIEG√âSZ√çT≈ê SIGNALOK ===
        
        if self.control_panel:
            # Weather data befejez√©s jelz√©se
            self.controller.weather_data_ready.connect(
                self.control_panel.on_weather_data_completed
            )
            
            # Progress √©s status updates ControlPanel-hez
            self.controller.progress_updated.connect(
                self.control_panel.update_progress
            )
            self.controller.status_updated.connect(
                self.control_panel.update_status_from_controller
            )
            self.controller.error_occurred.connect(
                self.control_panel.on_controller_error
            )
            print("‚úÖ DEBUG: Controller ‚Üí ControlPanel additional signals CONNECTED")
        
        # === RESULTS PANEL SIGNALOK ===
        
        if self.results_panel:
            # Export k√©r√©sek
            def debug_results_panel_export_requested(format: str):
                print(f"üìä DEBUG [RESULTS_PANEL‚ÜíMAIN_WINDOW]: export_requested: {format}")
            
            self.results_panel.export_requested.connect(debug_results_panel_export_requested)
            self.results_panel.export_requested.connect(self._handle_export_request)
            print("‚úÖ DEBUG: ResultsPanel.export_requested ‚Üí MainWindow._handle_export_request CONNECTED")
            
            # Extr√©m id≈ëj√°r√°s k√©r√©sek
            def debug_results_panel_extreme_weather_requested():
                print("‚ö° DEBUG [RESULTS_PANEL‚ÜíMAIN_WINDOW]: extreme_weather_requested")
            
            self.results_panel.extreme_weather_requested.connect(debug_results_panel_extreme_weather_requested)
            self.results_panel.extreme_weather_requested.connect(self._show_extreme_weather)
            print("‚úÖ DEBUG: ResultsPanel.extreme_weather_requested ‚Üí MainWindow._show_extreme_weather CONNECTED")
        
        # === CHARTS & TABLE SIGNALOK - RESULTS PANEL KERESZT√úL ===
        
        # Chart widget referencia lek√©rdez√©se a results panel-t≈ël
        charts_container = None
        if self.results_panel:
            charts_container = self.results_panel.get_charts_container()
        
        if charts_container:
            # Chart export
            def debug_charts_exported(filepath: str, success: bool):
                print(f"üìà DEBUG [CHARTS‚ÜíMAIN_WINDOW]: chart_exported: {filepath} - {'success' if success else 'failed'}")
            
            charts_container.chart_exported.connect(debug_charts_exported)
            charts_container.chart_exported.connect(self._on_chart_exported)
            print("‚úÖ DEBUG: ChartsContainer.chart_exported ‚Üí MainWindow._on_chart_exported CONNECTED")
        
        # Data table referencia lek√©rdez√©se a results panel-t≈ël
        data_table = None
        if self.results_panel:
            data_table = self.results_panel.get_data_table()
        
        if data_table:
            # Table export
            def debug_table_export_completed(filepath: str, success: bool):
                print(f"üìã DEBUG [DATA_TABLE‚ÜíMAIN_WINDOW]: export_completed: {filepath} - {'success' if success else 'failed'}")
            
            data_table.export_completed.connect(debug_table_export_completed)
            data_table.export_completed.connect(self._on_table_exported)
            print("‚úÖ DEBUG: DataTable.export_completed ‚Üí MainWindow._on_table_exported CONNECTED")
            
            # Sor kiv√°laszt√°s
            def debug_table_row_selected(row_index: int):
                print(f"üìã DEBUG [DATA_TABLE‚ÜíMAIN_WINDOW]: row_selected: row {row_index}")
            
            data_table.row_selected.connect(debug_table_row_selected)
            data_table.row_selected.connect(self._on_table_row_selected)
            print("‚úÖ DEBUG: DataTable.row_selected ‚Üí MainWindow._on_table_row_selected CONNECTED")
        
        # === T√âMA SIGNALOK - THEMEMANAGER INTEGR√ÅCI√ì ===
        
        def debug_theme_changed(theme_name: str):
            print(f"üé® DEBUG [MAIN_WINDOW]: theme_changed: {theme_name}")
        
        self.theme_changed.connect(debug_theme_changed)
        self.theme_changed.connect(self._propagate_theme_change)
        print("‚úÖ DEBUG: MainWindow.theme_changed ‚Üí MainWindow._propagate_theme_change CONNECTED")
        
        def debug_view_changed(view_name: str):
            print(f"üîÑ DEBUG [MAIN_WINDOW]: view_changed: {view_name}")
        
        self.view_changed.connect(debug_view_changed)
        print("‚úÖ DEBUG: MainWindow.view_changed signal CONNECTED")
        
        print("üéâ ‚úÖ DEBUG: ALL CLEAN signals connected successfully with MULTI-CITY R√âGI√ì/MEGYE T√âRK√âP INTEGR√ÅCI√ì 100% BEFEJEZVE + ANALYTICS VIEW REFAKTOR√ÅL√ÅS BEFEJEZVE + TISZTA ANALYTICS ‚Üí T√âRK√âP INTEGRATION + TREND ANALYTICS INTEGR√ÅCI√ì BEFEJEZVE + DASHBOARD CLEANUP BEFEJEZVE + Analytics Refaktor√°lt + DUAL-API + PROVIDER STATUS + HIB√ÅS JELZ√âSEK ELT√ÅVOL√çTVA!")
    
    # === üî• √öJ: ANALYTICS VIEW QUERY HANDLER - REFAKTOR√ÅLT MET√ìDUS! ===
    
    def _handle_analytics_view_query(self, query_type: str, region_name: str):
        """
        üî• √öJ: Kezeli az AnalyticsView-b√≥l √©rkez≈ë multi-city lek√©rdez√©si k√©r√©seket.
        
        Args:
            query_type: Lek√©rdez√©s t√≠pusa (pl. "hottest_today", "coldest_today")
            region_name: R√©gi√≥ neve (pl. "√âszak-Magyarorsz√°g")
        """
        print(f"üî• DEBUG: _handle_analytics_view_query called: {query_type}, {region_name}")
        
        # A megl√©v≈ë, k√∂zponti lek√©rdez≈ë met√≥dus h√≠v√°sa
        # K√©sz√≠t√ºnk egy 'params' dictionary-t, ami kompatibilis a megl√©v≈ë rendszerrel
        params = {
            "query_type": query_type,
            "auto_switch_to_map": False  # Nem v√°ltunk automatikusan f√ºlet
        }
        
        # Mai d√°tum haszn√°lata
        today_str = datetime.now().strftime("%Y-%m-%d")

        # A m√°r megl√©v≈ë, k√∂zponti handler h√≠v√°sa
        self._handle_multi_city_weather_request(
            analysis_type="region", 
            region_id=region_name, 
            start_date=today_str, 
            end_date=today_str, 
            params=params
        )

    def _on_multi_city_result_ready_for_views(self, result: 'AnalyticsResult', query_type: str = "hottest_today"):
        """
        üî• √öJ: Sz√©tosztja a multi-city elemz√©s eredm√©ny√©t a relev√°ns n√©zeteknek + QUERY TYPE INFORM√ÅCI√ì.
        Ezt a _handle_multi_city_weather_request h√≠vja meg a v√©g√©n.
        
        Args:
            result: AnalyticsResult objektum a Multi-City Engine-b≈ël
            query_type: Lek√©rdez√©s t√≠pusa (pl. "windiest_today", "hottest_today")
        """
        print(f"üî• DEBUG: _on_multi_city_result_ready_for_views called - sz√©toszt√°s a n√©zeteknek (query_type: {query_type})...")
        
        try:
            # Eredm√©ny k√ºld√©se a T√©rk√©pnek + QUERY TYPE INFO
            if self.hungarian_map_tab and hasattr(self.hungarian_map_tab, 'set_analytics_result'):
                # üîß KRITIKUS: Query type alap√∫ param√©ter meghat√°roz√°sa
                analytics_parameter = self._map_query_type_to_parameter(query_type)
                print(f"üîß DEBUG: Mapped query_type '{query_type}' to parameter '{analytics_parameter}'")
                
                # üö® √öJ: Param√©ter be√°ll√≠t√°sa a t√©rk√©pen MIEL≈êTT az eredm√©nyt √°tadjuk
                if hasattr(self.hungarian_map_tab, 'set_analytics_parameter'):
                    self.hungarian_map_tab.set_analytics_parameter(analytics_parameter)
                    print(f"‚úÖ DEBUG: Analytics parameter set on HungarianMapTab: {analytics_parameter}")
                
                # Eredm√©ny √°tad√°sa
                self.hungarian_map_tab.set_analytics_result(result)
                print("  -> Eredm√©ny elk√ºldve a HungarianMapTab-nek (with query type info).")

            # Eredm√©ny k√ºld√©se az Analitika n√©zetnek
            if self.analytics_panel and hasattr(self.analytics_panel, 'update_with_multi_city_result'):
                self.analytics_panel.update_with_multi_city_result(result)
                print("  -> Eredm√©ny elk√ºldve az AnalyticsView-nak.")
                
            print("‚úÖ DEBUG: Multi-city result distribution completed (with query type)")
            
        except Exception as e:
            print(f"‚ùå DEBUG: Multi-city result distribution error: {e}")
            self._show_error(f"Multi-city eredm√©ny sz√©toszt√°si hiba: {e}")
    
    def _map_query_type_to_parameter(self, query_type: str) -> str:
        """
        üîß √öJ: Query type lek√©pez√©se t√©rk√©pi param√©terr√©.
        
        Args:
            query_type: Analytics query type (pl. "windiest_today")
            
        Returns:
            T√©rk√©p param√©ter neve (pl. "Sz√©l")
        """
        mapped_param = self.QUERY_TYPE_TO_PARAMETER.get(query_type, "H≈ëm√©rs√©klet")
        print(f"üîß DEBUG: Query type mapping: {query_type} ‚Üí {mapped_param}")
        return mapped_param
    
    # === üéâ MULTI-CITY WEATHER REQUEST HANDLER - KRITIKUS JAV√çTOTT MET√ìDUS! ===
    
    def _handle_multi_city_weather_request(self, analysis_type: str, region_id: str, start_date: str, end_date: str, params: dict) -> None:
        """
        üéâ KRITIKUS JAV√çT√ÅS: Multi-City weather request kezel√©se - R√âGI√ì/MEGYE ‚Üí MULTI-CITY ENGINE ‚Üí T√âRK√âP OVERLAY AUTOMATIKUS WORKFLOW + ANALYTICS RESULT K√ñZVETLEN √ÅTAD√ÅS + üîß WINDSPEED METRIC TELJES JAV√çT√ÅS.
        
        Ez a hi√°nyz√≥ 0.1% ami befejezi a teljes multi-city r√©gi√≥/megye t√©rk√©p integr√°ci√≥t!
        A kritikus jav√≠t√°s: AnalyticsResult objektum k√∂zvetlen √°tad√°sa (NO DICT CONVERSION!)
        
        üîß WINDSPEED METRIC JAV√çT√ÅS:
        - QUERY_TYPE_TO_PARAMETER mapping haszn√°lata
        - 2-l√©p√©ses koordin√°ci√≥: param√©ter be√°ll√≠t√°s + adat √°tad√°s
        - Enhanced debug logging minden l√©p√©shez
        
        Args:
            analysis_type: Elemz√©s t√≠pusa ("region" vagy "county")
            region_id: R√©gi√≥/megye azonos√≠t√≥ (pl. "K√∂z√©p-Magyarorsz√°g", "Budapest")
            start_date: Kezd≈ë d√°tum ISO form√°tumban
            end_date: V√©g d√°tum ISO form√°tumban
            params: Tov√°bbi param√©terek dictionary
        """
        print(f"üéâ DEBUG: _handle_multi_city_weather_request called - COMPLETING MULTI-CITY INTEGRATION + WINDSPEED FIX!")
        print(f"üéâ DEBUG: Analysis type: {analysis_type}, Region: '{region_id}', Date range: {start_date} ‚Üí {end_date}")
        print(f"üéâ DEBUG: Params: {params}")
        
        try:
            # Status update - Multi-city lek√©rdez√©s kezd√©se
            self.status_bar.showMessage(f"üéâ Multi-city lek√©rdez√©s ind√≠t√°sa: {region_id} ({analysis_type})")
            
            # üîß KRITIKUS: Query type meghat√°roz√°sa √©s param√©ter mapping
            query_type = params.get("query_type", "hottest_today")
            limit = params.get("limit", 20)  # Alap√©rtelmezett: 20 v√°ros
            
            print(f"üîß DEBUG: Query type: {query_type}, Limit: {limit}")
            
            # üîß KRITIKUS: 1. L√âP√âS - PARAM√âTER BE√ÅLL√çT√ÅS A T√âRK√âPEN
            if self.hungarian_map_tab:
                display_parameter = self._map_query_type_to_parameter(query_type)
                print(f"üîß DEBUG: 1. L√âP√âS - Setting analytics parameter on map: {display_parameter}")
                
                if hasattr(self.hungarian_map_tab, 'set_analytics_parameter'):
                    self.hungarian_map_tab.set_analytics_parameter(display_parameter)
                    print(f"‚úÖ DEBUG: Analytics parameter set successfully: {display_parameter}")
                else:
                    print("‚ö†Ô∏è DEBUG: HungarianMapTab.set_analytics_parameter method not found!")
            
            # 1. Multi-City Engine p√©ld√°nyos√≠t√°s/haszn√°lat
            print("üéâ DEBUG: Importing Multi-City Engine...")
            from src.analytics.multi_city_engine import MultiCityEngine
            
            engine = MultiCityEngine()
            print("‚úÖ DEBUG: Multi-City Engine instance created")
            
            print(f"üéâ DEBUG: Running multi-city analysis - Query: {query_type}, Limit: {limit}")
            
            # 2. Multi-city elemz√©s futtat√°sa
            result = engine.analyze_multi_city(
                query_type,
                region_id,
                start_date,
                limit=limit
            )
            
            # üîß KRITIKUS JAV√çT√ÅS: RESULT TYPE ELLEN≈êRZ√âS √âS HIBAKEZEL√âS
            if not hasattr(result, 'city_results'):
                print(f"‚ùå DEBUG: Multi-city engine returned invalid result type: {type(result)}")
                error_msg = f"Multi-city engine hib√°s eredm√©ny t√≠pus: {type(result)}"
                self.status_bar.showMessage(f"‚ùå {error_msg}")
                self._show_error(error_msg)
                return
            
            print(f"‚úÖ DEBUG: Multi-city analysis completed - {len(result.city_results)} results")
            print(f"üîß DEBUG: Result type: {type(result)}, has city_results: {hasattr(result, 'city_results')}")
            
            # 3. OPCION√ÅLIS: city_results logging c√©lokra (de NEM konverzi√≥!)
            print("üéâ DEBUG: Multi-city results summary:")
            for i, city_result in enumerate(result.city_results[:5]):  # Els≈ë 5 a loghoz
                print(f"  {i+1}. {city_result.city_name}: {city_result.value} {getattr(city_result.metric, 'value', '')} (rank: {city_result.rank})")
            
            # üîß KRITIKUS: 2. L√âP√âS - ADAT √ÅTAD√ÅS A T√âRK√âPNEK
            if self.hungarian_map_tab and hasattr(self.hungarian_map_tab, 'set_analytics_result'):
                print(f"üîß DEBUG: 2. L√âP√âS - Setting analytics result on map...")
                self.hungarian_map_tab.set_analytics_result(result)
                print("‚úÖ DEBUG: Analytics result set successfully on HungarianMapTab")
            else:
                print("‚ö†Ô∏è DEBUG: HungarianMapTab.set_analytics_result method not found!")
            
            # 4. üî• KRITIKUS JAV√çT√ÅS: EREDM√âNY SZ√âTOSZT√ÅSA MINDEN RELEV√ÅNS N√âZETRE + QUERY TYPE INFORM√ÅCI√ì
            print("üî• DEBUG: Distributing AnalyticsResult to all relevant views...")
            self._on_multi_city_result_ready_for_views(result, query_type)
            
            # 5. Status update - sikeres
            success_message = f"üéâ Multi-city eredm√©ny sz√©tosztva: {len(result.city_results)} v√°ros ({region_id}) [Query: {query_type}]"
            self.status_bar.showMessage(success_message)
            
            # Provider status friss√≠t√©se (multi-city lek√©rdez√©sek API haszn√°latot jeleznek)
            self._update_provider_status_display()
            
            # Automatikus t√©rk√©p tab v√°lt√°s (opcion√°lis)
            if params.get("auto_switch_to_map", True):
                print("üéâ DEBUG: Auto-switching to map view...")
                self._switch_view("map_view")
            
            print(f"üîß ‚úÖ DEBUG: WINDSPEED METRIC JAV√çT√ÅS BEFEJEZVE - {query_type} ‚Üí {self._map_query_type_to_parameter(query_type)}")
            
        except ImportError as e:
            print(f"‚ùå DEBUG: Multi-City Engine import error: {e}")
            error_msg = f"Multi-City Engine nem el√©rhet≈ë: {e}"
            self.status_bar.showMessage(f"‚ùå {error_msg}")
            self._show_error(error_msg)
            
        except Exception as e:
            print(f"‚ùå DEBUG: Multi-city request error: {e}")
            import traceback
            traceback.print_exc()
            
            error_msg = f"Multi-city lek√©rdez√©s hiba: {e}"
            self.status_bar.showMessage(f"‚ùå {error_msg}")
            self._show_error(error_msg)
        
        print("üéâ DEBUG: _handle_multi_city_weather_request completed - MULTI-CITY INTEGRATION + WINDSPEED FIX FINISHED!")
    
    # === üåç PROVIDER STATUS SLOT MET√ìDUSOK ===
    
    def _on_provider_selected(self, provider_name: str) -> None:
        """
        üåç Provider kiv√°laszt√°s kezel√©se Controller-t≈ël.
        
        Args:
            provider_name: Kiv√°lasztott provider neve
        """
        print(f"üåç DEBUG: _on_provider_selected called: {provider_name}")
        
        # Provider tracking friss√≠t√©se
        self.current_provider = provider_name
        
        # Status display friss√≠t√©se
        self._update_provider_status_display()
        
        # Provider status signal
        self.provider_status_updated.emit(f"Provider v√°ltva: {provider_name}")
        
        print(f"‚úÖ DEBUG: Provider selection handled: {provider_name}")
    
    def _on_provider_usage_updated(self, usage_stats: Dict[str, Dict[str, Any]]) -> None:
        """
        üåç Provider usage statistics friss√≠t√©se Controller-t≈ël.
        
        Args:
            usage_stats: Usage statistics dictionary
        """
        print(f"üåç DEBUG: _on_provider_usage_updated called: {len(usage_stats)} providers")
        
        # Usage stats friss√≠t√©se
        self.provider_usage_stats = usage_stats
        
        # Status display friss√≠t√©se
        self._update_provider_status_display()
        
        # Provider status signal
        formatted_usage = format_provider_usage(usage_stats)
        usage_summary = ', '.join([f"{name}: {usage}" for name, usage in formatted_usage.items()])
        self.provider_status_updated.emit(f"Usage friss√≠tve: {usage_summary}")
        
        print(f"‚úÖ DEBUG: Provider usage updated")
    
    def _on_provider_warning(self, provider_name: str, usage_percent: int) -> None:
        """
        üåç Provider warning kezel√©se Controller-t≈ël.
        
        Args:
            provider_name: Provider neve
            usage_percent: Usage sz√°zal√©k
        """
        print(f"üåç DEBUG: _on_provider_warning called: {provider_name} {usage_percent}%")
        
        # Warning styling friss√≠t√©se
        if usage_percent >= 95:
            warning_level = "critical"
            warning_message = f"‚ö†Ô∏è {provider_name} limit k√∂zel: {usage_percent}%"
        elif usage_percent >= 80:
            warning_level = "warning"  
            warning_message = f"‚ö†Ô∏è {provider_name} haszn√°lat magas: {usage_percent}%"
        else:
            warning_level = "info"
            warning_message = f"üìä {provider_name} haszn√°lat: {usage_percent}%"
        
        # Warning styling alkalmaz√°sa
        self._apply_warning_styling(warning_level)
        
        # Status bar message
        self.status_bar.showMessage(warning_message)
        
        # Provider status signal
        self.provider_status_updated.emit(warning_message)
        
        print(f"‚úÖ DEBUG: Provider warning handled: {provider_name} {usage_percent}%")
    
    def _on_provider_fallback(self, from_provider: str, to_provider: str) -> None:
        """
        üåç Provider fallback notification kezel√©se Controller-t≈ël.
        
        Args:
            from_provider: Eredeti provider
            to_provider: Fallback provider
        """
        print(f"üåç DEBUG: _on_provider_fallback called: {from_provider} ‚Üí {to_provider}")
        
        # Provider tracking friss√≠t√©se
        self.current_provider = to_provider
        
        # Status display friss√≠t√©se
        self._update_provider_status_display()
        
        # Fallback notification message
        from_display = get_source_display_name(from_provider)
        to_display = get_source_display_name(to_provider)
        fallback_message = f"üîÑ Provider fallback: {from_display} ‚Üí {to_display}"
        
        # Status bar message
        self.status_bar.showMessage(fallback_message)
        
        # Provider status signal
        self.provider_status_updated.emit(fallback_message)
        
        print(f"‚úÖ DEBUG: Provider fallback handled: {from_provider} ‚Üí {to_provider}")
    
    # === üìà TREND ANALYTICS SLOT MET√ìDUSOK - √öJ! ===
    
    def _on_trend_analysis_completed(self, results: Dict[str, Any]) -> None:
        """
        üìà Trend analysis completion handler - √öJ SLOT MET√ìDUS.
        
        Args:
            results: Trend elemz√©s eredm√©nyei
        """
        try:
            city_name = results.get('city_name', 'Unknown')
            parameter = results.get('parameter', 'Unknown')
            time_range = results.get('time_range', 'Unknown')
            
            # Status message
            success_message = f"üìà Trend elemz√©s k√©sz: {city_name} ({parameter}, {time_range})"
            self.status_bar.showMessage(success_message)
            
            # Tov√°bbi feldolgoz√°s (ha sz√ºks√©ges)
            if 'statistics' in results and 'trend_stats' in results['statistics']:
                trend_stats = results['statistics']['trend_stats']
                r_squared = trend_stats.get('r_squared', 0)
                trend_direction = trend_stats.get('trend_direction', 'ismeretlen')
                
                print(f"üìà DEBUG: Trend analysis completed - R¬≤: {r_squared:.3f}, Direction: {trend_direction}")
            
            print(f"‚úÖ DEBUG: Trend analysis completion handled: {city_name}")
            
        except Exception as e:
            print(f"‚ùå DEBUG: Trend analysis completion handling error: {e}")
            self._show_error(f"Trend elemz√©s eredm√©ny feldolgoz√°si hiba: {e}")
    
    def _on_trend_analysis_error(self, error_msg: str) -> None:
        """
        üìà Trend analysis error handler - √öJ SLOT MET√ìDUS.
        
        Args:
            error_msg: Hiba√ºzenet
        """
        print(f"‚ùå DEBUG: _on_trend_analysis_error called: {error_msg}")
        
        # Status message
        error_message = f"‚ùå Trend elemz√©s hiba: {error_msg}"
        self.status_bar.showMessage(error_message)
        
        # Error dialog (opcion√°lis - lehet t√∫l zavar√≥)
        # self._show_error(f"Trend elemz√©s hiba: {error_msg}")
        
        print(f"‚úÖ DEBUG: Trend analysis error handled: {error_msg}")
    
    # === SLOT MET√ìDUSOK - CLEAN VERZI√ì + THEMEMANAGER + ANALYTICS REFAKTOR√ÅLT + DUAL-API ===
    
    def _on_weather_data_received(self, data: dict) -> None:
        """
        üîß CLEAN id≈ëj√°r√°si adatok fogad√°sa a Controller-t≈ël - DASHBOARD CLEANUP BEFEJEZVE + ANALYTICS REFAKTOR√ÅLT INTEGR√ÅCI√ìVAL + DUAL-API.
        
        Args:
            data: Id≈ëj√°r√°si adatok (Open-Meteo vagy Meteostat form√°tumban)
        """
        print("üìä DEBUG: _on_weather_data_received called - DASHBOARD CLEANUP BEFEJEZVE + ANALYTICS REFAKTOR√ÅLT INTEGRATION + DUAL-API")
        
        try:
            # üåç DUAL-API adatforr√°s azonos√≠t√°sa
            data_source = data.get('data_source', 'Unknown')
            source_type = data.get('source_type', 'unknown')
            
            print(f"üìä DEBUG: Processing weather data from {data_source} (type: {source_type})")
            
            # City info lek√©rdez√©se a Controller-t≈ël
            city_data = self.controller.get_current_city()
            city_name = city_data.get('name', 'Ismeretlen') if city_data else 'Ismeretlen'
            
            # üåç DUAL-API display name meghat√°roz√°sa
            display_name = get_source_display_name(source_type)
            city_name_with_source = f"{city_name} ({display_name})"
            
            print(f"üìä DEBUG: Processing weather data for {city_name_with_source}")
            
            # Results panel friss√≠t√©se (Single City view - K√ñZPONTI FUNKCI√ì)
            if self.results_panel:
                print("üìä DEBUG: Updating results panel...")
                self.results_panel.update_data(data, city_name_with_source)
            
            # üìä ANALYTICS REFAKTOR√ÅLT INTEGR√ÅCI√ì - automatikus!
            # Az analytics_panel.update_data() automatikusan megh√≠v√≥dik a 
            # Controller.weather_data_ready signal miatt (_connect_mvc_signals-ben)
            print("‚úÖ DEBUG: Analytics panel update automatikus (signal-based)")
            
            # Men√º elemek enged√©lyez√©se
            self.export_action.setEnabled(True)
            self.extreme_action.setEnabled(True)
            
            print(f"‚úÖ DEBUG: UI komponensek friss√≠tve DASHBOARD CLEANUP BEFEJEZVE + ANALYTICS REFAKTOR√ÅLT INTEGR√ÅCI√ìVAL + DUAL-API: {city_name_with_source}")
            
        except Exception as e:
            print(f"‚ùå DEBUG: UI friss√≠t√©si hiba: {e}")
            import traceback
            traceback.print_exc()
            self._show_error(f"UI friss√≠t√©si hiba: {e}")
    
    def _update_status(self, message: str) -> None:
        """St√°tuszsor friss√≠t√©se - Provider status megtart√°s√°val."""
        # General status message update, provider widgets megmaradnak
        self.status_bar.showMessage(message)
    
    def _update_progress(self, worker_type: str, progress: int) -> None:
        """Progress friss√≠t√©se - DUAL-API kompatibilis + Provider status megtart√°s√°val."""
        if progress == 100:
            # Worker t√≠pus alapj√°n specifikus befejez≈ë √ºzenet
            completion_messages = {
                "geocoding": "‚úÖ Keres√©s befejezve",
                "weather_data": "‚úÖ Id≈ëj√°r√°si adatok lek√©rdezve (Dual-API)",
                "sql_query": "‚úÖ Adatb√°zis lek√©rdez√©s befejezve"
            }
            
            message = completion_messages.get(worker_type, f"‚úÖ {worker_type} befejezve")
            self.status_bar.showMessage(message)
        else:
            # Progress √ºzenetek
            progress_messages = {
                "geocoding": f"üîç Keres√©s: {progress}%",
                "weather_data": f"üåç Adatok lek√©rdez√©se (Dual-API): {progress}%",
                "sql_query": f"üóÇÔ∏è Adatb√°zis: {progress}%"
            }
            
            message = progress_messages.get(worker_type, f"‚è≥ {worker_type}: {progress}%")
            self.status_bar.showMessage(message)
    
    def _show_error(self, message: str) -> None:
        """Hiba√ºzenet megjelen√≠t√©se."""
        QMessageBox.critical(self, "Hiba", message)
        self.status_bar.showMessage(f"‚ùå {message}")
    
    def _handle_export_request(self, format: str) -> None:
        """Export k√©r√©s kezel√©se a results panel-t≈ël."""
        data_table = None
        if self.results_panel:
            data_table = self.results_panel.get_data_table()
        
        if format == "csv" and data_table:
            data_table._export_data("csv")
        elif format == "excel" and data_table:
            data_table._export_data("excel")
        else:
            self._show_error(f"Nem t√°mogatott export form√°tum: {format}")
    
    def _on_chart_exported(self, filepath: str, success: bool) -> None:
        """Chart export eredm√©ny kezel√©se."""
        if success:
            self.status_bar.showMessage(f"‚úÖ Grafikon export√°lva: {filepath}")
        else:
            self._show_error(f"Grafikon export hiba: {filepath}")
    
    def _on_table_exported(self, filepath: str, success: bool) -> None:
        """Table export eredm√©ny kezel√©se."""
        if success:
            self.status_bar.showMessage(f"‚úÖ Adatok export√°lva: {filepath}")
        else:
            self._show_error(f"Adatok export hiba: {filepath}")
    
    def _on_table_row_selected(self, row_index: int) -> None:
        """T√°bl√°zat sor kiv√°laszt√°s kezel√©se."""
        print(f"üìã T√°bl√°zat sor kiv√°lasztva: {row_index}")
    
    # === MEN√ú AKCI√ìK ===
    
    def _export_data(self) -> None:
        """Adatok export√°l√°sa men√ºb≈ël."""
        weather_data = self.controller.get_current_weather_data()
        if not weather_data:
            self._show_error("Nincsenek export√°lhat√≥ adatok. El≈ësz√∂r k√©rdezzen le adatokat.")
            return
        
        data_table = None
        if self.results_panel:
            data_table = self.results_panel.get_data_table()
        
        if data_table:
            data_table._export_data("csv")
        else:
            self._show_error("Adatt√°bl√°zat nem el√©rhet≈ë az exporthoz.")
    
    def _show_extreme_weather(self) -> None:
        """Extr√©m id≈ëj√°r√°si esem√©nyek megjelen√≠t√©se."""
        weather_data = self.controller.get_current_weather_data()
        city_data = self.controller.get_current_city()
        
        if not weather_data or not city_data:
            self._show_error("Nincsenek megjelen√≠thet≈ë adatok. El≈ësz√∂r k√©rdezzen le id≈ëj√°r√°si adatokat.")
            return
        
        city_name = city_data.get('name', 'Ismeretlen')
        
        try:
            dialog = ExtremeWeatherDialog(self, weather_data, city_name)
            dialog.exec()
        except Exception as e:
            self._show_error(f"Extr√©m id≈ëj√°r√°s ablak hiba: {e}")
    
    def _show_about(self) -> None:
        """N√©vjegy ablak megjelen√≠t√©se - ANALYTICS ‚Üí MAP SYNC FIX BEFEJEZVE + ANALYTICS VIEW REFAKTOR√ÅL√ÅS BEFEJEZVE + HIB√ÅS JELZ√âSEK ELT√ÅVOL√çTVA + WINDSPEED METRIC TELJES JAV√çT√ÅS VERSION."""
        about_text = f"""
        <h2>{AppInfo.NAME}</h2>
        <p><b>Verzi√≥:</b> {AppInfo.VERSION} (Analytics ‚Üí Map Sync Fix + Analytics View Refaktor√°l√°s Befejezve + Hib√°s Jelz√©sek Elt√°vol√≠tva + Multi-City R√©gi√≥/Megye T√©rk√©p Integr√°ci√≥ 100% Befejezve + Tiszta Analytics ‚Üí T√©rk√©p Integration + Trend Analytics Integr√°ci√≥ Befejezve + Dashboard Cleanup Befejezve + Splitter Constraints Optimaliz√°lva + Analytics Refaktor√°lt + Provider Status + ThemeManager + Dual-API + Map View Integr√°ci√≥ + üîß WINDSPEED METRIC TELJES JAV√çT√ÅS)</p>
        <p><b>Le√≠r√°s:</b> {AppInfo.DESCRIPTION}</p>
        <p><b>Architekt√∫ra:</b> Clean MVC + Single City Central Navigation + Provider Status Bar + AnalyticsView Refaktor√°lt + ThemeManager + Dual-API + Splitter Constraints Optimaliz√°lva + Map View Integr√°ci√≥ + TrendAnalyticsTab Professional + Tiszta Analytics ‚Üí T√©rk√©p Integration + Multi-City R√©gi√≥/Megye Support + Analytics ‚Üí Map Sync Fix + Analytics View Refaktor√°l√°s + Hib√°s Jelz√©sek Elt√°vol√≠tva + üîß WINDSPEED METRIC TELJES JAV√çT√ÅS</p>
        <p><b>Technol√≥gia:</b> PySide6, Python 3.8+</p>
        <p><b>Adatforr√°sok:</b> Dual-API rendszer (Open-Meteo + Meteostat)</p>
        <hr>
        <p><i>üö® Analytics ‚Üí Map Sync Fix BEFEJEZVE!</i></p>
        <p><i>üîó ControlPanel signal connections HungarianMapTab-hez</i></p>
        <p><i>üö® analysis_parameters_changed ‚Üí update_analysis_parameters automatikus</i></p>
        <p><i>üö® weather_parameters_changed ‚Üí update_weather_parameters automatikus</i></p>
        <p><i>üö® date_range_changed ‚Üí update_date_range automatikus</i></p>
        <p><i>üö® parameters_bundle_changed ‚Üí refresh_with_new_parameters automatikus</i></p>
        <p><i>üîß Debug logging minden signal emit-n√©l</i></p>
        <p><i>üî• Analytics View Refaktor√°l√°s BEFEJEZVE!</i></p>
        <p><i>üöÄ AnalyticsView.multi_city_query_requested ‚Üí MainWindow k√∂zponti rendszer</i></p>
        <p><i>üîó MainWindow._handle_analytics_view_query() ‚Üí MultiCityEngine workflow</i></p>
        <p><i>üìä MainWindow._on_multi_city_result_ready_for_views() eredm√©ny sz√©toszt√°s</i></p>
        <p><i>üéØ AnalyticsView.update_with_multi_city_result() publikus slot</i></p>
        <p><i>üßπ Duplik√°lt lek√©rdez≈ë logika elt√°vol√≠t√°sa AnalyticsView-b√≥l</i></p>
        <p><i>üî• Signal chain: AnalyticsView ‚Üí MainWindow ‚Üí MultiCityEngine ‚Üí HungarianMapTab</i></p>
        <p><i>üîß HIB√ÅS JELZ√âSEK ELT√ÅVOL√çTVA!</i></p>
        <p><i>‚ùå analytics_completed hib√°s signal bek√∂t√©sek t√∂r√∂lve</i></p>
        <p><i>‚ùå Fel√ºl√≠r√≥ t√©rk√©pi friss√≠t√©sek elt√°vol√≠tva</i></p>
        <p><i>‚úÖ Csak a tiszta, k√∂zponti, param√©terezett adatkezel√©s marad</i></p>
        <p><i>‚úÖ Query type alap√∫ t√©rk√©pi param√©ter be√°ll√≠t√°s</i></p>
        <p><i>‚úÖ Egy√©rtelm≈± adatfolyam: AnalyticsView ‚Üí MainWindow ‚Üí HungarianMapTab</i></p>
        <p><i>üîß WINDSPEED METRIC TELJES JAV√çT√ÅS!</i></p>
        <p><i>üó∫Ô∏è QUERY_TYPE_TO_PARAMETER mapping implement√°lva</i></p>
        <p><i>üå¨Ô∏è "windiest_today" ‚Üí "Sz√©l" param√©ter mapping</i></p>
        <p><i>üîß 2-l√©p√©ses koordin√°ci√≥: param√©ter be√°ll√≠t√°s + adat √°tad√°s</i></p>
        <p><i>üîß Enhanced debug logging minden l√©p√©shez</i></p>
        <p><i>‚úÖ _handle_multi_city_weather_request TELJES implement√°ci√≥</i></p>
        <p><i>üéâ Multi-City R√©gi√≥/Megye T√©rk√©p Integr√°ci√≥ 100% BEFEJEZVE!</i></p>
        <p><i>üèûÔ∏è R√©gi√≥/megye v√°laszt√°s ‚Üí Multi-City Engine ‚Üí t√©rk√©p overlay automatikus</i></p>
        <p><i>üó∫Ô∏è AnalyticsResult objektum k√∂zvetlen √°tad√°s HungarianMapTab-nek</i></p>
        <p><i>üìä Analytics View bypass multi-city eset√©n - optimaliz√°lt workflow</i></p>
        <p><i>üîß Error handling + debug √ºzenetek teljes multi-city workflow-hoz</i></p>
        <p><i>üå§Ô∏è Tiszta Analytics ‚Üí T√©rk√©p Integration - Automatikus weather overlay!</i></p>
        <p><i>üìä Analytics View 365 napos weather data ‚Üí Folium t√©rk√©p automatikus √°tad√°s</i></p>
        <p><i>üó∫Ô∏è Weather overlay automatikus gener√°l√°s analytics eredm√©nyb≈ël</i></p>
        <p><i>üåç WeatherDataBridge + Multi-City Engine teljes integr√°ci√≥</i></p>
        <p><i>üîó Tiszta signal chain az √∂sszes analytics eredm√©nyhez</i></p>
        <p><i>üéØ Val√≥s idej≈± weather overlay friss√≠t√©s t√©rk√©pen</i></p>
        <p><i>üöÄ Trend Analytics Integr√°ci√≥ Befejezve - Professional vizualiz√°ci√≥k!</i></p>
        <p><i>üìà H≈ët√©rk√©p style trend chart + line√°ris regresszi√≥</i></p>
        <p><i>üìä R¬≤ √©rt√©kek + trend/√©vtized + szignifikancia tesztek</i></p>
        <p><i>üé® Modern glassmorphism UI design</i></p>
        <p><i>üèõÔ∏è Magyar telep√ºl√©s priorit√°s (3178 magyar + 44k glob√°lis)</i></p>
        <p><i>üìÖ 5 √©v/10 √©v/minden adat elemz√©si opci√≥k</i></p>
        <p><i>üé® Professional sz√≠npaletta + ThemeManager integr√°ci√≥</i></p>
        <p><i>üîó Clean signal chain: ControlPanel ‚Üí TrendAnalyticsTab sync</i></p>
        <p><i>üßπ Dashboard Cleanup Befejezve - Clean Architecture!</i></p>
        <p><i>üèôÔ∏è Single City k√∂zponti √©s alap√©rtelmezett n√©zet</i></p>
        <p><i>üìä Egyszer≈±s√≠tett workflow: Keres√©s ‚Üí Kiv√°laszt√°s ‚Üí Adatlek√©rdez√©s ‚Üí Eredm√©nyek</i></p>
        <p><i>üéØ Azonnali feedback √©s hibakezel√©s</i></p>
        <p><i>üéØ Clean interface, vil√°gos funkci√≥k (Dashboard komplexit√°s elt√°vol√≠tva)</i></p>
        <p><i>üîß Splitter handle width: 18px (m√©g k√∂nnyebb mozgat√°s)</i></p>
        <p><i>üîß Panel constraints: ControlPanel 320-520px, ResultsPanel min 450px</i></p>
        <p><i>üîß Stretch factors: ControlPanel(0) fix, ResultsPanel(1) expand</i></p>
        <p><i>üîß Layout margins optimaliz√°lva (2px/0px spacing)</i></p>
        <p><i>üîß Window size optimaliz√°lva: 1400x900px (min 1200x700px)</i></p>
        <p><i>üîß Initial sizes: ControlPanel 420px (UniversalLocationSelector komfort)</i></p>
        <p><i>üîß Responsive layout behavior jav√≠tva</i></p>
        <p><i>üåç Smart API routing: ingyenes √©s pr√©mium szolg√°ltat√°sok</i></p>
        <p><i>üíé Cost-aware selection: use-case alap√∫ optimaliz√°ci√≥</i></p>
        <p><i>üìä Real-time provider status display status bar-ban</i></p>
        <p><i>‚ö†Ô∏è Usage tracking √©s warning notifications</i></p>
        <p><i>üîÑ Provider fallback notifications</i></p>
        <p><i>üí∞ Cost monitoring √©s usage statistics</i></p>
        <p><i>üìä AnalyticsView REFAKTOR√ÅLT integr√°ci√≥ (duplik√°lt logika elt√°vol√≠tva)</i></p>
        <p><i>üîó ControlPanel ‚Üí AnalyticsView direct signal connection</i></p>
        <p><i>üîç Duplik√°lt vez√©rl≈ëk elt√°vol√≠tva - clean architecture</i></p>
        <p><i>üé® ThemeManager centraliz√°lt t√©ma rendszer</i></p>
        <p><i>üó∫Ô∏è Map View integr√°ci√≥ - T√©rk√©p tab m≈±k√∂dik!</i></p>
        <p><i>üìà TrendAnalyticsTab integr√°ci√≥ - Trend Elemz√©s tab m≈±k√∂dik!</i></p>
        <p><i>üåç Glob√°lis id≈ëj√°r√°si adatok</i></p>
        <p><i>üèóÔ∏è Single City-k√∂zpont√∫ clean interface (Dashboard elt√°vol√≠tva)</i></p>
        <p><i>üìä Megb√≠zhat√≥ adatfeldolgoz√°s</i></p>
        <p><i>‚öôÔ∏è Modul√°ris, karbantarthat√≥ k√≥d</i></p>
        <p><i>üîó Clean Signal Chain Management - refaktor√°lt</i></p>
        <p><i>üé® ColorPalette professzion√°lis sz√≠nrendszer</i></p>
        <p><i>üìà Analytics backend REFAKTOR√ÅLT integr√°ci√≥</i></p>
        <p><i>üìà Trend Analytics backend PROFESSIONAL integr√°ci√≥</i></p>
        <p><i>üå§Ô∏è Tiszta Analytics ‚Üí T√©rk√©p AUTOMATIKUS weather integration</i></p>
        <p><i>üéâ Multi-City Engine TELJES r√©gi√≥/megye support</i></p>
        <p><i>üîÑ Fallback mechanizmus API hib√°k eset√©n</i></p>
        <p><i>‚ùå Dashboard komplexit√°s teljes elt√°vol√≠t√°s</i></p>
        <p><i>üîß Hib√°s jelz√©sek teljes tiszt√≠t√°sa</i></p>
        """
        
        QMessageBox.about(self, "N√©vjegy", about_text)
    
    # === üé® T√âMA KEZEL√âS - THEMEMANAGER INTEGR√ÅCI√ì ===
    
    def _apply_theme(self, theme_type: ThemeType) -> None:
        """
        üé® THEMEMANAGER INTEGR√ÅLT t√©ma alkalmaz√°sa - ThemeManager singleton haszn√°lat√°val.
        
        Args:
            theme_type: T√©ma t√≠pusa (ThemeType enum)
        """
        print(f"üé® DEBUG: Applying theme through ThemeManager: {theme_type.value}")
        
        # üé® THEMEMANAGER T√âMA BE√ÅLL√çT√ÅSA (ez mindent automatikusan kezel)
        success = self.theme_manager.set_theme(theme_type.value)
        
        if success:
            # T√©ma tracking friss√≠t√©se
            self.current_theme = theme_type
            
            # Be√°ll√≠t√°sok ment√©se
            self.settings.setValue("theme", theme_type.value)
            
            print(f"‚úÖ DEBUG: Theme applied and saved through ThemeManager: {theme_type.value}")
        else:
            print(f"‚ùå DEBUG: Theme application failed: {theme_type.value}")
    
    def _apply_theme_internal(self, theme_type: ThemeType) -> None:
        """
        üé® DEPRECATED: Bels≈ë t√©ma alkalmaz√°s - THEMEMANAGER-RE DELEG√ÅLVA.
        
        Args:
            theme_type: T√©ma t√≠pusa (DEPRECATED, haszn√°ld a ThemeManager-t)
        """
        print("‚ö†Ô∏è DEBUG: _apply_theme_internal() DEPRECATED - using ThemeManager instead")
        
        # ThemeManager-re deleg√°l√°s
        self._apply_theme(theme_type)
    
    def _propagate_theme_change(self, theme_name: str) -> None:
        """
        üé® DEPRECATED: T√©ma v√°ltoz√°s tov√°bb√≠t√°sa - THEMEMANAGER AUTOMATIKUSAN KEZELI.
        
        Args:
            theme_name: T√©ma neve ("light" vagy "dark") (DEPRECATED, ThemeManager kezeli)
        """
        print("‚ö†Ô∏è DEBUG: _propagate_theme_change() DEPRECATED - ThemeManager handles automatically")
        
        # ThemeManager automatikusan kezeli az √∂sszes regisztr√°lt widget-et
        # De a splitter-t k√ºl√∂n kell friss√≠teni, mert az speci√°lis
        dark_theme = (theme_name == "dark")
        self._update_splitter_theme(dark_theme)
        
        print(f"‚úÖ DEBUG: Theme propagation complete via ThemeManager: {theme_name}")
    
    def _update_splitter_theme(self, dark_theme: bool) -> None:
        """
        üîß SPLITTER t√©ma friss√≠t√©se theme v√°lt√°skor + THEMEMANAGER SZ√çNEK.
        
        Args:
            dark_theme: S√∂t√©t t√©ma-e
        """
        print(f"üîß DEBUG: Updating splitter theme with ThemeManager colors (dark: {dark_theme})")
        
        # Single City View splitter keres√©se √©s friss√≠t√©se
        single_city_view = None
        if self.stacked_widget and self.stacked_widget.count() > 0:
            single_city_view = self.stacked_widget.widget(0)  # üßπ Index 0 = Single City View (Dashboard helyett)
        
        if single_city_view:
            # Splitter megkeres√©se a view-ban
            splitters = single_city_view.findChildren(QSplitter)
            for splitter in splitters:
                # üé® THEMEMANAGER SPLITTER CSS ALKALMAZ√ÅSA
                splitter_css = self.theme_manager.generate_css_for_class("splitter")
                splitter.setStyleSheet(splitter_css)
                
                print(f"‚úÖ DEBUG: Splitter theme updated with ThemeManager CSS: {'dark' if dark_theme else 'light'}")
    
    # === BE√ÅLL√çT√ÅSOK KEZEL√âS ===
    
    def _load_settings(self) -> None:
        """Be√°ll√≠t√°sok bet√∂lt√©se - THEMEMANAGER INTEGR√ÅCI√ìVAL."""
        # Ablak poz√≠ci√≥ √©s m√©ret
        geometry = self.settings.value("geometry")
        if geometry:
            self.restoreGeometry(geometry)
        
        # üé® T√âMA BE√ÅLL√çT√ÅS - THEMEMANAGER INTEGR√ÅCI√ì
        theme_name = self.settings.value("theme", "light")
        try:
            theme_type = ThemeType(theme_name)
            self._apply_theme(theme_type)
        except ValueError:
            # Ha invalid t√©ma √©rt√©k, alap√©rtelmezett light
            self._apply_theme(ThemeType.LIGHT)
        
        # üßπ Single City alap√©rtelmezett n√©zet (Dashboard helyett)
        self._switch_view("single_city")
        print("üßπ DEBUG: Single City set as default view (Dashboard cleanup befejezve)")
    
    def _save_settings(self) -> None:
        """Be√°ll√≠t√°sok ment√©se + THEMEMANAGER."""
        self.settings.setValue("geometry", self.saveGeometry())
        self.settings.setValue("current_view", self.current_view_name)
        self.settings.setValue("theme", self.current_theme.value)
        
        # üé® THEMEMANAGER BE√ÅLL√çT√ÅSOK MENT√âSE
        self.theme_manager.save_theme_preferences(self.settings)
    
    # === LIFECYCLE ===
    
    def closeEvent(self, event) -> None:
        """Alkalmaz√°s bez√°r√°s√°nak kezel√©se + ANALYTICS ‚Üí MAP SYNC FIX BEFEJEZVE + ANALYTICS VIEW REFAKTOR√ÅL√ÅS BEFEJEZVE + HIB√ÅS JELZ√âSEK ELT√ÅVOL√çTVA + WINDSPEED METRIC TELJES JAV√çT√ÅS."""
        try:
            print("üõë DEBUG: ANALYTICS ‚Üí MAP SYNC FIX BEFEJEZVE + ANALYTICS VIEW REFAKTOR√ÅL√ÅS BEFEJEZVE + HIB√ÅS JELZ√âSEK ELT√ÅVOL√çTVA + WINDSPEED METRIC TELJES JAV√çT√ÅS MainWindow closeEvent called")
            
            # Analytics panel le√°ll√≠t√°sa (REFAKTOR√ÅLT)
            if self.analytics_panel:
            print("üõë DEBUG: Stopping refactored analytics panel...")
            self.analytics_panel.clear_data()
            
            # Trend analytics tab le√°ll√≠t√°sa - √öJ!
            if self.trend_analytics_tab:
                print("üõë DEBUG: Stopping trend analytics tab...")
                self.trend_analytics_tab.clear_data()
            
            # Hungarian Map tab le√°ll√≠t√°sa - √öJ!
            if self.hungarian_map_tab:
                print("üõë DEBUG: Stopping hungarian map tab...")
                # Ha a HungarianMapTab-nak lenne cleanup met√≥dusa, itt h√≠vn√°nk meg
            
            # Map view le√°ll√≠t√°sa
            if self.map_view:
                print("üõë DEBUG: Stopping map view component...")
                # Ha a MapView-nak lenne cleanup met√≥dusa, itt h√≠vn√°nk meg
            
            # Be√°ll√≠t√°sok ment√©se
            self._save_settings()
            
            # Controller le√°ll√≠t√°sa
            print("üõë DEBUG: Shutting down controller...")
            self.controller.shutdown()
            
            # Esem√©ny elfogad√°sa
            event.accept()
            
            print("‚úÖ DEBUG: ANALYTICS ‚Üí MAP SYNC FIX BEFEJEZVE + ANALYTICS VIEW REFAKTOR√ÅL√ÅS BEFEJEZVE + HIB√ÅS JELZ√âSEK ELT√ÅVOL√çTVA + WINDSPEED METRIC TELJES JAV√çT√ÅS MainWindow bez√°rva")
            
        except Exception as e:
            print(f"‚ö†Ô∏è DEBUG: Bez√°r√°si hiba: {e}")
            import traceback
            traceback.print_exc()
            event.accept()
    
    # === PUBLIKUS API ===
    
    def get_current_view(self) -> str:
        """Jelenlegi n√©zet nev√©nek lek√©rdez√©se."""
        return self.current_view_name
    
    def switch_to_view(self, view_name: str) -> None:
        """Programmatic n√©zet v√°lt√°s (k√ºls≈ë haszn√°latra)."""
        self._switch_view(view_name)
    
    def get_available_views(self) -> list:
        """El√©rhet≈ë n√©zetek list√°j√°nak lek√©rdez√©se - ANALYTICS ‚Üí MAP SYNC FIX BEFEJEZVE + ANALYTICS VIEW REFAKTOR√ÅL√ÅS BEFEJEZVE + HIB√ÅS JELZ√âSEK ELT√ÅVOL√çTVA + WINDSPEED METRIC TELJES JAV√çT√ÅS."""
        return ["single_city", "analytics", "trend_analysis", "map_view", "settings"]  # üßπ Dashboard elt√°vol√≠tva, üìà trend_analysis hozz√°adva, üå§Ô∏è map_view friss√≠tve, üî• analytics refaktor√°lva, üîß windspeed jav√≠tva
    
    def get_analytics_panel(self) -> Optional[AnalyticsView]:
        """
        üìä Analytics panel referencia lek√©rdez√©se - REFAKTOR√ÅLT FUNKCI√ì.
        
        Returns:
            AnalyticsView refaktor√°lt p√©ld√°ny vagy None
        """
        return self.analytics_panel
    
    def focus_analytics_panel(self) -> None:
        """
        üìä Analytics panel f√≥kuszba helyez√©se - REFAKTOR√ÅLT FUNKCI√ì.
        """
        self._switch_view("analytics")
    
    def get_map_view(self) -> Optional[MapView]:
        """
        üó∫Ô∏è Map view referencia lek√©rdez√©se - √öJ FUNKCI√ì.
        
        Returns:
            MapView p√©ld√°ny vagy None
        """
        return self.map_view
    
    def focus_map_view(self) -> None:
        """
        üó∫Ô∏è Map view f√≥kuszba helyez√©se - √öJ FUNKCI√ì.
        """
        self._switch_view("map_view")
    
    def get_hungarian_map_tab(self) -> Optional[HungarianMapTab]:
        """
        üå§Ô∏è Hungarian Map Tab referencia lek√©rdez√©se - √öJ FUNKCI√ì.
        
        Returns:
            HungarianMapTab p√©ld√°ny vagy None
        """
        return self.hungarian_map_tab
    
    def focus_hungarian_map_tab(self) -> None:
        """
        üå§Ô∏è Hungarian Map Tab f√≥kuszba helyez√©se - √öJ FUNKCI√ì.
        """
        self._switch_view("map_view")
    
    def get_trend_analytics_tab(self) -> Optional[TrendAnalyticsTab]:
        """
        üìà Trend Analytics tab referencia lek√©rdez√©se - √öJ FUNKCI√ì.
        
        Returns:
            TrendAnalyticsTab professional p√©ld√°ny vagy None
        """
        return self.trend_analytics_tab
    
    def focus_trend_analytics_tab(self) -> None:
        """
        üìà Trend Analytics tab f√≥kuszba helyez√©se - √öJ FUNKCI√ì.
        """
        self._switch_view("trend_analysis")


# Export
__all__ = ['MainWindow']analysis_completed.connect(debug_analytics_analysis_completed)
            # self.analytics_panel.