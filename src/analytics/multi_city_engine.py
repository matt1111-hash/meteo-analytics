#!/usr/bin/env python3
"""
Multi-City Analytics Engine - Glob√°lis id≈ëj√°r√°s elemz√©s (NULL-SAFE & DATA TRANSFORM FIXED v2.7 - R√âGI√ì SZ≈∞R√âS JAV√çTVA!)
Global Weather Analyzer projekt

F√°jl: src/analytics/multi_city_engine.py
C√©l: T√∂bbv√°ros id≈ëj√°r√°si elemz√©s koordin√°l√°sa
- DUAL-API T√ÅMOGAT√ÅS (Open-Meteo + Meteostat)
- Orsz√°gv√°laszt√°s (Magyarorsz√°g, Eur√≥pa, Glob√°lis)
- BATCH PROCESSING - robusztus p√°rhuzamos feldolgoz√°s
- PROGRESS TRACKING - real-time feedback
- FALLBACK STRATEGY - hib√°s v√°rosok kihagy√°sa

üîß KRITIKUS JAV√çT√ÅSOK v2.7.0:
- ‚úÖ R√âGI√ì SZ≈∞R√âS IMPLEMENT√ÅLVA: get_cities_for_region() most m√°r VAL√ìDI region√°lis sz≈±r√©st csin√°l
- ‚úÖ HUNGARIAN_REGIONAL_MAPPING: 7 statisztikai r√©gi√≥ ‚Üí megy√©k mapping
- ‚úÖ "√âszak-Magyarorsz√°g" ‚Üí Borsod-Aba√∫j-Zempl√©n, Heves, N√≥gr√°d megy√©k sz≈±r√©se
- ‚úÖ Database query optimaliz√°l√°s: megye alap√∫ WHERE felt√©tel
- ‚úÖ R√âGI√ì MAPPING KIEG√âSZ√çTVE: "√âszak-Magyarorsz√°g", "D√©l-Magyarorsz√°g", "K√∂z√©p-Magyarorsz√°g", stb.
- ‚úÖ ERROR HANDLING JAV√çTVA: analyze_multi_city() mindig AnalyticsResult objektumot ad vissza dict helyett
- ‚úÖ RESOLVE_REGION_NAME CATCH: Exception eset√©n fallback logic √©rtelmezhetetlen r√©gi√≥khoz
- ‚úÖ MEGY√âK T√ÅMOGAT√ÅSA: 19 magyar megye + Budapest mapping hozz√°adva
- ‚úÖ NONE-SAFE STATISZTIK√ÅK: statistics.mean/min/max helyett safe_ f√ºggv√©nyek
- ‚úÖ ADAT TRANSZFORM√ÅCI√ìS HIBA JAV√çTVA: A motor most m√°r a UI √°ltal v√°rt `AnalyticsResult` √©s `CityWeatherResult` objektumokat adja vissza.
- ‚úÖ 0.0¬∞C HIBA JAV√çTVA: A helyes metrika √©rt√©k (`temperature_2m_max` stb.) most m√°r beker√ºl a `value` mez≈ëbe.
- ‚úÖ STATISZTIKAI HIBA JAV√çTVA: A statisztik√°k a teljes, sikeresen feldolgozott adathalmazon sz√°mol√≥dnak.
- ‚úÖ NULL-safe sorting logic 
- ‚úÖ Type-safe value comparisons
- ‚úÖ MAX_CITIES PARAM√âTER T√ÅMOGAT√ÅS HOZZ√ÅADVA - BACKWARD COMPATIBLE!
- ‚úÖ COUNTRY CODE MAPPING: HU ‚Üí Hungary, EU ‚Üí Europe, GLOBAL ‚Üí Global
- ‚úÖ TypeError: '>' not supported between instances of 'NoneType' and 'float' JAV√çTVA
- üî• QUICKTYPE ENUM JAV√çT√ÅS: SINGLE_LOCATION/MULTI_CITY/COMPARISON ‚Üí WEATHER_COMPARISON/TEMPERATURE_MAX
"""

import sqlite3
import logging
import asyncio
from pathlib import Path
from typing import Dict, List, Optional, Tuple, Any, Union
from datetime import datetime, date, timedelta
from dataclasses import dataclass, asdict
from concurrent.futures import ThreadPoolExecutor, as_completed
import statistics
import time
import json
import sys

# üîß KRITIKUS JAV√çT√ÅS: Szabv√°nyos modellek import√°l√°sa a UI kompatibilit√°shoz
from ..data.models import AnalyticsResult, CityWeatherResult, AnalyticsQuestion
from ..data.enums import RegionScope, AnalyticsMetric, QuestionType, DataSource

# Logging be√°ll√≠t√°s
logger = logging.getLogger(__name__)


# üîß NONE-SAFE HELPER F√úGGV√âNYEK (MULTI-CITY ENGINE VERZI√ì)
def safe_statistics_mean(values: List[Union[float, int, None]]) -> Optional[float]:
    """None-safe statistics.mean replacement"""
    if not values:
        return None
    clean_values = [v for v in values if v is not None and isinstance(v, (int, float))]
    if not clean_values:
        return None
    try:
        return statistics.mean(clean_values)
    except statistics.StatisticsError:
        return None


def safe_statistics_median(values: List[Union[float, int, None]]) -> Optional[float]:
    """None-safe statistics.median replacement"""
    if not values:
        return None
    clean_values = [v for v in values if v is not None and isinstance(v, (int, float))]
    if not clean_values:
        return None
    try:
        return statistics.median(clean_values)
    except statistics.StatisticsError:
        return None


def safe_statistics_stdev(values: List[Union[float, int, None]]) -> Optional[float]:
    """None-safe statistics.stdev replacement"""
    if not values:
        return None
    clean_values = [v for v in values if v is not None and isinstance(v, (int, float))]
    if len(clean_values) < 2:
        return 0.0
    try:
        return statistics.stdev(clean_values)
    except statistics.StatisticsError:
        return 0.0


def safe_min_max(values: List[Union[float, int, None]]) -> Tuple[Optional[float], Optional[float]]:
    """None-safe min √©s max sz√°m√≠t√°s egyben"""
    if not values:
        return None, None
    clean_values = [v for v in values if v is not None and isinstance(v, (int, float))]
    if not clean_values:
        return None, None
    try:
        return min(clean_values), max(clean_values)
    except (ValueError, TypeError):
        return None, None


@dataclass
class MultiCityQuery:
    """
    ‚úÖ Multi-city analytics query strukt√∫ra.
    
    Analytics panel √°ltal haszn√°lt query objektum multi-city elemz√©sekhez.
    """
    query_type: str
    region: str
    date: str
    max_cities: int = 50
    limit: Optional[int] = None
    
    # üîß KRITIKUS JAV√çT√ÅS: AnalyticsQuestion objektum t√°rol√°sa
    question: Optional[AnalyticsQuestion] = None
    region_scope: Optional[RegionScope] = None


@dataclass
class CityWeatherData:
    """Egy v√°ros id≈ëj√°r√°si adatai (DUAL-API KOMPATIBILIS) - BELS≈ê HASZN√ÅLATRA"""
    city: str
    country: str
    country_code: str
    lat: float
    lon: float
    population: Optional[int] = None
    
    date: Optional[str] = None
    temperature_2m_max: Optional[float] = None
    temperature_2m_min: Optional[float] = None
    temperature_2m_mean: Optional[float] = None
    precipitation_sum: Optional[float] = None
    windspeed_10m_max: Optional[float] = None
    windgusts_10m_max: Optional[float] = None
    
    meteostat_station_id: Optional[str] = None
    data_quality_score: Optional[float] = None # üîß FIX: int -> float
    
    data_source: str = "dual-api"
    fetch_timestamp: Optional[str] = None
    fetch_success: bool = True
    error_message: Optional[str] = None
    retry_count: int = 0
    
    temperature_range: Optional[float] = None


class MultiCityEngine:
    """
    Multi-city id≈ëj√°r√°s elemz√©s koordin√°tor (DUAL-API CLEAN + NULL-SAFE + DATA TRANSFORM FIXED + R√âGI√ì/MEGYE MAPPING TELJES + R√âGI√ì SZ≈∞R√âS JAV√çTVA!)
    
    Felel≈ëss√©gek:
    - DUAL-API ROUTING
    - Orsz√°gv√°laszt√°s kezel√©se
    - BATCH PROCESSING
    - PROGRESS TRACKING
    - ‚úÖ ADAT TRANSZFORM√ÅCI√ì (CityWeatherData -> CityWeatherResult)
    - ‚úÖ NONE-SAFE STATISZTIK√ÅK
    - ‚úÖ R√âGI√ì/MEGYE MAPPING TELJES (19 megye + 7 r√©gi√≥)
    - ‚úÖ ERROR HANDLING JAV√çTVA (mindig AnalyticsResult objektum)
    - üîß KRITIKUS JAV√çT√ÅS: VAL√ìDI REGION√ÅLIS SZ≈∞R√âS IMPLEMENT√ÅLVA!
    """
    
    # üîß KRITIKUS JAV√çT√ÅS: MAGYAR REGION√ÅLIS SZ≈∞R√âS MAPPING HOZZ√ÅADVA!
    HUNGARIAN_REGIONAL_MAPPING = {
        # 7 STATISZTIKAI R√âGI√ì ‚Üí MEGY√âK MAPPING (KSH HIVATALOS)
        "√âszak-Magyarorsz√°g": ["Borsod-Aba√∫j-Zempl√©n", "Heves", "N√≥gr√°d"],
        "K√∂z√©p-Magyarorsz√°g": ["Budapest", "Pest"],
        "√âszak-Alf√∂ld": ["Hajd√∫-Bihar", "J√°sz-Nagykun-Szolnok", "Szabolcs-Szatm√°r-Bereg"],
        "D√©l-Alf√∂ld": ["B√°cs-Kiskun", "B√©k√©s", "Csongr√°d-Csan√°d"],
        "D√©l-Dun√°nt√∫l": ["Baranya", "Somogy", "Tolna"],
        "Nyugat-Dun√°nt√∫l": ["Gy≈ër-Moson-Sopron", "Vas", "Zala"],
        "K√∂z√©p-Dun√°nt√∫l": ["Fej√©r", "Kom√°rom-Esztergom", "Veszpr√©m"],
        
        # MEGY√âK EGYEDI KEZEL√âSE (ha valaki konkr√©t megy√©t v√°laszt)
        "Budapest": ["Budapest"],
        "Pest": ["Pest"],
        "Borsod-Aba√∫j-Zempl√©n": ["Borsod-Aba√∫j-Zempl√©n"],
        "Heves": ["Heves"],
        "N√≥gr√°d": ["N√≥gr√°d"],
        "Hajd√∫-Bihar": ["Hajd√∫-Bihar"],
        "J√°sz-Nagykun-Szolnok": ["J√°sz-Nagykun-Szolnok"],
        "Szabolcs-Szatm√°r-Bereg": ["Szabolcs-Szatm√°r-Bereg"],
        "B√°cs-Kiskun": ["B√°cs-Kiskun"],
        "B√©k√©s": ["B√©k√©s"],
        "Csongr√°d-Csan√°d": ["Csongr√°d-Csan√°d"],
        "Baranya": ["Baranya"],
        "Somogy": ["Somogy"],
        "Tolna": ["Tolna"],
        "Gy≈ër-Moson-Sopron": ["Gy≈ër-Moson-Sopron"],
        "Vas": ["Vas"],
        "Zala": ["Zala"],
        "Fej√©r": ["Fej√©r"],
        "Kom√°rom-Esztergom": ["Kom√°rom-Esztergom"],
        "Veszpr√©m": ["Veszpr√©m"]
    }
    
    # üîß KRITIKUS JAV√çT√ÅS: TELJES R√âGI√ì/MEGYE MAPPING HOZZ√ÅADVA!
    REGION_CODE_MAPPING = {
        # Alap√©rtelmezett mappingek
        "HU": "Hungary", 
        "EU": "Europe", 
        "GLOBAL": "Global", 
        "WORLD": "Global",
        "country": "Hungary", 
        "continent": "Europe", 
        "global": "Global",
        "hungary": "Hungary", 
        "europe": "Europe", 
        "magyarorsz√°g": "Hungary", 
        "eur√≥pa": "Europe",
        
        # üîß KRITIKUS: MAGYAR R√âGI√ìK (7 statisztikai r√©gi√≥)
        "K√∂z√©p-Magyarorsz√°g": "Hungary",
        "√âszak-Magyarorsz√°g": "Hungary",  # ‚Üê EZ HI√ÅNYZOTT! 
        "√âszak-Alf√∂ld": "Hungary",
        "D√©l-Alf√∂ld": "Hungary", 
        "D√©l-Dun√°nt√∫l": "Hungary",
        "Nyugat-Dun√°nt√∫l": "Hungary",
        "K√∂z√©p-Dun√°nt√∫l": "Hungary",
        
        # üîß KRITIKUS: MAGYAR MEGY√âK (19 megye + Budapest)
        "Budapest": "Hungary",
        "Pest": "Hungary",
        "Fej√©r": "Hungary", 
        "Kom√°rom-Esztergom": "Hungary",
        "Veszpr√©m": "Hungary",
        "Gy≈ër-Moson-Sopron": "Hungary",
        "Vas": "Hungary", 
        "Zala": "Hungary",
        "Baranya": "Hungary",
        "Somogy": "Hungary", 
        "Tolna": "Hungary",
        "Borsod-Aba√∫j-Zempl√©n": "Hungary",
        "Heves": "Hungary",
        "N√≥gr√°d": "Hungary", 
        "Hajd√∫-Bihar": "Hungary",
        "J√°sz-Nagykun-Szolnok": "Hungary",
        "Szabolcs-Szatm√°r-Bereg": "Hungary",
        "B√°cs-Kiskun": "Hungary", 
        "B√©k√©s": "Hungary",
        "Csongr√°d-Csan√°d": "Hungary",
        
        # Alternat√≠v √≠r√°sm√≥dok
        "k√∂z√©p-magyarorsz√°g": "Hungary",
        "√©szak-magyarorsz√°g": "Hungary",
        "√©szak-alf√∂ld": "Hungary", 
        "d√©l-alf√∂ld": "Hungary",
        "d√©l-dun√°nt√∫l": "Hungary",
        "nyugat-dun√°nt√∫l": "Hungary", 
        "k√∂z√©p-dun√°nt√∫l": "Hungary",
        "budapest": "Hungary",
        "pest megye": "Hungary",
        "fej√©r megye": "Hungary"
    }
    
    REGIONS = {
        "Hungary": {"name": "Magyarorsz√°g", "country_codes": ["HU"], "max_cities": 165, "batch_size": 8, "rate_limit_delay": 0.2},
        "Europe": {"name": "Eur√≥pa", "country_codes": ["AT", "BE", "BG", "HR", "CY", "CZ", "DK", "EE", "FI", "FR", "DE", "GR", "HU", "IE", "IT", "LV", "LT", "LU", "MT", "NL", "PL", "PT", "RO", "SK", "SI", "ES", "SE", "CH", "GB", "NO", "IS", "RS", "BA", "MK", "AL", "MD", "UA", "BY", "RU"], "max_cities": 150, "batch_size": 4, "rate_limit_delay": 0.4},
        "Global": {"name": "Glob√°lis", "country_codes": [], "max_cities": 160, "batch_size": 8, "rate_limit_delay": 0.5},
    }
    
    QUERY_TYPES = {
        "hottest_today": {"name": "Legmelegebb ma", "metric": "temperature_2m_max", "unit": "¬∞C", "sort_desc": True, "question_template": "Hol volt ma a legmelegebb {region}ban?", "metric_enum": AnalyticsMetric.TEMPERATURE_2M_MAX},
        "coldest_today": {"name": "Leghidegebb ma", "metric": "temperature_2m_min", "unit": "¬∞C", "sort_desc": False, "question_template": "Hol volt ma a leghidegebb {region}ban?", "metric_enum": AnalyticsMetric.TEMPERATURE_2M_MIN},
        "wettest_today": {"name": "Legcsapad√©kosabb ma", "metric": "precipitation_sum", "unit": "mm", "sort_desc": True, "question_template": "Hol esett ma a legt√∂bb csapad√©k {region}ban?", "metric_enum": AnalyticsMetric.PRECIPITATION_SUM},
        "windiest_today": {"name": "Legszelesebb ma", "metric": "windgusts_10m_max", "unit": "km/h", "sort_desc": True, "question_template": "Hol f√∫jt ma a leger≈ësebb sz√©l {region}ban?", "metric_enum": AnalyticsMetric.WINDSPEED_10M_MAX},
        "temperature_range": {"name": "Legnagyobb h≈ëing√°s", "metric": "temperature_range", "unit": "¬∞C", "sort_desc": True, "question_template": "Hol volt ma a legnagyobb h≈ëing√°s {region}ban?", "metric_enum": AnalyticsMetric.TEMPERATURE_RANGE}
    }
    
    def __init__(self, db_path: str = "src/data/cities.db"):
        self.db_path = Path(db_path)
        self.max_workers = 8
        self.request_timeout = 90
        self.max_retries = 2
        self.retry_delay = 3.0
        
        try:
            from src.data.weather_client import WeatherClient
            self.weather_client = WeatherClient()
            logger.info("‚úÖ WeatherClient dual-API integr√°ci√≥ sikeres")
        except ImportError as e:
            logger.warning(f"‚ùå WeatherClient import hiba: {e}")
            self.weather_client = None
        
        logger.info("üöÄ Multi-city engine inicializ√°lva (R√âGI√ì SZ≈∞R√âS JAV√çTVA v2.7)")

    def execute_analytics_query(self, query: MultiCityQuery, progress_callback: Optional[callable] = None) -> AnalyticsResult:
        return self.analyze_multi_city(
            query.query_type,
            query.region,
            query.date,
            limit=query.limit or query.max_cities,
            question=query.question
        )

    def get_cities_for_region(self, region: str, limit: Optional[int] = None, max_cities: Optional[int] = None) -> List[Dict[str, Any]]:
        """
        üîß KRITIKUS JAV√çT√ÅS: VAL√ìDI REGION√ÅLIS SZ≈∞R√âS IMPLEMENT√ÅLVA!
        
        R√âGI VISELKED√âS:
        - "√âszak-Magyarorsz√°g" ‚Üí "Hungary" ‚Üí √ñSSZES magyar v√°ros (165)
        
        √öJ VISELKED√âS:
        - "√âszak-Magyarorsz√°g" ‚Üí "Hungary" + region√°lis sz≈±r√©s ‚Üí Csak Borsod-Aba√∫j-Zempl√©n, Heves, N√≥gr√°d megy√©k v√°rosai
        
        Args:
            region: Eredeti r√©gi√≥ n√©v (pl. "√âszak-Magyarorsz√°g")
            limit: Eredm√©nyek limitje
            max_cities: Maximum v√°rosok sz√°ma
            
        Returns:
            Sz≈±rt v√°rosok list√°ja (region√°lis vagy teljes)
        """
        original_region = region  # Eredeti r√©gi√≥ n√©v t√°rol√°sa
        
        try:
            mapped_region = self.resolve_region_name(region)
        except ValueError as e:
            logger.error(f"‚ùå Invalid region: {region} - {e}")
            return []
            
        region_config = self.REGIONS[mapped_region]
        country_codes = region_config["country_codes"]
        final_limit = max_cities or limit or region_config["max_cities"]
        
        logger.info(f"üîß get_cities_for_region JAV√çTVA: original='{original_region}' ‚Üí mapped='{mapped_region}', limit={final_limit}")
        
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                query_str = ""
                params = []
                
                base_select = 'SELECT city, country, country_code, lat, lon, population, meteostat_station_id, data_quality_score FROM cities'
                
                if mapped_region == "Global":
                    query_str = f'{base_select} WHERE population IS NOT NULL AND population > 100000 ORDER BY population DESC LIMIT ?'
                    params = [final_limit]
                    
                elif mapped_region == "Hungary":
                    # üîß KRITIKUS JAV√çT√ÅS: REGION√ÅLIS SZ≈∞R√âS HOZZ√ÅAD√ÅSA!
                    
                    # 1. Ellen≈ërizz√ºk, hogy az eredeti r√©gi√≥ neve megvan-e a mapping-ben
                    if original_region in self.HUNGARIAN_REGIONAL_MAPPING:
                        # REGION√ÅLIS SZ≈∞R√âS - csak a megadott r√©gi√≥ megy√©i
                        target_counties = self.HUNGARIAN_REGIONAL_MAPPING[original_region]
                        logger.info(f"üéØ REGION√ÅLIS SZ≈∞R√âS: '{original_region}' ‚Üí {target_counties}")
                        
                        # Admin_name mez≈ë alap√∫ sz≈±r√©s (amely a megy√©ket tartalmazza)
                        placeholders = ','.join(['?' for _ in target_counties])
                        query_str = f'{base_select} WHERE country_code = "HU" AND admin_name IN ({placeholders}) ORDER BY CASE WHEN population IS NOT NULL THEN population ELSE 0 END DESC LIMIT ?'
                        params = target_counties + [final_limit]
                        
                    else:
                        # ORSZ√ÅGOS SZ≈∞R√âS - √∂sszes magyar v√°ros (eredeti viselked√©s)
                        logger.info(f"üåç ORSZ√ÅGOS SZ≈∞R√âS: '{original_region}' nincs region√°lis mapping-ben")
                        query_str = f'{base_select} WHERE country_code = "HU" ORDER BY CASE WHEN population IS NOT NULL THEN population ELSE 0 END DESC LIMIT ?'
                        params = [final_limit]
                        
                else:  # Europe √©s egy√©b r√©gi√≥k
                    placeholders = ','.join(['?' for _ in country_codes])
                    query_str = f'{base_select} WHERE country_code IN ({placeholders}) AND population IS NOT NULL AND population > 50000 ORDER BY CASE WHEN population IS NOT NULL THEN population ELSE 0 END DESC LIMIT ?'
                    params = country_codes + [final_limit]
                
                logger.debug(f"üîß SQL QUERY: {query_str}")
                logger.debug(f"üîß SQL PARAMS: {params}")
                
                cursor.execute(query_str, params)
                results = cursor.fetchall()
                
                cities = [{
                    'city': row[0], 'country': row[1], 'country_code': row[2],
                    'lat': row[3], 'lon': row[4], 'population': row[5],
                    'meteostat_station_id': row[6], 'data_quality_score': row[7]
                } for row in results]
                
                if original_region in self.HUNGARIAN_REGIONAL_MAPPING:
                    logger.info(f"‚úÖ REGION√ÅLIS lek√©rdez√©s: {len(cities)} v√°ros {original_region} r√©gi√≥b√≥l ({self.HUNGARIAN_REGIONAL_MAPPING[original_region]})")
                else:
                    logger.info(f"‚úÖ ORSZ√ÅGOS lek√©rdez√©s: {len(cities)} v√°ros {mapped_region} r√©gi√≥b√≥l")
                
                return cities
                
        except Exception as e:
            logger.error(f"‚ùå Hiba v√°rosok lek√©rdez√©s√©n√©l: {e}", exc_info=True)
            return []

    def analyze_multi_city(self, query_type: str, region: str, date: str, limit: Optional[int] = None, question: Optional[AnalyticsQuestion] = None) -> AnalyticsResult:
        """
        üîß KRITIKUS JAV√çT√ÅS: Multi-city elemz√©s - TELJES ADAT TRANSZFORM√ÅCI√ìVAL + ERROR HANDLING + NONE-SAFE + R√âGI√ì/MEGYE MAPPING JAV√çTVA + LIMIT TYPE FIX + R√âGI√ì SZ≈∞R√âS JAV√çTVA!
        
        Args:
            query_type: Lek√©rdez√©s t√≠pusa
            region: R√©gi√≥ (most m√°r t√°mogatja az "√âszak-Magyarorsz√°g" stb. r√©gi√≥kat!)
            date: D√°tum
            limit: Eredm√©nyek limitje (int vagy None)
            question: AnalyticsQuestion objektum
            
        Returns:
            AnalyticsResult objektum (UI kompatibilis) - MINDIG, hiba eset√©n is!
        """
        start_time = time.time()
        
        try:
            if query_type not in self.QUERY_TYPES:
                logger.error(f"‚ùå Ismeretlen lek√©rdez√©s t√≠pus: {query_type}")
                return self._create_empty_analytics_result(question, f"Ismeretlen lek√©rdez√©s t√≠pus: {query_type}")
            
            # üîß KRITIKUS JAV√çT√ÅS: Region mapping hib√°k kezel√©se
            try:
                mapped_region = self.resolve_region_name(region)
                logger.info(f"‚úÖ R√©gi√≥ mapping sikeres: '{region}' ‚Üí '{mapped_region}'")
            except ValueError as e:
                logger.error(f"‚ùå R√©gi√≥ mapping hiba: {e}")
                return self._create_empty_analytics_result(question, f"Ismeretlen r√©gi√≥: {region}")
            
            query_config = self.QUERY_TYPES[query_type]
            
            logger.info(f"üöÄ Multi-city elemz√©s kezd√©se (R√âGI√ì SZ≈∞R√âS JAV√çTVA v2.7): {query_type} - {region} - {date}")
            
            # üîß KRITIKUS JAV√çT√ÅS: V√°rosok lek√©rdez√©se REGION√ÅLIS SZ≈∞R√âSSEL!
            # Az eredeti r√©gi√≥ nevet adjuk √°t, nem a mapped-et!
            cities = self.get_cities_for_region(region, max_cities=self.REGIONS[mapped_region]["max_cities"])
            
            if not cities:
                logger.error("‚ùå Nincsenek v√°rosok a lek√©rdez√©shez")
                return self._create_empty_analytics_result(question, "Nincsenek v√°rosok a lek√©rdez√©shez")
            
            # Id≈ëj√°r√°si adatok lek√©rdez√©se
            weather_data = self._fetch_weather_data_dual_api_batch(cities, date, mapped_region)
            
            # Eredm√©nyek feldolgoz√°sa √©s rendez√©se
            processed_data = self._process_weather_results(weather_data, query_type)
            
            logger.info(f"üîß PROCESSED DATA: {len(processed_data)} cities processed")
            
            # üîß KRITIKUS JAV√çT√ÅS: Adat transzform√°ci√≥ (CityWeatherData -> CityWeatherResult)
            transformed_results = []
            for i, city_data in enumerate(processed_data):
                if city_data.fetch_success:
                    try:
                        result_item = self._transform_to_city_weather_result(city_data, query_type)
                        result_item.rank = i + 1
                        transformed_results.append(result_item)
                    except Exception as e:
                        logger.error(f"‚ùå Transform error for {city_data.city}: {e}")
                        continue

            logger.info(f"üîß TRANSFORMED RESULTS: {len(transformed_results)} cities transformed")

            # üîß KRITIKUS JAV√çT√ÅS: Statisztika sz√°m√≠t√°sa a TELJES sikeres adathalmazon (NONE-SAFE)
            stats = self._calculate_statistics_for_results_none_safe(transformed_results)

            # üîß KRITIKUS JAV√çT√ÅS: Helyes AnalyticsResult objektum l√©trehoz√°sa
            final_question = question
            if not final_question:
                try:
                    final_question = AnalyticsQuestion(
                        question_text=query_config["question_template"].format(region=self.REGIONS[mapped_region]["name"]),
                        question_type=QuestionType.WEATHER_COMPARISON,  # üî• FIX: SINGLE_LOCATION ‚Üí WEATHER_COMPARISON
                        region_scope=RegionScope.COUNTRY if mapped_region == "Hungary" else RegionScope.CONTINENT,
                        metric=query_config["metric_enum"]
                    )
                except Exception as e:
                    logger.error(f"‚ùå Question creation error: {e}")
                    # Fallback question
                    final_question = AnalyticsQuestion(
                        question_text="Multi-city analytics",
                        question_type=QuestionType.TEMPERATURE_MAX,  # üî• FIX: SINGLE_LOCATION ‚Üí TEMPERATURE_MAX  
                        region_scope=RegionScope.COUNTRY,
                        metric=AnalyticsMetric.TEMPERATURE_2M_MAX
                    )

            # üîß KRITIKUS JAV√çT√ÅS: LIMIT TYPE VALIDATION √âS SAFE SLICING
            safe_limit = None
            if limit is not None:
                try:
                    safe_limit = int(limit)  # Type conversion biztos√≠t√°sa
                    if safe_limit <= 0:
                        safe_limit = None  # Invalid limit eset√©n nincs limit√°l√°s
                except (TypeError, ValueError):
                    logger.warning(f"‚ö†Ô∏è Invalid limit type: {type(limit)}, value: {limit}")
                    safe_limit = None

            # Safe slicing with proper type checking
            if safe_limit is not None and safe_limit > 0:
                limited_results = transformed_results[:safe_limit]
                logger.info(f"üîß Limited results: {len(limited_results)}/{len(transformed_results)} (limit: {safe_limit})")
            else:
                limited_results = transformed_results
                logger.info(f"üîß No limit applied: {len(limited_results)} results")

            try:
                analytics_result = AnalyticsResult(
                    question=final_question,
                    city_results=limited_results,
                    execution_time=time.time() - start_time,
                    total_cities_found=len(cities),
                    data_sources_used=[DataSource.AUTO], # WeatherClient kezeli
                    statistics=stats,
                    provider_statistics=self._get_provider_stats(weather_data)
                )
                
                logger.info(f"‚úÖ Multi-city elemz√©s befejezve (R√âGI√ì SZ≈∞R√âS JAV√çTVA v2.7): {len(limited_results)}/{len(cities)} eredm√©ny, {len(transformed_results)} siker")
                
                return analytics_result
                
            except Exception as e:
                logger.error(f"‚ùå AnalyticsResult creation error: {e}")
                return self._create_empty_analytics_result(final_question, f"Eredm√©ny objektum l√©trehoz√°si hiba: {e}")
            
        except Exception as e:
            logger.error(f"‚ùå CRITICAL ERROR in analyze_multi_city: {e}", exc_info=True)
            return self._create_empty_analytics_result(question, f"Kritikus hiba a multi-city elemz√©sben: {e}")

    def _get_provider_stats(self, weather_data: List[CityWeatherData]) -> Dict[str, int]:
        """Provider statisztik√°k kinyer√©se."""
        stats = {}
        for data in weather_data:
            if data.fetch_success:
                stats[data.data_source] = stats.get(data.data_source, 0) + 1
        return stats

    def _transform_to_city_weather_result(self, city_data: CityWeatherData, query_type: str) -> CityWeatherResult:
        """
        üîß KRITIKUS √öJ MET√ìDUS: √Åtalak√≠tja a bels≈ë CityWeatherData-t a UI-kompatibilis CityWeatherResult-t√°.
        
        Ez a met√≥dus jav√≠tja a "0.0¬∞C" hib√°t azzal, hogy:
        1. Kiveszi a specifikus metrika √©rt√©ket a CityWeatherData-b√≥l
        2. Behelyezi a `value` mez≈ëbe
        3. L√©trehozza a teljes CityWeatherResult objektumot
        
        Args:
            city_data: Bels≈ë weather data objektum
            query_type: Lek√©rdez√©s t√≠pusa
            
        Returns:
            UI kompatibilis CityWeatherResult objektum
        """
        query_config = self.QUERY_TYPES[query_type]
        metric_name = query_config["metric"]
        metric_enum = query_config["metric_enum"]
        
        # A specifikus metrika √©rt√©k kinyer√©se
        if metric_name == "temperature_range":
            metric_value = city_data.temperature_range
        else:
            metric_value = getattr(city_data, metric_name, None)
        
        # üîß CRITICAL DEBUG: Log what we're getting
        logger.info(f"üîß TRANSFORM DEBUG: {city_data.city} - {metric_name}={metric_value} (type: {type(metric_value)})")
        logger.info(f"üîß RAW DATA: temp_max={city_data.temperature_2m_max}, temp_min={city_data.temperature_2m_min}, precip={city_data.precipitation_sum}")
        
        # üîß NONE-SAFE value conversion - STRICTER VALIDATION
        if metric_value is not None and metric_value != 0:
            final_value = float(metric_value)
        else:
            # üîß FALLBACK: Try to get ANY valid weather data
            fallback_value = (city_data.temperature_2m_max or 
                            city_data.temperature_2m_min or 
                            city_data.precipitation_sum or 
                            city_data.windspeed_10m_max or 0.0)
            final_value = float(fallback_value) if fallback_value is not None else 0.0
            logger.warning(f"‚ö†Ô∏è NULL metric value for {city_data.city}, using fallback: {fallback_value}")
        
        # CityWeatherResult objektum l√©trehoz√°sa
        result = CityWeatherResult(
            city_name=city_data.city,
            country=city_data.country,
            country_code=city_data.country_code,
            latitude=city_data.lat,
            longitude=city_data.lon,
            value=final_value,  # üîß KRITIKUS: Ez jav√≠tja a 0.0¬∞C hib√°t!
            metric=metric_enum,
            date=datetime.strptime(city_data.date, "%Y-%m-%d").date(),
            population=city_data.population,
            quality_score=city_data.data_quality_score if city_data.data_quality_score is not None else 0.0
        )
        
        logger.info(f"üîß Transzform√°ci√≥: {city_data.city} - {metric_name}={metric_value} ‚Üí value={final_value}")
        
        return result
        
    def _fetch_weather_data_dual_api_batch(self, cities: List[Dict[str, Any]], date: str, region: str) -> List[CityWeatherData]:
        """P√°rhuzamos id≈ëj√°r√°s lek√©rdez√©s (DUAL-API BATCH PROCESSING)."""
        weather_data = []
        if not self.weather_client:
            logger.error("‚ùå WeatherClient nem el√©rhet≈ë")
            return [self._create_empty_city_data(city) for city in cities]

        region_config = self.REGIONS[region]
        batch_size = region_config["batch_size"]
        rate_limit_delay = region_config["rate_limit_delay"]
        
        batches = [cities[i:i + batch_size] for i in range(0, len(cities), batch_size)]
        logger.info(f"üîÑ Dual-API batch processing: {len(batches)} batch, {batch_size} v√°ros/batch")
        
        for batch_idx, batch in enumerate(batches):
            batch_start_time = time.time()
            print(f"üìä Batch {batch_idx + 1}/{len(batches)}: {len(batch)} v√°ros (DUAL-API)...", end="", flush=True)
            
            batch_results = self._process_dual_api_batch(batch, date, rate_limit_delay)
            weather_data.extend(batch_results)
            
            batch_time = time.time() - batch_start_time
            successful_in_batch = len([r for r in batch_results if r.fetch_success])
            
            sources_in_batch = self._get_provider_stats(batch_results)
            source_info = ", ".join([f"{k}: {v}" for k, v in sources_in_batch.items()])
            print(f" ‚úÖ {successful_in_batch}/{len(batch)} siker ({source_info}) ({batch_time:.1f}s)")
            
            if batch_idx < len(batches) - 1:
                time.sleep(rate_limit_delay)
        
        print(f"üéâ Dual-API batch processing befejezve: {len(weather_data)} v√°ros")
        return weather_data

    def _process_dual_api_batch(self, batch: List[Dict[str, Any]], date: str, rate_limit_delay: float) -> List[CityWeatherData]:
        """Batch feldolgoz√°sa ThreadPoolExecutor-ral."""
        batch_results = []
        with ThreadPoolExecutor(max_workers=self.max_workers) as executor:
            futures = {executor.submit(self._fetch_single_city_weather_dual_api, city, date): city for city in batch}
            
            for future in as_completed(futures):
                city = futures[future]
                try:
                    city_data = future.result(timeout=self.request_timeout)
                    batch_results.append(city_data)
                except Exception as e:
                    logger.error(f"‚ùå Hiba a v√°ros feldolgoz√°s√°n√°l ({city.get('city')}): {e}", exc_info=True)
                    batch_results.append(self._create_empty_city_data(city, str(e)))
        return batch_results

    def _fetch_single_city_weather_dual_api(self, city: Dict[str, Any], date: str) -> CityWeatherData:
        """
        Egyetlen v√°ros DUAL-API lek√©rdez√©se retry logik√°val.
        
        üîß JAV√çT√ÅS: WeatherClient visszat√©r√©si √©rt√©k√©nek helyes kezel√©se
        """
        last_error = None
        for attempt in range(self.max_retries):
            try:
                # WeatherClient h√≠v√°s - tuple visszat√©r√©si √©rt√©k kezel√©se
                weather_result = self.weather_client.get_weather_data(city['lat'], city['lon'], date, date)
                
                # Check if result is tuple (weather_data, source) or just weather_data
                if isinstance(weather_result, tuple) and len(weather_result) == 2:
                    weather_data, source = weather_result
                else:
                    weather_data = weather_result
                    source = "auto"
                
                if weather_data and len(weather_data) > 0:
                    daily_data = weather_data[0]
                    temp_max = daily_data.get('temperature_2m_max')
                    temp_min = daily_data.get('temperature_2m_min')
                    
                    # üîß NONE-SAFE h≈ëing√°s sz√°m√≠t√°s
                    temp_range = None
                    if temp_max is not None and temp_min is not None:
                        try:
                            temp_range = temp_max - temp_min
                        except (TypeError, ValueError):
                            temp_range = None

                    return CityWeatherData(
                        city=city['city'], country=city['country'], country_code=city['country_code'],
                        lat=city['lat'], lon=city['lon'], population=city.get('population'),
                        date=date,
                        temperature_2m_max=temp_max, temperature_2m_min=temp_min,
                        temperature_2m_mean=daily_data.get('temperature_2m_mean'),
                        precipitation_sum=daily_data.get('precipitation_sum'),
                        windspeed_10m_max=daily_data.get('windspeed_10m_max'),
                        windgusts_10m_max=daily_data.get('windgusts_10m_max'),
                        meteostat_station_id=city.get('meteostat_station_id'),
                        data_quality_score=city.get('data_quality_score'),
                        data_source=source,
                        fetch_timestamp=datetime.now().isoformat(),
                        fetch_success=True, retry_count=attempt,
                        temperature_range=temp_range
                    )
                else:
                    last_error = f"Nincs id≈ëj√°r√°si adat {city['city']}-hoz"
            except Exception as e:
                last_error = str(e)
                logger.warning(f"‚ö†Ô∏è Hiba a(z) {city['city']} lek√©rdez√©sekor (pr√≥ba: {attempt + 1}): {e}")
                if attempt < self.max_retries - 1:
                    time.sleep(self.retry_delay)
        
        logger.error(f"‚ùå V√©gs≈ë hiba a(z) {city['city']} lek√©rdez√©s√©n√©l: {last_error}")
        return self._create_empty_city_data(city, last_error)

    def _create_empty_city_data(self, city: Dict[str, Any], error_msg: str = "Ismeretlen hiba") -> CityWeatherData:
        """√úres v√°ros adatstrukt√∫ra l√©trehoz√°sa hib√°k eset√©n."""
        return CityWeatherData(
            city=city.get('city', 'Ismeretlen'), country=city.get('country', 'Ismeretlen'),
            country_code=city.get('country_code', 'XX'), lat=city.get('lat', 0.0), lon=city.get('lon', 0.0),
            population=city.get('population'), data_source="error", fetch_success=False, error_message=error_msg
        )

    def _process_weather_results(self, weather_data: List[CityWeatherData], query_type: str) -> List[CityWeatherData]:
        """
        Id≈ëj√°r√°si eredm√©nyek feldolgoz√°sa √©s NULL-safe rendez√©se.
        
        üîß EMERGENCY DEBUG: Full logging to find the issue
        """
        logger.info(f"üîß EMERGENCY DEBUG: _process_weather_results called with {len(weather_data)} cities")
        
        query_config = self.QUERY_TYPES[query_type]
        metric = query_config["metric"]
        sort_desc = query_config["sort_desc"]
        
        logger.info(f"üîß EMERGENCY DEBUG: Looking for metric '{metric}' in weather data")
        
        # Log first few cities' data for debugging
        for i, city in enumerate(weather_data[:3]):
            logger.info(f"üîß CITY {i+1}: {city.city} - success={city.fetch_success}")
            logger.info(f"    temp_max={city.temperature_2m_max}, temp_min={city.temperature_2m_min}")
            logger.info(f"    precip={city.precipitation_sum}, wind={city.windspeed_10m_max}")
        
        # üîß NONE-SAFE h≈ëing√°s sz√°m√≠t√°sa a temperature_range query-hez
        if metric == "temperature_range":
            for city_data in weather_data:
                if city_data.fetch_success:
                    temp_max = city_data.temperature_2m_max
                    temp_min = city_data.temperature_2m_min
                    if temp_max is not None and temp_min is not None:
                        try:
                            city_data.temperature_range = temp_max - temp_min
                            logger.info(f"üîß TEMP RANGE: {city_data.city} = {city_data.temperature_range}")
                        except (TypeError, ValueError):
                            city_data.temperature_range = None
                            logger.warning(f"‚ö†Ô∏è TEMP RANGE calc error for {city_data.city}")
        
        # √ârv√©nyes adatok sz≈±r√©se
        valid_data = [d for d in weather_data if d.fetch_success and getattr(d, metric, None) is not None]
        
        logger.info(f"üîß EMERGENCY DEBUG: {len(valid_data)} valid cities with metric '{metric}'")
        
        if not valid_data:
            logger.error(f"‚ùå NO VALID DATA! All cities missing metric '{metric}'")
            # Return first few cities anyway for debugging
            return weather_data[:5]
        
        def get_sort_value(city_data: CityWeatherData) -> float:
            """üîß NONE-SAFE sort key function"""
            value = getattr(city_data, metric, None)
            if value is None: 
                return float('-inf') if sort_desc else float('inf')
            try: 
                return float(value)
            except (ValueError, TypeError): 
                return float('-inf') if sort_desc else float('inf')
        
        try:
            sorted_data = sorted(valid_data, key=get_sort_value, reverse=sort_desc)
        except Exception as e:
            logger.error(f"‚ùå Rendez√©si hiba: {e}", exc_info=True)
            sorted_data = valid_data
        
        logger.info(f"üîß Feldolgozott adatok: {len(sorted_data)} √©rv√©nyes v√°ros {metric} alapj√°n rendezve")
        
        return sorted_data

    def _calculate_statistics_for_results_none_safe(self, results: List[CityWeatherResult]) -> Dict[str, float]:
        """
        üîß KRITIKUS JAV√çT√ÅS: NONE-SAFE statisztik√°k sz√°m√≠t√°sa a transzform√°lt CityWeatherResult list√°b√≥l.
        
        Ez a met√≥dus jav√≠tja a hib√°s statisztik√°kat azzal, hogy:
        1. A TELJES sikeres adathalmazon sz√°mol (nem csak a limit√°lt eredm√©nyeken)
        2. A value mez≈ët haszn√°lja, ami m√°r a helyes metrika √©rt√©ket tartalmazza
        3. ‚úÖ NONE-SAFE: safe_statistics_* f√ºggv√©nyeket haszn√°l statistics.* helyett
        
        Args:
            results: Transzform√°lt CityWeatherResult lista
            
        Returns:
            Statisztikai √©rt√©kek (None-safe)
        """
        # üîß CRITICAL DEBUG: Log all values for debugging
        logger.info(f"üîß NONE-SAFE STATS DEBUG: Analyzing {len(results)} results")
        for i, r in enumerate(results[:5]):  # First 5 for debugging
            logger.info(f"  {i+1}. {r.city_name}: value={r.value} (type: {type(r.value)})")
        
        # üîß NONE-SAFE: Collect all values (including None for safety)
        all_values = [r.value for r in results]
        
        # üîß DEBUG: Log filtering results
        logger.info(f"üîß NONE-SAFE STATS DEBUG: {len(all_values)} total values from {len(results)} results")
        
        if not all_values:
            logger.error(f"‚ùå NONE-SAFE STATS DEBUG: No values at all! Results sample: {[(r.city_name, r.value) for r in results[:3]]}")
            return {}
        
        try:
            # üîß KRITIKUS JAV√çT√ÅS: NONE-SAFE statisztikai m≈±veletek
            mean_val = safe_statistics_mean(all_values)
            median_val = safe_statistics_median(all_values)
            stdev_val = safe_statistics_stdev(all_values)
            min_val, max_val = safe_min_max(all_values)
            
            # Build stats dictionary with None checks
            stats = {}
            
            if mean_val is not None:
                stats["mean"] = mean_val
            if median_val is not None:
                stats["median"] = median_val  
            if stdev_val is not None:
                stats["stdev"] = stdev_val
            if min_val is not None:
                stats["min"] = min_val
            if max_val is not None:
                stats["max"] = max_val
            if min_val is not None and max_val is not None:
                stats["range"] = max_val - min_val
            
            logger.info(f"üìä NONE-SAFE Statisztik√°k: {len(all_values)} √©rt√©kb≈ël - √°tlag: {stats.get('mean', 'N/A')}, tartom√°ny: {stats.get('min', 'N/A')}-{stats.get('max', 'N/A')}")
            
            return stats
            
        except Exception as e:
            logger.error(f"‚ùå NONE-SAFE Hiba a statisztik√°k sz√°m√≠t√°s√°n√°l: {e}", exc_info=True)
            return {}

    def _create_empty_analytics_result(self, question: Optional[AnalyticsQuestion], error_msg: str = "Ismeretlen hiba") -> AnalyticsResult:
        """
        üîß KRITIKUS JAV√çT√ÅS: √úres AnalyticsResult l√©trehoz√°sa hib√°k eset√©n - JAV√çTOTT ERROR HANDLING.
        
        Ez a met√≥dus biztos√≠tja, hogy analyze_multi_city() MINDIG AnalyticsResult objektumot adjon vissza,
        m√©g hiba eset√©n is (nem dict-et).
        
        Args:
            question: AnalyticsQuestion objektum (lehet None)
            error_msg: Hiba√ºzenet
            
        Returns:
            √úres AnalyticsResult objektum proper fallback question-nel
        """
        try:
            # Fallback question l√©trehoz√°sa ha nincs megadva
            fallback_question = question
            if not fallback_question:
                fallback_question = AnalyticsQuestion(
                    question_text=f"Multi-city elemz√©s hiba: {error_msg}",
                    question_type=QuestionType.WEATHER_COMPARISON,  # üî• FIX: SINGLE_LOCATION ‚Üí WEATHER_COMPARISON
                    region_scope=RegionScope.GLOBAL,
                    metric=AnalyticsMetric.TEMPERATURE_2M_MAX
                )
            
            # √úres AnalyticsResult objektum l√©trehoz√°sa
            empty_result = AnalyticsResult(
                question=fallback_question,
                city_results=[],  # √úres lista
                execution_time=0.0,
                total_cities_found=0,
                data_sources_used=[],
                statistics={},
                provider_statistics={}
            )
            
            logger.info(f"‚úÖ Empty AnalyticsResult created for error: {error_msg}")
            return empty_result
            
        except Exception as e:
            # Ultimate fallback - ha m√©g ez sem m≈±k√∂dik
            logger.error(f"‚ùå Critical error creating empty AnalyticsResult: {e}")
            
            # Manu√°lis objektum l√©trehoz√°s
            try:
                ultra_fallback_question = AnalyticsQuestion(
                    question_text="Critical error",
                    question_type=QuestionType.TEMPERATURE_MAX,  # üî• FIX: COMPARISON ‚Üí TEMPERATURE_MAX
                    region_scope=RegionScope.GLOBAL,
                    metric=AnalyticsMetric.TEMPERATURE_2M_MAX
                )
                
                ultra_fallback_result = AnalyticsResult(
                    question=ultra_fallback_question,
                    city_results=[],
                    execution_time=0.0,
                    total_cities_found=0,
                    data_sources_used=[],
                    statistics={},
                    provider_statistics={}
                )
                
                return ultra_fallback_result
                
            except Exception as ultra_e:
                logger.error(f"‚ùå ULTRA CRITICAL: Cannot create AnalyticsResult at all: {ultra_e}")
                # Ha m√©g ez sem m≈±k√∂dik, akkor valami alapvet≈ë hiba van
                raise RuntimeError(f"Cannot create AnalyticsResult: {ultra_e}")

    def resolve_region_name(self, region_input: str) -> str:
        """
        üîß KRITIKUS JAV√çT√ÅS: R√©gi√≥ n√©v felold√°sa - TELJES MAGYAR R√âGI√ì/MEGYE T√ÅMOGAT√ÅSSAL + ERROR HANDLING.
        
        T√°mogatott r√©gi√≥k/megy√©k:
        - 7 statisztikai r√©gi√≥ (pl. "√âszak-Magyarorsz√°g")  
        - 19 megye + Budapest (pl. "Pest", "Borsod-Aba√∫j-Zempl√©n")
        - Country codes (HU, EU, GLOBAL)
        - Alternat√≠v √≠r√°sm√≥dok
        
        Args:
            region_input: Bemeneti r√©gi√≥ n√©v (lehet "√âszak-Magyarorsz√°g", "Pest", "HU", stb.)
            
        Returns:
            Mapped r√©gi√≥ n√©v ("Hungary", "Europe", "Global")
            
        Raises:
            ValueError: Ha a r√©gi√≥ nem ismerhet≈ë fel
        """
        if not region_input:
            raise ValueError("√úres r√©gi√≥ n√©v")
        
        # Case-insensitive lookup
        region_key = region_input.strip()
        
        # Els≈ë pr√≥b√°lkoz√°s: pontos egyez√©s (case-sensitive)
        if region_key in self.REGION_CODE_MAPPING:
            mapped = self.REGION_CODE_MAPPING[region_key]
            logger.info(f"‚úÖ Exact region mapping: '{region_input}' ‚Üí '{mapped}'")
            return mapped
        
        # M√°sodik pr√≥b√°lkoz√°s: case-insensitive
        region_key_lower = region_key.lower()
        for key, value in self.REGION_CODE_MAPPING.items():
            if key.lower() == region_key_lower:
                mapped = value
                logger.info(f"‚úÖ Case-insensitive region mapping: '{region_input}' ‚Üí '{mapped}'")
                return mapped
        
        # Harmadik pr√≥b√°lkoz√°s: partial matching magyar r√©gi√≥ nevekhez
        hungarian_regions = [
            "k√∂z√©p-magyarorsz√°g", "√©szak-magyarorsz√°g", "√©szak-alf√∂ld",
            "d√©l-alf√∂ld", "d√©l-dun√°nt√∫l", "nyugat-dun√°nt√∫l", "k√∂z√©p-dun√°nt√∫l"
        ]
        
        region_normalized = region_input.lower().strip()
        for region in hungarian_regions:
            if region in region_normalized or region_normalized in region:
                logger.info(f"‚úÖ Partial region mapping: '{region_input}' ‚Üí 'Hungary' (matched: {region})")
                return "Hungary"
        
        # Negyedik pr√≥b√°lkoz√°s: magyar megye nevek
        hungarian_counties = [
            "budapest", "pest", "fej√©r", "kom√°rom-esztergom", "veszpr√©m",
            "gy≈ër-moson-sopron", "vas", "zala", "baranya", "somogy", "tolna",
            "borsod-aba√∫j-zempl√©n", "heves", "n√≥gr√°d", "hajd√∫-bihar",
            "j√°sz-nagykun-szolnok", "szabolcs-szatm√°r-bereg", "b√°cs-kiskun",
            "b√©k√©s", "csongr√°d-csan√°d"
        ]
        
        for county in hungarian_counties:
            if county in region_normalized or region_normalized in county:
                logger.info(f"‚úÖ County region mapping: '{region_input}' ‚Üí 'Hungary' (matched: {county})")
                return "Hungary"
        
        # Ha semmi sem m≈±k√∂d√∂tt
        available_regions = list(self.REGION_CODE_MAPPING.keys())[:10]  # Els≈ë 10 p√©lda
        error_msg = f"Ismeretlen r√©gi√≥: {region_input}. T√°mogatott r√©gi√≥k: {', '.join(available_regions)}..."
        logger.error(error_msg)
        raise ValueError(error_msg)


# üß™ TESTING & DEBUG (NONE-SAFE + R√âGI√ì MAPPING + R√âGI√ì SZ≈∞R√âS)
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
    engine = MultiCityEngine()
    today = datetime.now().strftime("%Y-%m-%d")
    
    print("\nüöÄ R√âGI√ì MAPPING TESZTEK:")
    test_regions = [
        "HU", "√âszak-Magyarorsz√°g", "Pest", "Budapest", 
        "√©szak-magyarorsz√°g", "k√∂z√©p-magyarorsz√°g", "EU", "GLOBAL"
    ]
    
    for region in test_regions:
        try:
            mapped = engine.resolve_region_name(region)
            print(f"‚úÖ '{region}' ‚Üí '{mapped}'")
        except ValueError as e:
            print(f"‚ùå '{region}' ‚Üí ERROR: {e}")
    
    print("\nüöÄ R√âGI√ì SZ≈∞R√âS TESZT: '√âszak-Magyarorsz√°g' r√©gi√≥val (hottest):")
    try:
        result_hot = engine.analyze_multi_city("hottest_today", "√âszak-Magyarorsz√°g", today, limit=10)
        print(f"üìä Eredm√©nyek: {len(result_hot.city_results)} v√°ros")
        print(f"üìä NONE-SAFE Statisztik√°k: {result_hot.statistics}")
        
        # Els≈ë 3 v√°ros r√©szletei
        for i, city in enumerate(result_hot.city_results[:3]):
            print(f"  {i+1}. {city.city_name}: {city.value}¬∞C")
            
        # ELLEN≈êRIZZ√úK: csak √©szaki v√°rosok?
        northern_counties = ["Borsod-Aba√∫j-Zempl√©n", "Heves", "N√≥gr√°d"]
        print(f"\nüîß REGION√ÅLIS SZ≈∞R√âS ELLEN≈êRZ√âS:")
        print(f"   V√°rt megy√©k: {northern_counties}")
        
        cities_found = [f"{city.city_name}" for city in result_hot.city_results[:5]]
        print(f"   Tal√°lt v√°rosok: {cities_found}")
            
    except Exception as e:
        print(f"‚ùå Teszt hiba: {e}")
        import traceback
        traceback.print_exc()
