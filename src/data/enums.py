#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Global Weather Analyzer - Shared Enums
üéØ CLEAN ARCHITECTURE - K√∂zponti enum defin√≠ci√≥k

REFAKTOR C√âL:
- city_analytics.py f√ºgg≈ës√©gek megsz√ºntet√©se
- Tiszta enum separation
- Import chaos felsz√°mol√°sa
- SOLID principles alkalmaz√°sa

HASZN√ÅLAT:
```python
from src.data.enums import RegionScope, AnalyticsMetric, QuestionType, AnomalySeverity
```
"""

from enum import Enum
from typing import Dict, List


class RegionScope(Enum):
    """
    R√©gi√≥ hat√≥k√∂r enum.
    
    Analytics lek√©rdez√©sek f√∂ldrajzi hat√≥k√∂r√©nek meghat√°roz√°s√°hoz.
    """
    COUNTRY = "country"
    CONTINENT = "continent"
    GLOBAL = "global"
    REGION = "region"        # Pl. Balk√°n, Skandin√°via
    CUSTOM = "custom"        # Felhaszn√°l√≥ √°ltal defini√°lt


class AnalyticsMetric(Enum):
    """
    Analytics metrika enum.
    
    Id≈ëj√°r√°si param√©terek standardiz√°lt megnevez√©sei.
    """
    # H≈ëm√©rs√©klet metrik√°k
    TEMPERATURE_2M_MAX = "temperature_2m_max"
    TEMPERATURE_2M_MIN = "temperature_2m_min"
    TEMPERATURE_2M_MEAN = "temperature_2m_mean"
    APPARENT_TEMPERATURE_MAX = "apparent_temperature_max"
    APPARENT_TEMPERATURE_MIN = "apparent_temperature_min"
    
    # Csapad√©k metrik√°k
    PRECIPITATION_SUM = "precipitation_sum"
    PRECIPITATION_HOURS = "precipitation_hours"
    RAIN_SUM = "rain_sum"
    SNOWFALL_SUM = "snowfall_sum"
    SHOWERS_SUM = "showers_sum"
    
    # Sz√©l metrik√°k
    WINDSPEED_10M_MAX = "windspeed_10m_max"
    WINDGUSTS_10M_MAX = "windgusts_10m_max"
    WINDDIRECTION_10M_DOMINANT = "winddirection_10m_dominant"
    
    # L√©gk√∂ri metrik√°k
    PRESSURE_MSL_MIN = "pressure_msl_min"
    PRESSURE_MSL_MAX = "pressure_msl_max"
    CLOUDCOVER_MEAN = "cloudcover_mean"
    HUMIDITY_2M_MEAN = "relative_humidity_2m"
    
    # UV √©s napf√©ny
    UV_INDEX_MAX = "uv_index_max"
    SUNSHINE_DURATION = "sunshine_duration"
    
    # Derived metrik√°k
    TEMPERATURE_RANGE = "temperature_range"  # max - min
    WIND_CHILL = "wind_chill"
    HEAT_INDEX = "heat_index"


class QuestionType(Enum):
    """
    Analytics k√©rd√©s t√≠pus enum.
    
    Multi-city analytics k√©rd√©sek kategoriz√°l√°s√°hoz.
    """
    # H≈ëm√©rs√©klet k√©rd√©sek
    TEMPERATURE_MAX = "temperature_max"
    TEMPERATURE_MIN = "temperature_min"
    TEMPERATURE_RANGE = "temperature_range"
    HEAT_WAVE = "heat_wave"
    COLD_SNAP = "cold_snap"
    
    # Csapad√©k k√©rd√©sek  
    PRECIPITATION_MAX = "precipitation_max"
    PRECIPITATION_TOTAL = "precipitation_total"
    DROUGHT_ANALYSIS = "drought_analysis"
    FLOOD_RISK = "flood_risk"
    
    # Sz√©l k√©rd√©sek
    WIND_MAX = "wind_max"
    STORM_ANALYSIS = "storm_analysis"
    CALM_WEATHER = "calm_weather"
    
    # Kombin√°lt k√©rd√©sek
    EXTREME_WEATHER = "extreme_weather"
    WEATHER_COMPARISON = "weather_comparison"
    SEASONAL_ANALYSIS = "seasonal_analysis"
    CLIMATE_RANKING = "climate_ranking"
    
    # Speci√°lis k√©rd√©sek
    COMFORT_INDEX = "comfort_index"
    TOURISM_WEATHER = "tourism_weather"
    AGRICULTURE_ANALYSIS = "agriculture_analysis"


class AnomalySeverity(Enum):
    """
    Anom√°lia s√∫lyoss√°g enum.
    
    Id≈ëj√°r√°si anom√°li√°k besorol√°s√°hoz.
    """
    LOW = "low"              # Enyhe elt√©r√©s (1-2 sigma)
    MODERATE = "moderate"    # K√∂zepes elt√©r√©s (2-2.5 sigma)
    HIGH = "high"           # Magas elt√©r√©s (2.5-3 sigma)
    EXTREME = "extreme"     # Extr√©m elt√©r√©s (3+ sigma)
    RECORD = "record"       # Rekord√©rt√©k


class AnomalyType(Enum):
    """
    Anom√°lia t√≠pus enum.
    
    Anom√°lia ir√°ny meghat√°roz√°s√°hoz.
    """
    HIGH = "high"           # Magas √©rt√©k≈± anom√°lia
    LOW = "low"             # Alacsony √©rt√©k≈± anom√°lia
    BOTH = "both"           # Mindk√©t ir√°ny√∫ anom√°lia


class DataSource(Enum):
    """
    Adatforr√°s enum.
    
    Weather API forr√°sok megk√ºl√∂nb√∂ztet√©shez.
    """
    OPEN_METEO = "open-meteo"
    METEOSTAT = "meteostat"
    ECMWF = "ecmwf"
    NOAA = "noaa"
    AUTO = "auto"           # Automatikus kiv√°laszt√°s


class RegionType(Enum):
    """
    R√©gi√≥ t√≠pus enum.
    
    City Manager adatb√°zis lek√©rdez√©sekhez.
    """
    COUNTRY = "country"
    CONTINENT = "continent"
    ADMINISTRATIVE = "administrative"  # √Ållam/tartom√°ny
    METROPOLITAN = "metropolitan"      # Nagyv√°ros agglomer√°ci√≥
    CUSTOM = "custom"


class AnalyticsMode(Enum):
    """
    Analytics m√≥d enum.
    
    GUI analytics panel m√≥dok megk√ºl√∂nb√∂ztet√©shez.
    """
    SINGLE_CITY = "single_city"
    MULTI_CITY = "multi_city"
    PARAMETER_BASED = "parameter_based"


# UTILITY FUNKCI√ìK

def get_metric_display_name(metric: AnalyticsMetric) -> str:
    """
    Metrika display n√©v lek√©rdez√©se.
    
    Args:
        metric: AnalyticsMetric enum √©rt√©k
        
    Returns:
        Magyar display n√©v
    """
    display_names = {
        AnalyticsMetric.TEMPERATURE_2M_MAX: "Maximum h≈ëm√©rs√©klet",
        AnalyticsMetric.TEMPERATURE_2M_MIN: "Minimum h≈ëm√©rs√©klet", 
        AnalyticsMetric.TEMPERATURE_2M_MEAN: "√Åtlagos h≈ëm√©rs√©klet",
        AnalyticsMetric.PRECIPITATION_SUM: "Csapad√©k√∂sszeg",
        AnalyticsMetric.WINDSPEED_10M_MAX: "Maximum sz√©lsebess√©g",
        AnalyticsMetric.WINDGUSTS_10M_MAX: "Maximum sz√©ll√∂k√©s",
        AnalyticsMetric.PRESSURE_MSL_MIN: "Minimum l√©gnyom√°s",
        AnalyticsMetric.HUMIDITY_2M_MEAN: "√Åtlagos p√°ratartalom",
        AnalyticsMetric.UV_INDEX_MAX: "Maximum UV index",
        AnalyticsMetric.SUNSHINE_DURATION: "Naps√ºt√©s id≈ëtartama"
    }
    
    return display_names.get(metric, metric.value)


def get_metric_unit(metric: AnalyticsMetric) -> str:
    """
    Metrika m√©rt√©kegys√©g lek√©rdez√©se.
    
    Args:
        metric: AnalyticsMetric enum √©rt√©k
        
    Returns:
        M√©rt√©kegys√©g string
    """
    units = {
        AnalyticsMetric.TEMPERATURE_2M_MAX: "¬∞C",
        AnalyticsMetric.TEMPERATURE_2M_MIN: "¬∞C",
        AnalyticsMetric.TEMPERATURE_2M_MEAN: "¬∞C",
        AnalyticsMetric.PRECIPITATION_SUM: "mm",
        AnalyticsMetric.WINDSPEED_10M_MAX: "km/h",
        AnalyticsMetric.WINDGUSTS_10M_MAX: "km/h",
        AnalyticsMetric.PRESSURE_MSL_MIN: "hPa",
        AnalyticsMetric.HUMIDITY_2M_MEAN: "%",
        AnalyticsMetric.UV_INDEX_MAX: "",
        AnalyticsMetric.SUNSHINE_DURATION: "h"
    }
    
    return units.get(metric, "")


def get_region_scope_display_name(scope: RegionScope) -> str:
    """
    RegionScope display n√©v lek√©rdez√©se.
    
    Args:
        scope: RegionScope enum √©rt√©k
        
    Returns:
        Magyar display n√©v
    """
    display_names = {
        RegionScope.COUNTRY: "Orsz√°g",
        RegionScope.CONTINENT: "Kontinens", 
        RegionScope.GLOBAL: "Glob√°lis",
        RegionScope.REGION: "R√©gi√≥",
        RegionScope.CUSTOM: "Egyedi"
    }
    
    return display_names.get(scope, scope.value)


def get_question_type_display_name(question_type: QuestionType) -> str:
    """
    QuestionType display n√©v lek√©rdez√©se.
    
    Args:
        question_type: QuestionType enum √©rt√©k
        
    Returns:
        Magyar display n√©v
    """
    display_names = {
        QuestionType.TEMPERATURE_MAX: "Legmagasabb h≈ëm√©rs√©klet",
        QuestionType.TEMPERATURE_MIN: "Legalacsonyabb h≈ëm√©rs√©klet",
        QuestionType.PRECIPITATION_MAX: "Legt√∂bb csapad√©k",
        QuestionType.WIND_MAX: "Leger≈ësebb sz√©l",
        QuestionType.EXTREME_WEATHER: "Sz√©ls≈ës√©ges id≈ëj√°r√°s",
        QuestionType.WEATHER_COMPARISON: "Id≈ëj√°r√°s √∂sszehasonl√≠t√°s"
    }
    
    return display_names.get(question_type, question_type.value)


def get_severity_color(severity: AnomalySeverity) -> str:
    """
    Anom√°lia s√∫lyoss√°g sz√≠nk√≥d lek√©rdez√©se.
    
    Args:
        severity: AnomalySeverity enum √©rt√©k
        
    Returns:
        CSS sz√≠nk√≥d
    """
    colors = {
        AnomalySeverity.LOW: "#fbbf24",      # S√°rga
        AnomalySeverity.MODERATE: "#f97316", # Narancs
        AnomalySeverity.HIGH: "#ef4444",     # Piros
        AnomalySeverity.EXTREME: "#dc2626",  # S√∂t√©t piros
        AnomalySeverity.RECORD: "#7c2d12"    # Bord√≥
    }
    
    return colors.get(severity, "#6b7280")


# VALIDATION FUNKCI√ìK

def validate_analytics_metric(metric_str: str) -> bool:
    """
    Analytics metrika valid√°l√°sa.
    
    Args:
        metric_str: Metrika string reprezent√°ci√≥
        
    Returns:
        √ârv√©nyes metrika-e
    """
    return metric_str in [m.value for m in AnalyticsMetric]


def validate_region_scope(scope_str: str) -> bool:
    """
    RegionScope valid√°l√°sa.
    
    Args:
        scope_str: Scope string reprezent√°ci√≥
        
    Returns:
        √ârv√©nyes scope-e
    """
    return scope_str in [s.value for s in RegionScope]


def get_available_metrics_for_question_type(question_type: QuestionType) -> List[AnalyticsMetric]:
    """
    K√©rd√©st√≠pushoz el√©rhet≈ë metrik√°k lek√©rdez√©se.
    
    Args:
        question_type: QuestionType enum √©rt√©k
        
    Returns:
        Relev√°ns metrik√°k list√°ja
    """
    metric_mapping = {
        QuestionType.TEMPERATURE_MAX: [
            AnalyticsMetric.TEMPERATURE_2M_MAX,
            AnalyticsMetric.APPARENT_TEMPERATURE_MAX
        ],
        QuestionType.TEMPERATURE_MIN: [
            AnalyticsMetric.TEMPERATURE_2M_MIN,
            AnalyticsMetric.APPARENT_TEMPERATURE_MIN
        ],
        QuestionType.PRECIPITATION_MAX: [
            AnalyticsMetric.PRECIPITATION_SUM,
            AnalyticsMetric.RAIN_SUM,
            AnalyticsMetric.SNOWFALL_SUM
        ],
        QuestionType.WIND_MAX: [
            AnalyticsMetric.WINDSPEED_10M_MAX,
            AnalyticsMetric.WINDGUSTS_10M_MAX
        ]
    }
    
    return metric_mapping.get(question_type, [])


# EXPORT API
__all__ = [
    'RegionScope',
    'AnalyticsMetric', 
    'QuestionType',
    'AnomalySeverity',
    'AnomalyType',
    'DataSource',
    'RegionType',
    'AnalyticsMode',
    'get_metric_display_name',
    'get_metric_unit',
    'get_region_scope_display_name',
    'get_question_type_display_name',
    'get_severity_color',
    'validate_analytics_metric',
    'validate_region_scope',
    'get_available_metrics_for_question_type'
]
