#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Global Weather Analyzer - Data Models
üéØ CLEAN ARCHITECTURE - K√∂zponti adatmodellek

REFAKTOR C√âL:
- city_analytics.py modellek kiemel√©se
- Type-safe data structures
- Clean separation of concerns
- Reusable data classes

üåç UNIVERSAL WEATHER RESEARCH PLATFORM v5.2:
- UniversalLocation: b√°rmilyen lok√°ci√≥ t√≠pus kezel√©s
- UniversalTimeRange: tetsz≈ëleges id≈ëintervallum
- UniversalQuery: k√∂zponti user-centric query modell
- USER D√ñNT MINDENR≈êL paradigma t√°mogat√°sa

üó∫Ô∏è LOCATION COMPATIBILITY FIX:
- Location oszt√°ly hozz√°adva HungarianLocationSelector kompatibilit√°s miatt
- Backward compatibility biztos√≠tva

HASZN√ÅLAT:
```python
from src.data.models import AnalyticsResult, CityWeatherResult, AnalyticsQuestion
from src.data.models import UniversalLocation, UniversalQuery, LocationType, Location
from src.data.enums import RegionScope, AnalyticsMetric, QuestionType
```
"""

from dataclasses import dataclass, field
from typing import Dict, List, Any, Optional, Union, Tuple
from datetime import datetime, date
from enum import Enum
from .enums import (
    RegionScope, AnalyticsMetric, QuestionType, AnomalySeverity, 
    AnomalyType, DataSource, RegionType
)


# =============================================================================
# UNIVERSAL WEATHER RESEARCH PLATFORM - NEW ENUMS
# =============================================================================

class LocationType(Enum):
    """üåç Univerz√°lis lok√°ci√≥ t√≠pusok - USER SZABADS√ÅG"""
    REGION = "region"                    # Klimatikus r√©gi√≥k (Mediterr√°n, Kontinent√°lis)
    COUNTRY = "country"                  # Orsz√°gok (Magyarorsz√°g, N√©metorsz√°g)
    MICRO_REGION = "micro_region"        # Magyar micro-r√©gi√≥k (Alf√∂ld, Nyugat-Dun√°nt√∫l)
    CITY = "city"                        # V√°rosok (Budapest, Berlin)
    COORDINATES = "coordinates"          # Koordin√°t√°k (47.4979, 19.0402)
    MULTIPLE = "multiple"                # T√∂bb lok√°ci√≥ kombin√°ci√≥ja
    CUSTOM = "custom"                    # User-defini√°lt lok√°ci√≥


class TimeGranularity(Enum):
    """‚è∞ Id≈ëbeli granularit√°s - USER ID≈êSZABADS√ÅG"""
    DAILY = "daily"                      # Napi szint
    WEEKLY = "weekly"                    # Heti szint
    MONTHLY = "monthly"                  # Havi szint
    YEARLY = "yearly"                    # √âves szint
    SEASONAL = "seasonal"                # Szezon√°lis
    CUSTOM_INTERVAL = "custom_interval"  # User-defini√°lt intervallum
    MULTI_YEAR = "multi_year"           # √âvtizedes (1980-2024)


class AnalysisType(Enum):
    """üî¨ Elemz√©si t√≠pusok - USER ANALYTICS SZABADS√ÅG"""
    CURRENT_CONDITIONS = "current_conditions"    # Jelenlegi √°llapot
    TREND_ANALYSIS = "trend_analysis"           # Trend elemz√©s
    ANOMALY_DETECTION = "anomaly_detection"     # Anom√°lia detekt√°l√°s
    COMPARATIVE = "comparative"                 # √ñsszehasonl√≠t√≥ elemz√©s
    STATISTICAL = "statistical"                # Statisztikai elemz√©s
    PATTERN_RECOGNITION = "pattern_recognition" # Minta felismer√©s
    FORECAST = "forecast"                      # El≈ërejelz√©s
    CUSTOM = "custom"                          # User-defini√°lt elemz√©s


# =============================================================================
# LOCATION COMPATIBILITY - HUNGARIAN LOCATION SELECTOR FIX
# =============================================================================

@dataclass
class Location:
    """
    üó∫Ô∏è Egyszer≈± lok√°ci√≥ modell - HungarianLocationSelector kompatibilit√°s.
    
    Ez egy backward compatibility oszt√°ly a magyar t√©rk√©pes komponensekhez.
    A HungarianLocationSelector ezt a form√°tumot v√°rja.
    
    Attributes:
        identifier: Lok√°ci√≥ azonos√≠t√≥ (v√°ros n√©v, r√©gi√≥ k√≥d, stb.)
        display_name: Megjelen√≠tend≈ë n√©v (felhaszn√°l√≥-bar√°t)
        latitude: F√∂ldrajzi sz√©less√©g
        longitude: F√∂ldrajzi hossz√∫s√°g
        country_code: Orsz√°g k√≥d (ISO alpha-2, pl. "HU")
        timezone: Id≈ëz√≥na (pl. "Europe/Budapest")
        metadata: Tov√°bbi inform√°ci√≥k dictionary-ben
    """
    identifier: str
    display_name: str
    latitude: float
    longitude: float
    country_code: str = "HU"
    timezone: str = "Europe/Budapest"
    metadata: Dict[str, Any] = field(default_factory=dict)
    
    def __str__(self) -> str:
        """String reprezent√°ci√≥."""
        return f"{self.display_name} ({self.latitude:.4f}, {self.longitude:.4f})"
    
    def get_coordinates(self) -> Tuple[float, float]:
        """Koordin√°t√°k tuple-k√©nt."""
        return (self.latitude, self.longitude)
    
    def get_region(self) -> Optional[str]:
        """R√©gi√≥ n√©v lek√©rdez√©se metadata-b√≥l."""
        return self.metadata.get('region')
    
    def get_county(self) -> Optional[str]:
        """Megye n√©v lek√©rdez√©se metadata-b√≥l."""
        return self.metadata.get('county')
    
    def get_climate_zone(self) -> Optional[str]:
        """√âghajlati z√≥na lek√©rdez√©se metadata-b√≥l."""
        return self.metadata.get('climate_zone')
    
    def get_source(self) -> Optional[str]:
        """Adatforr√°s lek√©rdez√©se metadata-b√≥l."""
        return self.metadata.get('source')
    
    def get_bounds(self) -> Optional[Tuple[float, float, float, float]]:
        """Ter√ºleti hat√°rok lek√©rdez√©se metadata-b√≥l (minx, miny, maxx, maxy)."""
        return self.metadata.get('bounds')
    
    def is_hungarian_location(self) -> bool:
        """Magyar lok√°ci√≥-e."""
        return self.country_code.upper() == "HU"
    
    def to_universal_location(self) -> 'UniversalLocation':
        """
        Konverzi√≥ UniversalLocation-n√©.
        
        Returns:
            UniversalLocation objektum
        """
        # Location type meghat√°roz√°sa
        if self.get_county():
            location_type = LocationType.MICRO_REGION  # Magyar megye szint
        else:
            location_type = LocationType.CITY  # √Åltal√°nos v√°ros/pont
        
        return UniversalLocation(
            type=location_type,
            identifier=self.identifier,
            display_name=self.display_name,
            coordinates=(self.latitude, self.longitude),
            country_code=self.country_code,
            timezone=self.timezone,
            climate_zone=self.get_climate_zone()
        )
    
    def to_dict(self) -> Dict[str, Any]:
        """Dictionary konverzi√≥."""
        return {
            'identifier': self.identifier,
            'display_name': self.display_name,
            'latitude': self.latitude,
            'longitude': self.longitude,
            'country_code': self.country_code,
            'timezone': self.timezone,
            'metadata': self.metadata,
            'coordinates': self.get_coordinates(),
            'region': self.get_region(),
            'county': self.get_county(),
            'climate_zone': self.get_climate_zone(),
            'source': self.get_source(),
            'bounds': self.get_bounds(),
            'is_hungarian': self.is_hungarian_location()
        }
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'Location':
        """
        Dictionary-b≈ël Location objektum l√©trehoz√°sa.
        
        Args:
            data: Dictionary adatok
            
        Returns:
            Location objektum
        """
        # K√∂telez≈ë mez≈ëk kinyer√©se
        identifier = data['identifier']
        display_name = data['display_name']
        latitude = data['latitude']
        longitude = data['longitude']
        
        # Opcion√°lis mez≈ëk
        country_code = data.get('country_code', 'HU')
        timezone = data.get('timezone', 'Europe/Budapest')
        metadata = data.get('metadata', {})
        
        # R√©gi form√°tum kompatibilit√°s - ha a metadata √ºres, de vannak extra mez≈ëk
        if not metadata:
            extra_fields = ['region', 'county', 'climate_zone', 'source', 'bounds']
            for field in extra_fields:
                if field in data and data[field] is not None:
                    metadata[field] = data[field]
        
        return cls(
            identifier=identifier,
            display_name=display_name,
            latitude=latitude,
            longitude=longitude,
            country_code=country_code,
            timezone=timezone,
            metadata=metadata
        )
    
    @classmethod
    def from_coordinates(
        cls, 
        latitude: float, 
        longitude: float, 
        display_name: Optional[str] = None,
        **kwargs
    ) -> 'Location':
        """
        Koordin√°t√°kb√≥l Location objektum l√©trehoz√°sa.
        
        Args:
            latitude: F√∂ldrajzi sz√©less√©g
            longitude: F√∂ldrajzi hossz√∫s√°g
            display_name: Megjelen√≠tend≈ë n√©v (opcion√°lis)
            **kwargs: Tov√°bbi param√©terek
            
        Returns:
            Location objektum
        """
        if not display_name:
            display_name = f"Koordin√°ta ({latitude:.4f}, {longitude:.4f})"
        
        identifier = f"coord_{latitude:.4f}_{longitude:.4f}"
        
        return cls(
            identifier=identifier,
            display_name=display_name,
            latitude=latitude,
            longitude=longitude,
            **kwargs
        )
    
    @classmethod
    def from_city_info(cls, city_info: 'CityInfo') -> 'Location':
        """
        CityInfo objektumb√≥l Location l√©trehoz√°sa.
        
        Args:
            city_info: CityInfo objektum
            
        Returns:
            Location objektum
        """
        return cls(
            identifier=city_info.city,
            display_name=city_info.get_display_name(),
            latitude=city_info.latitude,
            longitude=city_info.longitude,
            country_code=city_info.country_code,
            timezone=city_info.timezone or "Europe/Budapest",
            metadata={
                'city_id': city_info.id,
                'population': city_info.population,
                'continent': city_info.continent,
                'admin_name': city_info.admin_name,
                'capital': city_info.capital,
                'source': 'city_manager'
            }
        )


# =============================================================================
# UNIVERSAL WEATHER RESEARCH PLATFORM - NEW DATA MODELS
# =============================================================================

@dataclass
class UniversalLocation:
    """
    üåç Univerz√°lis lok√°ci√≥ modell - TELJES USER SZABADS√ÅG
    
    K√©pes reprezent√°lni b√°rmilyen lok√°ci√≥ t√≠pust:
    - Klimatikus r√©gi√≥kat (Mediterr√°n, Kontinent√°lis)
    - Orsz√°gokat (Magyarorsz√°g, N√©metorsz√°g) 
    - Magyar micro-r√©gi√≥kat (Alf√∂ld, Nyugat-Dun√°nt√∫l)
    - V√°rosokat (Budapest, Berlin)
    - Koordin√°t√°kat (47.4979, 19.0402)
    - T√∂bb lok√°ci√≥ kombin√°ci√≥j√°t
    """
    type: LocationType
    identifier: Union[str, Tuple[float, float], List[str]]
    display_name: str
    
    # Geo inform√°ci√≥k (ha el√©rhet≈ë)
    coordinates: Optional[Tuple[float, float]] = None
    country_code: Optional[str] = None
    region_code: Optional[str] = None
    
    # Hierarchikus inform√°ci√≥k
    parent_location: Optional['UniversalLocation'] = None
    child_locations: List['UniversalLocation'] = field(default_factory=list)
    
    # Metadata
    population: Optional[int] = None
    area_km2: Optional[float] = None
    timezone: Optional[str] = None
    climate_zone: Optional[str] = None
    
    def __str__(self) -> str:
        """String reprezent√°ci√≥."""
        return f"{self.display_name} ({self.type.value})"
    
    def is_geographical_point(self) -> bool:
        """Pont lok√°ci√≥-e (v√°ros vagy koordin√°ta)."""
        return self.type in [LocationType.CITY, LocationType.COORDINATES]
    
    def is_area_location(self) -> bool:
        """Ter√ºlet lok√°ci√≥-e (r√©gi√≥, orsz√°g)."""
        return self.type in [LocationType.REGION, LocationType.COUNTRY, LocationType.MICRO_REGION]
    
    def get_coordinates_list(self) -> List[Tuple[float, float]]:
        """
        Koordin√°t√°k list√°ja a lok√°ci√≥hoz.
        
        Returns:
            Lista koordin√°t√°kr√≥l - pont eset√©n 1 elem, ter√ºlet eset√©n t√∂bb
        """
        if self.type == LocationType.COORDINATES:
            if isinstance(self.identifier, tuple) and len(self.identifier) == 2:
                return [self.identifier]
        elif self.coordinates:
            return [self.coordinates]
        elif self.child_locations:
            coords = []
            for child in self.child_locations:
                coords.extend(child.get_coordinates_list())
            return coords
        
        return []
    
    def contains_location(self, other: 'UniversalLocation') -> bool:
        """Tartalmazza-e a m√°sik lok√°ci√≥t (hierarchikus)."""
        if self.type == LocationType.MULTIPLE:
            return other in self.child_locations
        
        # Hierarchikus ellen≈ërz√©s
        current = other.parent_location
        while current:
            if current == self:
                return True
            current = current.parent_location
        
        return False
    
    def to_simple_location(self) -> Location:
        """
        Konverzi√≥ egyszer≈± Location objektumm√°.
        
        Returns:
            Location objektum
        """
        # Coordinates meghat√°roz√°sa
        coords = self.coordinates or (0.0, 0.0)
        if isinstance(self.identifier, tuple) and len(self.identifier) == 2:
            coords = self.identifier
        
        return Location(
            identifier=str(self.identifier),
            display_name=self.display_name,
            latitude=coords[0],
            longitude=coords[1],
            country_code=self.country_code or "HU",
            timezone=self.timezone or "Europe/Budapest",
            metadata={
                'location_type': self.type.value,
                'climate_zone': self.climate_zone,
                'population': self.population,
                'area_km2': self.area_km2,
                'region_code': self.region_code,
                'source': 'universal_location'
            }
        )
    
    def to_dict(self) -> Dict[str, Any]:
        """Dictionary konverzi√≥."""
        return {
            'type': self.type.value,
            'identifier': self.identifier,
            'display_name': self.display_name,
            'coordinates': self.coordinates,
            'country_code': self.country_code,
            'region_code': self.region_code,
            'population': self.population,
            'area_km2': self.area_km2,
            'timezone': self.timezone,
            'climate_zone': self.climate_zone,
            'child_locations_count': len(self.child_locations)
        }


@dataclass
class UniversalTimeRange:
    """
    ‚è∞ Univerz√°lis id≈ëtartom√°ny modell - TELJES ID≈êSZABADS√ÅG
    
    K√©pes reprezent√°lni b√°rmilyen id≈ëintervallumot:
    - Napokat (2025-07-21)
    - Heteket (utols√≥ 7 nap)
    - H√≥napokat (2024 j√∫lius)
    - √âveket (2023)
    - √âvtizedeket (1980-2024)
    - Custom intervallumokat (1995.06.15 - 2003.08.30)
    """
    start_date: date
    end_date: date
    granularity: TimeGranularity
    
    # Le√≠r√≥ inform√°ci√≥k
    description: str = ""
    
    # Speci√°lis be√°ll√≠t√°sok
    include_partial_periods: bool = True      # R√©szleges id≈ëszakok belefoglal√°sa
    exclude_weekends: bool = False            # H√©tv√©g√©k kiz√°r√°sa
    seasonal_filter: Optional[List[str]] = None # Szezon√°lis sz≈±r≈ë ['summer', 'winter']
    
    # Metadata
    total_days: int = field(init=False)
    is_historical: bool = field(init=False)
    is_future: bool = field(init=False)
    
    def __post_init__(self):
        """Post-init sz√°m√≠t√°sok."""
        self.total_days = (self.end_date - self.start_date).days + 1
        today = date.today()
        self.is_historical = self.end_date < today
        self.is_future = self.start_date > today
        
        # Automatikus le√≠r√°s gener√°l√°s ha √ºres
        if not self.description:
            self.description = self._generate_description()
    
    def _generate_description(self) -> str:
        """Automatikus le√≠r√°s gener√°l√°s."""
        if self.total_days == 1:
            return f"Egy nap ({self.start_date})"
        elif self.total_days <= 7:
            return f"{self.total_days} nap ({self.start_date} - {self.end_date})"
        elif self.total_days <= 31:
            return f"~{self.total_days // 7} h√©t ({self.start_date} - {self.end_date})"
        elif self.total_days <= 365:
            return f"~{self.total_days // 30} h√≥nap ({self.start_date} - {self.end_date})"
        else:
            years = self.total_days // 365
            return f"~{years} √©v ({self.start_date} - {self.end_date})"
    
    def __str__(self) -> str:
        """String reprezent√°ci√≥."""
        return f"{self.description} [{self.granularity.value}]"
    
    def overlaps_with(self, other: 'UniversalTimeRange') -> bool:
        """√Åtfed-e m√°sik id≈ëtartom√°nnyal."""
        return not (self.end_date < other.start_date or self.start_date > other.end_date)
    
    def contains_date(self, check_date: date) -> bool:
        """Tartalmazza-e a megadott d√°tumot."""
        return self.start_date <= check_date <= self.end_date
    
    def get_months_list(self) -> List[str]:
        """√ârintett h√≥napok list√°ja (YYYY-MM form√°tumban)."""
        months = []
        current = self.start_date.replace(day=1)  # H√≥nap eleje
        
        while current <= self.end_date:
            months.append(current.strftime('%Y-%m'))
            # K√∂vetkez≈ë h√≥nap
            if current.month == 12:
                current = current.replace(year=current.year + 1, month=1)
            else:
                current = current.replace(month=current.month + 1)
        
        return months
    
    def get_years_list(self) -> List[int]:
        """√ârintett √©vek list√°ja."""
        return list(range(self.start_date.year, self.end_date.year + 1))
    
    def split_by_years(self) -> List['UniversalTimeRange']:
        """√âvenk√©nti bont√°s."""
        if self.start_date.year == self.end_date.year:
            return [self]
        
        yearly_ranges = []
        for year in self.get_years_list():
            year_start = max(self.start_date, date(year, 1, 1))
            year_end = min(self.end_date, date(year, 12, 31))
            
            yearly_range = UniversalTimeRange(
                start_date=year_start,
                end_date=year_end,
                granularity=TimeGranularity.YEARLY,
                description=f"{year} √©v r√©szlet"
            )
            yearly_ranges.append(yearly_range)
        
        return yearly_ranges
    
    def to_dict(self) -> Dict[str, Any]:
        """Dictionary konverzi√≥."""
        return {
            'start_date': self.start_date.isoformat(),
            'end_date': self.end_date.isoformat(),
            'granularity': self.granularity.value,
            'description': self.description,
            'total_days': self.total_days,
            'is_historical': self.is_historical,
            'is_future': self.is_future,
            'include_partial_periods': self.include_partial_periods,
            'exclude_weekends': self.exclude_weekends,
            'seasonal_filter': self.seasonal_filter
        }


@dataclass
class UniversalQuery:
    """
    üéØ UNIVERZ√ÅLIS LEK√âRDEZ√âS MODELL - USER-CENTRIC PARADIGMA
    
    A teljes "User d√∂nt mindenr≈ël" filozofia k√∂zponti modellje.
    B√°rmilyen lok√°ci√≥t, id≈ëtartamot, param√©tert k√©pes kezelni.
    
    P√âLD√ÅK:
    - "Budapest h≈ëm√©rs√©klet trend 1980-2024"
    - "Mediterr√°n r√©gi√≥ csapad√©k anom√°li√°k ny√°ron"
    - "Koordin√°ta [47.5, 19.0] sz√©lsebess√©g utols√≥ 30 nap"
    - "Magyarorsz√°g vs N√©metorsz√°g √∂sszehasonl√≠t√°s 2023"
    """
    # Alapvet≈ë query komponensek
    locations: List[UniversalLocation]
    time_range: UniversalTimeRange
    parameters: List[str]                   # Weather param√©terek (temperature_2m_max, stb.)
    analysis_type: AnalysisType
    
    # Query metaadatok
    query_id: str = field(default_factory=lambda: f"universal_{datetime.now().strftime('%Y%m%d_%H%M%S')}")
    user_description: str = ""              # User-friendly le√≠r√°s
    
    # V√©grehajt√°si be√°ll√≠t√°sok
    data_sources: List[DataSource] = field(default_factory=list)  # Preferred APIs
    quality_threshold: float = 0.8          # Minimum adat min≈ës√©g
    max_results_per_location: int = 1000    # Performance limit
    
    # Sz≈±r√©si opci√≥k
    anomaly_detection: bool = False         # Anom√°lia detekt√°l√°s bekapcsol√°sa
    statistical_analysis: bool = True       # Statisztikai elemz√©s
    trend_analysis: bool = False           # Trend elemz√©s
    comparative_mode: bool = False         # √ñsszehasonl√≠t√≥ m√≥d
    
    # Anom√°lia specifikus be√°ll√≠t√°sok (ha anomaly_detection=True)
    anomaly_severity_filter: List[AnomalySeverity] = field(default_factory=list)
    anomaly_threshold_override: Optional[float] = None
    
    # Metadata
    created_at: datetime = field(default_factory=datetime.now)
    created_by: Optional[str] = None
    tags: List[str] = field(default_factory=list)
    
    # V√©grehajt√°si st√°tusz
    is_executed: bool = False
    execution_time: Optional[float] = None
    total_data_points: int = 0
    
    def __post_init__(self):
        """Post-init valid√°ci√≥ √©s automatikus be√°ll√≠t√°sok."""
        # Automatikus le√≠r√°s gener√°l√°s ha √ºres
        if not self.user_description:
            self.user_description = self._generate_description()
        
        # Automatikus comparative mode detekt√°l√°s
        if len(self.locations) > 1:
            self.comparative_mode = True
        
        # Data sources valid√°ci√≥
        if not self.data_sources:
            self.data_sources = [DataSource.AUTO]  # Default auto selection
    
    def _generate_description(self) -> str:
        """Automatikus user-friendly le√≠r√°s gener√°l√°s."""
        # Lok√°ci√≥k
        if len(self.locations) == 1:
            location_desc = self.locations[0].display_name
        elif len(self.locations) <= 3:
            location_desc = " vs ".join([loc.display_name for loc in self.locations])
        else:
            location_desc = f"{len(self.locations)} lok√°ci√≥"
        
        # Param√©terek
        if len(self.parameters) == 1:
            param_desc = self.parameters[0].replace('_', ' ')
        elif len(self.parameters) <= 3:
            param_desc = ", ".join([p.replace('_', ' ') for p in self.parameters])
        else:
            param_desc = f"{len(self.parameters)} param√©ter"
        
        # Id≈ëtartam
        time_desc = self.time_range.description
        
        # Elemz√©s t√≠pus
        analysis_desc = self.analysis_type.value.replace('_', ' ')
        
        return f"{location_desc}: {param_desc} {analysis_desc} ({time_desc})"
    
    def __str__(self) -> str:
        """String reprezent√°ci√≥."""
        return f"UniversalQuery[{self.query_id}]: {self.user_description}"
    
    def get_total_locations(self) -> int:
        """√ñsszes lok√°ci√≥ sz√°ma (hierarchikus bont√°ssal)."""
        total = 0
        for location in self.locations:
            if location.type == LocationType.MULTIPLE:
                total += len(location.child_locations)
            else:
                total += 1
        return total
    
    def get_all_coordinates(self) -> List[Tuple[float, float]]:
        """√ñsszes koordin√°ta a query-b≈ël."""
        all_coords = []
        for location in self.locations:
            all_coords.extend(location.get_coordinates_list())
        return all_coords
    
    def is_multi_location_query(self) -> bool:
        """Multi-lok√°ci√≥ query-e."""
        return len(self.locations) > 1 or any(
            loc.type == LocationType.MULTIPLE for loc in self.locations
        )
    
    def is_long_term_analysis(self) -> bool:
        """Hossz√∫ t√°v√∫ elemz√©s-e (>1 √©v)."""
        return self.time_range.total_days > 365
    
    def is_historical_query(self) -> bool:
        """Historikus query-e."""
        return self.time_range.is_historical
    
    def get_estimated_complexity(self) -> str:
        """Becs√ºlt query komplexit√°s."""
        score = 0
        
        # Lok√°ci√≥k sz√°ma
        score += self.get_total_locations() * 2
        
        # Param√©terek sz√°ma
        score += len(self.parameters) * 3
        
        # Id≈ëtartam
        score += min(self.time_range.total_days // 30, 50)  # Max 50 pont
        
        # Elemz√©s t√≠pus bonyolults√°ga
        if self.analysis_type in [AnalysisType.TREND_ANALYSIS, AnalysisType.ANOMALY_DETECTION]:
            score += 20
        elif self.analysis_type in [AnalysisType.PATTERN_RECOGNITION, AnalysisType.FORECAST]:
            score += 30
        
        # Comparative mode
        if self.comparative_mode:
            score += 15
        
        # Kategoriz√°l√°s
        if score < 20:
            return "simple"
        elif score < 50:
            return "medium"
        elif score < 100:
            return "complex"
        else:
            return "very_complex"
    
    def validate(self) -> Tuple[bool, List[str]]:
        """
        Query valid√°ci√≥.
        
        Returns:
            (valid: bool, error_messages: List[str])
        """
        errors = []
        
        # Lok√°ci√≥k valid√°ci√≥
        if not self.locations:
            errors.append("Legal√°bb egy lok√°ci√≥ megad√°sa k√∂telez≈ë!")
        
        # Param√©terek valid√°ci√≥  
        if not self.parameters:
            errors.append("Legal√°bb egy param√©ter megad√°sa k√∂telez≈ë!")
        
        # Id≈ëtartam valid√°ci√≥
        if self.time_range.start_date > self.time_range.end_date:
            errors.append("A kezd≈ë d√°tum nem lehet k√©s≈ëbbi a z√°r√≥ d√°tumn√°l!")
        
        # Performance valid√°ci√≥
        estimated_complexity = self.get_estimated_complexity()
        if estimated_complexity == "very_complex" and self.max_results_per_location < 100:
            errors.append("Nagyon komplex query eset√©n n√∂velje a max_results_per_location √©rt√©k√©t!")
        
        # Anom√°lia be√°ll√≠t√°sok valid√°ci√≥
        if self.anomaly_detection:
            if self.anomaly_threshold_override and self.anomaly_threshold_override <= 0:
                errors.append("Anom√°lia k√ºsz√∂b pozit√≠v sz√°m kell legyen!")
        
        return len(errors) == 0, errors
    
    def to_dict(self) -> Dict[str, Any]:
        """Dictionary konverzi√≥."""
        return {
            'query_id': self.query_id,
            'user_description': self.user_description,
            'locations': [loc.to_dict() for loc in self.locations],
            'time_range': self.time_range.to_dict(),
            'parameters': self.parameters,
            'analysis_type': self.analysis_type.value,
            'data_sources': [ds.value for ds in self.data_sources],
            'quality_threshold': self.quality_threshold,
            'max_results_per_location': self.max_results_per_location,
            'anomaly_detection': self.anomaly_detection,
            'statistical_analysis': self.statistical_analysis,
            'trend_analysis': self.trend_analysis,
            'comparative_mode': self.comparative_mode,
            'estimated_complexity': self.get_estimated_complexity(),
            'total_locations': self.get_total_locations(),
            'is_multi_location': self.is_multi_location_query(),
            'is_long_term': self.is_long_term_analysis(),
            'is_historical': self.is_historical_query(),
            'created_at': self.created_at.isoformat(),
            'created_by': self.created_by,
            'tags': self.tags
        }


# =============================================================================
# ORIGINAL MODELS (PRESERVED FOR BACKWARD COMPATIBILITY)
# =============================================================================

@dataclass
class CityWeatherResult:
    """
    Egyetlen v√°ros id≈ëj√°r√°si eredm√©nye.
    
    Multi-city analytics alapegys√©ge.
    """
    city_name: str
    country: str
    country_code: str
    latitude: float
    longitude: float
    
    # Weather data
    value: float                    # F≈ë metrika √©rt√©ke
    metric: AnalyticsMetric        # Metrika t√≠pusa
    date: date                     # Adat d√°tuma
    rank: Optional[int] = None     # üîß FIX: UI compatibility - eredm√©ny rangsor
    
    # Additional data
    additional_data: Dict[str, Any] = field(default_factory=dict)
    
    # Metadata
    data_source: DataSource = DataSource.AUTO
    quality_score: float = 1.0     # 0.0-1.0 adat min≈ës√©g
    confidence: float = 1.0        # 0.0-1.0 megb√≠zhat√≥s√°g
    
    # Geographical context
    population: Optional[int] = None
    elevation: Optional[float] = None
    timezone: Optional[str] = None
    admin_name: Optional[str] = None  # R√©gi√≥/√°llam
    
    def __str__(self) -> str:
        """String reprezent√°ci√≥."""
        unit = self._get_metric_unit()
        return f"{self.city_name}: {self.value:.1f}{unit}"
    
    def _get_metric_unit(self) -> str:
        """Metrika m√©rt√©kegys√©g lek√©rdez√©se."""
        from .enums import get_metric_unit
        return get_metric_unit(self.metric)
    
    def get_display_name(self) -> str:
        """Teljes display n√©v."""
        return f"{self.city_name}, {self.country}"
    
    def get_coordinates(self) -> tuple[float, float]:
        """Koordin√°t√°k tuple-k√©nt."""
        return (self.latitude, self.longitude)
    
    @property
    def city(self) -> 'City':
        """
        üîß FIX: UI Compatibility - VAL√ìDI City objektum gener√°l√°sa.
        
        A UI city_manager.City class-t v√°rja, nem CityInfo-t!
        Ez a root cause minden compatibility hib√°nak.
        
        Returns:
            city_manager.City objektum a megl√©v≈ë adatokb√≥l
        """
        # Import here to avoid circular dependency
        from .city_manager import City
        
        # Create City object with matching structure
        city_obj = City(
            id=0,  # Placeholder, nem haszn√°lt
            city=self.city_name,
            lat=self.latitude,
            lon=self.longitude,
            country=self.country,
            country_code=self.country_code,
            population=self.population,
            continent=None,  # Nem el√©rhet≈ë
            admin_name=self.admin_name,
            capital=None,    # Nem el√©rhet≈ë
            timezone=self.timezone
        )
        
        # Trigger __post_init__ to generate display_name
        city_obj.__post_init__()
        
        return city_obj
    
    def to_dict(self) -> Dict[str, Any]:
        """Dictionary konverzi√≥."""
        return {
            'city_name': self.city_name,
            'country': self.country,
            'country_code': self.country_code,
            'latitude': self.latitude,
            'longitude': self.longitude,
            'value': self.value,
            'metric': self.metric.value,
            'date': self.date.isoformat(),
            'rank': self.rank,  # üîß FIX: rank mez≈ë hozz√°adva
            'additional_data': self.additional_data,
            'data_source': self.data_source.value,
            'quality_score': self.quality_score,
            'confidence': self.confidence,
            'population': self.population,
            'elevation': self.elevation,
            'timezone': self.timezone,
            'admin_name': self.admin_name
        }


@dataclass
class AnalyticsQuestion:
    """
    Analytics k√©rd√©s defin√≠ci√≥.
    
    Multi-city analytics k√©rd√©sek specifik√°ci√≥ja.
    """
    question_text: str
    question_type: QuestionType
    region_scope: RegionScope
    metric: AnalyticsMetric
    
    # Query parameters
    region_value: Optional[str] = None      # Konkr√©t r√©gi√≥ (pl. "HU", "Europe")
    date_filter: Optional[str] = None       # D√°tum sz≈±r≈ë
    ascending_order: bool = False           # Rendez√©si ir√°ny
    max_cities: int = 50                    # Maximum v√°rosok sz√°ma
    
    # Additional filters
    min_population: Optional[int] = None    # Minimum n√©pess√©g
    include_capitals_only: bool = False     # Csak f≈ëv√°rosok
    exclude_islands: bool = False           # Szigetek kiz√°r√°sa
    climate_zones: Optional[List[str]] = None # √âghajlati z√≥n√°k
    
    # Metadata
    created_at: datetime = field(default_factory=datetime.now)
    created_by: Optional[str] = None
    tags: List[str] = field(default_factory=list)
    
    def __str__(self) -> str:
        """String reprezent√°ci√≥."""
        return self.question_text
    
    def get_region_display(self) -> str:
        """R√©gi√≥ display n√©v."""
        if self.region_value:
            return f"{self.region_scope.value}: {self.region_value}"
        return self.region_scope.value
    
    def validate(self) -> tuple[bool, List[str]]:
        """
        K√©rd√©s valid√°l√°sa.
        
        Returns:
            (valid, error_messages)
        """
        errors = []
        
        if not self.question_text.strip():
            errors.append("K√©rd√©s sz√∂vege nem lehet √ºres")
        
        if self.max_cities <= 0:
            errors.append("Maximum v√°rosok sz√°ma pozit√≠v kell legyen")
        
        if self.max_cities > 1000:
            errors.append("Maximum v√°rosok sz√°ma nem lehet 1000-n√©l t√∂bb")
        
        if self.region_scope in [RegionScope.COUNTRY, RegionScope.REGION] and not self.region_value:
            errors.append(f"{self.region_scope.value} scope eset√©n region_value k√∂telez≈ë")
        
        return len(errors) == 0, errors
    
    def to_dict(self) -> Dict[str, Any]:
        """Dictionary konverzi√≥."""
        return {
            'question_text': self.question_text,
            'question_type': self.question_type.value,
            'region_scope': self.region_scope.value,
            'metric': self.metric.value,
            'region_value': self.region_value,
            'date_filter': self.date_filter,
            'ascending_order': self.ascending_order,
            'max_cities': self.max_cities,
            'min_population': self.min_population,
            'include_capitals_only': self.include_capitals_only,
            'exclude_islands': self.exclude_islands,
            'climate_zones': self.climate_zones,
            'created_at': self.created_at.isoformat(),
            'created_by': self.created_by,
            'tags': self.tags
        }


@dataclass
class AnalyticsResult:
    """
    Multi-city analytics eredm√©ny.
    
    Teljes analytics lek√©rdez√©s eredm√©nye.
    """
    question: AnalyticsQuestion
    city_results: List[CityWeatherResult]
    
    # Execution metadata
    execution_time: float                   # V√©grehajt√°si id≈ë (sec)
    total_cities_found: int                 # Tal√°latok √∂sszes sz√°ma
    data_sources_used: List[DataSource]     # Haszn√°lt adatforr√°sok
    
    # Statistics
    statistics: Dict[str, float] = field(default_factory=dict)
    
    # Provider statistics
    provider_statistics: Dict[str, Any] = field(default_factory=dict)
    
    # Quality metrics
    average_quality_score: float = 1.0
    average_confidence: float = 1.0
    
    # Timestamp
    created_at: datetime = field(default_factory=datetime.now)
    
    def __len__(self) -> int:
        """Eredm√©nyek sz√°ma."""
        return len(self.city_results)
    
    def get_top_results(self, n: int = 10) -> List[CityWeatherResult]:
        """
        Top N eredm√©ny lek√©rdez√©se.
        
        Args:
            n: Eredm√©nyek sz√°ma
            
        Returns:
            Top N CityWeatherResult
        """
        return self.city_results[:n]
    
    def get_bottom_results(self, n: int = 10) -> List[CityWeatherResult]:
        """
        Bottom N eredm√©ny lek√©rdez√©se.
        
        Args:
            n: Eredm√©nyek sz√°ma
            
        Returns:
            Bottom N CityWeatherResult
        """
        return self.city_results[-n:]
    
    def get_results_by_country(self, country_code: str) -> List[CityWeatherResult]:
        """
        Orsz√°g szerinti sz≈±r√©s.
        
        Args:
            country_code: ISO country code
            
        Returns:
            Orsz√°g eredm√©nyei
        """
        return [r for r in self.city_results if r.country_code == country_code]
    
    def get_statistics_summary(self) -> Dict[str, Any]:
        """
        Statisztikai √∂sszefoglal√≥.
        
        Returns:
            Statisztikai adatok
        """
        if not self.city_results:
            return {}
        
        values = [r.value for r in self.city_results]
        
        import statistics
        
        return {
            'count': len(values),
            'min': min(values),
            'max': max(values),
            'mean': statistics.mean(values),
            'median': statistics.median(values),
            'stdev': statistics.stdev(values) if len(values) > 1 else 0,
            'range': max(values) - min(values)
        }
    
    def get_countries_represented(self) -> List[str]:
        """
        K√©pviselt orsz√°gok list√°ja.
        
        Returns:
            Orsz√°g k√≥dok list√°ja
        """
        return list(set(r.country_code for r in self.city_results))
    
    def to_dict(self) -> Dict[str, Any]:
        """Dictionary konverzi√≥."""
        return {
            'question': self.question.to_dict(),
            'city_results': [r.to_dict() for r in self.city_results],
            'execution_time': self.execution_time,
            'total_cities_found': self.total_cities_found,
            'data_sources_used': [ds.value for ds in self.data_sources_used],
            'statistics': self.statistics,
            'provider_statistics': self.provider_statistics,
            'average_quality_score': self.average_quality_score,
            'average_confidence': self.average_confidence,
            'created_at': self.created_at.isoformat()
        }


@dataclass
class AnomalyResult:
    """
    Anom√°lia detekt√°l√°si eredm√©ny.
    
    Parameter-based analytics anom√°lia eredm√©nye.
    """
    date: date
    metric: AnalyticsMetric
    value: float
    expected_value: float
    deviation: float                # Standard devi√°ci√≥
    severity: AnomalySeverity
    anomaly_type: AnomalyType      # HIGH/LOW
    
    # Context
    description: str
    confidence: float = 1.0
    
    # Statistical context
    percentile: Optional[float] = None
    z_score: Optional[float] = None
    
    # Metadata
    detected_at: datetime = field(default_factory=datetime.now)
    detection_method: str = "statistical"
    
    def __str__(self) -> str:
        """String reprezent√°ci√≥."""
        return f"{self.date}: {self.description}"
    
    def get_severity_color(self) -> str:
        """S√∫lyoss√°g sz√≠nk√≥d."""
        from .enums import get_severity_color
        return get_severity_color(self.severity)
    
    def to_dict(self) -> Dict[str, Any]:
        """Dictionary konverzi√≥."""
        return {
            'date': self.date.isoformat(),
            'metric': self.metric.value,
            'value': self.value,
            'expected_value': self.expected_value,
            'deviation': self.deviation,
            'severity': self.severity.value,
            'anomaly_type': self.anomaly_type.value,
            'description': self.description,
            'confidence': self.confidence,
            'percentile': self.percentile,
            'z_score': self.z_score,
            'detected_at': self.detected_at.isoformat(),
            'detection_method': self.detection_method
        }


@dataclass
class QueryResults:
    """
    Parameter-based query eredm√©nyek.
    
    ParameterSelectorWidget query eredm√©nyeinek t√°rol√°sa.
    """
    query_parameters: Dict[str, Any]
    anomalies: Dict[str, List[AnomalyResult]]  # parameter_name -> anomalies
    
    # Execution metadata
    execution_time: float
    total_records_analyzed: int
    date_range: tuple[date, date]
    
    # Statistics
    anomaly_summary: Dict[str, int] = field(default_factory=dict)
    
    # Timestamp
    created_at: datetime = field(default_factory=datetime.now)
    
    def get_total_anomalies(self) -> int:
        """√ñsszes anom√°lia sz√°ma."""
        return sum(len(anomaly_list) for anomaly_list in self.anomalies.values())
    
    def get_anomalies_by_severity(self) -> Dict[str, int]:
        """
        Anom√°li√°k s√∫lyoss√°g szerint.
        
        Returns:
            {severity: count} dict
        """
        severity_counts = {}
        
        for anomaly_list in self.anomalies.values():
            for anomaly in anomaly_list:
                severity = anomaly.severity.value
                severity_counts[severity] = severity_counts.get(severity, 0) + 1
        
        return severity_counts
    
    def get_most_active_days(self, n: int = 10) -> List[tuple[date, int]]:
        """
        Legakt√≠vabb napok anom√°lia szempontj√°b√≥l.
        
        Args:
            n: Top N nap
            
        Returns:
            [(date, anomaly_count), ...]
        """
        day_counts = {}
        
        for anomaly_list in self.anomalies.values():
            for anomaly in anomaly_list:
                day = anomaly.date
                day_counts[day] = day_counts.get(day, 0) + 1
        
        # Rendez√©s anom√°lia sz√°m szerint
        sorted_days = sorted(day_counts.items(), key=lambda x: x[1], reverse=True)
        
        return sorted_days[:n]
    
    def get_anomalies_for_parameter(self, parameter: str) -> List[AnomalyResult]:
        """
        Param√©ter-specifikus anom√°li√°k.
        
        Args:
            parameter: Param√©ter neve
            
        Returns:
            Anom√°li√°k list√°ja
        """
        return self.anomalies.get(parameter, [])
    
    def to_dict(self) -> Dict[str, Any]:
        """Dictionary konverzi√≥."""
        return {
            'query_parameters': self.query_parameters,
            'anomalies': {
                param: [a.to_dict() for a in anomalies] 
                for param, anomalies in self.anomalies.items()
            },
            'execution_time': self.execution_time,
            'total_records_analyzed': self.total_records_analyzed,
            'date_range': [self.date_range[0].isoformat(), self.date_range[1].isoformat()],
            'anomaly_summary': self.anomaly_summary,
            'created_at': self.created_at.isoformat()
        }


@dataclass 
class CityInfo:
    """
    V√°ros inform√°ci√≥ modell.
    
    CityManager adatb√°zis rekord reprezent√°ci√≥.
    """
    id: int
    city: str
    latitude: float
    longitude: float
    country: str
    country_code: str
    
    # Optional fields
    population: Optional[int] = None
    continent: Optional[str] = None
    admin_name: Optional[str] = None
    capital: Optional[str] = None
    timezone: Optional[str] = None
    
    def get_display_name(self) -> str:
        """Display n√©v."""
        return f"{self.city}, {self.country}"
    
    def get_coordinates(self) -> tuple[float, float]:
        """Koordin√°t√°k."""
        return (self.latitude, self.longitude)
    
    def is_capital(self) -> bool:
        """F≈ëv√°ros-e."""
        return self.capital == "primary"
    
    def to_location(self) -> Location:
        """
        Konverzi√≥ Location objektumm√°.
        
        Returns:
            Location objektum
        """
        return Location.from_city_info(self)
    
    def to_dict(self) -> Dict[str, Any]:
        """Dictionary konverzi√≥."""
        return {
            'id': self.id,
            'city': self.city,
            'latitude': self.latitude,
            'longitude': self.longitude,
            'country': self.country,
            'country_code': self.country_code,
            'population': self.population,
            'continent': self.continent,
            'admin_name': self.admin_name,
            'capital': self.capital,
            'timezone': self.timezone
        }


# =============================================================================
# UNIVERSAL FACTORY FUNCTIONS - USER-FRIENDLY BUILDERS
# =============================================================================

def create_universal_location(
    location_type: Union[LocationType, str],
    identifier: Union[str, Tuple[float, float], List[str]],
    display_name: str,
    **kwargs
) -> UniversalLocation:
    """
    üåç UniversalLocation factory - USER-FRIENDLY
    
    Args:
        location_type: Lok√°ci√≥ t√≠pus (enum vagy string)
        identifier: Azonos√≠t√≥ (string, koordin√°ta, vagy lista)
        display_name: Megjelen√≠tend≈ë n√©v
        **kwargs: Tov√°bbi param√©terek
        
    Returns:
        UniversalLocation objektum
        
    Examples:
        ```python
        # V√°ros
        budapest = create_universal_location(
            LocationType.CITY, "Budapest", "Budapest, Magyarorsz√°g",
            coordinates=(47.4979, 19.0402), country_code="HU"
        )
        
        # Koordin√°ta
        custom_point = create_universal_location(
            LocationType.COORDINATES, (47.5, 19.0), "Custom Location"
        )
        
        # R√©gi√≥
        mediterranean = create_universal_location(
            LocationType.REGION, "mediterranean", "Mediterr√°n R√©gi√≥",
            climate_zone="Mediterranean"
        )
        ```
    """
    # String to enum conversion
    if isinstance(location_type, str):
        location_type = LocationType(location_type.lower())
    
    return UniversalLocation(
        type=location_type,
        identifier=identifier,
        display_name=display_name,
        **kwargs
    )


def create_universal_time_range(
    start_date: Union[str, date],
    end_date: Union[str, date],
    granularity: Union[TimeGranularity, str] = TimeGranularity.DAILY,
    **kwargs
) -> UniversalTimeRange:
    """
    ‚è∞ UniversalTimeRange factory - USER-FRIENDLY
    
    Args:
        start_date: Kezd≈ë d√°tum (string vagy date)
        end_date: Z√°r√≥ d√°tum (string vagy date)
        granularity: Granularit√°s (enum vagy string)
        **kwargs: Tov√°bbi param√©terek
        
    Returns:
        UniversalTimeRange objektum
        
    Examples:
        ```python
        # Egy h√©t
        last_week = create_universal_time_range(
            "2025-07-14", "2025-07-21", TimeGranularity.WEEKLY
        )
        
        # √âvtizedek
        climate_era = create_universal_time_range(
            "1980-01-01", "2024-12-31", TimeGranularity.MULTI_YEAR,
            description="Kl√≠mav√°ltoz√°s elemz√©si id≈ëszak"
        )
        ```
    """
    # String to date conversion
    if isinstance(start_date, str):
        start_date = datetime.strptime(start_date, '%Y-%m-%d').date()
    if isinstance(end_date, str):
        end_date = datetime.strptime(end_date, '%Y-%m-%d').date()
    
    # String to enum conversion
    if isinstance(granularity, str):
        granularity = TimeGranularity(granularity.lower())
    
    return UniversalTimeRange(
        start_date=start_date,
        end_date=end_date,
        granularity=granularity,
        **kwargs
    )


def create_universal_query(
    locations: List[UniversalLocation],
    time_range: UniversalTimeRange,
    parameters: List[str],
    analysis_type: Union[AnalysisType, str] = AnalysisType.CURRENT_CONDITIONS,
    **kwargs
) -> UniversalQuery:
    """
    üéØ UniversalQuery factory - USER-FRIENDLY
    
    Args:
        locations: Lok√°ci√≥k list√°ja
        time_range: Id≈ëtartom√°ny
        parameters: Weather param√©terek
        analysis_type: Elemz√©s t√≠pus (enum vagy string)
        **kwargs: Tov√°bbi param√©terek
        
    Returns:
        UniversalQuery objektum
        
    Examples:
        ```python
        query = create_universal_query(
            locations=[budapest, berlin],
            time_range=last_week,
            parameters=["temperature_2m_max", "precipitation_sum"],
            analysis_type=AnalysisType.COMPARATIVE,
            anomaly_detection=True
        )
        ```
    """
    # String to enum conversion
    if isinstance(analysis_type, str):
        analysis_type = AnalysisType(analysis_type.lower())
    
    return UniversalQuery(
        locations=locations,
        time_range=time_range,
        parameters=parameters,
        analysis_type=analysis_type,
        **kwargs
    )


# LEGACY FACTORY FUNCTIONS (PRESERVED)

def create_analytics_question(
    question_text: str,
    question_type: QuestionType,
    region_scope: RegionScope, 
    metric: AnalyticsMetric,
    **kwargs
) -> AnalyticsQuestion:
    """
    AnalyticsQuestion factory function.
    
    Args:
        question_text: K√©rd√©s sz√∂vege
        question_type: K√©rd√©s t√≠pusa
        region_scope: R√©gi√≥ hat√≥k√∂r
        metric: Analytics metrika
        **kwargs: Tov√°bbi param√©terek
        
    Returns:
        AnalyticsQuestion instance
    """
    return AnalyticsQuestion(
        question_text=question_text,
        question_type=question_type,
        region_scope=region_scope,
        metric=metric,
        **kwargs
    )


def create_city_weather_result(
    city_name: str,
    country: str,
    country_code: str,
    latitude: float,
    longitude: float,
    value: float,
    metric: AnalyticsMetric,
    result_date: date,
    **kwargs
) -> CityWeatherResult:
    """
    CityWeatherResult factory function.
    
    Args:
        city_name: V√°ros neve
        country: Orsz√°g neve
        country_code: Orsz√°g k√≥dja
        latitude: Sz√©less√©g
        longitude: Hossz√∫s√°g
        value: Metrika √©rt√©ke
        metric: Analytics metrika
        result_date: Eredm√©ny d√°tuma
        **kwargs: Tov√°bbi param√©terek
        
    Returns:
        CityWeatherResult instance
    """
    return CityWeatherResult(
        city_name=city_name,
        country=country,
        country_code=country_code,
        latitude=latitude,
        longitude=longitude,
        value=value,
        metric=metric,
        date=result_date,
        **kwargs
    )


# LOCATION FACTORY FUNCTIONS - HUNGARIAN MAP COMPATIBILITY

def create_location(
    identifier: str,
    display_name: str,
    latitude: float,
    longitude: float,
    **kwargs
) -> Location:
    """
    üó∫Ô∏è Location factory function - HungarianLocationSelector kompatibilit√°s.
    
    Args:
        identifier: Lok√°ci√≥ azonos√≠t√≥
        display_name: Megjelen√≠tend≈ë n√©v
        latitude: F√∂ldrajzi sz√©less√©g
        longitude: F√∂ldrajzi hossz√∫s√°g
        **kwargs: Tov√°bbi param√©terek (country_code, timezone, metadata)
        
    Returns:
        Location objektum
        
    Examples:
        ```python
        budapest = create_location(
            "Budapest", "Budapest, Magyarorsz√°g",
            47.4979, 19.0402,
            country_code="HU", timezone="Europe/Budapest",
            metadata={'county': 'Budapest', 'region': 'west_border'}
        )
        ```
    """
    return Location(
        identifier=identifier,
        display_name=display_name,
        latitude=latitude,
        longitude=longitude,
        **kwargs
    )


def create_location_from_coordinates(
    latitude: float,
    longitude: float,
    display_name: Optional[str] = None,
    **kwargs
) -> Location:
    """
    üó∫Ô∏è Koordin√°t√°kb√≥l Location l√©trehoz√°sa - t√©rk√©pes komponensekhez.
    
    Args:
        latitude: F√∂ldrajzi sz√©less√©g
        longitude: F√∂ldrajzi hossz√∫s√°g
        display_name: Megjelen√≠tend≈ë n√©v (opcion√°lis)
        **kwargs: Tov√°bbi param√©terek
        
    Returns:
        Location objektum
    """
    return Location.from_coordinates(latitude, longitude, display_name, **kwargs)


# =============================================================================
# EXPORT API - UNIVERSAL + LEGACY + LOCATION COMPATIBILITY
# =============================================================================

__all__ = [
    # Location Compatibility - HUNGARIAN MAP SUPPORT
    'Location',
    'create_location',
    'create_location_from_coordinates',
    
    # Universal Weather Research Platform - NEW
    'LocationType', 'TimeGranularity', 'AnalysisType',
    'UniversalLocation', 'UniversalTimeRange', 'UniversalQuery',
    'create_universal_location', 'create_universal_time_range', 'create_universal_query',
    
    # Legacy Models - PRESERVED
    'CityWeatherResult',
    'AnalyticsQuestion', 
    'AnalyticsResult',
    'AnomalyResult',
    'QueryResults',
    'CityInfo',
    'create_analytics_question',
    'create_city_weather_result'
]