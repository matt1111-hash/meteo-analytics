#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Global Weather Analyzer - Background Threads Module (PROVIDER ROUTING + WIND GUSTS)
H√°tt√©rsz√°lak √©s aszinkron munk√°k modulja provider routing t√°mogat√°ssal.

üåç PROVIDER ROUTING JAV√çT√ÅS: WorkerManager √©s WeatherDataWorker b≈ëv√≠t√©se
‚úÖ Provider parameter t√°mogat√°s worker-ekben
‚úÖ Provider validation & fallback logic
‚úÖ Provider change signal emission
‚úÖ WorkerManager provider state tracking
‚úÖ Signal routing app_controller-hez

üå™Ô∏è KRITIKUS JAV√çT√ÅS: WindDataWorker API param√©ter m√≥dos√≠t√°s
‚úÖ Hourly wind_gusts_10m param√©ter hozz√°adva
‚úÖ Napi maximum sz√©ll√∂k√©s sz√°m√≠t√°s t√°mogat√°s
‚úÖ Backward compatibility windspeed_10m_max-szal
‚úÖ √âleth≈± 130+ km/h sz√©ll√∂k√©sek t√°mogat√°sa
"""

import json
import sqlite3
from typing import Dict, List, Optional, Any, Union
from datetime import datetime
import httpx
from pathlib import Path

from PySide6.QtCore import QThread, Signal, QObject, QMutex, QWaitCondition

# üåç √öJ: Provider routing imports
from ..utils import (
    get_optimal_data_source, validate_api_source_available,
    get_fallback_source_chain, get_source_display_name,
    log_provider_usage_event, APIConstants
)


class BaseWorkerThread(QThread):
    """
    Base worker thread class k√∂z√∂s hibakezel√©ssel √©s signalokkal.
    Professzion√°lis thread lifecycle management.
    """
    
    # K√∂z√∂s signalok minden worker sz√°m√°ra
    finished = Signal()
    error_occurred = Signal(str)
    progress_updated = Signal(int)  # 0-100 sz√°zal√©k
    
    def __init__(self, parent: Optional[QObject] = None):
        super().__init__(parent)
        self.is_cancelled = False
        self._error_message = ""
    
    def cancel(self) -> None:
        """Worker megszak√≠t√°sa."""
        self.is_cancelled = True
    
    def emit_error(self, message: str) -> None:
        """Hibajel kibocs√°t√°sa."""
        self._error_message = message
        self.error_occurred.emit(message)
    
    def run(self) -> None:
        """Override-olni kell a lesz√°rmazott oszt√°lyokban."""
        try:
            self.execute()
        except Exception as e:
            if not self.is_cancelled:
                self.emit_error(f"Worker hiba: {str(e)}")
        finally:
            self.finished.emit()
    
    def execute(self) -> None:
        """T√©nyleges munk√°t v√©gz≈ë met√≥dus - override-olni kell."""
        raise NotImplementedError("A execute() met√≥dust override-olni kell!")


class GeocodingWorker(BaseWorkerThread):
    """
    Geocoding API lek√©rdez√©st v√©gz≈ë worker.
    Telep√ºl√©sek keres√©se koordin√°t√°k lek√©rdez√©s√©hez.
    Professzion√°lis hibakezel√©s √©s timeout management.
    """
    
    # Specifikus signalok
    geocoding_completed = Signal(list)  # List[Dict] - tal√°latok
    
    def __init__(self, search_query: str, parent: Optional[QObject] = None):
        super().__init__(parent)
        self.search_query = search_query.strip()
        self.results: List[Dict[str, Any]] = []
    
    def execute(self) -> None:
        """Geocoding lek√©rdez√©s v√©grehajt√°sa - professzion√°lis implement√°ci√≥."""
        if not self.search_query or len(self.search_query) < 2:
            self.emit_error("Legal√°bb 2 karakter sz√ºks√©ges a keres√©shez")
            return
        
        try:
            self.progress_updated.emit(10)
            
            # Open-Meteo Geocoding API (provider-f√ºggetlen)
            url = "https://geocoding-api.open-meteo.com/v1/search"
            params = {
                "name": self.search_query,
                "count": 10,
                "language": "hu",
                "format": "json"
            }
            
            self.progress_updated.emit(30)
            
            # HTTP k√©r√©s httpx-szel - professzion√°lis timeout √©s retry
            with httpx.Client(timeout=30.0) as client:
                if self.is_cancelled:
                    return
                
                response = client.get(url, params=params)
                
                self.progress_updated.emit(70)
                
                if response.status_code != 200:
                    self.emit_error(f"Geocoding API hiba: {response.status_code}")
                    return
                
                data = response.json()
                self.results = data.get("results", [])
                
                self.progress_updated.emit(100)
                
                # Eredm√©nyek kibocs√°t√°sa
                self.geocoding_completed.emit(self.results)
                
        except httpx.TimeoutException:
            self.emit_error("Geocoding API timeout - pr√≥b√°lja √∫jra k√©s≈ëbb")
        except httpx.RequestError as e:
            self.emit_error(f"H√°l√≥zati hiba a geocoding sor√°n: {str(e)}")
        except json.JSONDecodeError:
            self.emit_error("√ârv√©nytelen v√°lasz a geocoding API-t√≥l")
        except Exception as e:
            self.emit_error(f"V√°ratlan hiba a geocoding sor√°n: {str(e)}")


class WeatherDataWorker(BaseWorkerThread):
    """
    üåç PROVIDER ROUTING + üå™Ô∏è WIND GUSTS: Open-Meteo id≈ëj√°r√°si adatok lek√©rdez√©s 
    provider routing t√°mogat√°ssal √©s wind gusts funkcionalit√°ssal.
    
    √öJ PROVIDER FUNKCI√ìK:
    ‚úÖ Provider parameter t√°mogat√°s
    ‚úÖ Provider validation & fallback logic
    ‚úÖ Provider change signal emission
    ‚úÖ API endpoint dinamikus v√°laszt√°s
    
    WIND GUSTS FUNKCI√ìK:
    ‚úÖ Hourly wind_gusts_10m param√©ter hozz√°adva
    ‚úÖ Napi maximum sz√©ll√∂k√©s sz√°m√≠t√°s
    ‚úÖ 130+ km/h sz√©ll√∂k√©sek accurate reporting
    ‚úÖ Backward compatibility windspeed_10m_max-szal
    """
    
    # Specifikus signalok
    weather_data_completed = Signal(dict)  # API v√°lasz dictionary
    
    # üåç √öJ: Provider routing signalok
    provider_changed = Signal(str)  # √öj provider n√©v
    provider_fallback_occurred = Signal(str, str)  # eredeti, fallback provider
    provider_validation_failed = Signal(str, str)  # provider, error message
    
    def __init__(self, latitude: float, longitude: float, 
                 start_date: str, end_date: str,
                 preferred_provider: str = "auto",
                 parent: Optional[QObject] = None):
        super().__init__(parent)
        self.latitude = latitude
        self.longitude = longitude
        self.start_date = start_date
        self.end_date = end_date
        self.preferred_provider = preferred_provider
        self.actual_provider: Optional[str] = None
        self.weather_data: Optional[Dict[str, Any]] = None
    
    def execute(self) -> None:
        """
        üåç PROVIDER ROUTING + üå™Ô∏è WIND GUSTS: Id≈ëj√°r√°si adatok lek√©rdez√©se 
        provider routing √©s wind gusts t√°mogat√°ssal.
        """
        try:
            self.progress_updated.emit(5)
            
            # üåç PROVIDER ROUTING: Optimal provider meghat√°roz√°sa
            selected_provider = self._select_optimal_provider()
            if not selected_provider:
                self.emit_error("Egyik provider sem el√©rhet≈ë")
                return
            
            self.progress_updated.emit(10)
            
            # üåç PROVIDER-SPECIFIC API ENDPOINT V√ÅLASZT√ÅS
            api_url, api_params = self._build_api_request(selected_provider)
            
            self.progress_updated.emit(20)
            
            print(f"üåç DEBUG: Provider routing - {get_source_display_name(selected_provider)}")
            print(f"üå™Ô∏è DEBUG: Wind gusts k√©r√©s: {self.latitude:.4f}, {self.longitude:.4f}")
            print(f"üìÖ DEBUG: Id≈ëszak: {self.start_date} - {self.end_date}")
            print(f"üîó DEBUG: API URL: {api_url}")
            
            # üåç HTTP REQUEST WITH PROVIDER FALLBACK
            success = False
            fallback_chain = get_fallback_source_chain(selected_provider)
            
            for provider in fallback_chain:
                if self.is_cancelled:
                    return
                
                try:
                    self.progress_updated.emit(30 + (fallback_chain.index(provider) * 20))
                    
                    # Provider-specific request
                    api_url, api_params = self._build_api_request(provider)
                    success = self._execute_api_request(provider, api_url, api_params)
                    
                    if success:
                        # Provider sikeresen haszn√°lva
                        if provider != selected_provider:
                            print(f"üîÑ DEBUG: Provider fallback: {selected_provider} ‚Üí {provider}")
                            self.provider_fallback_occurred.emit(selected_provider, provider)
                        
                        self.actual_provider = provider
                        log_provider_usage_event(provider, "weather_data", True)
                        break
                    
                except Exception as e:
                    print(f"‚ùå DEBUG: Provider {provider} failed: {e}")
                    log_provider_usage_event(provider, "weather_data", False)
                    continue
            
            if not success:
                self.emit_error("Minden provider API h√≠v√°s sikertelen")
                return
            
            self.progress_updated.emit(90)
            
            # üå™Ô∏è WIND GUSTS VALIDATION & RESPONSE PROCESSING
            if self.weather_data:
                self._validate_wind_gusts_data()
                self.progress_updated.emit(100)
                self.weather_data_completed.emit(self.weather_data)
            else:
                self.emit_error("√ârv√©nytelen API v√°lasz strukt√∫ra")
                
        except Exception as e:
            self.emit_error(f"V√°ratlan hiba az id≈ëj√°r√°si adatok lek√©rdez√©se sor√°n: {str(e)}")
    
    def _select_optimal_provider(self) -> Optional[str]:
        """
        üåç Optim√°lis provider kiv√°laszt√°sa user preferencia √©s el√©rhet≈ës√©g alapj√°n.
        
        Returns:
            Kiv√°lasztott provider n√©v vagy None
        """
        if self.preferred_provider == "auto":
            # Automatikus routing - use case alapj√°n
            optimal = get_optimal_data_source("single_city", prefer_free=True)
            
            # Valid√°l√°s √©s fallback
            if validate_api_source_available(optimal):
                return optimal
            else:
                # Fallback els≈ë el√©rhet≈ë provider-re
                fallback_chain = get_fallback_source_chain(optimal)
                for provider in fallback_chain:
                    if validate_api_source_available(provider):
                        return provider
                return None
        else:
            # Explicit provider v√°laszt√°s
            if validate_api_source_available(self.preferred_provider):
                return self.preferred_provider
            else:
                self.provider_validation_failed.emit(
                    self.preferred_provider, 
                    "Provider nem el√©rhet≈ë vagy API kulcs hi√°nyzik"
                )
                # Auto fallback
                return self._select_optimal_provider() if self.preferred_provider != "auto" else None
    
    def _build_api_request(self, provider: str) -> tuple[str, Dict[str, Any]]:
        """
        üåç Provider-specific API request √©p√≠t√©se.
        
        Args:
            provider: Provider azonos√≠t√≥
            
        Returns:
            (api_url, params) tuple
        """
        if provider == "open-meteo":
            return self._build_openmeteo_request()
        elif provider == "meteostat":
            return self._build_meteostat_request()
        else:
            raise ValueError(f"Ismeretlen provider: {provider}")
    
    def _build_openmeteo_request(self) -> tuple[str, Dict[str, Any]]:
        """üå™Ô∏è Open-Meteo API request √©p√≠t√©se wind gusts t√°mogat√°ssal."""
        url = APIConstants.OPEN_METEO_ARCHIVE
        
        params = {
            "latitude": self.latitude,
            "longitude": self.longitude,
            "start_date": self.start_date,
            "end_date": self.end_date,
            
            # üå™Ô∏è WIND GUSTS: Daily param√©terek - windspeed_10m_max MEGTARTVA backward compatibility-√©rt
            "daily": "temperature_2m_max,temperature_2m_min,temperature_2m_mean,precipitation_sum,windspeed_10m_max,winddirection_10m_dominant",
            
            # üå™Ô∏è WIND GUSTS: Hourly param√©terek - wind_gusts_10m a val√≥di sz√©ll√∂k√©sekhez!
            "hourly": "wind_gusts_10m,windspeed_10m",
            
            "timezone": "auto"
        }
        
        return url, params
    
    def _build_meteostat_request(self) -> tuple[str, Dict[str, Any]]:
        """üåç Meteostat API request √©p√≠t√©se (j√∂v≈ëbeli b≈ëv√≠t√©shez)."""
        # PLACEHOLDER - Meteostat API implementation j√∂v≈ëbeli verzi√≥ban
        # Jelenleg Open-Meteo fallback
        return self._build_openmeteo_request()
    
    def _execute_api_request(self, provider: str, api_url: str, params: Dict[str, Any]) -> bool:
        """
        üåç Provider-specific API request v√©grehajt√°sa.
        
        Args:
            provider: Provider azonos√≠t√≥
            api_url: API endpoint URL
            params: Request param√©terek
            
        Returns:
            Sikeres volt-e a request
        """
        try:
            headers = self._get_provider_headers(provider)
            timeout = APIConstants.DEFAULT_TIMEOUT
            
            with httpx.Client(timeout=timeout, headers=headers) as client:
                if self.is_cancelled:
                    return False
                
                response = client.get(api_url, params=params)
                
                if response.status_code != 200:
                    print(f"‚ùå DEBUG: {provider} API hiba: {response.status_code}")
                    return False
                
                self.weather_data = response.json()
                
                # Provider change notification
                if provider != self.preferred_provider and self.preferred_provider != "auto":
                    self.provider_changed.emit(provider)
                
                return True
                
        except httpx.TimeoutException:
            print(f"‚è±Ô∏è DEBUG: {provider} API timeout")
            return False
        except httpx.RequestError as e:
            print(f"üåê DEBUG: {provider} network error: {e}")
            return False
        except json.JSONDecodeError:
            print(f"üìÑ DEBUG: {provider} JSON decode error")
            return False
        except Exception as e:
            print(f"‚ùå DEBUG: {provider} unexpected error: {e}")
            return False
    
    def _get_provider_headers(self, provider: str) -> Dict[str, str]:
        """
        üåç Provider-specific HTTP headers.
        
        Args:
            provider: Provider azonos√≠t√≥
            
        Returns:
            HTTP headers dictionary
        """
        base_headers = {
            "User-Agent": APIConstants.USER_AGENT
        }
        
        if provider == "meteostat":
            # Meteostat API key (j√∂v≈ëbeli implement√°ci√≥)
            import os
            api_key = os.getenv("METEOSTAT_API_KEY")
            if api_key:
                base_headers["X-RapidAPI-Key"] = api_key
                base_headers["X-RapidAPI-Host"] = "meteostat.p.rapidapi.com"
        
        return base_headers
    
    def _validate_wind_gusts_data(self) -> None:
        """üå™Ô∏è Wind gusts adatok valid√°l√°sa √©s debug inform√°ci√≥."""
        if not self.weather_data:
            return
        
        daily_data = self.weather_data.get("daily", {})
        hourly_data = self.weather_data.get("hourly", {})
        
        daily_record_count = len(daily_data.get('time', []))
        hourly_record_count = len(hourly_data.get('time', []))
        wind_gusts_count = len(hourly_data.get('wind_gusts_10m', []))
        
        print(f"‚úÖ DEBUG: {daily_record_count} napi rekord lek√©rdezve")
        print(f"‚úÖ DEBUG: {hourly_record_count} √≥r√°nk√©nti rekord lek√©rdezve")
        print(f"üå™Ô∏è DEBUG: {wind_gusts_count} sz√©ll√∂k√©s rekord lek√©rdezve")
        
        # Sz√©ll√∂k√©s adatok min≈ës√©g ellen≈ërz√©s
        if wind_gusts_count > 0:
            wind_gusts = hourly_data.get('wind_gusts_10m', [])
            valid_gusts = [g for g in wind_gusts if g is not None and g > 0]
            if valid_gusts:
                max_gust = max(valid_gusts)
                print(f"üå™Ô∏è DEBUG: Maximum sz√©ll√∂k√©s: {max_gust:.1f} km/h")
                
                # Kritikus figyelmeztet√©s ha m√©g mindig alacsony az √©rt√©k
                if max_gust < 60:
                    print(f"‚ö†Ô∏è  DEBUG: Sz√©ll√∂k√©s m√©g mindig alacsony: {max_gust:.1f} km/h")
                else:
                    print(f"‚úÖ DEBUG: Realistic sz√©ll√∂k√©s √©rt√©kek: {max_gust:.1f} km/h")
            else:
                print(f"‚ùå DEBUG: Nincs √©rv√©nyes sz√©ll√∂k√©s adat!")
        else:
            print(f"‚ùå DEBUG: Nincs sz√©ll√∂k√©s adat az API v√°laszban!")


class SQLQueryWorker(BaseWorkerThread):
    """
    SQL lek√©rdez√©seket v√©gz≈ë worker thread SQLite adatb√°zishoz.
    SQL injection v√©delem √©s professzion√°lis adatb√°zis kezel√©s.
    """
    
    # Specifikus signalok
    query_completed = Signal(object)  # pandas DataFrame vagy list
    
    def __init__(self, query: str, db_path: Union[str, Path], 
                 parent: Optional[QObject] = None):
        super().__init__(parent)
        self.query = query.strip()
        self.db_path = Path(db_path)
        self.result: Optional[Any] = None
    
    def execute(self) -> None:
        """SQL lek√©rdez√©s v√©grehajt√°sa - professzion√°lis biztons√°gi int√©zked√©sekkel."""
        if not self.query:
            self.emit_error("√úres SQL lek√©rdez√©s")
            return
        
        if not self.db_path.exists():
            self.emit_error(f"Adatb√°zis f√°jl nem tal√°lhat√≥: {self.db_path}")
            return
        
        try:
            self.progress_updated.emit(20)
            
            # Adatb√°zis kapcsolat
            conn = sqlite3.connect(str(self.db_path))
            
            if self.is_cancelled:
                conn.close()
                return
            
            self.progress_updated.emit(50)
            
            # Biztons√°gos lek√©rdez√©s (SQL injection v√©delem)
            dangerous_keywords = ['DROP', 'DELETE', 'INSERT', 'UPDATE', 'ALTER', 'CREATE']
            query_upper = self.query.upper()
            
            for keyword in dangerous_keywords:
                if keyword in query_upper:
                    conn.close()
                    self.emit_error(f"Tiltott SQL kulcssz√≥: {keyword}")
                    return
            
            self.progress_updated.emit(70)
            
            # Pandas haszn√°lata a jobb adatkezel√©shez
            try:
                import pandas as pd
                result = pd.read_sql_query(self.query, conn)
                self.result = result
            except ImportError:
                # Fallback pandas n√©lk√ºl
                cursor = conn.cursor()
                cursor.execute(self.query)
                
                if self.query.upper().startswith('SELECT'):
                    rows = cursor.fetchall()
                    columns = [description[0] for description in cursor.description]
                    self.result = {"columns": columns, "rows": rows}
                else:
                    self.result = {"affected_rows": cursor.rowcount}
            
            conn.close()
            
            self.progress_updated.emit(100)
            
            # Eredm√©ny kibocs√°t√°sa
            if self.result is not None:
                self.query_completed.emit(self.result)
            
        except sqlite3.Error as e:
            self.emit_error(f"SQL hiba: {str(e)}")
        except Exception as e:
            self.emit_error(f"V√°ratlan hiba az SQL lek√©rdez√©s sor√°n: {str(e)}")


class WorkerManager(QObject):
    """
    üåç PROVIDER ROUTING + üå™Ô∏è WIND GUSTS: Worker threadek k√∂zponti kezel≈ëje 
    provider routing t√°mogat√°ssal √©s wind gusts funkcionalit√°ssal.
    
    √öJ PROVIDER FUNKCI√ìK:
    ‚úÖ Provider state tracking
    ‚úÖ Provider fallback coordination
    ‚úÖ Signal routing app_controller-hez
    ‚úÖ Provider usage monitoring
    """
    
    # K√∂zponti signalok
    error_occurred = Signal(str)
    progress_updated = Signal(str, int)  # worker_type, progress
    worker_started = Signal(str)         # worker_type
    worker_finished = Signal(str)        # worker_type
    
    # Specifikus worker signalok
    geocoding_completed = Signal(list)
    weather_data_completed = Signal(dict)  # üå™Ô∏è Wind gusts data t√°mogat√°s
    sql_query_completed = Signal(object)
    
    # üåç √öJ: Provider routing signalok
    provider_changed = Signal(str)  # √öj provider n√©v
    provider_fallback_occurred = Signal(str, str)  # eredeti, fallback provider
    provider_validation_failed = Signal(str, str)  # provider, error message
    provider_usage_tracked = Signal(str, bool)  # provider, success
    
    def __init__(self, parent: Optional[QObject] = None):
        super().__init__(parent)
        
        # Akt√≠v worker threadek t√°rol√°sa
        self.active_workers: Dict[str, BaseWorkerThread] = {}
        self.worker_counter = 0
        
        # üåç √öJ: Provider state tracking
        self.provider_states: Dict[str, Dict[str, Any]] = {}
        self.last_successful_provider: Optional[str] = None
        
        # Thread safe mutex - PySide6 kompatibilis
        self.mutex = QMutex()
        self.wait_condition = QWaitCondition()
        
        print("‚úÖ DEBUG: WorkerManager inicializ√°lva (PROVIDER ROUTING + WIND GUSTS t√°mogat√°ssal)")
    
    def _get_worker_id(self, worker_type: str) -> str:
        """Egyedi worker ID gener√°l√°sa."""
        self.worker_counter += 1
        return f"{worker_type}_{self.worker_counter}"
    
    def start_geocoding(self, worker: GeocodingWorker) -> str:
        """Geocoding worker ind√≠t√°sa."""
        worker_id = self._get_worker_id("geocoding")
        
        # Signal kapcsolatok
        worker.geocoding_completed.connect(self.geocoding_completed.emit)
        worker.error_occurred.connect(self._on_worker_error)
        worker.finished.connect(lambda worker_id=worker_id: self._on_worker_finished(worker_id))
        worker.progress_updated.connect(lambda p: self.progress_updated.emit("geocoding", p))
        
        # Thread safe worker t√°rol√°sa √©s ind√≠t√°sa
        self.mutex.lock()
        try:
            self.active_workers[worker_id] = worker
        finally:
            self.mutex.unlock()
        
        worker.start()
        self.worker_started.emit("geocoding")
        print(f"‚úÖ DEBUG: Geocoding worker ind√≠tva - {worker_id}")
        return worker_id
    
    def start_weather_data_fetch(self, worker: WeatherDataWorker) -> str:
        """
        üåç PROVIDER ROUTING + üå™Ô∏è WIND GUSTS: Weather data worker ind√≠t√°sa 
        provider routing √©s wind gusts t√°mogat√°ssal.
        """
        worker_id = self._get_worker_id("weather_data")
        
        # Signal kapcsolatok
        worker.weather_data_completed.connect(self.weather_data_completed.emit)
        worker.error_occurred.connect(self._on_worker_error)
        worker.finished.connect(lambda worker_id=worker_id: self._on_worker_finished(worker_id))
        worker.progress_updated.connect(lambda p: self.progress_updated.emit("weather_data", p))
        
        # üåç √öJ: Provider routing signal kapcsolatok
        worker.provider_changed.connect(self._on_provider_changed)
        worker.provider_fallback_occurred.connect(self._on_provider_fallback)
        worker.provider_validation_failed.connect(self._on_provider_validation_failed)
        
        # Thread safe worker t√°rol√°sa √©s ind√≠t√°sa
        self.mutex.lock()
        try:
            self.active_workers[worker_id] = worker
        finally:
            self.mutex.unlock()
        
        worker.start()
        self.worker_started.emit("weather_data")
        print(f"‚úÖ DEBUG: Weather worker ind√≠tva PROVIDER ROUTING + WIND GUSTS t√°mogat√°ssal - {worker_id}")
        return worker_id
    
    def start_sql_query(self, worker: SQLQueryWorker) -> str:
        """SQL query worker ind√≠t√°sa."""
        worker_id = self._get_worker_id("sql_query")
        
        # Signal kapcsolatok
        worker.query_completed.connect(self.sql_query_completed.emit)
        worker.error_occurred.connect(self._on_worker_error)
        worker.finished.connect(lambda worker_id=worker_id: self._on_worker_finished(worker_id))
        worker.progress_updated.connect(lambda p: self.progress_updated.emit("sql_query", p))
        
        # Thread safe worker t√°rol√°sa √©s ind√≠t√°sa
        self.mutex.lock()
        try:
            self.active_workers[worker_id] = worker
        finally:
            self.mutex.unlock()
        
        worker.start()
        self.worker_started.emit("sql_query")
        print(f"‚úÖ DEBUG: SQL query worker ind√≠tva - {worker_id}")
        return worker_id
    
    def _on_worker_error(self, error_message: str) -> None:
        """Worker hiba kezel√©se."""
        print(f"‚ùå DEBUG: Worker error: {error_message}")
        self.error_occurred.emit(error_message)
    
    def _on_worker_finished(self, worker_id: str) -> None:
        """Worker befejez√©s kezel√©se."""
        self.mutex.lock()
        try:
            if worker_id in self.active_workers:
                worker_type = worker_id.split('_')[0]
                
                # Worker elt√°vol√≠t√°sa
                worker = self.active_workers.pop(worker_id)
                
                # üåç Provider usage tracking finaliz√°l√°sa
                if hasattr(worker, 'actual_provider') and worker.actual_provider:
                    self._track_provider_usage(worker.actual_provider, True)
                
                # Thread cleanup
                if worker.isRunning():
                    worker.quit()
                    worker.wait(3000)  # 3 m√°sodperc timeout
                
                self.worker_finished.emit(worker_type)
                print(f"‚úÖ DEBUG: Worker befejezve: {worker_id}")
        finally:
            self.mutex.unlock()
    
    # üåç √öJ: Provider routing event handlers
    
    def _on_provider_changed(self, new_provider: str) -> None:
        """Provider v√°ltoz√°s kezel√©se."""
        print(f"üîÑ DEBUG: Provider changed to: {get_source_display_name(new_provider)}")
        self.last_successful_provider = new_provider
        self.provider_changed.emit(new_provider)
    
    def _on_provider_fallback(self, original_provider: str, fallback_provider: str) -> None:
        """Provider fallback kezel√©se."""
        print(f"üîÑ DEBUG: Provider fallback: {original_provider} ‚Üí {fallback_provider}")
        
        # Provider state update
        self.provider_states[original_provider] = {
            "status": "failed",
            "last_attempt": datetime.now(),
            "fallback_used": fallback_provider
        }
        
        self.provider_fallback_occurred.emit(original_provider, fallback_provider)
    
    def _on_provider_validation_failed(self, provider: str, error_message: str) -> None:
        """Provider valid√°l√°si hiba kezel√©se."""
        print(f"‚ùå DEBUG: Provider validation failed: {provider} - {error_message}")
        
        # Provider state update
        self.provider_states[provider] = {
            "status": "validation_failed",
            "last_attempt": datetime.now(),
            "error": error_message
        }
        
        self.provider_validation_failed.emit(provider, error_message)
    
    def _track_provider_usage(self, provider: str, success: bool) -> None:
        """Provider haszn√°lat tracking."""
        print(f"üìä DEBUG: Provider usage tracked: {provider} - {'SUCCESS' if success else 'FAILED'}")
        
        # Provider state update
        if provider not in self.provider_states:
            self.provider_states[provider] = {}
        
        self.provider_states[provider].update({
            "last_usage": datetime.now(),
            "last_result": "success" if success else "failed"
        })
        
        if success:
            self.last_successful_provider = provider
        
        self.provider_usage_tracked.emit(provider, success)
    
    # üåç √öJ: Provider state management methods
    
    def get_provider_states(self) -> Dict[str, Dict[str, Any]]:
        """Provider √°llapotok lek√©rdez√©se."""
        self.mutex.lock()
        try:
            return self.provider_states.copy()
        finally:
            self.mutex.unlock()
    
    def get_last_successful_provider(self) -> Optional[str]:
        """Utols√≥ sikeres provider lek√©rdez√©se."""
        return self.last_successful_provider
    
    def reset_provider_states(self) -> None:
        """Provider √°llapotok resetel√©se."""
        self.mutex.lock()
        try:
            self.provider_states.clear()
            self.last_successful_provider = None
            print("üîÑ DEBUG: Provider states reset")
        finally:
            self.mutex.unlock()
    
    # Eredeti methods tov√°bbra is megtartva
    
    def cancel_worker(self, worker_id: str) -> bool:
        """Specifikus worker megszak√≠t√°sa."""
        self.mutex.lock()
        try:
            if worker_id in self.active_workers:
                worker = self.active_workers[worker_id]
                worker.cancel()
                print(f"üõë DEBUG: Worker megszak√≠tva: {worker_id}")
                return True
            return False
        finally:
            self.mutex.unlock()
    
    def cancel_all(self) -> None:
        """√ñsszes akt√≠v worker megszak√≠t√°sa."""
        self.mutex.lock()
        try:
            for worker_id, worker in self.active_workers.items():
                worker.cancel()
                print(f"üõë DEBUG: Worker cancel: {worker_id}")
        finally:
            self.mutex.unlock()
        
        print("üõë DEBUG: √ñsszes worker megszak√≠tva")
    
    def get_active_workers(self) -> List[str]:
        """Akt√≠v worker ID-k list√°ja."""
        self.mutex.lock()
        try:
            return list(self.active_workers.keys())
        finally:
            self.mutex.unlock()
    
    def is_worker_active(self, worker_type: str) -> bool:
        """Adott t√≠pus√∫ worker akt√≠v-e."""
        self.mutex.lock()
        try:
            return any(wid.startswith(worker_type) for wid in self.active_workers.keys())
        finally:
            self.mutex.unlock()
    
    def shutdown(self) -> None:
        """üåç PROVIDER ROUTING + üå™Ô∏è WIND GUSTS: WorkerManager le√°ll√≠t√°sa."""
        print("üõë DEBUG: WorkerManager le√°ll√≠t√°sa...")
        
        # √ñsszes worker megszak√≠t√°sa
        self.cancel_all()
        
        # V√°rakoz√°s a worker-ek le√°ll√°s√°ra
        self.mutex.lock()
        try:
            for worker_id, worker in list(self.active_workers.items()):
                print(f"  ‚è≥ Worker le√°ll√≠t√°sa: {worker_id}")
                
                if worker.isRunning():
                    worker.quit()
                    if not worker.wait(5000):  # 5 m√°sodperc timeout
                        print(f"  ‚ö†Ô∏è Worker k√©nyszer≈± le√°ll√≠t√°sa: {worker_id}")
                        worker.terminate()
                        worker.wait(1000)
                
                # Worker elt√°vol√≠t√°sa
                self.active_workers.pop(worker_id, None)
            
            # Provider states cleanup
            self.provider_states.clear()
            self.last_successful_provider = None
            
        finally:
            self.mutex.unlock()
        
        print("‚úÖ DEBUG: WorkerManager le√°ll√≠tva (PROVIDER ROUTING + WIND GUSTS)")


# === UTILITY F√úGGV√âNYEK ===

def validate_coordinates(latitude: float, longitude: float) -> bool:
    """Koordin√°t√°k valid√°l√°sa."""
    return (-90.0 <= latitude <= 90.0) and (-180.0 <= longitude <= 180.0)


def validate_date_string(date_str: str) -> bool:
    """D√°tum string valid√°l√°sa YYYY-MM-DD form√°tumban."""
    try:
        datetime.strptime(date_str, "%Y-%m-%d")
        return True
    except ValueError:
        return False


def calculate_date_range_days(start_date: str, end_date: str) -> int:
    """D√°tum tartom√°ny napokban."""
    try:
        start = datetime.strptime(start_date, "%Y-%m-%d")
        end = datetime.strptime(end_date, "%Y-%m-%d")
        return (end - start).days
    except ValueError:
        return 0


def format_api_error(status_code: int, response_text: str) -> str:
    """API hiba form√°z√°sa user-friendly m√≥don."""
    error_messages = {
        400: "Hib√°s k√©r√©s - ellen≈ërizze a param√©tereket",
        401: "Hiteles√≠t√©si hiba - ellen≈ërizze az API kulcsot",
        403: "Hozz√°f√©r√©s megtagadva",
        404: "API endpoint nem tal√°lhat√≥",
        429: "T√∫l sok k√©r√©s - pr√≥b√°lja √∫jra k√©s≈ëbb",
        500: "Szerver hiba - pr√≥b√°lja √∫jra k√©s≈ëbb",
        502: "Bad Gateway - szolg√°ltat√°s √°tmenetileg nem el√©rhet≈ë",
        503: "Szolg√°ltat√°s nem el√©rhet≈ë"
    }
    
    user_message = error_messages.get(status_code, f"HTTP {status_code} hiba")
    
    if len(response_text) < 200:
        user_message += f" ({response_text})"
    
    return user_message


# üåç √öJ: Provider routing utility functions

def create_weather_worker_with_provider(latitude: float, longitude: float,
                                       start_date: str, end_date: str,
                                       preferred_provider: str = "auto") -> WeatherDataWorker:
    """
    üåç Weather data worker l√©trehoz√°sa provider routing t√°mogat√°ssal.
    
    Args:
        latitude: Sz√©less√©gi fok
        longitude: Hossz√∫s√°gi fok
        start_date: Kezd≈ë d√°tum (YYYY-MM-DD)
        end_date: Befejez≈ë d√°tum (YYYY-MM-DD)
        preferred_provider: Prefer√°lt provider ("auto", "open-meteo", "meteostat")
        
    Returns:
        Konfigur√°lt WeatherDataWorker instance
    """
    worker = WeatherDataWorker(
        latitude=latitude,
        longitude=longitude,
        start_date=start_date,
        end_date=end_date,
        preferred_provider=preferred_provider
    )
    
    print(f"üåç DEBUG: Weather worker created with provider: {preferred_provider}")
    return worker


def get_worker_manager_provider_summary(manager: WorkerManager) -> Dict[str, Any]:
    """
    üåç WorkerManager provider √∂sszefoglal√≥ lek√©rdez√©se.
    
    Args:
        manager: WorkerManager instance
        
    Returns:
        Provider summary dictionary
    """
    provider_states = manager.get_provider_states()
    last_successful = manager.get_last_successful_provider()
    
    summary = {
        "provider_states": provider_states,
        "last_successful_provider": last_successful,
        "active_workers": manager.get_active_workers(),
        "total_providers_tracked": len(provider_states)
    }
    
    return summary
