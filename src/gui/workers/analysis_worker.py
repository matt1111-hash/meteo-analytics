"""
AnalysisWorker - H√°tt√©rsz√°lon Fut√≥ Elemz√©si Worker

FELEL≈êSS√âG: 
- MultiCityEngine √©s WeatherClient futtat√°sa h√°tt√©rsz√°lon
- UI thread felszabad√≠t√°sa (nem fagy le a fel√ºlet)
- Interrupt t√°mogat√°s (megszak√≠that√≥ m≈±veletek)
- Progress reporting (√°llapot jelz√©sek)
- Error handling (hibakezel√©s)
- üéØ KRITIKUS JAV√çT√ÅS: ADATKONVERZI√ì≈ö FIX - List[Dict] ‚Üí Dict[List]
- üåπ V√âGS≈ê FIX: SZ√âLIR√ÅNY KOMPATIBILIT√ÅS - WindChart/WindRose t√°mogat√°s!

CLEAN ARCHITECTURE:
- Nem ismeri a UI-t
- Csak az elemz√©si logik√°t futtatja
- Signal-ekkel kommunik√°l kifel√©

üîß KRITIKUS JAV√çT√ÅS v4.6.3: SZ√âLIR√ÅNY KOMPATIBILIT√ÅSI FIX!
‚ùå PROBL√âMA: WindChart "wind_gusts_max" √©s "winddirection" kulcsokat keres
‚úÖ JAV√çT√ÅS: AnalysisWorker t√∂bbsz√∂r√∂s kulcs mapping - API nevek + Chart kompatibilit√°s!
‚úÖ Working directory f√ºggetlen m≈±k√∂d√©s
‚úÖ WeatherClient.get_weather_data() KOORDIN√ÅTA PARAM√âTER FIX!
‚ùå HIB√ÅS: get_weather_data(lat=..., lon=...)
‚úÖ JAV√çTOTT: get_weather_data(latitude=..., longitude=...)
"""

import traceback
import logging
from typing import Dict, Any, Optional, List
from datetime import datetime
from pathlib import Path

from PySide6.QtCore import QThread, Signal, QMutex, QMutexLocker
from PySide6.QtWidgets import QApplication

# Analytics imports
try:
    from ...analytics.multi_city_engine import MultiCityEngine
    from ...data.weather_client import WeatherClient
    from ...data.enums import AnalysisType, DataProvider
    IMPORTS_OK = True
    print("‚úÖ AnalysisWorker imports successful")
except ImportError as e:
    print(f"‚ùå AnalysisWorker import error: {e}")
    IMPORTS_OK = False
    # Fallback imports
    try:
        import sys
        from pathlib import Path
        
        # Add project root to Python path
        project_root = Path(__file__).parent.parent.parent.parent
        sys.path.insert(0, str(project_root))
        
        from src.analytics.multi_city_engine import MultiCityEngine
        from src.data.weather_client import WeatherClient
        from src.data.enums import AnalysisType, DataProvider
        IMPORTS_OK = True
        print("‚úÖ AnalysisWorker fallback imports successful")
    except ImportError as e2:
        print(f"‚ùå AnalysisWorker fallback import error: {e2}")
        IMPORTS_OK = False
        MultiCityEngine = None
        WeatherClient = None
        AnalysisType = None
        DataProvider = None


class AnalysisWorker(QThread):
    """
    H√ÅTT√âRSZ√ÅL WORKER - UI Thread Felszabad√≠t√°sa
    
    JELZ√âSEK:
    - progress_updated(str, int): Progress sz√∂veg + sz√°zal√©k
    - analysis_completed(dict): Sikeres elemz√©s eredm√©nye
    - analysis_failed(str): Hiba √ºzenet
    - analysis_cancelled(): Megszak√≠t√°s meger≈ës√≠t√©se
    
    INTERRUPT T√ÅMOGAT√ÅS:
    - QThread.requestInterruption() haszn√°lata
    - Periodikus isInterruptionRequested() ellen≈ërz√©s
    - Graceful shutdown minden l√©p√©sn√©l
    """
    
    # === WORKER SIGNALS ===
    progress_updated = Signal(str, int)    # (sz√∂veg, sz√°zal√©k)
    analysis_completed = Signal(dict)      # Eredm√©ny dictionary
    analysis_failed = Signal(str)          # Hiba √ºzenet
    analysis_cancelled = Signal()          # Megszak√≠t√°s meger≈ës√≠t√©se
    
    def __init__(self, parent=None):
        super().__init__(parent)
        
        # === WORKER STATE ===
        self._request_data: Optional[Dict[str, Any]] = None
        self._mutex = QMutex()  # Thread-safe hozz√°f√©r√©s
        
        # === ANALYTICS COMPONENTS ===
        self._multi_city_engine: Optional[MultiCityEngine] = None
        self._weather_client: Optional[WeatherClient] = None
        
        # === LOGGING ===
        self._logger = logging.getLogger(__name__)
        
    def setup_analysis_request(self, request_data: Dict[str, Any]):
        """
        ELEMZ√âSI K√âR√âS BE√ÅLL√çT√ÅSA
        
        Args:
            request_data (dict): Teljes k√©r√©s param√©terek
                - analysis_type: 'single_location', 'multi_city', 'county_analysis'
                - location_data: lok√°ci√≥ inform√°ci√≥k
                - date_range: kezd≈ë/v√©gd√°tum
                - provider: adatforr√°s
                - api_settings: API be√°ll√≠t√°sok
        """
        with QMutexLocker(self._mutex):
            self._request_data = request_data.copy()
            self._logger.info(f"Worker setup: {request_data.get('analysis_type', 'unknown')}")
    
    def run(self):
        """
        F≈êSZ√ÅL FUT√ÅS - Itt t√∂rt√©nik a t√©nyleges munka
        
        KRITIKUS: Periodikus interrupt ellen≈ërz√©s minden l√©p√©sn√©l!
        """
        try:
            self._logger.info("AnalysisWorker fut√°s elkezdve")
            
            # === 1. PARAM√âTER VALID√ÅCI√ì ===
            if not self._validate_request():
                return
                
            # === 2. KOMPONENSEK INICIALIZ√ÅL√ÅSA ===
            if not self._initialize_components():
                return
                
            # === 3. ELEMZ√âS T√çPUS ALAPJ√ÅN DISPATCH ===
            analysis_type = self._request_data.get('analysis_type', '')
            
            if analysis_type == 'multi_city':
                self._run_multi_city_analysis()
            elif analysis_type == 'single_location':
                self._run_single_location_analysis()
            elif analysis_type == 'county_analysis':
                self._run_county_analysis()
            else:
                self._emit_error(f"Ismeretlen elemz√©s t√≠pus: {analysis_type}")
                
        except Exception as e:
            self._logger.error(f"Worker kritikus hiba: {str(e)}")
            self._logger.error(traceback.format_exc())
            self._emit_error(f"V√°ratlan hiba: {str(e)}")
    
    def _validate_request(self) -> bool:
        """K√©r√©s param√©terek valid√°l√°sa"""
        if self._check_interruption("Valid√°ci√≥"):
            return False
            
        with QMutexLocker(self._mutex):
            if not self._request_data:
                self._emit_error("Hi√°nyz√≥ k√©r√©s adatok")
                return False
                
            required_fields = ['analysis_type', 'date_range']
            for field in required_fields:
                if field not in self._request_data:
                    self._emit_error(f"Hi√°nyz√≥ k√∂telez≈ë mez≈ë: {field}")
                    return False
                    
        self._emit_progress("Param√©terek valid√°lva", 10)
        return True
    
    def _initialize_components(self):
        """
        üîß KRITIKUS JAV√çT√ÅS v4.6.1: Analytics komponensek inicializ√°l√°sa ABSOLUTE PATH FIX-szel!
        
        ‚úÖ JAV√çTOTT: WeatherClient helyes param√©ter n√©v!
        ‚úÖ JAV√çTOTT: MultiCityEngine abszol√∫t path-okkal
        ‚úÖ JAV√çTOTT: Import ellen≈ërz√©s
        """
        if self._check_interruption("Inicializ√°l√°s"):
            return False
        
        # Import ellen≈ërz√©s
        if not IMPORTS_OK:
            self._emit_error("Analytics komponensek import√°l√°sa sikertelen")
            return False
            
        try:
            self._emit_progress("Komponensek inicializ√°l√°sa...", 20)
            
            # üîß KRITIKUS JAV√çT√ÅS v4.6.1: ABSOLUTE PATH CALCULATION
            # Script location: src/gui/workers/analysis_worker.py
            # Project root: src/gui/workers ‚Üí src/gui ‚Üí src ‚Üí project_root
            project_root = Path(__file__).parent.parent.parent.parent
            
            self._logger.info(f"üîß ABSOLUTE PATH FIX v4.6.1:")
            self._logger.info(f"   Script location: {Path(__file__).absolute()}")
            self._logger.info(f"   Calculated project root: {project_root.absolute()}")
            self._logger.info(f"   Current working dir: {Path.cwd().absolute()}")
            
            # Database paths
            global_db_path = project_root / "data" / "cities.db"
            hungarian_db_path = project_root / "data" / "hungarian_settlements.db"
            
            self._logger.info(f"üîß Target database paths:")
            self._logger.info(f"   Global DB: {global_db_path.absolute()}")
            self._logger.info(f"   Hungarian DB: {hungarian_db_path.absolute()}")
            self._logger.info(f"   Global DB exists: {global_db_path.exists()}")
            self._logger.info(f"   Hungarian DB exists: {hungarian_db_path.exists()}")
            
            # Weather Client setup - üîß KRITIKUS FIX: HELYES PARAM√âTER N√âV!
            provider = self._request_data.get('provider', 'open_meteo')  # String fallback
            api_settings = self._request_data.get('api_settings', {})
            
            # ‚úÖ JAV√çTOTT: WeatherClient safe inicializ√°l√°s
            self._logger.info(f"üîß WeatherClient inicializ√°l√°s: provider='{provider}'")
            
            if WeatherClient is None:
                self._emit_error("WeatherClient oszt√°ly nem el√©rhet≈ë")
                return False
            
            # Try different initialization methods
            try:
                # Method 1: No parameters (default)
                self._weather_client = WeatherClient()
                self._logger.info("‚úÖ WeatherClient default inicializ√°l√°s sikeres")
            except Exception as e1:
                try:
                    # Method 2: With preferred_provider
                    self._weather_client = WeatherClient(preferred_provider=provider)
                    self._logger.info("‚úÖ WeatherClient preferred_provider inicializ√°l√°s sikeres")
                except Exception as e2:
                    self._logger.error(f"‚ùå WeatherClient inicializ√°l√°s minden m√≥dszer sikertelen: {e1}, {e2}")
                    self._emit_error(f"WeatherClient inicializ√°l√°s sikertelen: {e1}")
                    return False
            
            # API settings k√ºl√∂n be√°ll√≠t√°sa (ha sz√ºks√©ges)
            if api_settings:
                self._logger.info(f"üîß API settings: {api_settings}")
            
            # MultiCity Engine setup (ha sz√ºks√©ges) - üîß ABSOLUTE PATH FIX!
            analysis_type = self._request_data.get('analysis_type')
            if analysis_type in ['multi_city', 'county_analysis']:
                self._logger.info("üèôÔ∏è MultiCityEngine inicializ√°l√°sa ABSOLUTE PATH-okkal...")
                
                if MultiCityEngine is None:
                    self._emit_error("MultiCityEngine oszt√°ly nem el√©rhet≈ë")
                    return False
                
                # ‚úÖ JAV√çTOTT: Explicit absolute path-ok √°tad√°sa
                self._multi_city_engine = MultiCityEngine(
                    db_path=str(global_db_path.absolute()),
                    hungarian_db_path=str(hungarian_db_path.absolute())
                )
                
                self._logger.info("‚úÖ MultiCityEngine absolute path-okkal inicializ√°lva")
                
            self._emit_progress("Komponensek inicializ√°lva", 30)
            self._logger.info("‚úÖ AnalysisWorker komponensek sikeresen inicializ√°lva (ABSOLUTE PATH FIX v4.6.1)")
            return True
            
        except Exception as e:
            self._logger.error(f"‚ùå Inicializ√°l√°si hiba: {str(e)}")
            self._logger.error(traceback.format_exc())
            self._emit_error(f"Inicializ√°l√°si hiba: {str(e)}")
            return False
    
    def _run_multi_city_analysis(self):
        """MULTI-CITY ELEMZ√âS FUTTAT√ÅSA"""
        if self._check_interruption("Multi-city elemz√©s"):
            return
            
        try:
            self._emit_progress("Multi-city elemz√©s ind√≠t√°sa...", 40)
            
            # R√©gi√≥ vagy megye adatok kinyer√©se
            region_name = self._request_data.get('region_name')
            county_name = self._request_data.get('county_name')
            
            # D√°tum range
            date_range = self._request_data.get('date_range', {})
            start_date = date_range.get('start_date')
            end_date = date_range.get('end_date')
            
            # === INTERRUPT CHECK BEFORE HEAVY WORK ===
            if self._check_interruption("Multi-city engine ind√≠t√°s el≈ëtt"):
                return
            
            self._emit_progress("V√°rosok elemz√©se folyamatban...", 60)
            
            # A t√©nyleges elemz√©s - ez a hossz√∫ m≈±velet!
            # ‚úÖ JAV√çTOTT: MultiCityEngine.analyze_multi_city helyes param√©terez√©ssel
            region_or_county = region_name or county_name
            if not region_or_county:
                self._emit_error("Hi√°nyz√≥ r√©gi√≥ vagy megye n√©v")
                return
            
            # ‚úÖ HELYES: analyze_multi_city param√©terek a MultiCityEngine API szerint
            result = self._multi_city_engine.analyze_multi_city(
                query_type="hottest_today",  # Query type a QUERY_TYPES-b√≥l
                region=region_or_county,     # R√©gi√≥ n√©v
                date=start_date,             # Egyetlen d√°tum string form√°tumban
                limit=None                   # Nincs limit, vagy k√©s≈ëbb param√©terezhetj√ºk
            )
                
            # === FINAL INTERRUPT CHECK ===
            if self._check_interruption("Eredm√©ny feldolgoz√°s el≈ëtt"):
                return
                
            self._emit_progress("Eredm√©nyek feldolgoz√°sa...", 90)
            
            # Eredm√©ny struktur√°l√°sa
            structured_result = {
                'analysis_type': 'multi_city',
                'request_params': self._request_data,
                'result_data': result,
                'timestamp': datetime.now().isoformat(),
                'success': True
            }
            
            self._emit_progress("Multi-city elemz√©s befejezve", 100)
            self.analysis_completed.emit(structured_result)
            
        except Exception as e:
            self._logger.error(f"Multi-city elemz√©s hiba: {str(e)}")
            self._emit_error(f"Multi-city elemz√©s sikertelen: {str(e)}")
    
    def _run_single_location_analysis(self):
        """
        üéØ KRITIKUS JAV√çT√ÅS: EGYEDI LOK√ÅCI√ì ELEMZ√âSE - ADATKONVERZI√ì≈ö FIX!
        
        Ez a met√≥dus most m√°r:
        1. Megh√≠vja a WeatherClient-et (List[Dict] form√°tum)
        2. KONVERT√ÅLJA Dict[List] form√°tumra
        3. Tov√°bb√≠tja az app_controller-nek
        """
        if self._check_interruption("Single location elemz√©s"):
            return
            
        try:
            self._emit_progress("Egyedi lok√°ci√≥ elemz√©se...", 50)
            
            # üîß KOORDIN√ÅTA KINYER√âS: AppController t√∂bbf√©le form√°tumot k√ºldhet
            # 1. location_data objektumban: 'lat'/'lon' VAGY 'latitude'/'longitude'
            # 2. Direkt param√©terk√©nt: 'latitude'/'longitude'
            
            location_data = self._request_data.get('location_data', {})
            date_range = self._request_data.get('date_range', {})
            
            # üîß KRITIKUS FIX: Koordin√°t√°k rugalmas kinyer√©se mindk√©t form√°tumb√≥l
            latitude = None
            longitude = None
            
            # 1. location_data objektumb√≥l - mindk√©t kulcs form√°tum t√°mogat√°sa
            if location_data:
                latitude = location_data.get('latitude') or location_data.get('lat')
                longitude = location_data.get('longitude') or location_data.get('lon')
                self._logger.info(f"üîß Koordin√°t√°k location_data-b√≥l: lat={latitude}, lon={longitude}")
            
            # 2. Direkt param√©terekb≈ël (fallback)
            if latitude is None or longitude is None:
                latitude = self._request_data.get('latitude')
                longitude = self._request_data.get('longitude')
                self._logger.info(f"üîß Koordin√°t√°k direkt param√©terekb≈ël: lat={latitude}, lon={longitude}")
            
            # 3. Valid√°l√°s
            if latitude is None or longitude is None:
                error_msg = f"Hi√°nyz√≥ koordin√°t√°k: latitude={latitude}, longitude={longitude}"
                self._logger.error(f"üîß {error_msg}")
                self._logger.error(f"üîß location_data: {location_data}")
                self._logger.error(f"üîß request_data keys: {list(self._request_data.keys())}")
                self._emit_error(error_msg)
                return
            
            self._logger.info(f"üîß WeatherClient h√≠v√°s el≈ëk√©sz√≠t√©se: latitude={latitude}, longitude={longitude}")
            
            # === INTERRUPT CHECK BEFORE API CALL ===
            if self._check_interruption("Weather API h√≠v√°s el≈ëtt"):
                return
            
            # üîß KRITIKUS JAV√çT√ÅS: HELYES PARAM√âTER NEVEK A WEATHERCLIENT.GET_WEATHER_DATA() H√çV√ÅSBAN!
            # ‚ùå HIB√ÅS VOLT: lat=..., lon=...
            # ‚úÖ JAV√çTOTT: latitude=..., longitude=...
            self._logger.info(f"üîß WeatherClient.get_weather_data() h√≠v√°s JAV√çTOTT param√©terekkel...")
            
            weather_data = self._weather_client.get_weather_data(
                latitude=latitude,           # ‚úÖ HELYES PARAM√âTER N√âV!
                longitude=longitude,         # ‚úÖ HELYES PARAM√âTER N√âV!
                start_date=date_range.get('start_date'),
                end_date=date_range.get('end_date')
            )
            
            self._logger.info(f"‚úÖ WeatherClient.get_weather_data() sikeresen lefutott")
            self._logger.info(f"üéØ Nyers weather_data t√≠pus: {type(weather_data)}")
            
            if isinstance(weather_data, list) and weather_data:
                self._logger.info(f"üéØ Els≈ë elem t√≠pus: {type(weather_data[0])}")
                self._logger.info(f"üéØ Els≈ë elem kulcsok: {list(weather_data[0].keys()) if isinstance(weather_data[0], dict) else 'Not dict'}")
            
            if self._check_interruption("Single location feldolgoz√°s"):
                return
            
            # üéØ KRITIKUS JAV√çT√ÅS: ADATKONVERZI√ì List[Dict] ‚Üí Dict[List]
            self._emit_progress("Adatok konvert√°l√°sa...", 80)
            converted_weather_data = self._convert_to_legacy_format(weather_data)
            
            if not converted_weather_data:
                self._emit_error("Adatkonverzi√≥ sikertelen")
                return
            
            self._logger.info(f"üéØ Konvert√°lt adatok t√≠pus: {type(converted_weather_data)}")
            if isinstance(converted_weather_data, dict) and 'daily' in converted_weather_data:
                daily_keys = list(converted_weather_data['daily'].keys())
                self._logger.info(f"üéØ Konvert√°lt daily kulcsok: {daily_keys}")
                if 'time' in converted_weather_data['daily']:
                    time_count = len(converted_weather_data['daily']['time'])
                    self._logger.info(f"üéØ Time records count: {time_count}")
                    
            result = {
                'analysis_type': 'single_location',
                'request_params': self._request_data,
                'result_data': converted_weather_data,  # üéØ KONVERT√ÅLT ADATOK!
                'timestamp': datetime.now().isoformat(),
                'success': True
            }
            
            self._emit_progress("Egyedi elemz√©s befejezve", 100)
            self.analysis_completed.emit(result)
            
        except Exception as e:
            self._logger.error(f"Single location elemz√©s hiba: {str(e)}")
            self._logger.error(traceback.format_exc())
            self._emit_error(f"Egyedi elemz√©s sikertelen: {str(e)}")
    
    def _convert_to_legacy_format(self, weather_data: List[Dict]) -> Optional[Dict]:
        """
        üéØ KRITIKUS JAV√çT√ÅS: ADATKONVERZI√ì List[Dict] ‚Üí Dict[List] + üåπ SZ√âLIR√ÅNY KOMPATIBILIT√ÅS!
        
        WeatherClient form√°tum (List[Dict]):
        [{"date": "2024-01-01", "winddirection_10m_dominant": 310, "windgusts_10m_max": 39.2}, ...]
        
        AppController v√°rt form√°tum (Dict[List]):
        {"daily": {"time": ["2024-01-01"], "winddirection_10m_dominant": [310], "windgusts_10m_max": [39.2]}}
        
        üåπ √öJ: CHART KOMPATIBILIT√ÅSI KULCSOK HOZZ√ÅAD√ÅSA:
        - winddirection_10m_dominant ‚Üí winddirection (WindRoseChart-nak)
        - windgusts_10m_max ‚Üí wind_gusts_max (WindChart-nak)
        
        Args:
            weather_data: WeatherClient √°ltal visszaadott List[Dict] adatok
            
        Returns:
            AppController √°ltal v√°rt Dict[List] form√°tum vagy None
        """
        try:
            self._logger.info(f"üéØ ADATKONVERZI√ì kezd√©s: {type(weather_data)} ‚Üí Dict[List] + SZ√âLIR√ÅNY KOMPATIBILIT√ÅS")
            
            if not weather_data:
                self._logger.warning("üéØ √úres weather_data")
                return None
            
            if not isinstance(weather_data, list):
                self._logger.warning(f"üéØ V√°ratlan weather_data t√≠pus: {type(weather_data)}")
                return None
            
            if not weather_data or not isinstance(weather_data[0], dict):
                self._logger.warning("üéØ Weather_data nem List[Dict] form√°tum")
                return None
            
            # üéØ KONVERZI√ì: List[Dict] ‚Üí Dict[List]
            result = {"daily": {}}
            
            # Els≈ë rekord kulcsainak felm√©r√©se
            sample_keys = list(weather_data[0].keys())
            self._logger.info(f"üéØ Konvert√°land√≥ kulcsok: {sample_keys}")
            
            for key in sample_keys:
                if key == 'date':
                    # 'date' kulcs ‚Üí 'time' kulcs (AppController elv√°r√°s)
                    result["daily"]["time"] = [record.get("date") for record in weather_data]
                    self._logger.info(f"üéØ Konvert√°lva: date ‚Üí time ({len(result['daily']['time'])} elem)")
                else:
                    # Minden m√°s kulcs 1:1 √°tv√©tele
                    result["daily"][key] = [record.get(key) for record in weather_data]
                    self._logger.info(f"üéØ Konvert√°lva: {key} ({len(result['daily'][key])} elem)")
            
            # üåπ KRITIKUS: CHART KOMPATIBILIT√ÅSI KULCSOK HOZZ√ÅAD√ÅSA!
            self._logger.info("üåπ Chart kompatibilit√°si kulcsok hozz√°ad√°sa...")
            
            # 1. winddirection_10m_dominant ‚Üí winddirection (WindRoseChart kompatibilit√°s)
            if 'winddirection_10m_dominant' in result["daily"]:
                result["daily"]["winddirection"] = result["daily"]["winddirection_10m_dominant"]
                self._logger.info("üåπ ‚úÖ Kompatibilit√°si kulcs hozz√°adva: winddirection_10m_dominant ‚Üí winddirection")
            
            # 2. windgusts_10m_max ‚Üí wind_gusts_max (WindChart kompatibilit√°s)
            if 'windgusts_10m_max' in result["daily"]:
                result["daily"]["wind_gusts_max"] = result["daily"]["windgusts_10m_max"]
                self._logger.info("üåπ ‚úÖ Kompatibilit√°si kulcs hozz√°adva: windgusts_10m_max ‚Üí wind_gusts_max")
            
            # 3. OPCION√ÅLIS: wind_direction_10m_dominant aliasz (ha sz√ºks√©ges)
            if 'winddirection_10m_dominant' in result["daily"]:
                result["daily"]["wind_direction_10m_dominant"] = result["daily"]["winddirection_10m_dominant"]
                self._logger.info("üåπ ‚úÖ Kompatibilit√°si kulcs hozz√°adva: winddirection_10m_dominant ‚Üí wind_direction_10m_dominant")
            
            # Extra metaadatok hozz√°ad√°sa (ha vannak)
            if weather_data:
                first_record = weather_data[0]
                # WeatherClient metadata keres√©se
                for meta_key in ['latitude', 'longitude', 'timezone', 'elevation']:
                    if meta_key in first_record:
                        result[meta_key] = first_record[meta_key]
                        self._logger.info(f"üéØ Metadata hozz√°adva: {meta_key} = {first_record[meta_key]}")
            
            # Eredm√©ny valid√°l√°s
            if not result.get("daily", {}).get("time"):
                self._logger.error("üéØ KONVERZI√ì HIBA: Nincs 'time' mez≈ë!")
                return None
            
            record_count = len(result["daily"]["time"])
            self._logger.info(f"üéØ KONVERZI√ì SIKERES: {record_count} rekord konvert√°lva")
            self._logger.info(f"üéØ V√©gs≈ë daily kulcsok: {list(result['daily'].keys())}")
            
            # üåπ SZ√âLIR√ÅNY KOMPATIBILIT√ÅSI CHECK
            if 'winddirection_10m_dominant' in result['daily']:
                wind_directions = result['daily']['winddirection_10m_dominant']
                valid_directions = [d for d in wind_directions if d is not None]
                if valid_directions:
                    self._logger.info(f"üåπ Sz√©lir√°ny adatok konvert√°lva: {len(valid_directions)} √©rv√©nyes √©rt√©k")
                    self._logger.info(f"üåπ Sz√©lir√°ny tartom√°ny: {min(valid_directions):.0f}¬∞ ‚Üí {max(valid_directions):.0f}¬∞")
                    
                    # KOMPATIBILIT√ÅSI ELLEN≈êRZ√âS
                    if 'winddirection' in result['daily']:
                        compat_count = len([d for d in result['daily']['winddirection'] if d is not None])
                        self._logger.info(f"üåπ ‚úÖ WindRoseChart kompatibilit√°si kulcs 'winddirection': {compat_count} √©rv√©nyes √©rt√©k")
            
            # üå™Ô∏è SZ√âLL√ñK√âS KOMPATIBILIT√ÅSI CHECK
            if 'windgusts_10m_max' in result['daily']:
                wind_gusts = result['daily']['windgusts_10m_max']
                valid_gusts = [g for g in wind_gusts if g is not None and g > 0]
                if valid_gusts:
                    max_gust = max(valid_gusts)
                    self._logger.info(f"üå™Ô∏è Sz√©ll√∂k√©s adatok konvert√°lva: {len(valid_gusts)} √©rv√©nyes √©rt√©k")
                    self._logger.info(f"üå™Ô∏è Maximum sz√©ll√∂k√©s: {max_gust:.1f} km/h")
                    
                    # KOMPATIBILIT√ÅSI ELLEN≈êRZ√âS
                    if 'wind_gusts_max' in result['daily']:
                        compat_count = len([g for g in result['daily']['wind_gusts_max'] if g is not None and g > 0])
                        self._logger.info(f"üå™Ô∏è ‚úÖ WindChart kompatibilit√°si kulcs 'wind_gusts_max': {compat_count} √©rv√©nyes √©rt√©k")
            
            return result
            
        except Exception as e:
            self._logger.error(f"üéØ ADATKONVERZI√ì HIBA: {e}")
            self._logger.error(traceback.format_exc())
            return None
    
    def _run_county_analysis(self):
        """MEGYE ELEMZ√âSE"""
        # Hasonl√≥ logika mint multi_city, de megy√©re specializ√°lva
        self._run_multi_city_analysis()  # Egyszer≈±s√≠t√©s miatt
    
    def _progress_callback(self, message: str, percentage: int):
        """
        PROGRESS CALLBACK - MultiCityEngine-b≈ël √©rkez≈ë jelz√©sek
        FONTOS: Interrupt ellen≈ërz√©s a callback-ben is!
        """
        if self._check_interruption("Progress callback"):
            return False  # Jelzi a h√≠v√≥nak, hogy √°lljon le
            
        self._emit_progress(message, percentage)
        return True  # Folytat√°s
    
    def _check_interruption(self, operation: str) -> bool:
        """
        INTERRUPT ELLEN≈êRZ√âS
        
        Args:
            operation (str): Jelenlegi m≈±velet neve (debugging)
            
        Returns:
            bool: True ha meg kell szak√≠tani
        """
        if self.isInterruptionRequested():
            self._logger.info(f"Megszak√≠t√°s k√©rve m≈±velet k√∂zben: {operation}")
            self._emit_progress("Megszak√≠t√°s...", 0)
            self.analysis_cancelled.emit()
            return True
        return False
    
    def _emit_progress(self, message: str, percentage: int):
        """Thread-safe progress jelz√©s"""
        self.progress_updated.emit(message, percentage)
        
        # Qt esem√©ny feldolgoz√°s (responsive UI)
        QApplication.processEvents()
    
    def _emit_error(self, error_message: str):
        """Thread-safe error jelz√©s"""
        self._logger.error(f"Worker hiba: {error_message}")
        self.analysis_failed.emit(error_message)
    
    # === PUBLIC CONTROL METHODS ===
    
    def start_analysis(self, request_data: Dict[str, Any]):
        """
        ELEMZ√âS IND√çT√ÅSA
        
        Args:
            request_data (dict): Teljes elemz√©si k√©r√©s
        """
        if self.isRunning():
            self._logger.warning("Worker m√°r fut, nem lehet √∫jat ind√≠tani")
            return False
            
        self.setup_analysis_request(request_data)
        self.start()  # QThread.start()
        return True
    
    def stop_analysis(self):
        """
        ELEMZ√âS MEGSZAK√çT√ÅSA
        Graceful shutdown - nem brut√°lis kill
        """
        if self.isRunning():
            self._logger.info("Worker megszak√≠t√°s k√©rve...")
            self.requestInterruption()
            
            # V√°runk a tiszta le√°ll√°sra (max 5 m√°sodperc)
            if not self.wait(5000):
                self._logger.warning("Worker nem √°llt le 5 m√°sodperc alatt, termin√°l√°s...")
                self.terminate()
                self.wait(1000)
    
    def is_running_analysis(self) -> bool:
        """Worker fut√°si √°llapot lek√©rdez√©se"""
        return self.isRunning()


# === USAGE EXAMPLE ===
if __name__ == "__main__":
    import sys
    from PySide6.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QWidget, QPushButton, QLabel
    
    class WorkerTestWindow(QMainWindow):
        def __init__(self):
            super().__init__()
            self.setWindowTitle("AnalysisWorker Test (SZ√âLIR√ÅNY KOMPATIBILIT√ÅS FIX v4.6.3)")
            self.setGeometry(100, 100, 600, 400)
            
            # UI Setup
            central_widget = QWidget()
            self.setCentralWidget(central_widget)
            layout = QVBoxLayout(central_widget)
            
            self.status_label = QLabel("Worker k√©szenl√©tben...")
            self.start_button = QPushButton("Test Elemz√©s Ind√≠t√°sa")
            self.stop_button = QPushButton("Megszak√≠t√°s")
            
            layout.addWidget(self.status_label)
            layout.addWidget(self.start_button)
            layout.addWidget(self.stop_button)
            
            # Worker setup
            self.worker = AnalysisWorker()
            self.worker.progress_updated.connect(self._on_progress)
            self.worker.analysis_completed.connect(self._on_completed)
            self.worker.analysis_failed.connect(self._on_failed)
            self.worker.analysis_cancelled.connect(self._on_cancelled)
            
            # Button connections
            self.start_button.clicked.connect(self._start_test)
            self.stop_button.clicked.connect(self._stop_test)
            
        def _start_test(self):
            test_request = {
                'analysis_type': 'single_location',
                'location_data': {
                    'latitude': 55.7558,
                    'longitude': 37.6176,
                    'name': 'Moscow'
                },
                'date_range': {
                    'start_date': '2024-01-01',
                    'end_date': '2024-01-02'
                },
                'provider': 'open_meteo'
            }
            
            self.worker.start_analysis(test_request)
            self.status_label.setText("Worker elind√≠tva...")
            
        def _stop_test(self):
            self.worker.stop_analysis()
            
        def _on_progress(self, message: str, percentage: int):
            self.status_label.setText(f"{message} ({percentage}%)")
            
        def _on_completed(self, result: dict):
            self.status_label.setText("‚úÖ Elemz√©s sikeresen befejezve!")
            
        def _on_failed(self, error: str):
            self.status_label.setText(f"‚ùå Hiba: {error}")
            
        def _on_cancelled(self):
            self.status_label.setText("‚ÑπÔ∏è Elemz√©s megszak√≠tva")
    
    app = QApplication(sys.argv)
    window = WorkerTestWindow()
    window.show()
    sys.exit(app.exec())