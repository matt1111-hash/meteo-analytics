#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üó∫Ô∏è Map View - Teljes Magyar T√©rk√©pes N√©zet 
Magyar Kl√≠maanalitika MVP - Interakt√≠v T√©rk√©pes Dashboard

Ez a modul a f≈ëablak t√©rk√©pes n√©zet√©t biztos√≠tja, amely integr√°lja:
- HungarianMapTab: Teljes t√©rk√©pes funkcionalit√°s
- HungarianLocationSelector: Hierarchikus lok√°ci√≥ v√°laszt√≥
- HungarianMapVisualizer: Folium interakt√≠v t√©rk√©p
- Signal forwarding: MainWindow integr√°ci√≥

FRISS√çTVE: Placeholder ‚Üí HungarianMapTab val√≥di integr√°ci√≥

F√°jl helye: src/gui/map_view.py
"""

from typing import Optional, Dict, Any
from PySide6.QtWidgets import QWidget, QVBoxLayout, QLabel
from PySide6.QtCore import Qt, Signal
from PySide6.QtGui import QFont

# Saj√°t modulok
from .hungarian_map_tab import HungarianMapTab
from .theme_manager import register_widget_for_theming


class MapView(QWidget):
    """
    üó∫Ô∏è Map View Widget - Teljes magyar t√©rk√©pes n√©zet.
    
    Ez a widget a MainWindow t√©rk√©pes n√©zet√©t biztos√≠tja, √©s integr√°lja
    a HungarianMapTab komponenst, ami tartalmazza:
    - Hierarchikus magyar lok√°ci√≥ v√°laszt√≥t (bal oldal)
    - Interakt√≠v Folium t√©rk√©pet (jobb oldal)
    - Signal-slot integr√°ci√≥t
    - Export funkcionalit√°st
    
    SIGNALOK (forwarded):
    - location_selected(location_data): Lok√°ci√≥ kiv√°lasztva
    - map_interaction(interaction_type, data): T√©rk√©p interakci√≥
    - export_completed(file_path): Export befejezve
    - error_occurred(message): Hiba t√∂rt√©nt
    """
    
    # Forwarded signalok a HungarianMapTab-b√≥l
    location_selected = Signal(object)        # Location data
    map_interaction = Signal(str, object)     # interaction_type, data
    export_completed = Signal(str)           # file_path
    error_occurred = Signal(str)             # error_message
    data_loading_completed = Signal()        # adatok bet√∂ltve
    
    def __init__(self, parent=None):
        super().__init__(parent)
        
        # Komponens referencia
        self.map_tab: Optional[HungarianMapTab] = None
        
        # UI √©p√≠t√©s
        self._setup_ui()
        self._setup_theme()
        self._connect_signals()
        
        print("üó∫Ô∏è DEBUG: MapView initialized with HungarianMapTab integration")
    
    def _setup_ui(self):
        """
        üé® UI komponensek l√©trehoz√°sa - HungarianMapTab integr√°ci√≥val.
        """
        layout = QVBoxLayout(self)
        layout.setContentsMargins(0, 0, 0, 0)  # Teljes hely a map tab-nak
        layout.setSpacing(0)
        
        # HungarianMapTab l√©trehoz√°sa √©s hozz√°ad√°sa
        self.map_tab = HungarianMapTab()
        layout.addWidget(self.map_tab)
        
        print("‚úÖ DEBUG: MapView UI setup complete with HungarianMapTab")
    
    def _setup_theme(self):
        """
        üé® T√©ma be√°ll√≠t√°sok alkalmaz√°sa.
        """
        register_widget_for_theming(self, "container")
    
    def _connect_signals(self):
        """
        üîó Signal forwarding be√°ll√≠t√°sa HungarianMapTab-b√≥l.
        """
        if self.map_tab:
            # Signal forwarding - HungarianMapTab signalok ‚Üí MapView signalok
            self.map_tab.location_selected.connect(self.location_selected.emit)
            self.map_tab.map_interaction.connect(self.map_interaction.emit)
            self.map_tab.export_completed.connect(self.export_completed.emit)
            self.map_tab.error_occurred.connect(self.error_occurred.emit)
            self.map_tab.data_loading_completed.connect(self.data_loading_completed.emit)
            
            print("‚úÖ DEBUG: MapView signal forwarding setup complete")
        else:
            print("‚ùå DEBUG: MapTab is None - cannot setup signal forwarding")
    
    # === PUBLIKUS API - HungarianMapTab DELEG√ÅL√ÅS ===
    
    def get_map_tab(self) -> Optional[HungarianMapTab]:
        """
        üó∫Ô∏è HungarianMapTab referencia lek√©rdez√©se.
        
        Returns:
            HungarianMapTab p√©ld√°ny vagy None
        """
        return self.map_tab
    
    def get_location_selector(self):
        """
        üìç Location selector referencia lek√©rdez√©se (deleg√°lt).
        
        Returns:
            HungarianLocationSelector p√©ld√°ny vagy None
        """
        if self.map_tab:
            return self.map_tab.get_location_selector()
        return None
    
    def get_map_visualizer(self):
        """
        üó∫Ô∏è Map visualizer referencia lek√©rdez√©se (deleg√°lt).
        
        Returns:
            HungarianMapVisualizer p√©ld√°ny vagy None
        """
        if self.map_tab:
            return self.map_tab.get_map_visualizer()
        return None
    
    def get_current_location(self):
        """
        üìç Jelenlegi lok√°ci√≥ lek√©rdez√©se (deleg√°lt).
        
        Returns:
            Location objektum vagy None
        """
        if self.map_tab:
            return self.map_tab.get_current_location()
        return None
    
    def set_region_and_county(self, region_key: str, county_name: str) -> bool:
        """
        üìç R√©gi√≥ √©s megye be√°ll√≠t√°sa (deleg√°lt).
        
        Args:
            region_key: √âghajlati r√©gi√≥ kulcs
            county_name: Megye neve
            
        Returns:
            Sikeres volt-e a be√°ll√≠t√°s
        """
        if self.map_tab:
            return self.map_tab.set_region_and_county(region_key, county_name)
        return False
    
    def focus_on_county(self, county_name: str) -> bool:
        """
        üéØ T√©rk√©p f√≥kusz√°l√°sa megy√©re (deleg√°lt).
        
        Args:
            county_name: Megye neve
            
        Returns:
            Sikeres volt-e a f√≥kusz√°l√°s
        """
        if self.map_tab:
            return self.map_tab.focus_on_county(county_name)
        return False
    
    def get_available_counties(self) -> list:
        """
        üìã El√©rhet≈ë megy√©k list√°ja (deleg√°lt).
        
        Returns:
            Megyenevek list√°ja
        """
        if self.map_tab:
            return self.map_tab.get_available_counties()
        return []
    
    def is_ready(self) -> bool:
        """
        ‚úÖ T√©rk√©pes n√©zet k√©sz haszn√°latra (deleg√°lt).
        
        Returns:
            K√©sz-e a haszn√°latra
        """
        if self.map_tab:
            return self.map_tab.is_ready()
        return False
    
    def get_map_status(self) -> str:
        """
        üìä T√©rk√©p st√°tusz lek√©rdez√©se (deleg√°lt).
        
        Returns:
            St√°tusz sz√∂veg
        """
        if self.map_tab:
            return self.map_tab.get_map_status()
        return "T√©rk√©p nem el√©rhet≈ë"
    
    def refresh_all_components(self):
        """
        üîÑ √ñsszes komponens friss√≠t√©se (deleg√°lt).
        """
        if self.map_tab:
            self.map_tab.refresh_all_components()
    
    def clear_selection(self):
        """
        üßπ Kiv√°laszt√°s t√∂rl√©se (deleg√°lt).
        """
        if self.map_tab:
            self.map_tab.clear_selection()
    
    def reset_map_view(self):
        """
        üîÑ T√©rk√©p vissza√°ll√≠t√°sa alaphelyzetre (deleg√°lt).
        """
        if self.map_tab:
            # Reset gomb kattint√°s szimul√°l√°sa
            self.map_tab._reset_map_view()
    
    def export_map(self):
        """
        üíæ T√©rk√©p export√°l√°sa (deleg√°lt).
        """
        if self.map_tab:
            # Export gomb kattint√°s szimul√°l√°sa
            self.map_tab._export_map()
    
    # === K√úLS≈ê INTEGR√ÅCI√ì T√ÅMOGAT√ÅS ===
    
    def set_weather_data(self, weather_data: Dict[str, Any]):
        """
        üå§Ô∏è Id≈ëj√°r√°si adatok be√°ll√≠t√°sa t√©rk√©pes overlay-hez.
        
        Args:
            weather_data: Id≈ëj√°r√°si adatok dictionary
        """
        map_visualizer = self.get_map_visualizer()
        if map_visualizer:
            map_visualizer.set_weather_data(weather_data)
            print("üå§Ô∏è DEBUG: Weather data set for map overlay")
        else:
            print("‚ö†Ô∏è DEBUG: MapVisualizer not available for weather data")
    
    def update_from_location_selection(self, location_data: Dict[str, Any]):
        """
        üìç K√ºls≈ë lok√°ci√≥ kiv√°laszt√°s alapj√°n friss√≠t√©s.
        
        Args:
            location_data: Lok√°ci√≥ adatok (pl. MainWindow ControlPanel-t≈ël)
        """
        # Ha van megye inform√°ci√≥, be√°ll√≠tjuk
        county_name = location_data.get('county') or location_data.get('name')
        
        if county_name and self.focus_on_county(county_name):
            print(f"üéØ DEBUG: Map focused on county from external selection: {county_name}")
        else:
            print(f"‚ö†Ô∏è DEBUG: Could not focus on county from external selection: {county_name}")
    
    def get_integration_status(self) -> Dict[str, Any]:
        """
        üìä Integr√°ci√≥ st√°tusz inform√°ci√≥k lek√©rdez√©se.
        
        Returns:
            Integr√°ci√≥ st√°tusz dictionary
        """
        status = {
            "map_view_ready": self.map_tab is not None,
            "map_tab_ready": self.is_ready(),
            "location_selector_available": self.get_location_selector() is not None,
            "map_visualizer_available": self.get_map_visualizer() is not None,
            "current_location": self.get_current_location(),
            "available_counties_count": len(self.get_available_counties()),
            "map_status": self.get_map_status()
        }
        
        return status
    
    # === T√âMA INTEGR√ÅCI√ì ===
    
    def apply_theme(self, theme_name: str):
        """
        üé® T√©ma alkalmaz√°sa a teljes t√©rk√©pes komponensre.
        
        Args:
            theme_name: T√©ma neve ("light" vagy "dark")
        """
        # A ThemeManager automatikusan kezeli a regisztr√°lt widget-eket
        # De ha sz√ºks√©ges, itt lehet specifikus t√©rk√©pes t√©ma logika
        
        # Map style friss√≠t√©se t√©ma alapj√°n
        map_visualizer = self.get_map_visualizer()
        if map_visualizer:
            if theme_name == "dark":
                map_visualizer.set_map_style("CartoDB dark_matter")
            else:
                map_visualizer.set_map_style("OpenStreetMap")
        
        print(f"üé® DEBUG: MapView theme applied: {theme_name}")


# === DEMO FUNKCIONALIT√ÅS ===

def demo_map_view():
    """
    üß™ MapView demo alkalmaz√°s (HungarianMapTab integr√°ci√≥val).
    """
    import sys
    from PySide6.QtWidgets import QApplication, QMainWindow
    
    app = QApplication(sys.argv)
    
    # F≈ë ablak
    window = QMainWindow()
    window.setWindowTitle("üó∫Ô∏è MapView Demo - HungarianMapTab Integr√°ci√≥")
    window.setGeometry(100, 100, 1400, 900)
    
    # MapView l√©trehoz√°sa
    map_view = MapView()
    window.setCentralWidget(map_view)
    
    # Event handlers
    def on_location_selected(location):
        print(f"üìç DEMO: Location selected in MapView: {location.display_name if location else 'None'}")
    
    def on_map_interaction(interaction_type, data):
        print(f"üó∫Ô∏è DEMO: Map interaction in MapView: {interaction_type} - {data}")
    
    def on_export_completed(file_path):
        print(f"üíæ DEMO: Export completed in MapView: {file_path}")
    
    def on_data_loading_completed():
        print("‚úÖ DEMO: MapView data loading completed!")
        
        # Integr√°ci√≥ st√°tusz ki√≠r√°sa
        status = map_view.get_integration_status()
        print("üìä DEMO: Integration status:")
        for key, value in status.items():
            print(f"   {key}: {value}")
    
    # Signalok kapcsol√°sa
    map_view.location_selected.connect(on_location_selected)
    map_view.map_interaction.connect(on_map_interaction)
    map_view.export_completed.connect(on_export_completed)
    map_view.data_loading_completed.connect(on_data_loading_completed)
    
    window.show()
    
    print("üó∫Ô∏è DEMO: MapView elind√≠tva HungarianMapTab integr√°ci√≥val!")
    print("‚úÖ A MapView most m√°r tartalmazza:")
    print("   üìç HungarianLocationSelector (bal oldal)")
    print("   üó∫Ô∏è HungarianMapVisualizer (jobb oldal)")
    print("   üîó Signal forwarding MainWindow fel√©")
    print("   üéØ Teljes API deleg√°l√°s")
    print("   üé® Theme integr√°ci√≥")
    
    sys.exit(app.exec())


if __name__ == "__main__":
    demo_map_view()