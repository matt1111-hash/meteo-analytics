#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üó∫Ô∏è Magyar Folium T√©rk√©p Vizualiz√°l√≥ - HELYI HTTP SZERVER VERZI√í v3.0
Magyar Kl√≠maanalitika MVP - Folium + Leaflet.js Alap√∫ T√©rk√©pes Megjelen√≠t≈ë

üöÄ HELYI HTTP SZERVER MEGOLD√ÅS v3.0:
- Be√°gyazott HTTP szerver QThread-ben
- WebEngine http://127.0.0.1:PORT/map.html bet√∂lt√©s
- Same-Origin Policy probl√©m√°k v√©gleg megoldva
- Nagy HTML f√°jlok (1.5MB+) t√°mogat√°sa
- Folium teljes funkcionalit√°s
- Stabil √©s megb√≠zhat√≥ m≈±k√∂d√©s

üîß KRITIKUS JAV√çT√ÅS:
- setHtml() m√©retkorl√°t megoldva
- file:// protokoll probl√©m√°k megsz≈±ntek
- JavaScript √©s CSS teljes t√°mogat√°s
- Nincs WebEngine cache konfliktus

F√ÅJL: src/gui/map_visualizer.py
"""

from typing import Dict, List, Optional, Tuple, Any, Union
import os
import json
import tempfile
import threading
import time
import socketserver
import http.server
from pathlib import Path
from dataclasses import dataclass, field
from datetime import datetime, date
import uuid

from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QLabel, QPushButton, 
    QComboBox, QSlider, QCheckBox, QGroupBox, QProgressBar,
    QFileDialog, QMessageBox, QSplitter, QTextEdit
)
from PySide6.QtCore import Qt, Signal, QUrl, QTimer, QThread
from PySide6.QtGui import QFont, QPixmap
from PySide6.QtWebEngineWidgets import QWebEngineView
from PySide6.QtWebChannel import QWebChannel

# Folium import with fallback
try:
    import folium
    from folium import plugins
    import branca.colormap as cm
    FOLIUM_AVAILABLE = True
    print("‚úÖ Folium successfully imported")
except ImportError as e:
    FOLIUM_AVAILABLE = False
    print(f"‚ö†Ô∏è Folium not available: {e}")

# GeoPandas import
try:
    import geopandas as gpd
    import pandas as pd
    GEOPANDAS_AVAILABLE = True
except ImportError:
    GEOPANDAS_AVAILABLE = False

# Saj√°t modulok
from .theme_manager import register_widget_for_theming
from .color_palette import ColorPalette


@dataclass
class FoliumMapConfig:
    """
    üó∫Ô∏è Folium t√©rk√©p konfigur√°ci√≥s be√°ll√≠t√°sok.
    """
    # Alap t√©rk√©p be√°ll√≠t√°sok
    center_lat: float = 47.1625  # Magyarorsz√°g k√∂zepe
    center_lon: float = 19.5033
    zoom_start: int = 7
    min_zoom: int = 6
    max_zoom: int = 12
    
    # T√©rk√©p st√≠lus
    tiles: str = "OpenStreetMap"  # "OpenStreetMap", "CartoDB positron", "CartoDB dark_matter"
    attr: str = "Magyar Kl√≠maanalitika"
    
    # County layer be√°ll√≠t√°sok
    show_counties: bool = True
    county_fill_color: str = "#4A90E2"
    county_fill_opacity: float = 0.4
    county_border_color: str = "#2E4057"
    county_border_weight: int = 2
    county_hover_color: str = "#E74C3C"
    
    # Weather overlay
    weather_overlay: bool = False
    weather_opacity: float = 0.6
    
    # üîß Active overlay parameter
    active_overlay_parameter: Optional[str] = None  # "temperature", "wind_speed", "precipitation"
    
    # Interaktivit√°s
    disable_scroll_zoom: bool = False
    dragging: bool = True
    touch_zoom: bool = True
    double_click_zoom: bool = True
    
    # Kiv√°lasztott elemek
    selected_county: Optional[str] = None
    highlighted_counties: List[str] = field(default_factory=list)
    
    # Theme
    theme: str = "light"  # "light" vagy "dark"


class LocalHttpServerThread(QThread):
    """
    üåê Helyi HTTP szerver QThread-ben a Folium t√©rk√©pek kiszolg√°l√°s√°hoz.
    
    Ez a szerver megoldja a WebEngine Same-Origin Policy probl√©m√°it
    √©s t√°mogatja a nagy HTML f√°jlokat (1.5MB+).
    """
    
    # Signalok
    server_ready = Signal(str, int)  # host, port
    server_error = Signal(str)       # error message
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.server = None
        self.httpd = None
        self.temp_dir = tempfile.gettempdir()
        self.host = "127.0.0.1"
        self.port = 0  # 0 = automatikus szabad port keres√©s
        self.running = False
        
    def run(self):
        """
        üöÄ HTTP szerver ind√≠t√°sa h√°tt√©rben.
        """
        try:
            # Munkamappa be√°ll√≠t√°sa
            os.chdir(self.temp_dir)
            
            # HTTP k√©r√©s handler
            class QuietHTTPRequestHandler(http.server.SimpleHTTPRequestHandler):
                def log_message(self, format, *args):
                    # Csendes m√≥d - nincs console spam
                    pass
            
            # HTTP szerver l√©trehoz√°sa
            with socketserver.TCPServer((self.host, self.port), QuietHTTPRequestHandler) as httpd:
                self.httpd = httpd
                self.port = httpd.server_address[1]  # Val√≥s port megszerz√©se
                self.running = True
                
                print(f"üåê Local HTTP Server started: http://{self.host}:{self.port}")
                
                # Szerver k√©sz jelz√©s
                self.server_ready.emit(self.host, self.port)
                
                # Szerver futtat√°sa
                httpd.serve_forever()
                
        except Exception as e:
            error_msg = f"HTTP Server error: {e}"
            print(f"‚ùå {error_msg}")
            self.server_error.emit(error_msg)
    
    def stop(self):
        """
        üõë HTTP szerver le√°ll√≠t√°sa.
        """
        if self.httpd:
            self.httpd.shutdown()
            self.running = False
            print("üõë Local HTTP Server stopped")


class JavaScriptBridge(QWidget):
    """
    üåâ JavaScript ‚Üî PySide6 kommunik√°ci√≥s h√≠d.
    
    Ez az oszt√°ly kezeli a Folium t√©rk√©p JavaScript esem√©nyeit
    √©s tov√°bb√≠tja ≈ëket a Python oldalra.
    """
    
    # Signalok JavaScript esem√©nyekhez
    county_clicked = Signal(str)              # county_name
    coordinates_clicked = Signal(float, float) # lat, lon
    map_moved = Signal(float, float, int)     # lat, lon, zoom
    county_hovered = Signal(str)              # county_name
    county_unhovered = Signal()               # hover v√©ge
    
    def __init__(self):
        super().__init__()
        self.bridge_id = str(uuid.uuid4())
        print(f"üåâ JavaScriptBridge created with ID: {self.bridge_id}")
    
    def handle_county_click(self, county_name: str):
        """Megye kattint√°s kezel√©se JavaScript-b≈ël."""
        print(f"üñ±Ô∏è JS Bridge: County clicked: {county_name}")
        self.county_clicked.emit(county_name)
    
    def handle_coordinates_click(self, lat: float, lon: float):
        """Koordin√°ta kattint√°s kezel√©se."""
        print(f"üìç JS Bridge: Coordinates clicked: {lat}, {lon}")
        self.coordinates_clicked.emit(lat, lon)
    
    def handle_map_move(self, lat: float, lon: float, zoom: int):
        """T√©rk√©p mozg√°s kezel√©se."""
        print(f"üó∫Ô∏è JS Bridge: Map moved: {lat}, {lon}, zoom={zoom}")
        self.map_moved.emit(lat, lon, zoom)
    
    def handle_county_hover(self, county_name: str):
        """Megye hover kezel√©se."""
        print(f"üëÜ JS Bridge: County hovered: {county_name}")
        self.county_hovered.emit(county_name)
    
    def handle_county_unhover(self):
        """Megye hover v√©ge kezel√©se."""
        self.county_unhovered.emit()


class FoliumMapGenerator(QThread):
    """
    üìÑ H√°tt√©r worker a Folium interakt√≠v t√©rk√©p gener√°l√°s√°hoz - HTTP SZERVER VERZI√ì.
    
    üîß KRITIKUS V√ÅLTOZ√ÅS v3.0:
    - Visszat√©r a f√°jlment√©shez
    - HTTP szerver kiszolg√°lja a f√°jlokat
    - Nagy HTML f√°jlok (1.5MB+) t√°mogat√°sa
    - Same-Origin Policy probl√©m√°k v√©gleg megoldva
    """
    
    # Signalok
    progress_updated = Signal(int)         # progress (0-100)
    map_generated = Signal(str)           # HTML FILE PATH (nem content!)
    error_occurred = Signal(str)          # error message
    status_updated = Signal(str)          # status message
    
    def __init__(self, config: FoliumMapConfig, counties_gdf=None, weather_data=None, bridge_id=None, output_path=None):
        super().__init__()
        self.config = config
        self.counties_gdf = counties_gdf
        self.weather_data = weather_data
        self.bridge_id = bridge_id or str(uuid.uuid4())
        
        # Output path gener√°l√°s
        if output_path is None:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            self.output_path = os.path.join(tempfile.gettempdir(), f"hungarian_folium_map_{timestamp}.html")
        else:
            self.output_path = output_path
    
    def run(self):
        """
        üó∫Ô∏è Folium interakt√≠v t√©rk√©p gener√°l√°sa - HTTP SZERVER VERZI√ì.
        """
        try:
            if not FOLIUM_AVAILABLE:
                raise ImportError("Folium library not available")
            
            self.status_updated.emit("üó∫Ô∏è Folium t√©rk√©p inicializ√°l√°sa...")
            self.progress_updated.emit(5)
            
            # === ALAP FOLIUM T√âRK√âP ===
            
            map_obj = self._create_base_folium_map()
            self.progress_updated.emit(20)
            
            # === COUNTIES LAYER ===
            
            if self.config.show_counties and self.counties_gdf is not None:
                self.status_updated.emit("üó∫Ô∏è Megyehat√°rok hozz√°ad√°sa...")
                self._add_counties_layer(map_obj)
            self.progress_updated.emit(50)
            
            # === WEATHER OVERLAY ===
            
            if self.config.weather_overlay and self.weather_data:
                self.status_updated.emit("üå§Ô∏è Id≈ëj√°r√°si overlay...")
                self._add_weather_overlay(map_obj)
            self.progress_updated.emit(70)
            
            # === JAVASCRIPT BRIDGE ===
            
            self.status_updated.emit("üåâ JavaScript interaktivit√°s...")
            self._add_javascript_bridge(map_obj)
            self.progress_updated.emit(85)
            
            # === MAP CONTROLS ===
            
            self._add_map_controls(map_obj)
            self.progress_updated.emit(90)
            
            # üîß KRITIKUS: F√ÅJL MENT√âS (HTTP szerver miatt)
            
            self.status_updated.emit("üíæ HTML f√°jl ment√©se...")
            
            # Folium t√©rk√©p ment√©se f√°jlba
            map_obj.save(self.output_path)
            
            # F√°jl l√©tez√©s ellen≈ërz√©se
            if not os.path.exists(self.output_path):
                raise FileNotFoundError(f"Generated HTML file not found: {self.output_path}")
            
            # F√°jl m√©ret ellen≈ërz√©se
            file_size = os.path.getsize(self.output_path)
            if file_size < 1000:
                raise ValueError(f"Generated HTML file too small: {file_size} bytes")
            
            self.progress_updated.emit(100)
            self.status_updated.emit("‚úÖ Folium t√©rk√©p HTTP szerver verzi√≥ elk√©sz√ºlt!")
            
            # üîß FILE PATH VISSZAAD√ÅS (nem content!)
            self.map_generated.emit(self.output_path)
            
            print(f"‚úÖ HTTP Server Folium map generated: {self.output_path} ({file_size:,} bytes)")
            
        except Exception as e:
            import traceback
            error_msg = f"Folium t√©rk√©p gener√°l√°si hiba: {e}\n{traceback.format_exc()}"
            self.error_occurred.emit(error_msg)
    
    def _create_base_folium_map(self) -> folium.Map:
        """
        üó∫Ô∏è Alap Folium t√©rk√©p l√©trehoz√°sa.
        """
        # T√©ma alapj√°n tiles kiv√°laszt√°sa
        if self.config.theme == "dark":
            tiles = "CartoDB dark_matter"
        else:
            tiles = self.config.tiles
        
        # Folium t√©rk√©p l√©trehoz√°sa
        map_obj = folium.Map(
            location=[self.config.center_lat, self.config.center_lon],
            zoom_start=self.config.zoom_start,
            tiles=tiles,
            attr=self.config.attr,
            min_zoom=self.config.min_zoom,
            max_zoom=self.config.max_zoom,
            control_scale=True,
            prefer_canvas=True
        )
        
        # T√©rk√©p opci√≥k
        if self.config.disable_scroll_zoom:
            map_obj.options['scrollWheelZoom'] = False
        
        print(f"‚úÖ Base Folium map created: {tiles}")
        return map_obj
    
    def _add_counties_layer(self, map_obj: folium.Map):
        """
        üó∫Ô∏è Magyar megy√©k GeoJSON layer hozz√°ad√°sa interakt√≠v funkcionalit√°ssal.
        """
        if self.counties_gdf is None or len(self.counties_gdf) == 0:
            print("‚ö†Ô∏è No counties GeoDataFrame available")
            return
        
        print(f"üìç Adding {len(self.counties_gdf)} counties to map")
        
        # GeoJSON konvert√°l√°s
        counties_geojson = json.loads(self.counties_gdf.to_json())
        
        # Style function
        def style_function(feature):
            county_name = feature['properties'].get('megye', '')
            
            # Kiv√°lasztott megye speci√°lis st√≠lus
            if county_name == self.config.selected_county:
                return {
                    'fillColor': '#E74C3C',
                    'color': '#C0392B',
                    'weight': 3,
                    'fillOpacity': 0.7,
                    'dashArray': '5, 5'
                }
            
            # Highlighted megy√©k
            if county_name in self.config.highlighted_counties:
                return {
                    'fillColor': '#F39C12',
                    'color': '#E67E22',
                    'weight': 3,
                    'fillOpacity': 0.6
                }
            
            # Norm√°l st√≠lus
            return {
                'fillColor': self.config.county_fill_color,
                'color': self.config.county_border_color,
                'weight': self.config.county_border_weight,
                'fillOpacity': self.config.county_fill_opacity
            }
        
        # Highlight function
        def highlight_function(feature):
            return {
                'fillColor': self.config.county_hover_color,
                'color': '#FFFFFF',
                'weight': 4,
                'fillOpacity': 0.8
            }
        
        # GeoJson layer hozz√°ad√°sa
        counties_layer = folium.GeoJson(
            counties_geojson,
            style_function=style_function,
            highlight_function=highlight_function,
            tooltip=folium.Tooltip(
                folium.Html(
                    '<b>Hover a megy√©re a r√©szletek√©rt</b>',
                    script=True
                ),
                sticky=True
            ),
            popup=folium.Popup(
                folium.Html(
                    '<b>Kattints a megy√©re</b>',
                    script=True
                ),
                max_width=200
            )
        )
        
        counties_layer.add_to(map_obj)
        
        print("‚úÖ Counties layer added with interactivity")
    
    def _add_weather_overlay(self, map_obj: folium.Map):
        """
        üå§Ô∏è Id≈ëj√°r√°si adatok overlay hozz√°ad√°sa HeatMap plugin-nal.
        """
        if not self.weather_data:
            print("‚ö†Ô∏è No weather data available for overlay")
            return
        
        print(f"üå§Ô∏è Adding weather overlay with {len(self.weather_data)} data points")
        
        try:
            # === H≈êM√âRS√âKLET HEATMAP ===
            if 'temperature' in self.weather_data:
                self._add_temperature_heatmap(map_obj)
            
            # === CSAPAD√âK OVERLAY ===
            if 'precipitation' in self.weather_data:
                self._add_precipitation_overlay(map_obj)
            
            # === SZ√âL SEBESS√âG OVERLAY ===
            if 'wind_speed' in self.weather_data:
                self._add_wind_speed_overlay(map_obj)
            
            # === OVERLAY LEGEND ===
            self._add_weather_legend(map_obj)
            
            print("‚úÖ Weather overlay layers added successfully")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Weather overlay error: {e}")
    
    def _add_temperature_heatmap(self, map_obj: folium.Map):
        """
        üå°Ô∏è H≈ëm√©rs√©klet heatmap hozz√°ad√°sa DINAMIKUS SZ√çNSK√ÅL√ÅVAL.
        """
        try:
            from folium.plugins import HeatMap
            
            # H≈ëm√©rs√©klet adatok el≈ëk√©sz√≠t√©se
            temp_data = []
            for location, data in self.weather_data.get('temperature', {}).items():
                if 'coordinates' in data and 'value' in data:
                    lat, lon = data['coordinates']
                    temp = data['value']
                    
                    # Heatmap pont: [lat, lon, intensity]
                    # Intensity normaliz√°l√°s -20¬∞C - +40¬∞C k√∂z√∂tt
                    intensity = max(0.1, min(1.0, (temp + 20) / 60))
                    temp_data.append([lat, lon, intensity])
            
            if temp_data:
                # üîß DINAMIKUS GRADIENT GENER√ÅL√ÅS
                gradient = self._get_dynamic_gradient('RdYlBu_r', 'temperature')
                
                # HeatMap layer l√©trehoz√°sa dinamikus gradienttel
                heat_map = HeatMap(
                    temp_data,
                    name="üå°Ô∏è H≈ëm√©rs√©klet",
                    min_opacity=0.3,
                    max_zoom=18,
                    radius=25,
                    blur=15,
                    gradient=gradient  # üî• DINAMIKUS GRADIENT!
                )
                
                # Hozz√°ad√°s a t√©rk√©phez
                heat_map.add_to(map_obj)
                
                print(f"üå°Ô∏è Temperature heatmap added with {len(temp_data)} points (dynamic gradient)")
            
        except ImportError:
            print("‚ö†Ô∏è HeatMap plugin not available")
        except Exception as e:
            print(f"‚ö†Ô∏è Temperature heatmap error: {e}")
    
    def _get_dynamic_gradient(self, color_scale: str, overlay_type: str) -> Dict[float, str]:
        """
        üîß KRITIKUS √öJ MET√ìDUS: Dinamikus gradient gener√°l√°s color_scale alapj√°n
        """
        # üé® DINAMIKUS SZ√çNSK√ÅLA MAPPING
        COLOR_SCALE_GRADIENTS = {
            'RdYlBu_r': {  # H≈ëm√©rs√©klet - K√©k (hideg) ‚Üí Piros (meleg)
                0.0: '#0000FF',  # K√©k
                0.2: '#00BFFF',  # Vil√°gosk√©k  
                0.4: '#87CEEB',  # √âgk√©k
                0.6: '#FFFF00',  # S√°rga
                0.8: '#FFA500',  # Narancs
                1.0: '#FF0000'   # Piros
            },
            'Blues': {  # Csapad√©k - Feh√©r ‚Üí S√∂t√©tk√©k
                0.0: '#F0F8FF',  # Alice Blue (szinte feh√©r)
                0.2: '#E6F3FF',  # Nagyon vil√°gosk√©k
                0.4: '#B3D9FF',  # Vil√°gosk√©k
                0.6: '#4D94FF',  # K√∂zepes k√©k
                0.8: '#0066CC',  # S√∂t√©tk√©k
                1.0: '#003366'   # Nagyon s√∂t√©tk√©k
            },
            'Greens': {  # Sz√©l - Vil√°gosz√∂ld ‚Üí S√∂t√©tz√∂ld
                0.0: '#F0FFF0',  # Honeydew (szinte feh√©r)
                0.2: '#98FB98',  # Pale Green
                0.4: '#90EE90',  # Light Green
                0.6: '#32CD32',  # Lime Green
                0.8: '#228B22',  # Forest Green
                1.0: '#006400'   # Dark Green
            },
            'Oranges': {  # Sz√©ll√∂k√©sek - Vil√°gos narancs ‚Üí S√∂t√©t narancs/piros
                0.0: '#FFF8DC',  # Cornsilk (kr√©msz√≠n)
                0.2: '#FFEFD5',  # Papaya Whip
                0.4: '#FFE4B5',  # Moccasin  
                0.6: '#FFA500',  # Orange
                0.8: '#FF4500',  # Orange Red
                1.0: '#DC143C'   # Crimson
            }
        }
        
        try:
            # Direkt color_scale mapping
            if color_scale in COLOR_SCALE_GRADIENTS:
                gradient = COLOR_SCALE_GRADIENTS[color_scale]
                print(f"üé® Dynamic gradient: {color_scale} ‚Üí {len(gradient)} sz√≠nfokozat")
                return gradient
            
            # Fallback: overlay_type alap√∫ mapping
            fallback_mapping = {
                'temperature': 'RdYlBu_r',
                'precipitation': 'Blues', 
                'wind_speed': 'Greens',
                'wind_gusts': 'Oranges'
            }
            
            fallback_scale = fallback_mapping.get(overlay_type, 'RdYlBu_r')
            if fallback_scale in COLOR_SCALE_GRADIENTS:
                gradient = COLOR_SCALE_GRADIENTS[fallback_scale]
                print(f"‚ö†Ô∏è Fallback gradient: {color_scale} ‚Üí {fallback_scale}")
                return gradient
            
            # Ultimate fallback
            print(f"‚ö†Ô∏è Ismeretlen color_scale √©s overlay_type: {color_scale}, {overlay_type}")
            return COLOR_SCALE_GRADIENTS['RdYlBu_r']  # Default h≈ëm√©rs√©klet
            
        except Exception as e:
            print(f"‚ö†Ô∏è Gradient gener√°l√°si hiba: {e}")
            return COLOR_SCALE_GRADIENTS['RdYlBu_r']  # Safe fallback
    
    def _add_precipitation_overlay(self, map_obj: folium.Map):
        """
        üåßÔ∏è Csapad√©k overlay hozz√°ad√°sa CircleMarker-ekkel.
        """
        try:
            precip_data = self.weather_data.get('precipitation', {})
            
            # Csapad√©k sz√≠nsk√°la
            def get_precipitation_color(mm):
                if mm == 0:
                    return '#CCCCCC'  # Sz√ºrke - nincs csapad√©k
                elif mm < 1:
                    return '#E8F4FD'  # Nagyon vil√°gos k√©k
                elif mm < 5:
                    return '#BFE6FF'  # Vil√°gos k√©k
                elif mm < 10:
                    return '#80D0FF'  # K√∂zepes k√©k
                elif mm < 25:
                    return '#40AAFF'  # Er≈ës k√©k
                elif mm < 50:
                    return '#0080FF'  # S√∂t√©t k√©k
                else:
                    return '#0040AA'  # Nagyon s√∂t√©t k√©k
            
            # CircleMarker-ek hozz√°ad√°sa
            for location, data in precip_data.items():
                if 'coordinates' in data and 'value' in data:
                    lat, lon = data['coordinates']
                    precip_mm = data['value']
                    
                    # Circle m√©ret csapad√©k mennyis√©g alapj√°n
                    radius = max(3, min(20, precip_mm / 2))
                    color = get_precipitation_color(precip_mm)
                    
                    # CircleMarker l√©trehoz√°sa
                    folium.CircleMarker(
                        location=[lat, lon],
                        radius=radius,
                        popup=f"üåßÔ∏è {location}<br>Csapad√©k: {precip_mm:.1f} mm",
                        color='#FFFFFF',
                        weight=1,
                        fillColor=color,
                        fillOpacity=0.7,
                        tooltip=f"{precip_mm:.1f} mm"
                    ).add_to(map_obj)
            
            print(f"üåßÔ∏è Precipitation overlay added with {len(precip_data)} points")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Precipitation overlay error: {e}")
    
    def _add_wind_speed_overlay(self, map_obj: folium.Map):
        """
        üí® Sz√©l sebess√©g overlay hozz√°ad√°sa nyilakkal.
        """
        try:
            wind_data = self.weather_data.get('wind_speed', {})
            
            # Sz√©l sz√≠nsk√°la Beaufort sk√°la alapj√°n
            def get_wind_color(kmh):
                if kmh < 6:      return '#C0C0C0'  # Sz√©lcsend - Sz√ºrke
                elif kmh < 12:   return '#00FF00'  # Enyhe sz√©l - Z√∂ld
                elif kmh < 20:   return '#FFFF00'  # Gyenge sz√©l - S√°rga  
                elif kmh < 29:   return '#FFA500'  # M√©rs√©kelt sz√©l - Narancs
                elif kmh < 39:   return '#FF8000'  # √âl√©nk sz√©l - Narancss√°rga
                elif kmh < 50:   return '#FF4000'  # Er≈ës sz√©l - V√∂r√∂s-narancs
                elif kmh < 62:   return '#FF0000'  # Viharos sz√©l - Piros
                else:            return '#800000'  # Ork√°n - S√∂t√©t piros
            
            # Sz√©l nyilak hozz√°ad√°sa
            for location, data in wind_data.items():
                if 'coordinates' in data and 'speed' in data:
                    lat, lon = data['coordinates']
                    speed_kmh = data['speed']
                    direction = data.get('direction', 0)  # fok
                    
                    # Ny√≠l m√©ret sebess√©g alapj√°n
                    arrow_size = max(5, min(15, speed_kmh / 5))
                    color = get_wind_color(speed_kmh)
                    
                    # Sz√©l ir√°ny ny√≠l SVG icon
                    wind_icon = f"""
                    <svg width="20" height="20" viewBox="0 0 20 20" style="transform: rotate({direction}deg)">
                        <path d="M10,2 L15,18 L10,15 L5,18 Z" fill="{color}" stroke="#000" stroke-width="1"/>
                    </svg>
                    """
                    
                    # DivIcon haszn√°lata az SVG ny√≠lhoz
                    wind_marker = folium.Marker(
                        location=[lat, lon],
                        icon=folium.DivIcon(
                            html=wind_icon,
                            class_name="wind-arrow",
                            icon_size=(20, 20),
                            icon_anchor=(10, 10)
                        ),
                        popup=f"üí® {location}<br>Sz√©l: {speed_kmh:.1f} km/h<br>Ir√°ny: {direction}¬∞",
                        tooltip=f"{speed_kmh:.1f} km/h"
                    )
                    
                    wind_marker.add_to(map_obj)
            
            print(f"üí® Wind speed overlay added with {len(wind_data)} points")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Wind speed overlay error: {e}")
    
    def _add_weather_legend(self, map_obj: folium.Map):
        """
        üìä Weather overlay legend hozz√°ad√°sa DINAMIKUS OVERLAY PARAMETER alapj√°n.
        """
        try:
            # üîß JAV√çTOTT: Active overlay parameter alap√∫ legend
            active_parameter = self.config.active_overlay_parameter
            
            if active_parameter == 'temperature':
                legend_html = self._create_temperature_legend()
            elif active_parameter == 'wind_speed':
                legend_html = self._create_wind_legend()
            elif active_parameter == 'precipitation':
                legend_html = self._create_precipitation_legend()
            else:
                # Fallback: √°ltal√°nos legend
                legend_html = self._create_general_legend()
            
            # Legend hozz√°ad√°sa a t√©rk√©phez
            map_obj.get_root().html.add_child(folium.Element(legend_html))
            
            print(f"üìä Weather legend added for parameter: {active_parameter}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Weather legend error: {e}")
    
    def _create_temperature_legend(self) -> str:
        """üå°Ô∏è H≈ëm√©rs√©klet specifikus legend HTML."""
        return '''
        <div style="position: fixed; 
                    top: 80px; right: 20px; width: 200px; height: auto; 
                    background-color: rgba(255, 255, 255, 0.9);
                    border: 2px solid grey; z-index:9999; 
                    font-size: 12px; padding: 10px;
                    border-radius: 5px;
                    box-shadow: 0 4px 8px rgba(0,0,0,0.2);
                    ">
        <h4 style="margin-top: 0; color: #2E4057;">üå°Ô∏è H≈ëm√©rs√©klet</h4>
        
        <div style="background: linear-gradient(to right, #0000FF, #00FFFF, #00FF00, #FFFF00, #FF8000, #FF0000); 
                    height: 15px; margin: 5px 0;"></div>
        <div style="display: flex; justify-content: space-between; font-size: 10px;">
            <span>-20¬∞C</span><span>+40¬∞C</span>
        </div>
        
        <p style="margin-top: 10px; font-size: 10px;">
            <b>Sz√≠nsk√°la:</b> K√©k (hideg) ‚Üí Piros (meleg)<br>
            <b>Adatok:</b> Napi maximum h≈ëm√©rs√©klet
        </p>
        </div>
        '''
    
    def _create_wind_legend(self) -> str:
        """üí® Sz√©l specifikus legend HTML."""
        return '''
        <div style="position: fixed; 
                    top: 80px; right: 20px; width: 200px; height: auto; 
                    background-color: rgba(255, 255, 255, 0.9);
                    border: 2px solid grey; z-index:9999; 
                    font-size: 12px; padding: 10px;
                    border-radius: 5px;
                    box-shadow: 0 4px 8px rgba(0,0,0,0.2);
                    ">
        <h4 style="margin-top: 0; color: #2E4057;">üí® Sz√©lsebess√©g</h4>
        
        <div style="background: linear-gradient(to right, #F0FFF0, #90EE90, #32CD32, #228B22, #006400); 
                    height: 15px; margin: 5px 0;"></div>
        <div style="display: flex; justify-content: space-between; font-size: 10px;">
            <span>0 km/h</span><span>60+ km/h</span>
        </div>
        
        <p style="margin-top: 10px; font-size: 10px;">
            <div>üü¢ < 12 km/h - Enyhe sz√©l</div>
            <div>üü° 12-20 km/h - Gyenge sz√©l</div>
            <div>üü† 20-39 km/h - M√©rs√©kelt sz√©l</div>
            <div>üî¥ > 50 km/h - Er≈ës sz√©l</div>
        </p>
        </div>
        '''
    
    def _create_precipitation_legend(self) -> str:
        """üåßÔ∏è Csapad√©k specifikus legend HTML."""
        return '''
        <div style="position: fixed; 
                    top: 80px; right: 20px; width: 200px; height: auto; 
                    background-color: rgba(255, 255, 255, 0.9);
                    border: 2px solid grey; z-index:9999; 
                    font-size: 12px; padding: 10px;
                    border-radius: 5px;
                    box-shadow: 0 4px 8px rgba(0,0,0,0.2);
                    ">
        <h4 style="margin-top: 0; color: #2E4057;">üåßÔ∏è Csapad√©k</h4>
        
        <div style="background: linear-gradient(to right, #F0F8FF, #B3D9FF, #4D94FF, #0066CC, #003366); 
                    height: 15px; margin: 5px 0;"></div>
        <div style="display: flex; justify-content: space-between; font-size: 10px;">
            <span>0 mm</span><span>50+ mm</span>
        </div>
        
        <p style="margin-top: 10px; font-size: 10px;">
            <div style="display: flex; align-items: center; margin: 5px 0;">
                <div style="width: 10px; height: 10px; background: #E8F4FD; border-radius: 50%; margin-right: 5px;"></div>
                <span>< 1 mm</span>
            </div>
            <div style="display: flex; align-items: center; margin: 5px 0;">
                <div style="width: 15px; height: 15px; background: #80D0FF; border-radius: 50%; margin-right: 5px;"></div>
                <span>5-10 mm</span>
            </div>
            <div style="display: flex; align-items: center; margin: 5px 0;">
                <div style="width: 20px; height: 20px; background: #0080FF; border-radius: 50%; margin-right: 5px;"></div>
                <span>> 25 mm</span>
            </div>
        </p>
        </div>
        '''
    
    def _create_general_legend(self) -> str:
        """üå§Ô∏è √Åltal√°nos weather legend HTML."""
        return '''
        <div style="position: fixed; 
                    top: 80px; right: 20px; width: 200px; height: auto; 
                    background-color: rgba(255, 255, 255, 0.9);
                    border: 2px solid grey; z-index:9999; 
                    font-size: 12px; padding: 10px;
                    border-radius: 5px;
                    box-shadow: 0 4px 8px rgba(0,0,0,0.2);
                    ">
        <h4 style="margin-top: 0; color: #2E4057;">üå§Ô∏è Id≈ëj√°r√°si Overlay</h4>
        
        <p><b>üå°Ô∏è H≈ëm√©rs√©klet:</b></p>
        <div style="background: linear-gradient(to right, #0000FF, #00FFFF, #00FF00, #FFFF00, #FF8000, #FF0000); 
                    height: 15px; margin: 5px 0;"></div>
        <div style="display: flex; justify-content: space-between; font-size: 10px;">
            <span>-20¬∞C</span><span>+40¬∞C</span>
        </div>
        
        <p style="margin-top: 15px;"><b>üåßÔ∏è Csapad√©k:</b></p>
        <div style="display: flex; align-items: center; margin: 5px 0;">
            <div style="width: 10px; height: 10px; background: #E8F4FD; border-radius: 50%; margin-right: 5px;"></div>
            <span style="font-size: 10px;">< 1 mm</span>
        </div>
        <div style="display: flex; align-items: center; margin: 5px 0;">
            <div style="width: 15px; height: 15px; background: #80D0FF; border-radius: 50%; margin-right: 5px;"></div>
            <span style="font-size: 10px;">5-10 mm</span>
        </div>
        <div style="display: flex; align-items: center; margin: 5px 0;">
            <div style="width: 20px; height: 20px; background: #0080FF; border-radius: 50%; margin-right: 5px;"></div>
            <span style="font-size: 10px;">> 25 mm</span>
        </div>
        
        <p style="margin-top: 15px;"><b>üí® Sz√©l:</b></p>
        <div style="font-size: 10px;">
            <div>üü¢ < 12 km/h - Enyhe</div>
            <div>üü° 12-20 km/h - Gyenge</div>
            <div>üü† 20-39 km/h - M√©rs√©kelt</div>
            <div>üî¥ > 50 km/h - Er≈ës</div>
        </div>
        </div>
        '''
    
    def _add_javascript_bridge(self, map_obj: folium.Map):
        """
        üåâ JavaScript bridge k√≥d hozz√°ad√°sa a t√©rk√©phez.
        """
        # Custom JavaScript k√≥d a bridge kommunik√°ci√≥hoz
        bridge_js = f"""
        <script>
        // Magyar Kl√≠maanalitika - JavaScript Bridge
        console.log('üåâ JavaScript Bridge inicializ√°l√°sa...');
        
        var bridgeId = '{self.bridge_id}';
        
        // QWebChannel initialization
        var channel = null;
        var qtBridge = null;
        
        // Initialize QWebChannel when available
        function initializeQtBridge() {{
            if (typeof qt !== 'undefined' && qt.webChannelTransport) {{
                try {{
                    new QWebChannel(qt.webChannelTransport, function(ch) {{
                        channel = ch;
                        qtBridge = channel.objects.qtBridge;
                        console.log('‚úÖ QWebChannel bridge initialized successfully');
                    }});
                }} catch(e) {{
                    console.log('‚ö†Ô∏è QWebChannel initialization failed:', e);
                }}
            }} else {{
                console.log('‚ö†Ô∏è QWebChannel not available, retrying in 500ms...');
                setTimeout(initializeQtBridge, 500);
            }}
        }}
        
        // County click handler
        function handleCountyClick(countyName) {{
            console.log('üñ±Ô∏è County clicked:', countyName);
            if (qtBridge && qtBridge.handle_county_click) {{
                qtBridge.handle_county_click(countyName);
            }} else {{
                console.log('‚ö†Ô∏è qtBridge not available for county click');
            }}
        }}
        
        // Coordinates click handler
        function handleCoordinatesClick(lat, lon) {{
            console.log('üìç Coordinates clicked:', lat, lon);
            if (qtBridge && qtBridge.handle_coordinates_click) {{
                qtBridge.handle_coordinates_click(lat, lon);
            }} else {{
                console.log('‚ö†Ô∏è qtBridge not available for coordinates click');
            }}
        }}
        
        // Map move handler with null check
        function handleMapMove(lat, lon, zoom) {{
            console.log('üó∫Ô∏è Map moved:', lat, lon, 'zoom:', zoom);
            if (qtBridge && typeof qtBridge.handle_map_move === 'function') {{
                qtBridge.handle_map_move(lat, lon, zoom);
            }} else {{
                console.log('‚ö†Ô∏è qtBridge.handle_map_move not available');
            }}
        }}
        
        // Document ready
        document.addEventListener('DOMContentLoaded', function() {{
            console.log('üìÑ DOM ready, initializing bridge...');
            
            // Initialize QWebChannel
            initializeQtBridge();
            
            // Map click esem√©ny figyel√©se
            setTimeout(function() {{
                if (typeof window.map_{map_obj._id} !== 'undefined') {{
                    var map = window.map_{map_obj._id};
                    
                    // Map click event
                    map.on('click', function(e) {{
                        handleCoordinatesClick(e.latlng.lat, e.latlng.lng);
                    }});
                    
                    // Map move event with protection
                    map.on('moveend', function(e) {{
                        try {{
                            var center = map.getCenter();
                            var zoom = map.getZoom();
                            handleMapMove(center.lat, center.lng, zoom);
                        }} catch(err) {{
                            console.log('‚ö†Ô∏è Map move event error:', err);
                        }}
                    }});
                    
                    console.log('üó∫Ô∏è Map event listeners attached');
                }} else {{
                    console.log('‚ö†Ô∏è Map object not found, retrying...');
                    setTimeout(arguments.callee, 1000);
                }}
            }}, 1000);
        }});
        
        // QWebChannel script loading
        if (typeof QWebChannel === 'undefined') {{
            console.log('üî• Loading QWebChannel script...');
            var script = document.createElement('script');
            script.src = 'qrc:///qtwebchannel/qwebchannel.js';
            script.onload = function() {{
                console.log('‚úÖ QWebChannel script loaded');
                initializeQtBridge();
            }};
            script.onerror = function() {{
                console.log('‚ö†Ô∏è Failed to load QWebChannel script');
            }};
            document.head.appendChild(script);
        }} else {{
            initializeQtBridge();
        }}
        </script>
        """
        
        # JavaScript k√≥d hozz√°ad√°sa a t√©rk√©phez
        map_obj.get_root().html.add_child(folium.Element(bridge_js))
        
        print("‚úÖ JavaScript bridge added to map")
    
    def _add_map_controls(self, map_obj: folium.Map):
        """
        üéÆ Tov√°bbi t√©rk√©p vez√©rl≈ëk hozz√°ad√°sa.
        """
        # Fullscreen control
        plugins.Fullscreen().add_to(map_obj)
        
        # Measure control
        plugins.MeasureControl().add_to(map_obj)
        
        # Mouse position
        plugins.MousePosition(
            position='bottomright',
            separator=' | ',
            empty_string='Koordin√°t√°k...',
            lng_first=False,
            num_digits=20,
            prefix='Pos: ',
            lat_formatter="function(num) {return L.Util.formatNum(num, 4) + '¬∞';}",
            lng_formatter="function(num) {return L.Util.formatNum(num, 4) + '¬∞';}"
        ).add_to(map_obj)
        
        # MiniMap
        minimap = plugins.MiniMap(
            tile_layer="OpenStreetMap",
            position='bottomleft',
            width=150,
            height=150,
            collapsed_width=25,
            collapsed_height=25,
            zoom_level_offset=-5,
            zoom_animation=True
        )
        minimap.add_to(map_obj)
        
        print("‚úÖ Map controls added")


class HungarianMapVisualizer(QWidget):
    """
    üó∫Ô∏è Magyar Folium t√©rk√©p vizualiz√°l√≥ widget - HELYI HTTP SZERVER VERZI√ì v3.0
    
    üîß HELYI HTTP SZERVER MEGOLD√ÅS v3.0:
    - Be√°gyazott HTTP szerver QThread-ben
    - WebEngine http://127.0.0.1:PORT/map.html bet√∂lt√©s
    - Same-Origin Policy probl√©m√°k v√©gleg megoldva
    - Nagy HTML f√°jlok (1.5MB+) t√°mogat√°sa
    - Folium teljes funkcionalit√°s
    - Stabil √©s megb√≠zhat√≥ m≈±k√∂d√©s
    
    üöÄ REAKT√çV MEGYEHAT√ÅROK v3.0:
    - set_counties_geodataframe() AZONNALI t√©rk√©pfriss√≠t√©st ind√≠t
    - set_weather_data() AZONNALI t√©rk√©pfriss√≠t√©st ind√≠t  
    - A "fut√°r √©s fest≈ë" probl√©ma megoldva
    - Magyar megy√©k automatikusan megjelennek bet√∂lt√©s ut√°n
    - Nincs manu√°lis friss√≠t√©s sz√ºks√©ges
    
    üîß DINAMIKUS SZ√çNSK√ÅLA v1.2:
    - COLOR_SCALE_GRADIENTS mapping minden overlay t√≠pushoz
    - set_active_overlay_parameter() met√≥dus
    - Overlay-specifikus jelmagyar√°zat gener√°l√°s
    
    FUNKCI√ìK:
    - Folium + Leaflet.js alap√∫ interakt√≠v t√©rk√©p
    - Kattinthat√≥ magyar megy√©k
    - Hover tooltipek √©s popupok
    - Weather overlay support (DINAMIKUS SZ√çNSK√ÅL√ÅVAL)
    - JavaScript ‚Üî PySide6 bridge
    - T√©ma t√°mogat√°s
    - Export funkci√≥k
    
    SIGNALOK:
    - map_ready(): T√©rk√©p bet√∂ltve √©s k√©sz
    - county_clicked(county_name): Megy√©re kattint√°s
    - coordinates_clicked(lat, lon): Koordin√°ta kattint√°s
    - export_completed(file_path): Export befejezve
    - error_occurred(message): Hiba t√∂rt√©nt
    """
    
    # Signalok
    map_ready = Signal()                           # t√©rk√©p k√©sz
    county_clicked = Signal(str)                   # megye n√©v
    coordinates_clicked = Signal(float, float)     # lat, lon
    map_moved = Signal(float, float, int)          # lat, lon, zoom
    county_hovered = Signal(str)                   # megye hover
    export_completed = Signal(str)                 # f√°jl √∫tvonal
    error_occurred = Signal(str)                   # hiba √ºzenet
    bounds_changed = Signal(object)                # t√©rk√©p hat√°r v√°ltoz√°s
    
    def __init__(self, parent=None):
        super().__init__(parent)
        
        # Komponens inicializ√°l√°s
        self.color_palette = ColorPalette()
        
        # Folium konfigur√°ci√≥
        self.map_config = FoliumMapConfig()
        
        # Adatok
        self.counties_gdf = None
        self.current_weather_data = None
        
        # üîß HTTP SZERVER VERZI√ì: Szerver objektumok
        self.local_server = None
        self.http_host = None
        self.http_port = None
        self.current_map_file = None
        
        # Worker threads
        self.map_generator = None
        
        # JavaScript Bridge
        self.js_bridge = JavaScriptBridge()
        self.web_channel = QWebChannel()
        
        # UI √©p√≠t√©s
        self._setup_ui()
        self._setup_theme()
        self._connect_signals()
        
        # HTTP szerver ind√≠t√°sa
        self._start_local_server()
        
        # Folium el√©rhet≈ë ellen≈ërz√©se
        if FOLIUM_AVAILABLE:
            # V√°runk a szervert≈ël majd gener√°lunk alap√©rtelmezett t√©rk√©pet
            pass
        else:
            self._show_folium_error()
    
    def _setup_ui(self):
        """
        üé® UI komponensek l√©trehoz√°sa - HTTP SZERVER VERZI√ì.
        """
        layout = QVBoxLayout(self)
        layout.setContentsMargins(5, 5, 5, 5)
        layout.setSpacing(5)
        
        # === FOLIUM T√âRK√âP VEZ√âRL≈êK ===
        
        controls_group = QGroupBox("üåê HTTP Szerver Folium T√©rk√©p v3.0 + üîß Same-Origin Policy Fix + Reakt√≠v Megyehat√°rok + Dinamikus Sz√≠nsk√°la")
        register_widget_for_theming(controls_group, "container")
        controls_layout = QHBoxLayout(controls_group)
        
        # T√©rk√©p st√≠lus v√°laszt√≥
        style_label = QLabel("St√≠lus:")
        register_widget_for_theming(style_label, "text")
        controls_layout.addWidget(style_label)
        
        self.style_combo = QComboBox()
        self.style_combo.addItems([
            "OpenStreetMap",
            "CartoDB positron", 
            "CartoDB dark_matter",
            "Stamen Terrain",
            "Stamen Toner"
        ])
        self.style_combo.setCurrentText(self.map_config.tiles)
        register_widget_for_theming(self.style_combo, "input")
        controls_layout.addWidget(self.style_combo)
        
        # Megyehat√°rok checkbox
        self.counties_check = QCheckBox("Megyehat√°rok")
        self.counties_check.setChecked(True)
        register_widget_for_theming(self.counties_check, "input")
        controls_layout.addWidget(self.counties_check)
        
        # Id≈ëj√°r√°si overlay checkbox
        self.weather_check = QCheckBox("Id≈ëj√°r√°si overlay")
        self.weather_check.setChecked(False)
        register_widget_for_theming(self.weather_check, "input")
        controls_layout.addWidget(self.weather_check)
        
        # üîß √öJ: Active overlay parameter kijelz≈ë
        self.overlay_parameter_label = QLabel("üé® Overlay: Nincs")
        overlay_param_font = self.overlay_parameter_label.font()
        overlay_param_font.setPointSize(9)
        self.overlay_parameter_label.setFont(overlay_param_font)
        self.overlay_parameter_label.setStyleSheet("color: #9B59B6; font-weight: bold;")
        register_widget_for_theming(self.overlay_parameter_label, "text")
        controls_layout.addWidget(self.overlay_parameter_label)
        
        # HTTP szerver status
        self.server_status_label = QLabel("üåê Szerver: Ind√≠t√°s...")
        server_font = self.server_status_label.font()
        server_font.setPointSize(9)
        self.server_status_label.setFont(server_font)
        self.server_status_label.setStyleSheet("color: #3498DB; font-weight: bold;")
        register_widget_for_theming(self.server_status_label, "text")
        controls_layout.addWidget(self.server_status_label)
        
        # Zoom kontroll
        zoom_label = QLabel("Zoom:")
        register_widget_for_theming(zoom_label, "text")
        controls_layout.addWidget(zoom_label)
        
        self.zoom_slider = QSlider(Qt.Horizontal)
        self.zoom_slider.setRange(6, 12)
        self.zoom_slider.setValue(7)
        self.zoom_slider.setToolTip("T√©rk√©p nagy√≠t√°s szintje")
        register_widget_for_theming(self.zoom_slider, "input")
        controls_layout.addWidget(self.zoom_slider)
        
        controls_layout.addStretch()
        
        # Akci√≥ gombok
        self.refresh_btn = QPushButton("üîÑ Friss√≠t√©s")
        self.refresh_btn.setToolTip("Folium t√©rk√©p √∫jragener√°l√°sa")
        register_widget_for_theming(self.refresh_btn, "button")
        controls_layout.addWidget(self.refresh_btn)
        
        self.export_btn = QPushButton("üíæ Export")
        self.export_btn.setToolTip("Folium t√©rk√©p export√°l√°sa")
        register_widget_for_theming(self.export_btn, "button")
        controls_layout.addWidget(self.export_btn)
        
        self.reset_btn = QPushButton("üè† Alaphelyzet")
        self.reset_btn.setToolTip("T√©rk√©p vissza√°ll√≠t√°sa")
        register_widget_for_theming(self.reset_btn, "button")
        controls_layout.addWidget(self.reset_btn)
        
        layout.addWidget(controls_group)
        
        # === PROGRESS BAR ===
        
        self.progress_bar = QProgressBar()
        self.progress_bar.setRange(0, 100)
        self.progress_bar.setValue(0)
        self.progress_bar.setVisible(False)
        register_widget_for_theming(self.progress_bar, "input")
        layout.addWidget(self.progress_bar)
        
        self.status_label = QLabel("üåê HTTP szerver Folium t√©rk√©p + Same-Origin Policy fix + Reakt√≠v megyehat√°rok inicializ√°l√°sa...")
        register_widget_for_theming(self.status_label, "text")
        layout.addWidget(self.status_label)
        
        # === WEBENGINE VIEW + JAVASCRIPT BRIDGE ===
        
        self.web_view = QWebEngineView()
        register_widget_for_theming(self.web_view, "container")
        
        # üîß WEBENGINE SETTINGS - HTTP szerver optimaliz√°lt be√°ll√≠t√°sok
        try:
            from PySide6.QtWebEngineCore import QWebEngineSettings
            
            settings = self.web_view.settings()
            # JavaScript enged√©lyez√©s
            settings.setAttribute(QWebEngineSettings.JavascriptEnabled, True)
            settings.setAttribute(QWebEngineSettings.ErrorPageEnabled, True)
            # WebGL √©s Canvas enged√©lyez√©s
            settings.setAttribute(QWebEngineSettings.WebGLEnabled, True)
            settings.setAttribute(QWebEngineSettings.Accelerated2dCanvasEnabled, True)
            # Local content optimaliz√°ci√≥
            settings.setAttribute(QWebEngineSettings.LocalStorageEnabled, True)
            # HTTP cache
            settings.setAttribute(QWebEngineSettings.LocalContentCanAccessRemoteUrls, True)
            
            print("‚úÖ WebEngine settings configured for HTTP server content")
            
        except ImportError as e:
            print(f"‚ö†Ô∏è WebEngineSettings not available: {e}")
        
        # WebChannel setup JavaScript bridge-hez
        self.web_channel.registerObject("qtBridge", self.js_bridge)
        self.web_view.page().setWebChannel(self.web_channel)
        
        layout.addWidget(self.web_view)
        
        # Layout s√∫lyok
        layout.setStretchFactor(controls_group, 0)
        layout.setStretchFactor(self.web_view, 1)
    
    def _setup_theme(self):
        """
        üé® T√©ma be√°ll√≠t√°sok alkalmaz√°sa.
        """
        register_widget_for_theming(self, "container")
    
    def _connect_signals(self):
        """
        üîó Signal-slot kapcsolatok l√©trehoz√°sa - HTTP SZERVER VERZI√ì.
        """
        # UI vez√©rl≈ëk
        self.style_combo.currentTextChanged.connect(self._on_style_changed)
        self.counties_check.toggled.connect(self._on_counties_toggled)
        self.weather_check.toggled.connect(self._on_weather_toggled)
        self.zoom_slider.valueChanged.connect(self._on_zoom_changed)
        
        self.refresh_btn.clicked.connect(self._refresh_map)
        self.export_btn.clicked.connect(self._export_map)
        self.reset_btn.clicked.connect(self.reset_map_view)
        
        # WebEngine esem√©nyek
        self.web_view.loadFinished.connect(self._on_map_loaded)
        
        # JavaScript Bridge signalok
        self.js_bridge.county_clicked.connect(self._on_js_county_clicked)
        self.js_bridge.coordinates_clicked.connect(self._on_js_coordinates_clicked)
        self.js_bridge.map_moved.connect(self._on_js_map_moved)
        self.js_bridge.county_hovered.connect(self._on_js_county_hovered)
        
        print("‚úÖ HTTP Server MapVisualizer signals connected")
    
    def _start_local_server(self):
        """
        üåê Helyi HTTP szerver ind√≠t√°sa.
        """
        if self.local_server and self.local_server.running:
            print("‚ö†Ô∏è Local server already running")
            return
        
        print("üåê Starting local HTTP server...")
        
        # LocalHttpServerThread l√©trehoz√°sa
        self.local_server = LocalHttpServerThread(self)
        
        # Szerver signalok bek√∂t√©se
        self.local_server.server_ready.connect(self._on_server_ready)
        self.local_server.server_error.connect(self._on_server_error)
        
        # Szerver ind√≠t√°sa
        self.local_server.start()
    
    def _on_server_ready(self, host: str, port: int):
        """
        ‚úÖ HTTP szerver k√©sz √©s el√©rhet≈ë.
        """
        self.http_host = host
        self.http_port = port
        
        print(f"‚úÖ Local HTTP server ready: http://{host}:{port}")
        
        # UI friss√≠t√©se
        self.server_status_label.setText(f"üåê Szerver: http://{host}:{port}")
        self.server_status_label.setStyleSheet("color: #27AE60; font-weight: bold;")
        
        # Alap√©rtelmezett t√©rk√©p gener√°l√°sa a szerver elindul√°sa ut√°n
        if FOLIUM_AVAILABLE:
            self._generate_default_map()
    
    def _on_server_error(self, error_message: str):
        """
        ‚ùå HTTP szerver hiba.
        """
        print(f"‚ùå Local HTTP server error: {error_message}")
        
        # UI friss√≠t√©se
        self.server_status_label.setText("üåê Szerver: HIBA")
        self.server_status_label.setStyleSheet("color: #E74C3C; font-weight: bold;")
        
        # Hiba jelz√©s
        self.error_occurred.emit(f"HTTP szerver hiba: {error_message}")
    
    def _show_folium_error(self):
        """
        ‚ö†Ô∏è Folium hi√°ny eset√©n hiba√ºzenet megjelen√≠t√©se.
        """
        self.status_label.setText("‚ö†Ô∏è Folium library hi√°nyzik! pip install folium")
        self.progress_bar.setVisible(False)
        
        # Vez√©rl≈ëk letilt√°sa
        self.refresh_btn.setEnabled(False)
        self.export_btn.setEnabled(False)
        
        error_msg = "Folium library not installed. Please run: pip install folium branca"
        self.error_occurred.emit(error_msg)
    
    def _generate_default_map(self):
        """
        üó∫Ô∏è Alap√©rtelmezett Folium t√©rk√©p gener√°l√°sa.
        """
        if not FOLIUM_AVAILABLE:
            return
        
        if not self.http_host or not self.http_port:
            print("‚ö†Ô∏è HTTP server not ready for map generation")
            return
        
        self._start_map_generation()
    
    def _start_map_generation(self):
        """
        üîÑ Folium t√©rk√©p gener√°l√°s ind√≠t√°sa h√°tt√©rben - HTTP SZERVER VERZI√ì.
        """
        if not FOLIUM_AVAILABLE:
            self._show_folium_error()
            return
        
        if not self.http_host or not self.http_port:
            print("‚ö†Ô∏è HTTP server not ready for map generation")
            return
        
        if self.map_generator and self.map_generator.isRunning():
            return  # M√°r fut egy gener√°l√°s
        
        # Progress bar megjelen√≠t√©se
        self.progress_bar.setVisible(True)
        self.progress_bar.setValue(0)
        self.status_label.setText("üåê HTTP szerver Folium t√©rk√©p + Same-Origin Policy fix + Reakt√≠v megyehat√°rok gener√°l√°sa...")
        
        # Worker l√©trehoz√°sa
        self.map_generator = FoliumMapGenerator(
            config=self.map_config,
            counties_gdf=self.counties_gdf,
            weather_data=self.current_weather_data,
            bridge_id=self.js_bridge.bridge_id
        )
        
        # Worker signalok
        self.map_generator.progress_updated.connect(self.progress_bar.setValue)
        self.map_generator.status_updated.connect(self.status_label.setText)
        self.map_generator.map_generated.connect(self._on_map_generated)
        self.map_generator.error_occurred.connect(self._on_map_error)
        
        # Worker ind√≠t√°sa
        self.map_generator.start()
    
    def _on_map_generated(self, file_path: str):
        """
        ‚úÖ Folium t√©rk√©p gener√°l√°s befejezve - HTTP SZERVER VERZI√ì.
        
        Args:
            file_path: Gener√°lt HTML f√°jl teljes el√©r√©si √∫tja
        """
        print(f"üåê DEBUG: HTTP Server map generated - {file_path}")
        
        # F√°jl el√©r√©si √∫t t√°rol√°sa
        self.current_map_file = file_path
        
        # F√°jl l√©tez√©s ellen≈ërz√©se
        if not os.path.exists(file_path):
            error_msg = f"Generated HTML file not found: {file_path}"
            self.error_occurred.emit(error_msg)
            return
        
        # F√°jl m√©ret ellen≈ërz√©se
        file_size = os.path.getsize(file_path)
        if file_size < 1000:
            error_msg = f"Generated HTML file too small: {file_size} bytes"
            self.error_occurred.emit(error_msg)
            return
        
        print(f"‚úÖ Valid HTML file generated - Size: {file_size:,} bytes")
        
        # üåê HTTP URL GENER√ÅL√ÅS √âS BET√ñLT√âS
        self._load_map_from_http_url(file_path)
        
        self.progress_bar.setVisible(False)
        self.status_label.setText("üåê HTTP szerver t√©rk√©p bet√∂lt√©se...")
        
        print(f"‚úÖ HTTP Server Folium map loading initiated")
    
    def _load_map_from_http_url(self, file_path: str):
        """
        üåê KRITIKUS √öJ MET√ìDUS: T√©rk√©p bet√∂lt√©se HTTP URL-r≈ël.
        
        Ez a met√≥dus gener√°lja a http://127.0.0.1:PORT/filename.html URL-t
        √©s bet√∂lti a WebEngine-be.
        
        Args:
            file_path: Gener√°lt HTML f√°jl teljes el√©r√©si √∫tja
        """
        try:
            print("üåê DEBUG: Starting HTTP URL loading...")
            
            # F√°jln√©v kinyer√©se az el√©r√©si √∫tb√≥l
            filename = os.path.basename(file_path)
            
            # HTTP URL √∂ssze√°ll√≠t√°sa
            http_url = f"http://{self.http_host}:{self.http_port}/{filename}"
            
            print(f"üåê DEBUG: Loading map from HTTP URL: {http_url}")
            
            # WebEngine reset √©s cache clear
            self.web_view.stop()
            
            # HTTP URL bet√∂lt√©se WebEngine-be
            self.web_view.load(QUrl(http_url))
            
            print(f"‚úÖ HTTP URL loading initiated: {http_url}")
            
            # Status update
            self.status_label.setText(f"üåê HTTP t√©rk√©p bet√∂ltve: {filename}")
            
        except Exception as e:
            error_msg = f"HTTP URL bet√∂lt√©si hiba: {e}"
            print(f"‚ùå HTTP URL Loading Error: {error_msg}")
            self.error_occurred.emit(error_msg)
    
    def _on_map_error(self, error_message: str):
        """
        ‚ùå T√©rk√©p gener√°l√°si hiba.
        """
        self.progress_bar.setVisible(False)
        self.status_label.setText("‚ùå Folium t√©rk√©p gener√°l√°si hiba!")
        
        print(f"‚ùå Folium map generation error: {error_message}")
        self.error_occurred.emit(error_message)
    
    def _on_map_loaded(self, success: bool):
        """
        üó∫Ô∏è WebEngine Folium t√©rk√©p bet√∂lt√©s befejezve - HTTP SZERVER VERZI√ì + REAKT√çV MEGYEHAT√ÅROK.
        """
        if success:
            self.map_ready.emit()
            counties_info = f" ({len(self.counties_gdf)} megye)" if self.counties_gdf is not None else ""
            self.status_label.setText(f"üåê HTTP szerver interakt√≠v t√©rk√©p k√©sz!{counties_info} Kattints a megy√©kre!")
            print("‚úÖ HTTP Server Folium map with reactive counties loaded successfully in WebEngine")
        else:
            error_msg = "WebEngine HTTP loading failed"
            self.error_occurred.emit(error_msg)
            self.status_label.setText("‚ùå WebEngine HTTP bet√∂lt√©s sikertelen!")
            print(f"‚ùå WebEngine HTTP loading failed")
    
    # === UI EVENT HANDLERS ===
    
    def _on_style_changed(self, style: str):
        """
        üé® T√©rk√©p st√≠lus v√°ltoztat√°sa.
        """
        self.map_config.tiles = style
        print(f"üé® Map style changed to: {style}")
    
    def _on_counties_toggled(self, checked: bool):
        """
        üó∫Ô∏è Megyehat√°rok megjelen√≠t√©s kapcsol√≥.
        """
        self.map_config.show_counties = checked
        print(f"üó∫Ô∏è Counties display: {checked}")
    
    def _on_weather_toggled(self, checked: bool):
        """
        üå§Ô∏è Id≈ëj√°r√°si overlay kapcsol√≥.
        """
        self.map_config.weather_overlay = checked
        print(f"üå§Ô∏è Weather overlay: {checked}")
    
    def _on_zoom_changed(self, zoom: int):
        """
        üîç Zoom szint v√°ltoztat√°sa.
        """
        self.map_config.zoom_start = zoom
        print(f"üîç Zoom level: {zoom}")
    
    # === JAVASCRIPT BRIDGE HANDLERS ===
    
    def _on_js_county_clicked(self, county_name: str):
        """
        üñ±Ô∏è Megye kattint√°s JavaScript bridge-b≈ël.
        """
        print(f"üñ±Ô∏è County clicked from JS: {county_name}")
        self.map_config.selected_county = county_name
        self.county_clicked.emit(county_name)
    
    def _on_js_coordinates_clicked(self, lat: float, lon: float):
        """
        üìç Koordin√°ta kattint√°s JavaScript bridge-b≈ël.
        """
        print(f"üìç Coordinates clicked from JS: {lat}, {lon}")
        self.coordinates_clicked.emit(lat, lon)
    
    def _on_js_map_moved(self, lat: float, lon: float, zoom: int):
        """
        üó∫Ô∏è T√©rk√©p mozg√°s JavaScript bridge-b≈ël.
        """
        self.map_config.center_lat = lat
        self.map_config.center_lon = lon
        self.map_config.zoom_start = zoom
        
        # UI friss√≠t√©se
        self.zoom_slider.setValue(zoom)
        
        self.map_moved.emit(lat, lon, zoom)
    
    def _on_js_county_hovered(self, county_name: str):
        """
        üëÜ Megye hover JavaScript bridge-b≈ël.
        """
        self.county_hovered.emit(county_name)
    
    # === AKCI√ì MET√ìDUSOK ===
    
    def _refresh_map(self):
        """
        üîÑ Folium t√©rk√©p manu√°lis friss√≠t√©se.
        """
        print("üîÑ Manual Folium map refresh requested")
        self._start_map_generation()
    
    def _export_map(self):
        """
        üíæ Folium t√©rk√©p export√°l√°sa - HTTP SZERVER VERZI√ì.
        """
        if not self.current_map_file or not os.path.exists(self.current_map_file):
            QMessageBox.warning(self, "Export", "Nincs Folium t√©rk√©p az export√°l√°shoz!")
            return
        
        # F√°jl ment√©s dialog
        file_path, _ = QFileDialog.getSaveFileName(
            self,
            "HTTP szerver Folium t√©rk√©p export√°l√°sa",
            f"hungarian_folium_map_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html",
            "HTML f√°jlok (*.html);;Minden f√°jl (*)"
        )
        
        if file_path:
            try:
                # HTML f√°jl m√°sol√°sa
                import shutil
                shutil.copy2(self.current_map_file, file_path)
                
                self.export_completed.emit(file_path)
                QMessageBox.information(self, "Export", f"HTTP szerver Folium t√©rk√©p sikeresen export√°lva:\n{file_path}")
                
                print(f"‚úÖ HTTP server map exported: {file_path}")
                
            except Exception as e:
                error_msg = f"Export hiba: {e}"
                self.error_occurred.emit(error_msg)
                QMessageBox.critical(self, "Export hiba", error_msg)
    
    # === üîß √öJ MET√ìDUSOK - DINAMIKUS SZ√çNSK√ÅLA T√ÅMOGAT√ÅS ===
    
    def set_active_overlay_parameter(self, parameter: str):
        """
        üîß KRITIKUS √öJ MET√ìDUS: Active overlay parameter be√°ll√≠t√°sa
        
        Args:
            parameter: Overlay parameter ("temperature", "wind_speed", "precipitation", stb.)
        """
        print(f"üé® DEBUG: Setting active overlay parameter: {parameter}")
        
        # Config friss√≠t√©se
        self.map_config.active_overlay_parameter = parameter
        
        # UI friss√≠t√©se
        parameter_display_names = {
            "temperature": "üå°Ô∏è H≈ëm√©rs√©klet",
            "wind_speed": "üí® Sz√©lsebess√©g",
            "precipitation": "üåßÔ∏è Csapad√©k",
            "wind_gusts": "üå™Ô∏è Sz√©ll√∂k√©sek",
            "humidity": "üíß P√°ratartalom"
        }
        
        display_name = parameter_display_names.get(parameter, f"üé® {parameter}")
        self.overlay_parameter_label.setText(f"üé® Overlay: {display_name}")
        
        print(f"‚úÖ DEBUG: Active overlay parameter set: {parameter} ‚Üí {display_name}")
    
    def clear_active_overlay_parameter(self):
        """
        üßπ Active overlay parameter t√∂rl√©se.
        """
        print("üßπ DEBUG: Clearing active overlay parameter")
        
        self.map_config.active_overlay_parameter = None
        self.overlay_parameter_label.setText("üé® Overlay: Nincs")
        self.overlay_parameter_label.setStyleSheet("color: #95A5A6;")
    
    def get_active_overlay_parameter(self) -> Optional[str]:
        """
        üìç Jelenlegi active overlay parameter lek√©rdez√©se.
        
        Returns:
            Active overlay parameter vagy None
        """
        return self.map_config.active_overlay_parameter
    
    # === üöÄ REAKT√çV PUBLIKUS API - HTTP SZERVER VERZI√ì + DINAMIKUS SZ√çNSK√ÅLA ===
    
    def set_counties_geodataframe(self, counties_gdf):
        """
        üó∫Ô∏è üöÄ REAKT√çV JAV√çT√ÅS: Megy√©k GeoDataFrame be√°ll√≠t√°sa √©s a t√©rk√©p AZONNALI friss√≠t√©se.
        
        üîß KRITIKUS V√ÅLTOZ√ÅS v3.0:
        Ez a met√≥dus most REAKT√çV! Amint megkapja az √∫j megyeadatokat,
        azonnal elind√≠t egy √∫j t√©rk√©pgener√°l√°si folyamatot.
        
        Megoldja a "fut√°r √©s fest≈ë" probl√©m√°t:
        - A "fut√°r" (MainWindow) √°tadja az adatokat
        - A "fest≈ë" (HungarianMapVisualizer) AZONNAL √∫jrafesti a t√©rk√©pet
        
        Args:
            counties_gdf: Magyar megy√©k GeoDataFrame
        """
        print(f"üó∫Ô∏è üöÄ REAKT√çV: Counties GeoDataFrame set: {len(counties_gdf) if counties_gdf is not None else 0} counties")
        
        # Adatok t√°rol√°sa
        self.counties_gdf = counties_gdf
        
        # üöÄ KRITIKUS JAV√çT√ÅS: AZONNALI T√âRK√âPFRISS√çT√âS!
        # A "fut√°r √©s fest≈ë" probl√©ma megold√°sa
        if counties_gdf is not None and len(counties_gdf) > 0:
            print("üîÑ üöÄ REAKT√çV: County data received, triggering IMMEDIATE map refresh...")
            print(f"üìç Counties columns: {list(counties_gdf.columns) if hasattr(counties_gdf, 'columns') else 'No columns'}")
            
            # T√©rk√©pkonfigur√°ci√≥ automatikus be√°ll√≠t√°sa
            self.map_config.show_counties = True
            self.counties_check.setChecked(True)
            
            # AZONNALI t√©rk√©pgener√°l√°s ind√≠t√°sa az √∫j adatokkal
            self._start_map_generation()
            
            print("‚úÖ üöÄ REAKT√çV: Map refresh triggered automatically after county data received")
        else:
            print("‚ö†Ô∏è Empty or None counties data received - no map refresh triggered")
    
    def set_weather_data(self, weather_data: Dict):
        """
        üå§Ô∏è üöÄ REAKT√çV JAV√çT√ÅS: Id≈ëj√°r√°si adatok be√°ll√≠t√°sa Folium overlay-hez DINAMIKUS SZ√çNSK√ÅL√ÅVAL + AZONNALI FRISS√çT√âS - HTTP SZERVER VERZI√ì.
        
        üîß KRITIKUS V√ÅLTOZ√ÅS v3.0:
        Ez a met√≥dus most REAKT√çV! Amint megkapja az √∫j id≈ëj√°r√°si adatokat,
        azonnal elind√≠t egy √∫j t√©rk√©pgener√°l√°si folyamatot.
        
        Ez a met√≥dus VAL√ìS ADATOKAT fogad a weather_client.py-b√≥l
        √©s az analytics engine-b≈ël.
        
        Args:
            weather_data: Id≈ëj√°r√°si adatok dictionary
        """
        print(f"üå§Ô∏è üöÄ REAKT√çV: Real weather data set for HTTP server Folium overlay with dynamic gradients:")
        
        # Adatok t√°rol√°sa
        self.current_weather_data = weather_data
        
        if weather_data:
            for data_type, locations in weather_data.items():
                print(f"  üìä {data_type}: {len(locations)} locations")
                
                # üîß AUTOMATIKUS OVERLAY PARAMETER BE√ÅLL√çT√ÅS
                if data_type in ['temperature', 'wind_speed', 'precipitation', 'wind_gusts']:
                    self.set_active_overlay_parameter(data_type)
                    print(f"  üé® Auto-set active overlay parameter: {data_type}")
            
            # üöÄ KRITIKUS JAV√çT√ÅS: AZONNALI T√âRK√âPFRISS√çT√âS!
            # Weather overlay automatikus bekapcsol√°sa
            self.map_config.weather_overlay = True
            self.weather_check.setChecked(True)
            
            print("üîÑ üöÄ REAKT√çV: Weather data received, triggering IMMEDIATE map refresh...")
            
            # AZONNALI t√©rk√©pgener√°l√°s ind√≠t√°sa az √∫j id≈ëj√°r√°si adatokkal
            self._start_map_generation()
            
            print("‚úÖ üöÄ REAKT√çV: Map refresh triggered automatically after weather data received")
        else:
            print("‚ö†Ô∏è Empty weather data received - no map refresh triggered")
    
    def update_map_bounds(self, bounds: Tuple[float, float, float, float]):
        """
        üéØ T√©rk√©p hat√°rok friss√≠t√©se (minx, miny, maxx, maxy).
        """
        # T√©rk√©p centrum sz√°m√≠t√°sa
        center_lat = (bounds[1] + bounds[3]) / 2
        center_lon = (bounds[0] + bounds[2]) / 2
        
        # Zoom szint sz√°m√≠t√°sa bounds alapj√°n
        lat_diff = abs(bounds[3] - bounds[1])
        lon_diff = abs(bounds[2] - bounds[0])
        
        # Zoom szint heurisztika
        if lat_diff > 2 or lon_diff > 3:
            zoom = 6
        elif lat_diff > 1 or lon_diff > 1.5:
            zoom = 7
        elif lat_diff > 0.5 or lon_diff > 0.8:
            zoom = 8
        else:
            zoom = 9
        
        # Konfigur√°ci√≥ friss√≠t√©se
        self.map_config.center_lat = center_lat
        self.map_config.center_lon = center_lon
        self.map_config.zoom_start = zoom
        
        # UI friss√≠t√©se
        self.zoom_slider.setValue(zoom)
        
        print(f"üéØ HTTP server map bounds updated: center=({center_lat:.4f}, {center_lon:.4f}), zoom={zoom}")
        
        # Folium t√©rk√©p √∫jragener√°l√°sa
        self._start_map_generation()
    
    def get_map_config(self) -> FoliumMapConfig:
        """
        üìã Jelenlegi t√©rk√©p konfigur√°ci√≥ lek√©rdez√©se.
        """
        return self.map_config
    
    def reset_map_view(self):
        """
        üîÑ T√©rk√©p n√©zet vissza√°ll√≠t√°sa Magyarorsz√°g alap√©rtelmezett n√©zet√©re.
        """
        self.map_config.center_lat = 47.1625
        self.map_config.center_lon = 19.5033
        self.map_config.zoom_start = 7
        self.map_config.selected_county = None
        self.map_config.highlighted_counties = []
        
        # üîß Active overlay parameter reset
        self.clear_active_overlay_parameter()
        
        # UI reset
        self.zoom_slider.setValue(7)
        self.style_combo.setCurrentText("OpenStreetMap")
        
        self._start_map_generation()
        print("üè† HTTP server map reset to default Hungary view")
    
    def set_map_style(self, style: str):
        """
        üé® T√©rk√©p st√≠lus programmatic be√°ll√≠t√°sa.
        """
        if style in ["light", "bright"]:
            map_style = "CartoDB positron"
        elif style in ["dark", "night"]:
            map_style = "CartoDB dark_matter"
        else:
            map_style = "OpenStreetMap"
        
        self.style_combo.setCurrentText(map_style)
        self.map_config.tiles = map_style
        self.map_config.theme = style
        
        print(f"üé® HTTP server map style set to: {map_style} (theme: {style})")
    
    def toggle_counties(self, show: bool):
        """
        üó∫Ô∏è Megyehat√°rok megjelen√≠t√©s programmatic kapcsol√°sa.
        """
        self.counties_check.setChecked(show)
    
    def toggle_weather_overlay(self, show: bool):
        """
        üå§Ô∏è Id≈ëj√°r√°si overlay programmatic kapcsol√°sa.
        """
        self.weather_check.setChecked(show)
    
    def set_selected_county(self, county_name: str):
        """
        üéØ Kiv√°lasztott megye be√°ll√≠t√°sa √©s t√©rk√©p friss√≠t√©se.
        """
        self.map_config.selected_county = county_name
        print(f"üéØ HTTP server map selected county: {county_name}")
        
        # T√©rk√©p friss√≠t√©se a kiv√°lasztott megy√©vel
        self._start_map_generation()
    
    def highlight_counties(self, county_names: List[str]):
        """
        ‚ú® Megy√©k kiemel√©se a t√©rk√©pen.
        """
        self.map_config.highlighted_counties = county_names
        print(f"‚ú® Highlighted counties: {county_names}")
    
    def is_folium_available(self) -> bool:
        """
        ‚úÖ Folium el√©rhet≈ës√©g ellen≈ërz√©se.
        """
        return FOLIUM_AVAILABLE
    
    def get_javascript_bridge(self) -> JavaScriptBridge:
        """
        üåâ JavaScript bridge referencia lek√©rdez√©se.
        """
        return self.js_bridge
    
    def get_http_server_info(self) -> Dict[str, Any]:
        """
        üåê HTTP szerver inform√°ci√≥k lek√©rdez√©se.
        
        Returns:
            HTTP szerver inform√°ci√≥k dictionary
        """
        return {
            "server_running": self.local_server is not None and self.local_server.running,
            "http_host": self.http_host,
            "http_port": self.http_port,
            "server_url": f"http://{self.http_host}:{self.http_port}" if self.http_host and self.http_port else None,
            "current_map_file": self.current_map_file,
            "current_map_size": os.path.getsize(self.current_map_file) if self.current_map_file and os.path.exists(self.current_map_file) else 0,
            "version": "v3.0"
        }
    
    def generate_demo_weather_data(self) -> Dict[str, Any]:
        """
        üß™ Demo id≈ëj√°r√°si adatok gener√°l√°sa tesztel√©shez.
        """
        import random
        
        # Magyar v√°rosok demo adatok
        cities = [
            {"name": "Budapest", "coordinates": [47.4979, 19.0402]},
            {"name": "Debrecen", "coordinates": [47.5316, 21.6273]},
            {"name": "Szeged", "coordinates": [46.2530, 20.1414]},
            {"name": "Miskolc", "coordinates": [48.1034, 20.7784]},
            {"name": "P√©cs", "coordinates": [46.0727, 18.2329]},
            {"name": "Gy≈ër", "coordinates": [47.6874, 17.6504]},
            {"name": "Ny√≠regyh√°za", "coordinates": [47.9562, 21.7201]},
            {"name": "Kecskem√©t", "coordinates": [46.9061, 19.6938]},
            {"name": "Sz√©kesfeh√©rv√°r", "coordinates": [47.1884, 18.4241]},
            {"name": "Szombathely", "coordinates": [47.2309, 16.6218]}
        ]
        
        demo_data = {
            'temperature': {},
            'precipitation': {},
            'wind_speed': {}
        }
        
        for city in cities:
            # H≈ëm√©rs√©klet
            demo_data['temperature'][city['name']] = {
                'coordinates': city['coordinates'],
                'value': random.uniform(-5, 35)
            }
            
            # Csapad√©k
            demo_data['precipitation'][city['name']] = {
                'coordinates': city['coordinates'],
                'value': random.uniform(0, 25)
            }
            
            # Sz√©lsebess√©g
            demo_data['wind_speed'][city['name']] = {
                'coordinates': city['coordinates'],
                'speed': random.uniform(5, 45),
                'direction': random.randint(0, 360)
            }
        
        print(f"üß™ Demo weather data generated: {len(cities)} cities")
        return demo_data
    
    def get_dynamic_gradient_info(self) -> Dict[str, Any]:
        """
        üîß Dinamikus gradient inform√°ci√≥k lek√©rdez√©se debugging c√©lokra.
        
        Returns:
            Gradient inform√°ci√≥k dictionary
        """
        return {
            "active_overlay_parameter": self.get_active_overlay_parameter(),
            "available_gradients": ["RdYlBu_r", "Blues", "Greens", "Oranges"],
            "gradient_mapping": {
                "temperature": "RdYlBu_r",
                "precipitation": "Blues",
                "wind_speed": "Greens", 
                "wind_gusts": "Oranges"
            },
            "dynamic_gradient_support": True,
            "http_server_version": True,
            "same_origin_policy_fixed": True,
            "reactive_counties": True,
            "reactive_weather": True,
            "large_html_support": True,
            "version": "v3.0"
        }
    
    def get_current_map_file(self) -> Optional[str]:
        """
        üìÑ Jelenlegi t√©rk√©p f√°jl el√©r√©si √∫tja - HTTP SZERVER VERZI√ì.
        
        Returns:
            Jelenleg bet√∂lt√∂tt t√©rk√©p f√°jl el√©r√©si √∫tja vagy None
        """
        return self.current_map_file
    
    def get_http_debug_info(self) -> Dict[str, Any]:
        """
        üåê HTTP szerver verzi√≥ debug inform√°ci√≥k.
        
        Returns:
            HTTP szerver debug inform√°ci√≥k
        """
        server_info = self.get_http_server_info()
        
        return {
            "http_server_running": server_info["server_running"],
            "server_url": server_info["server_url"],
            "map_file_available": server_info["current_map_file"] is not None,
            "map_file_size": server_info["current_map_size"],
            "large_html_support": True,
            "same_origin_policy_fix": True,
            "webengine_http_loading": True,
            "no_temp_files_conflict": True,
            "reactive_counties": True,
            "reactive_weather": True,
            "counties_loaded": self.counties_gdf is not None,
            "counties_count": len(self.counties_gdf) if self.counties_gdf is not None else 0,
            "weather_data_loaded": self.current_weather_data is not None,
            "version": "v3.0"
        }
    
    def cleanup(self):
        """
        üßπ Cleanup met√≥dus az objektum megsz√ºntet√©sekor.
        """
        # HTTP szerver le√°ll√≠t√°sa
        if self.local_server and self.local_server.running:
            print("üõë Stopping local HTTP server...")
            self.local_server.stop()
            self.local_server.wait()
        
        # Temp f√°jlok t√∂rl√©se
        if self.current_map_file and os.path.exists(self.current_map_file):
            try:
                os.remove(self.current_map_file)
                print(f"üóëÔ∏è Temp map file removed: {self.current_map_file}")
            except Exception as e:
                print(f"‚ö†Ô∏è Failed to remove temp file: {e}")
        
        print("üßπ HungarianMapVisualizer cleanup completed")


# === DEMO √âS TESZT FUNKCI√ìK ===

def demo_http_server_folium_map_visualizer():
    """
    üß™ üåê HTTP SZERVER Folium Map Visualizer demo alkalmaz√°s - Same-Origin Policy Fix + Reakt√≠v Megyehat√°rok verzi√≥ja.
    """
    import sys
    from PySide6.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QWidget, QPushButton, QHBoxLayout, QLabel
    
    app = QApplication(sys.argv)
    
    # F≈ë ablak
    window = QMainWindow()
    window.setWindowTitle("üåê HTTP SZERVER Folium Map Visualizer Demo - Same-Origin Policy Fix v3.0 + Reakt√≠v Megyehat√°rok + Dinamikus Sz√≠nsk√°la")
    window.setGeometry(100, 100, 1400, 900)
    
    # Central widget
    central_widget = QWidget()
    window.setCentralWidget(central_widget)
    
    layout = QVBoxLayout(central_widget)
    
    # üåê HTTP szerver verzi√≥ info
    server_info = QWidget()
    server_layout = QHBoxLayout(server_info)
    
    server_title = QLabel("üåê HTTP SZERVER VERZI√ì TESZT:")
    server_title.setStyleSheet("font-weight: bold; color: #3498DB;")
    server_layout.addWidget(server_title)
    
    debug_info_btn = QPushButton("üîç Debug Info")
    counties_test_btn = QPushButton("üó∫Ô∏è Megy√©k Teszt")
    weather_test_btn = QPushButton("üå§Ô∏è Weather Teszt")
    server_info_btn = QPushButton("üåê Szerver Info")
    
    server_layout.addWidget(debug_info_btn)
    server_layout.addWidget(counties_test_btn)
    server_layout.addWidget(weather_test_btn)
    server_layout.addWidget(server_info_btn)
    server_layout.addStretch()
    
    layout.addWidget(server_info)
    
    # üîß Dinamikus sz√≠nsk√°la teszt gombok
    gradient_controls = QWidget()
    gradient_layout = QHBoxLayout(gradient_controls)
    
    gradient_title = QLabel("üé® DINAMIKUS SZ√çNSK√ÅLA TESZT:")
    gradient_title.setStyleSheet("font-weight: bold; color: #9B59B6;")
    gradient_layout.addWidget(gradient_title)
    
    temp_overlay_btn = QPushButton("üå°Ô∏è H≈ëm√©rs√©klet Overlay")
    wind_overlay_btn = QPushButton("üí® Sz√©l Overlay")
    precip_overlay_btn = QPushButton("üåßÔ∏è Csapad√©k Overlay")
    clear_overlay_btn = QPushButton("üßπ Clear Overlay")
    
    gradient_layout.addWidget(temp_overlay_btn)
    gradient_layout.addWidget(wind_overlay_btn)
    gradient_layout.addWidget(precip_overlay_btn)
    gradient_layout.addWidget(clear_overlay_btn)
    gradient_layout.addStretch()
    
    layout.addWidget(gradient_controls)
    
    # Folium map visualizer
    map_visualizer = HungarianMapVisualizer()
    layout.addWidget(map_visualizer)
    
    # Event handlers
    def on_map_ready():
        print("üåê HTTP SZERVER Folium t√©rk√©p bet√∂ltve √©s k√©sz - Same-Origin Policy fix + Reakt√≠v megyehat√°rok sikeres!")
        
        # Server info
        server_info = map_visualizer.get_http_server_info()
        print("üåê HTTP szerver inform√°ci√≥k:")
        for key, value in server_info.items():
            print(f"   {key}: {value}")
        
        # Gradient info
        gradient_info = map_visualizer.get_dynamic_gradient_info()
        print("üé® Dinamikus gradient inform√°ci√≥k:")
        for key, value in gradient_info.items():
            print(f"   {key}: {value}")
        
        # HTTP debug info
        http_info = map_visualizer.get_http_debug_info()
        print("üåê HTTP szerver verzi√≥ inform√°ci√≥k:")
        for key, value in http_info.items():
            print(f"   {key}: {value}")
    
    def on_county_clicked(county_name):
        print(f"üñ±Ô∏è Megye kattintva: {county_name}")
    
    def on_coordinates_clicked(lat, lon):
        print(f"üìç Koordin√°ta kattintva: {lat}, {lon}")
    
    def on_map_moved(lat, lon, zoom):
        print(f"üó∫Ô∏è T√©rk√©p mozgott: {lat}, {lon}, zoom={zoom}")
    
    def on_export_completed(file_path):
        print(f"üíæ Export befejezve: {file_path}")
    
    def on_error_occurred(message):
        print(f"‚ùå Hiba: {message}")
    
    # HTTP szerver button handlers
    def show_debug_info():
        print("üîç HTTP szerver debug info megjelen√≠t√©se...")
        http_info = map_visualizer.get_http_debug_info()
        gradient_info = map_visualizer.get_dynamic_gradient_info()
        
        debug_text = "üåê HTTP SZERVER DEBUG INFO:\n"
        for key, value in http_info.items():
            debug_text += f"  {key}: {value}\n"
        
        debug_text += "\nüé® GRADIENT DEBUG INFO:\n"
        for key, value in gradient_info.items():
            debug_text += f"  {key}: {value}\n"
        
        QMessageBox.information(window, "HTTP Szerver Debug Info", debug_text)
    
    def test_counties_reactive():
        print("üó∫Ô∏è üöÄ HTTP SZERVER Megy√©k teszt...")
        print("üß™ Gener√°lok demo megyeadatokat √©s tesztelem a reakt√≠v friss√≠t√©st...")
        
        # Demo megy√©k gener√°l√°sa (egyszer≈± t√©glalap geometri√°kkal)
        import geopandas as gpd
        import pandas as pd
        from shapely.geometry import Polygon
        
        demo_counties = []
        county_names = ["Budapest", "Pest", "Fej√©r", "Kom√°rom-Esztergom", "Veszpr√©m"]
        
        for i, name in enumerate(county_names):
            # Egyszer≈± t√©glalap minden megy√©nek
            bounds = [
                18.5 + i * 0.5,     # min_x
                47.0 + i * 0.3,     # min_y  
                19.0 + i * 0.5,     # max_x
                47.5 + i * 0.3      # max_y
            ]
            
            polygon = Polygon([
                (bounds[0], bounds[1]),  # SW
                (bounds[2], bounds[1]),  # SE
                (bounds[2], bounds[3]),  # NE
                (bounds[0], bounds[3]),  # NW
                (bounds[0], bounds[1])   # SW (close)
            ])
            
            demo_counties.append({
                'megye': name,
                'geometry': polygon
            })
        
        demo_gdf = gpd.GeoDataFrame(demo_counties)
        
        print(f"üß™ Demo counties GeoDataFrame created: {len(demo_gdf)} counties")
        print("üöÄ Testing HTTP SERVER REACTIVE set_counties_geodataframe...")
        
        # REAKT√çV teszt - a t√©rk√©p automatikusan friss√ºl!
        map_visualizer.set_counties_geodataframe(demo_gdf)
        
        print("‚úÖ üöÄ HTTP SZERVER REAKT√çV teszt befejezve - a t√©rk√©p automatikusan friss√ºlt!")
    
    def test_weather_reactive():
        print("üå§Ô∏è üöÄ HTTP SZERVER Weather teszt...")
        demo_data = map_visualizer.generate_demo_weather_data()
        
        print("üöÄ Testing HTTP SERVER REACTIVE set_weather_data...")
        
        # REAKT√çV teszt - a t√©rk√©p automatikusan friss√ºl!
        map_visualizer.set_weather_data(demo_data)
        
        print("‚úÖ üöÄ HTTP SZERVER weather teszt befejezve - a t√©rk√©p automatikusan friss√ºlt!")
    
    def show_server_info():
        print("üåê HTTP szerver inform√°ci√≥k megjelen√≠t√©se...")
        server_info = map_visualizer.get_http_server_info()
        
        if server_info["server_running"]:
            info_text = f"üåê HTTP SZERVER AKT√çV:\n\n"
            info_text += f"URL: {server_info['server_url']}\n"
            info_text += f"Host: {server_info['http_host']}\n"
            info_text += f"Port: {server_info['http_port']}\n"
            info_text += f"T√©rk√©p f√°jl: {server_info['current_map_file']}\n"
            info_text += f"F√°jl m√©ret: {server_info['current_map_size']:,} bytes\n"
            info_text += f"Verzi√≥: {server_info['version']}"
        else:
            info_text = "‚ùå HTTP szerver nem fut!"
        
        QMessageBox.information(window, "HTTP Szerver Info", info_text)
    
    # Gradient teszt button handlers
    def test_temperature_overlay():
        print("üå°Ô∏è H≈ëm√©rs√©klet overlay teszt...")
        demo_data = map_visualizer.generate_demo_weather_data()
        temp_data = {'temperature': demo_data['temperature']}
        map_visualizer.set_weather_data(temp_data)  # REAKT√çV!
    
    def test_wind_overlay():
        print("üí® Sz√©l overlay teszt...")
        demo_data = map_visualizer.generate_demo_weather_data()
        wind_data = {'wind_speed': demo_data['wind_speed']}
        map_visualizer.set_weather_data(wind_data)  # REAKT√çV!
    
    def test_precipitation_overlay():
        print("üåßÔ∏è Csapad√©k overlay teszt...")
        demo_data = map_visualizer.generate_demo_weather_data()
        precip_data = {'precipitation': demo_data['precipitation']}
        map_visualizer.set_weather_data(precip_data)  # REAKT√çV!
    
    def test_clear_overlay():
        print("üßπ Overlay t√∂rl√©se...")
        map_visualizer.clear_active_overlay_parameter()
        map_visualizer.toggle_weather_overlay(False)
    
    # HTTP szerver button connections
    debug_info_btn.clicked.connect(show_debug_info)
    counties_test_btn.clicked.connect(test_counties_reactive)
    weather_test_btn.clicked.connect(test_weather_reactive)
    server_info_btn.clicked.connect(show_server_info)
    
    # Gradient button connections
    temp_overlay_btn.clicked.connect(test_temperature_overlay)
    wind_overlay_btn.clicked.connect(test_wind_overlay)
    precip_overlay_btn.clicked.connect(test_precipitation_overlay)
    clear_overlay_btn.clicked.connect(test_clear_overlay)
    
    # Signalok kapcsol√°sa
    map_visualizer.map_ready.connect(on_map_ready)
    map_visualizer.county_clicked.connect(on_county_clicked)
    map_visualizer.coordinates_clicked.connect(on_coordinates_clicked)
    map_visualizer.map_moved.connect(on_map_moved)
    map_visualizer.export_completed.connect(on_export_completed)
    map_visualizer.error_occurred.connect(on_error_occurred)
    
    # Cleanup
    def cleanup_on_close():
        print("üßπ Application closing - cleaning up...")
        map_visualizer.cleanup()
    
    app.aboutToQuit.connect(cleanup_on_close)
    
    window.show()
    
    print("üåê HTTP SZERVER Folium Map Visualizer Demo elind√≠tva - Same-Origin Policy Fix v3.0 + Reakt√≠v Megyehat√°rok!")
    print("üîß HTTP SZERVER MEGOLD√ÅS EL≈êNYEI v3.0:")
    print("   ‚úÖ Be√°gyazott HTTP szerver QThread-ben")
    print("   ‚úÖ WebEngine http://127.0.0.1:PORT/map.html bet√∂lt√©s")
    print("   ‚úÖ Same-Origin Policy probl√©m√°k v√©gleg megoldva")
    print("   ‚úÖ Nagy HTML f√°jlok (1.5MB+) teljes t√°mogat√°sa")
    print("   ‚úÖ setHtml() m√©retkorl√°t megoldva")
    print("   ‚úÖ file:// protokoll probl√©m√°k megsz≈±ntek")
    print("   ‚úÖ JavaScript √©s CSS teljes t√°mogat√°s")
    print("   ‚úÖ Nincs WebEngine cache konfliktus")
    print("   ‚úÖ Stabil √©s megb√≠zhat√≥ m≈±k√∂d√©s")
    print("   üöÄ REAKT√çV MEGYEHAT√ÅROK - A 'fut√°r √©s fest≈ë' probl√©ma megoldva!")
    print("   üöÄ REAKT√çV ID≈êJ√ÅR√ÅSI OVERLAY - Automatikus friss√≠t√©s")
    print("   üöÄ set_counties_geodataframe() ‚Üí AZONNALI t√©rk√©pfriss√≠t√©s")
    print("   üöÄ set_weather_data() ‚Üí AZONNALI t√©rk√©pfriss√≠t√©s")
    print("üîß DINAMIKUS SZ√çNSK√ÅLA JAV√çT√ÅSOK v1.2:")
    print("   ‚úÖ COLOR_SCALE_GRADIENTS mapping minden overlay t√≠pushoz")
    print("   ‚úÖ set_active_overlay_parameter() met√≥dus")
    print("   ‚úÖ Overlay-specifikus jelmagyar√°zat gener√°l√°s")
    print("   ‚úÖ Automatikus overlay parameter be√°ll√≠t√°s")
    print("   ‚úÖ UI kijelz≈ë az akt√≠v overlay parameter-hez")
    print("‚úÖ TELJES HTTP SZERVER INTERAKT√çV FOLIUM T√âRK√âP!")
    print("üéÆ El√©rhet≈ë funkci√≥k:")
    print("   üñ±Ô∏è Kattinthat√≥ megy√©k")
    print("   üìç Koordin√°ta kattint√°s")
    print("   üîç Zoom/Pan interakci√≥")
    print("   üëÜ Hover tooltipek")
    print("   üå§Ô∏è Weather overlay dinamikus sz√≠nsk√°l√°val")
    print("   üé® T√©ma t√°mogat√°s")
    print("   üíæ HTML export")
    print("   üåâ JavaScript ‚Üî Python bridge")
    print("   üß™ HTTP SZERVER TESZT GOMBOK:")
    print("      üöÄ Kattints a reakt√≠v gombokra a m≈±k√∂d√©s tesztel√©s√©hez!")
    print("      üó∫Ô∏è 'Megy√©k Teszt' - Demo megy√©k bet√∂lt√©se √©s AZONNALI t√©rk√©pfriss√≠t√©s")
    print("      üå§Ô∏è 'Weather Teszt' - Demo id≈ëj√°r√°si adatok √©s AZONNALI t√©rk√©pfriss√≠t√©s") 
    print("      üåê 'Szerver Info' - HTTP szerver r√©szletes inform√°ci√≥k")
    print("      üé® Kattints a sz√≠nsk√°la gombokra a k√ºl√∂nb√∂z≈ë overlay t√≠pusok tesztel√©s√©hez!")
    print("üéØ HTTP SZERVER M≈∞K√ñD√âS:")
    print("   üåê Automatikus helyi HTTP szerver ind√≠t√°s")
    print("   üåê Folium t√©rk√©p f√°jlba ment√©s")
    print("   üåê WebEngine http://127.0.0.1:PORT/map.html bet√∂lt√©s")
    print("   üöÄ Amikor az alkalmaz√°s bet√∂lti a magyar megy√©ket ‚Üí AUTOMATIKUS t√©rk√©pfriss√≠t√©s")
    print("   üöÄ Amikor id≈ëj√°r√°si adatok √©rkeznek ‚Üí AUTOMATIKUS t√©rk√©pfriss√≠t√©s")
    print("   üöÄ Nincs manu√°lis friss√≠t√©s sz√ºks√©ges!")
    print("   üöÄ A 'fut√°r √©s fest≈ë' probl√©ma v√©gleg megoldva!")
    
    if FOLIUM_AVAILABLE:
        print("‚úÖ Folium library el√©rhet≈ë!")
    else:
        print("‚ùå Folium library hi√°nyzik - telep√≠tsd: pip install folium branca")
    
    sys.exit(app.exec())


if __name__ == "__main__":
    demo_http_server_folium_map_visualizer()


# Export
__all__ = ['HungarianMapVisualizer', 'FoliumMapConfig', 'JavaScriptBridge', 'FoliumMapGenerator', 'LocalHttpServerThread']
        