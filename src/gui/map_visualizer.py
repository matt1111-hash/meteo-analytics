#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üó∫Ô∏è Magyar Folium T√©rk√©p Vizualiz√°l√≥ - TELJES INTERAKT√çV VERZI√ì
Magyar Kl√≠maanalitika MVP - Folium + Leaflet.js Alap√∫ T√©rk√©pes Megjelen√≠t≈ë

üöÄ FOLIUM INTERAKT√çV T√âRK√âP:
- Teljes Leaflet.js funkcionalit√°s
- Kattinthat√≥ magyar megy√©k
- Weather overlay support
- Hover tooltipek
- Zoom/Pan interakci√≥
- JavaScript ‚Üî PySide6 bridge
- T√©ma t√°mogat√°s (light/dark)

üîß DINAMIKUS SZ√çNSK√ÅLA JAV√çT√ÅS v1.1:
‚úÖ COLOR_SCALE_GRADIENTS mapping hozz√°adva
‚úÖ _get_dynamic_gradient() met√≥dus implement√°lva
‚úÖ Hardcoded gradient lecser√©lve dinamikusra

F√ÅJL: src/gui/map_visualizer.py
"""

from typing import Dict, List, Optional, Tuple, Any, Union
import os
import json
import tempfile
from pathlib import Path
from dataclasses import dataclass, field
from datetime import datetime, date
import uuid

from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QLabel, QPushButton, 
    QComboBox, QSlider, QCheckBox, QGroupBox, QProgressBar,
    QFileDialog, QMessageBox, QSplitter, QTextEdit
)
from PySide6.QtCore import Qt, Signal, QUrl, QTimer, QThread
from PySide6.QtGui import QFont, QPixmap
from PySide6.QtWebEngineWidgets import QWebEngineView
from PySide6.QtWebChannel import QWebChannel

# Folium import with fallback
try:
    import folium
    from folium import plugins
    import branca.colormap as cm
    FOLIUM_AVAILABLE = True
    print("‚úÖ Folium successfully imported")
except ImportError as e:
    FOLIUM_AVAILABLE = False
    print(f"‚ö†Ô∏è Folium not available: {e}")

# GeoPandas import
try:
    import geopandas as gpd
    import pandas as pd
    GEOPANDAS_AVAILABLE = True
except ImportError:
    GEOPANDAS_AVAILABLE = False

# Saj√°t modulok
from .theme_manager import register_widget_for_theming
from .color_palette import ColorPalette


@dataclass
class FoliumMapConfig:
    """
    üó∫Ô∏è Folium t√©rk√©p konfigur√°ci√≥s be√°ll√≠t√°sok.
    """
    # Alap t√©rk√©p be√°ll√≠t√°sok
    center_lat: float = 47.1625  # Magyarorsz√°g k√∂zepe
    center_lon: float = 19.5033
    zoom_start: int = 7
    min_zoom: int = 6
    max_zoom: int = 12
    
    # T√©rk√©p st√≠lus
    tiles: str = "OpenStreetMap"  # "OpenStreetMap", "CartoDB positron", "CartoDB dark_matter"
    attr: str = "Magyar Kl√≠maanalitika"
    
    # County layer be√°ll√≠t√°sok
    show_counties: bool = True
    county_fill_color: str = "#4A90E2"
    county_fill_opacity: float = 0.4
    county_border_color: str = "#2E4057"
    county_border_weight: int = 2
    county_hover_color: str = "#E74C3C"
    
    # Weather overlay
    weather_overlay: bool = False
    weather_opacity: float = 0.6
    
    # Interaktivit√°s
    disable_scroll_zoom: bool = False
    dragging: bool = True
    touch_zoom: bool = True
    double_click_zoom: bool = True
    
    # Kiv√°lasztott elemek
    selected_county: Optional[str] = None
    highlighted_counties: List[str] = field(default_factory=list)
    
    # Theme
    theme: str = "light"  # "light" vagy "dark"


class JavaScriptBridge(QWidget):
    """
    üåâ JavaScript ‚Üî PySide6 kommunik√°ci√≥s h√≠d.
    
    Ez az oszt√°ly kezeli a Folium t√©rk√©p JavaScript esem√©nyeit
    √©s tov√°bb√≠tja ≈ëket a Python oldalra.
    """
    
    # Signalok JavaScript esem√©nyekhez
    county_clicked = Signal(str)              # county_name
    coordinates_clicked = Signal(float, float) # lat, lon
    map_moved = Signal(float, float, int)     # lat, lon, zoom
    county_hovered = Signal(str)              # county_name
    county_unhovered = Signal()               # hover v√©ge
    
    def __init__(self):
        super().__init__()
        self.bridge_id = str(uuid.uuid4())
        print(f"üåâ JavaScriptBridge created with ID: {self.bridge_id}")
    
    def handle_county_click(self, county_name: str):
        """Megye kattint√°s kezel√©se JavaScript-b≈ël."""
        print(f"üñ±Ô∏è JS Bridge: County clicked: {county_name}")
        self.county_clicked.emit(county_name)
    
    def handle_coordinates_click(self, lat: float, lon: float):
        """Koordin√°ta kattint√°s kezel√©se."""
        print(f"üìç JS Bridge: Coordinates clicked: {lat}, {lon}")
        self.coordinates_clicked.emit(lat, lon)
    
    def handle_map_move(self, lat: float, lon: float, zoom: int):
        """T√©rk√©p mozg√°s kezel√©se."""
        print(f"üó∫Ô∏è JS Bridge: Map moved: {lat}, {lon}, zoom={zoom}")
        self.map_moved.emit(lat, lon, zoom)
    
    def handle_county_hover(self, county_name: str):
        """Megye hover kezel√©se."""
        print(f"üëÜ JS Bridge: County hovered: {county_name}")
        self.county_hovered.emit(county_name)
    
    def handle_county_unhover(self):
        """Megye hover v√©ge kezel√©se."""
        self.county_unhovered.emit()


class FoliumMapGenerator(QThread):
    """
    üîÑ H√°tt√©r worker a Folium interakt√≠v t√©rk√©p gener√°l√°s√°hoz.
    
    Ez a worker h√°tt√©rben gener√°lja le a teljes Folium t√©rk√©pet
    minden interakt√≠v funkci√≥val.
    """
    
    # Signalok
    progress_updated = Signal(int)         # progress (0-100)
    map_generated = Signal(str)           # HTML f√°jl path
    error_occurred = Signal(str)          # error message
    status_updated = Signal(str)          # status message
    
    def __init__(self, config: FoliumMapConfig, counties_gdf=None, weather_data=None, output_path=None, bridge_id=None):
        super().__init__()
        self.config = config
        self.counties_gdf = counties_gdf
        self.weather_data = weather_data
        self.output_path = output_path or self._get_temp_html_path()
        self.bridge_id = bridge_id or str(uuid.uuid4())
    
    def _get_temp_html_path(self) -> str:
        """Ideiglenes HTML f√°jl √∫tvonal gener√°l√°sa."""
        temp_dir = tempfile.gettempdir()
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        return os.path.join(temp_dir, f"hungarian_folium_map_{timestamp}.html")
    
    def run(self):
        """
        üó∫Ô∏è Folium interakt√≠v t√©rk√©p gener√°l√°sa.
        """
        try:
            if not FOLIUM_AVAILABLE:
                raise ImportError("Folium library not available")
            
            self.status_updated.emit("üó∫Ô∏è Folium t√©rk√©p inicializ√°l√°sa...")
            self.progress_updated.emit(5)
            
            # === ALAP FOLIUM T√âRK√âP ===
            
            map_obj = self._create_base_folium_map()
            self.progress_updated.emit(20)
            
            # === COUNTIES LAYER ===
            
            if self.config.show_counties and self.counties_gdf is not None:
                self.status_updated.emit("üó∫Ô∏è Megyehat√°rok hozz√°ad√°sa...")
                self._add_counties_layer(map_obj)
            self.progress_updated.emit(50)
            
            # === WEATHER OVERLAY ===
            
            if self.config.weather_overlay and self.weather_data:
                self.status_updated.emit("üå§Ô∏è Id≈ëj√°r√°si overlay...")
                self._add_weather_overlay(map_obj)
            self.progress_updated.emit(70)
            
            # === JAVASCRIPT BRIDGE ===
            
            self.status_updated.emit("üåâ JavaScript interaktivit√°s...")
            self._add_javascript_bridge(map_obj)
            self.progress_updated.emit(85)
            
            # === MAP CONTROLS ===
            
            self._add_map_controls(map_obj)
            self.progress_updated.emit(90)
            
            # === HTML MENT√âS ===
            
            self.status_updated.emit("üíæ Folium t√©rk√©p ment√©se...")
            map_obj.save(self.output_path)
            
            # === JAVASCRIPT INJECTION ===
            
            self._inject_custom_javascript()
            
            self.progress_updated.emit(100)
            self.status_updated.emit("‚úÖ Folium interakt√≠v t√©rk√©p elk√©sz√ºlt!")
            self.map_generated.emit(self.output_path)
            
        except Exception as e:
            import traceback
            error_msg = f"Folium t√©rk√©p gener√°l√°si hiba: {e}\n{traceback.format_exc()}"
            self.error_occurred.emit(error_msg)
    
    def _create_base_folium_map(self) -> folium.Map:
        """
        üó∫Ô∏è Alap Folium t√©rk√©p l√©trehoz√°sa.
        """
        # T√©ma alapj√°n tiles kiv√°laszt√°sa
        if self.config.theme == "dark":
            tiles = "CartoDB dark_matter"
        else:
            tiles = self.config.tiles
        
        # Folium t√©rk√©p l√©trehoz√°sa
        map_obj = folium.Map(
            location=[self.config.center_lat, self.config.center_lon],
            zoom_start=self.config.zoom_start,
            tiles=tiles,
            attr=self.config.attr,
            min_zoom=self.config.min_zoom,
            max_zoom=self.config.max_zoom,
            control_scale=True,
            prefer_canvas=True
        )
        
        # T√©rk√©p opci√≥k
        if self.config.disable_scroll_zoom:
            map_obj.options['scrollWheelZoom'] = False
        
        print(f"‚úÖ Base Folium map created: {tiles}")
        return map_obj
    
    def _add_counties_layer(self, map_obj: folium.Map):
        """
        üó∫Ô∏è Magyar megy√©k GeoJSON layer hozz√°ad√°sa interakt√≠v funkcionalit√°ssal.
        """
        if self.counties_gdf is None or len(self.counties_gdf) == 0:
            print("‚ö†Ô∏è No counties GeoDataFrame available")
            return
        
        print(f"üìç Adding {len(self.counties_gdf)} counties to map")
        
        # GeoJSON konvert√°l√°s
        counties_geojson = json.loads(self.counties_gdf.to_json())
        
        # Style function
        def style_function(feature):
            county_name = feature['properties'].get('megye', '')
            
            # Kiv√°lasztott megye speci√°lis st√≠lus
            if county_name == self.config.selected_county:
                return {
                    'fillColor': '#E74C3C',
                    'color': '#C0392B',
                    'weight': 3,
                    'fillOpacity': 0.7,
                    'dashArray': '5, 5'
                }
            
            # Highlighted megy√©k
            if county_name in self.config.highlighted_counties:
                return {
                    'fillColor': '#F39C12',
                    'color': '#E67E22',
                    'weight': 3,
                    'fillOpacity': 0.6
                }
            
            # Norm√°l st√≠lus
            return {
                'fillColor': self.config.county_fill_color,
                'color': self.config.county_border_color,
                'weight': self.config.county_border_weight,
                'fillOpacity': self.config.county_fill_opacity
            }
        
        # Highlight function
        def highlight_function(feature):
            return {
                'fillColor': self.config.county_hover_color,
                'color': '#FFFFFF',
                'weight': 4,
                'fillOpacity': 0.8
            }
        
        # Tooltip function
        def create_tooltip(feature):
            props = feature['properties']
            county_name = props.get('megye', 'Ismeretlen')
            region = props.get('region', 'Ismeretlen r√©gi√≥')
            
            return f"""
            <div style="font-family: Arial; font-size: 12px;">
                <b>üèõÔ∏è {county_name}</b><br>
                üå°Ô∏è {region}<br>
                üñ±Ô∏è Kattints a r√©szletek√©rt
            </div>
            """
        
        # GeoJson layer hozz√°ad√°sa
        counties_layer = folium.GeoJson(
            counties_geojson,
            style_function=style_function,
            highlight_function=highlight_function,
            tooltip=folium.Tooltip(
                folium.Html(
                    '<b>Hover a megy√©re a r√©szletek√©rt</b>',
                    script=True
                ),
                sticky=True
            ),
            popup=folium.Popup(
                folium.Html(
                    '<b>Kattints a megy√©re</b>',
                    script=True
                ),
                max_width=200
            )
        )
        
        counties_layer.add_to(map_obj)
        
        print("‚úÖ Counties layer added with interactivity")
    
    def _add_weather_overlay(self, map_obj: folium.Map):
        """
        üå§Ô∏è Id≈ëj√°r√°si adatok overlay hozz√°ad√°sa HeatMap plugin-nal.
        
        T√°mogatott overlay t√≠pusok:
        - H≈ëm√©rs√©klet heatmap (¬∞C)
        - Csapad√©k overlay (mm)
        - Sz√©l sebess√©g (km/h)
        - Relat√≠v p√°ratartalom (%)
        """
        if not self.weather_data:
            print("‚ö†Ô∏è No weather data available for overlay")
            return
        
        print(f"üå§Ô∏è Adding weather overlay with {len(self.weather_data)} data points")
        
        try:
            # === H≈êM√âRS√âKLET HEATMAP ===
            if 'temperature' in self.weather_data:
                self._add_temperature_heatmap(map_obj)
            
            # === CSAPAD√âK OVERLAY ===
            if 'precipitation' in self.weather_data:
                self._add_precipitation_overlay(map_obj)
            
            # === SZ√âL SEBESS√âG OVERLAY ===
            if 'wind_speed' in self.weather_data:
                self._add_wind_speed_overlay(map_obj)
            
            # === OVERLAY LEGEND ===
            self._add_weather_legend(map_obj)
            
            print("‚úÖ Weather overlay layers added successfully")
            
        except Exception as e:
            print(f"‚ùå Weather overlay error: {e}")
    
    def _add_temperature_heatmap(self, map_obj: folium.Map):
        """
        üå°Ô∏è H≈ëm√©rs√©klet heatmap hozz√°ad√°sa DINAMIKUS SZ√çNSK√ÅL√ÅVAL.
        """
        try:
            from folium.plugins import HeatMap
            
            # H≈ëm√©rs√©klet adatok el≈ëk√©sz√≠t√©se
            temp_data = []
            for location, data in self.weather_data.get('temperature', {}).items():
                if 'coordinates' in data and 'value' in data:
                    lat, lon = data['coordinates']
                    temp = data['value']
                    
                    # Heatmap pont: [lat, lon, intensity]
                    # Intensity normaliz√°l√°s -20¬∞C - +40¬∞C k√∂z√∂tt
                    intensity = max(0.1, min(1.0, (temp + 20) / 60))
                    temp_data.append([lat, lon, intensity])
            
            if temp_data:
                # üîß DINAMIKUS GRADIENT GENER√ÅL√ÅS
                gradient = self._get_dynamic_gradient('RdYlBu_r', 'temperature')
                
                # HeatMap layer l√©trehoz√°sa dinamikus gradienttel
                heat_map = HeatMap(
                    temp_data,
                    name="üå°Ô∏è H≈ëm√©rs√©klet",
                    min_opacity=0.3,
                    max_zoom=18,
                    radius=25,
                    blur=15,
                    gradient=gradient  # üî• DINAMIKUS GRADIENT!
                )
                
                # Hozz√°ad√°s a t√©rk√©phez
                heat_map.add_to(map_obj)
                
                print(f"üå°Ô∏è Temperature heatmap added with {len(temp_data)} points (dynamic gradient)")
            
        except ImportError:
            print("‚ö†Ô∏è HeatMap plugin not available")
        except Exception as e:
            print(f"‚ùå Temperature heatmap error: {e}")
    
    def _get_dynamic_gradient(self, color_scale: str, overlay_type: str) -> Dict[float, str]:
        """
        üîß KRITIKUS √öJ MET√ìDUS: Dinamikus gradient gener√°l√°s color_scale alapj√°n
        
        Args:
            color_scale: Weather Data Bridge-b≈ël ('RdYlBu_r', 'Blues', 'Greens', 'Oranges')
            overlay_type: Overlay t√≠pus ('temperature', 'precipitation', 'wind_speed', 'wind_gusts')
            
        Returns:
            Folium HeatMap gradient dict
        """
        # üé® DINAMIKUS SZ√çNSK√ÅLA MAPPING
        COLOR_SCALE_GRADIENTS = {
            'RdYlBu_r': {  # H≈ëm√©rs√©klet - K√©k (hideg) ‚Üí Piros (meleg)
                0.0: '#0000FF',  # K√©k
                0.2: '#00BFFF',  # Vil√°gosk√©k  
                0.4: '#87CEEB',  # √âgk√©k
                0.6: '#FFFF00',  # S√°rga
                0.8: '#FFA500',  # Narancs
                1.0: '#FF0000'   # Piros
            },
            'Blues': {  # Csapad√©k - Feh√©r ‚Üí S√∂t√©tk√©k
                0.0: '#F0F8FF',  # Alice Blue (szinte feh√©r)
                0.2: '#E6F3FF',  # Nagyon vil√°gosk√©k
                0.4: '#B3D9FF',  # Vil√°gosk√©k
                0.6: '#4D94FF',  # K√∂zepes k√©k
                0.8: '#0066CC',  # S√∂t√©tk√©k
                1.0: '#003366'   # Nagyon s√∂t√©tk√©k
            },
            'Greens': {  # Sz√©l - Vil√°gosz√∂ld ‚Üí S√∂t√©tz√∂ld
                0.0: '#F0FFF0',  # Honeydew (szinte feh√©r)
                0.2: '#98FB98',  # Pale Green
                0.4: '#90EE90',  # Light Green
                0.6: '#32CD32',  # Lime Green
                0.8: '#228B22',  # Forest Green
                1.0: '#006400'   # Dark Green
            },
            'Oranges': {  # Sz√©ll√∂k√©s - Vil√°gos narancs ‚Üí S√∂t√©t narancs/piros
                0.0: '#FFF8DC',  # Cornsilk (kr√©msz√≠n)
                0.2: '#FFEFD5',  # Papaya Whip
                0.4: '#FFE4B5',  # Moccasin  
                0.6: '#FFA500',  # Orange
                0.8: '#FF4500',  # Orange Red
                1.0: '#DC143C'   # Crimson
            }
        }
        
        try:
            # Direkt color_scale mapping
            if color_scale in COLOR_SCALE_GRADIENTS:
                gradient = COLOR_SCALE_GRADIENTS[color_scale]
                print(f"üé® Dynamic gradient: {color_scale} ‚Üí {len(gradient)} sz√≠nfokozat")
                return gradient
            
            # Fallback: overlay_type alap√∫ mapping
            fallback_mapping = {
                'temperature': 'RdYlBu_r',
                'precipitation': 'Blues', 
                'wind_speed': 'Greens',
                'wind_gusts': 'Oranges'
            }
            
            fallback_scale = fallback_mapping.get(overlay_type, 'RdYlBu_r')
            if fallback_scale in COLOR_SCALE_GRADIENTS:
                gradient = COLOR_SCALE_GRADIENTS[fallback_scale]
                print(f"‚ö†Ô∏è Fallback gradient: {color_scale} ‚Üí {fallback_scale}")
                return gradient
            
            # Ultimate fallback
            print(f"‚ùå Ismeretlen color_scale √©s overlay_type: {color_scale}, {overlay_type}")
            return COLOR_SCALE_GRADIENTS['RdYlBu_r']  # Default h≈ëm√©rs√©klet
            
        except Exception as e:
            print(f"‚ùå Gradient gener√°l√°si hiba: {e}")
            return COLOR_SCALE_GRADIENTS['RdYlBu_r']  # Safe fallback
    
    def _add_precipitation_overlay(self, map_obj: folium.Map):
        """
        üåßÔ∏è Csapad√©k overlay hozz√°ad√°sa CircleMarker-ekkel.
        """
        try:
            precip_data = self.weather_data.get('precipitation', {})
            
            # Csapad√©k sz√≠nsk√°la
            def get_precipitation_color(mm):
                if mm == 0:
                    return '#CCCCCC'  # Sz√ºrke - nincs csapad√©k
                elif mm < 1:
                    return '#E8F4FD'  # Nagyon vil√°gos k√©k
                elif mm < 5:
                    return '#BFE6FF'  # Vil√°gos k√©k
                elif mm < 10:
                    return '#80D0FF'  # K√∂zepes k√©k
                elif mm < 25:
                    return '#40AAFF'  # Er≈ës k√©k
                elif mm < 50:
                    return '#0080FF'  # S√∂t√©t k√©k
                else:
                    return '#0040AA'  # Nagyon s√∂t√©t k√©k
            
            # CircleMarker-ek hozz√°ad√°sa
            for location, data in precip_data.items():
                if 'coordinates' in data and 'value' in data:
                    lat, lon = data['coordinates']
                    precip_mm = data['value']
                    
                    # Circle m√©ret csapad√©k mennyis√©g alapj√°n
                    radius = max(3, min(20, precip_mm / 2))
                    color = get_precipitation_color(precip_mm)
                    
                    # CircleMarker l√©trehoz√°sa
                    folium.CircleMarker(
                        location=[lat, lon],
                        radius=radius,
                        popup=f"üåßÔ∏è {location}<br>Csapad√©k: {precip_mm:.1f} mm",
                        color='#FFFFFF',
                        weight=1,
                        fillColor=color,
                        fillOpacity=0.7,
                        tooltip=f"{precip_mm:.1f} mm"
                    ).add_to(map_obj)
            
            print(f"üåßÔ∏è Precipitation overlay added with {len(precip_data)} points")
            
        except Exception as e:
            print(f"‚ùå Precipitation overlay error: {e}")
    
    def _add_wind_speed_overlay(self, map_obj: folium.Map):
        """
        üí® Sz√©l sebess√©g overlay hozz√°ad√°sa nyilakkal.
        """
        try:
            wind_data = self.weather_data.get('wind_speed', {})
            
            # Sz√©l sz√≠nsk√°la Beaufort sk√°la alapj√°n
            def get_wind_color(kmh):
                if kmh < 6:      return '#C0C0C0'  # Sz√©lcsend - Sz√ºrke
                elif kmh < 12:   return '#00FF00'  # Enyhe sz√©l - Z√∂ld
                elif kmh < 20:   return '#FFFF00'  # Gyenge sz√©l - S√°rga  
                elif kmh < 29:   return '#FFA500'  # M√©rs√©kelt sz√©l - Narancs
                elif kmh < 39:   return '#FF8000'  # √âl√©nk sz√©l - Narancss√°rga
                elif kmh < 50:   return '#FF4000'  # Er≈ës sz√©l - V√∂r√∂s-narancs
                elif kmh < 62:   return '#FF0000'  # Viharos sz√©l - Piros
                else:            return '#800000'  # Ork√°n - S√∂t√©t piros
            
            # Sz√©l nyilak hozz√°ad√°sa
            for location, data in wind_data.items():
                if 'coordinates' in data and 'speed' in data:
                    lat, lon = data['coordinates']
                    speed_kmh = data['speed']
                    direction = data.get('direction', 0)  # fok
                    
                    # Ny√≠l m√©ret sebess√©g alapj√°n
                    arrow_size = max(5, min(15, speed_kmh / 5))
                    color = get_wind_color(speed_kmh)
                    
                    # Sz√©l ir√°ny ny√≠l SVG icon
                    wind_icon = f"""
                    <svg width="20" height="20" viewBox="0 0 20 20" style="transform: rotate({direction}deg)">
                        <path d="M10,2 L15,18 L10,15 L5,18 Z" fill="{color}" stroke="#000" stroke-width="1"/>
                    </svg>
                    """
                    
                    # DivIcon haszn√°lata az SVG ny√≠lhoz
                    wind_marker = folium.Marker(
                        location=[lat, lon],
                        icon=folium.DivIcon(
                            html=wind_icon,
                            class_name="wind-arrow",
                            icon_size=(20, 20),
                            icon_anchor=(10, 10)
                        ),
                        popup=f"üí® {location}<br>Sz√©l: {speed_kmh:.1f} km/h<br>Ir√°ny: {direction}¬∞",
                        tooltip=f"{speed_kmh:.1f} km/h"
                    )
                    
                    wind_marker.add_to(map_obj)
            
            print(f"üí® Wind speed overlay added with {len(wind_data)} points")
            
        except Exception as e:
            print(f"‚ùå Wind speed overlay error: {e}")
    
    def _add_weather_legend(self, map_obj: folium.Map):
        """
        üìä Weather overlay legend hozz√°ad√°sa.
        """
        try:
            # Legend HTML
            legend_html = '''
            <div style="position: fixed; 
                        top: 80px; right: 20px; width: 200px; height: auto; 
                        background-color: rgba(255, 255, 255, 0.9);
                        border: 2px solid grey; z-index:9999; 
                        font-size: 12px; padding: 10px;
                        border-radius: 5px;
                        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
                        ">
            <h4 style="margin-top: 0; color: #2E4057;">üå§Ô∏è Id≈ëj√°r√°si Overlay</h4>
            
            <p><b>üå°Ô∏è H≈ëm√©rs√©klet:</b></p>
            <div style="background: linear-gradient(to right, #0000FF, #00FFFF, #00FF00, #FFFF00, #FF8000, #FF0000); 
                        height: 15px; margin: 5px 0;"></div>
            <div style="display: flex; justify-content: space-between; font-size: 10px;">
                <span>-20¬∞C</span><span>+40¬∞C</span>
            </div>
            
            <p style="margin-top: 15px;"><b>üåßÔ∏è Csapad√©k:</b></p>
            <div style="display: flex; align-items: center; margin: 5px 0;">
                <div style="width: 10px; height: 10px; background: #E8F4FD; border-radius: 50%; margin-right: 5px;"></div>
                <span style="font-size: 10px;">< 1 mm</span>
            </div>
            <div style="display: flex; align-items: center; margin: 5px 0;">
                <div style="width: 15px; height: 15px; background: #80D0FF; border-radius: 50%; margin-right: 5px;"></div>
                <span style="font-size: 10px;">5-10 mm</span>
            </div>
            <div style="display: flex; align-items: center; margin: 5px 0;">
                <div style="width: 20px; height: 20px; background: #0080FF; border-radius: 50%; margin-right: 5px;"></div>
                <span style="font-size: 10px;">> 25 mm</span>
            </div>
            
            <p style="margin-top: 15px;"><b>üí® Sz√©l:</b></p>
            <div style="font-size: 10px;">
                <div>üü¢ < 12 km/h - Enyhe</div>
                <div>üü° 12-20 km/h - Gyenge</div>
                <div>üü† 20-39 km/h - M√©rs√©kelt</div>
                <div>üî¥ > 50 km/h - Er≈ës</div>
            </div>
            </div>
            '''
            
            # Legend hozz√°ad√°sa a t√©rk√©phez
            map_obj.get_root().html.add_child(folium.Element(legend_html))
            
            print("üìä Weather legend added")
            
        except Exception as e:
            print(f"‚ùå Weather legend error: {e}")
    
    def _add_javascript_bridge(self, map_obj: folium.Map):
        """
        üåâ JavaScript bridge k√≥d hozz√°ad√°sa a t√©rk√©phez.
        """
        # Custom JavaScript k√≥d a bridge kommunik√°ci√≥hoz
        bridge_js = f"""
        <script>
        // Magyar Kl√≠maanalitika - JavaScript Bridge
        console.log('üåâ JavaScript Bridge inicializ√°l√°sa...');
        
        var bridgeId = '{self.bridge_id}';
        
        // QWebChannel initialization
        var channel = null;
        var qtBridge = null;
        
        // Initialize QWebChannel when available
        function initializeQtBridge() {{
            if (typeof qt !== 'undefined' && qt.webChannelTransport) {{
                try {{
                    new QWebChannel(qt.webChannelTransport, function(ch) {{
                        channel = ch;
                        qtBridge = channel.objects.qtBridge;
                        console.log('‚úÖ QWebChannel bridge initialized successfully');
                    }});
                }} catch(e) {{
                    console.log('‚ö†Ô∏è QWebChannel initialization failed:', e);
                }}
            }} else {{
                console.log('‚ö†Ô∏è QWebChannel not available, retrying in 500ms...');
                setTimeout(initializeQtBridge, 500);
            }}
        }}
        
        // County click handler
        function handleCountyClick(countyName) {{
            console.log('üñ±Ô∏è County clicked:', countyName);
            if (qtBridge && qtBridge.handle_county_click) {{
                qtBridge.handle_county_click(countyName);
            }} else {{
                console.log('‚ö†Ô∏è qtBridge not available for county click');
            }}
        }}
        
        // Coordinates click handler
        function handleCoordinatesClick(lat, lon) {{
            console.log('üìç Coordinates clicked:', lat, lon);
            if (qtBridge && qtBridge.handle_coordinates_click) {{
                qtBridge.handle_coordinates_click(lat, lon);
            }} else {{
                console.log('‚ö†Ô∏è qtBridge not available for coordinates click');
            }}
        }}
        
        // Map move handler with null check
        function handleMapMove(lat, lon, zoom) {{
            console.log('üó∫Ô∏è Map moved:', lat, lon, 'zoom:', zoom);
            if (qtBridge && typeof qtBridge.handle_map_move === 'function') {{
                qtBridge.handle_map_move(lat, lon, zoom);
            }} else {{
                console.log('‚ö†Ô∏è qtBridge.handle_map_move not available');
            }}
        }}
        
        // Document ready
        document.addEventListener('DOMContentLoaded', function() {{
            console.log('üìÑ DOM ready, initializing bridge...');
            
            // Initialize QWebChannel
            initializeQtBridge();
            
            // Map click esem√©nyek figyel√©se
            setTimeout(function() {{
                if (typeof window.map_{map_obj._id} !== 'undefined') {{
                    var map = window.map_{map_obj._id};
                    
                    // Map click event
                    map.on('click', function(e) {{
                        handleCoordinatesClick(e.latlng.lat, e.latlng.lng);
                    }});
                    
                    // Map move event with protection
                    map.on('moveend', function(e) {{
                        try {{
                            var center = map.getCenter();
                            var zoom = map.getZoom();
                            handleMapMove(center.lat, center.lng, zoom);
                        }} catch(err) {{
                            console.log('‚ö†Ô∏è Map move event error:', err);
                        }}
                    }});
                    
                    console.log('üó∫Ô∏è Map event listeners attached');
                }} else {{
                    console.log('‚ö†Ô∏è Map object not found, retrying...');
                    setTimeout(arguments.callee, 1000);
                }}
            }}, 1000);
        }});
        
        // QWebChannel script loading
        if (typeof QWebChannel === 'undefined') {{
            console.log('üì• Loading QWebChannel script...');
            var script = document.createElement('script');
            script.src = 'qrc:///qtwebchannel/qwebchannel.js';
            script.onload = function() {{
                console.log('‚úÖ QWebChannel script loaded');
                initializeQtBridge();
            }};
            script.onerror = function() {{
                console.log('‚ùå Failed to load QWebChannel script');
            }};
            document.head.appendChild(script);
        }} else {{
            initializeQtBridge();
        }}
        </script>
        """
        
        # JavaScript k√≥d hozz√°ad√°sa a t√©rk√©phez
        map_obj.get_root().html.add_child(folium.Element(bridge_js))
        
        print("‚úÖ JavaScript bridge added to map")
    
    def _add_map_controls(self, map_obj: folium.Map):
        """
        üéÆ Tov√°bbi t√©rk√©p vez√©rl≈ëk hozz√°ad√°sa.
        """
        # Fullscreen control
        plugins.Fullscreen().add_to(map_obj)
        
        # Measure control
        plugins.MeasureControl().add_to(map_obj)
        
        # Mouse position
        plugins.MousePosition(
            position='bottomright',
            separator=' | ',
            empty_string='Koordin√°t√°k...',
            lng_first=False,
            num_digits=20,
            prefix='Pos: ',
            lat_formatter="function(num) {return L.Util.formatNum(num, 4) + '¬∞';}",
            lng_formatter="function(num) {return L.Util.formatNum(num, 4) + '¬∞';}"
        ).add_to(map_obj)
        
        # MiniMap
        minimap = plugins.MiniMap(
            tile_layer="OpenStreetMap",
            position='bottomleft',
            width=150,
            height=150,
            collapsed_width=25,
            collapsed_height=25,
            zoom_level_offset=-5,
            zoom_animation=True
        )
        minimap.add_to(map_obj)
        
        print("‚úÖ Map controls added")
    
    def _inject_custom_javascript(self):
        """
        üíâ Custom JavaScript k√≥d injekt√°l√°sa a gener√°lt HTML-be.
        """
        try:
            # HTML f√°jl beolvas√°sa
            with open(self.output_path, 'r', encoding='utf-8') as f:
                html_content = f.read()
            
            # Custom CSS √©s JavaScript hozz√°ad√°sa
            custom_head = """
            <style>
            /* Magyar Kl√≠maanalitika Custom Styles */
            .folium-map {
                border-radius: 8px !important;
                box-shadow: 0 4px 8px rgba(0,0,0,0.1) !important;
            }
            
            .leaflet-popup-content {
                font-family: 'Segoe UI', Arial, sans-serif !important;
                color: #2E4057 !important;
            }
            
            .leaflet-tooltip {
                background: rgba(46, 64, 87, 0.9) !important;
                color: white !important;
                border: none !important;
                border-radius: 4px !important;
                font-size: 12px !important;
            }
            </style>
            """
            
            # HTML m√≥dos√≠t√°sa
            html_content = html_content.replace('</head>', custom_head + '</head>')
            
            # M√≥dos√≠tott HTML ment√©se
            with open(self.output_path, 'w', encoding='utf-8') as f:
                f.write(html_content)
            
            print("‚úÖ Custom JavaScript injected")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Failed to inject custom JavaScript: {e}")


class HungarianMapVisualizer(QWidget):
    """
    üó∫Ô∏è Magyar Folium t√©rk√©p vizualiz√°l√≥ widget - TELJES INTERAKT√çV VERZI√ì.
    
    FUNKCI√ìK:
    - Folium + Leaflet.js alap√∫ interakt√≠v t√©rk√©p
    - Kattinthat√≥ magyar megy√©k
    - Hover tooltipek √©s popupok
    - Weather overlay support
    - JavaScript ‚Üî PySide6 bridge
    - T√©ma t√°mogat√°s
    - Export funkci√≥k
    
    SIGNALOK:
    - map_ready(): T√©rk√©p bet√∂ltve √©s k√©sz
    - county_clicked(county_name): Megy√©re kattint√°s
    - coordinates_clicked(lat, lon): Koordin√°ta kattint√°s
    - export_completed(file_path): Export befejezve
    - error_occurred(message): Hiba t√∂rt√©nt
    """
    
    # Signalok
    map_ready = Signal()                           # t√©rk√©p k√©sz
    county_clicked = Signal(str)                   # megye n√©v
    coordinates_clicked = Signal(float, float)     # lat, lon
    map_moved = Signal(float, float, int)          # lat, lon, zoom
    county_hovered = Signal(str)                   # megye hover
    export_completed = Signal(str)                 # f√°jl √∫tvonal
    error_occurred = Signal(str)                   # hiba √ºzenet
    bounds_changed = Signal(object)                # t√©rk√©p hat√°r v√°ltoz√°s
    
    def __init__(self, parent=None):
        super().__init__(parent)
        
        # Komponens inicializ√°l√°s
        self.color_palette = ColorPalette()
        
        # Folium konfigur√°ci√≥
        self.map_config = FoliumMapConfig()
        
        # Adatok
        self.counties_gdf = None
        self.current_weather_data = None
        self.current_html_path = None
        
        # Worker threads
        self.map_generator = None
        
        # JavaScript Bridge
        self.js_bridge = JavaScriptBridge()
        self.web_channel = QWebChannel()
        
        # UI √©p√≠t√©s
        self._setup_ui()
        self._setup_theme()
        self._connect_signals()
        
        # Folium el√©rhet≈ës√©g ellen≈ërz√©se
        if FOLIUM_AVAILABLE:
            self._generate_default_map()
        else:
            self._show_folium_error()
    
    def _setup_ui(self):
        """
        üé® UI komponensek l√©trehoz√°sa - FOLIUM VERZI√ì.
        """
        layout = QVBoxLayout(self)
        layout.setContentsMargins(5, 5, 5, 5)
        layout.setSpacing(5)
        
        # === FOLIUM T√âRK√âP VEZ√âRL≈êK ===
        
        controls_group = QGroupBox("üó∫Ô∏è Folium Interakt√≠v T√©rk√©p")
        register_widget_for_theming(controls_group, "container")
        controls_layout = QHBoxLayout(controls_group)
        
        # T√©rk√©p st√≠lus v√°laszt√≥
        style_label = QLabel("St√≠lus:")
        register_widget_for_theming(style_label, "text")
        controls_layout.addWidget(style_label)
        
        self.style_combo = QComboBox()
        self.style_combo.addItems([
            "OpenStreetMap",
            "CartoDB positron", 
            "CartoDB dark_matter",
            "Stamen Terrain",
            "Stamen Toner"
        ])
        self.style_combo.setCurrentText(self.map_config.tiles)
        register_widget_for_theming(self.style_combo, "input")
        controls_layout.addWidget(self.style_combo)
        
        # Megyehat√°rok checkbox
        self.counties_check = QCheckBox("Megyehat√°rok")
        self.counties_check.setChecked(True)
        register_widget_for_theming(self.counties_check, "input")
        controls_layout.addWidget(self.counties_check)
        
        # Id≈ëj√°r√°si overlay checkbox
        self.weather_check = QCheckBox("Id≈ëj√°r√°si overlay")
        self.weather_check.setChecked(False)
        register_widget_for_theming(self.weather_check, "input")
        controls_layout.addWidget(self.weather_check)
        
        # Zoom kontroll
        zoom_label = QLabel("Zoom:")
        register_widget_for_theming(zoom_label, "text")
        controls_layout.addWidget(zoom_label)
        
        self.zoom_slider = QSlider(Qt.Horizontal)
        self.zoom_slider.setRange(6, 12)
        self.zoom_slider.setValue(7)
        self.zoom_slider.setToolTip("T√©rk√©p nagy√≠t√°s szintje")
        register_widget_for_theming(self.zoom_slider, "input")
        controls_layout.addWidget(self.zoom_slider)
        
        controls_layout.addStretch()
        
        # Akci√≥ gombok
        self.refresh_btn = QPushButton("üîÑ Friss√≠t√©s")
        self.refresh_btn.setToolTip("Folium t√©rk√©p √∫jragener√°l√°sa")
        register_widget_for_theming(self.refresh_btn, "button")
        controls_layout.addWidget(self.refresh_btn)
        
        self.export_btn = QPushButton("üíæ Export")
        self.export_btn.setToolTip("Folium t√©rk√©p export√°l√°sa")
        register_widget_for_theming(self.export_btn, "button")
        controls_layout.addWidget(self.export_btn)
        
        self.reset_btn = QPushButton("üè† Alaphelyzet")
        self.reset_btn.setToolTip("T√©rk√©p vissza√°ll√≠t√°sa")
        register_widget_for_theming(self.reset_btn, "button")
        controls_layout.addWidget(self.reset_btn)
        
        layout.addWidget(controls_group)
        
        # === PROGRESS BAR ===
        
        self.progress_bar = QProgressBar()
        self.progress_bar.setRange(0, 100)
        self.progress_bar.setValue(0)
        self.progress_bar.setVisible(False)
        register_widget_for_theming(self.progress_bar, "input")
        layout.addWidget(self.progress_bar)
        
        self.status_label = QLabel("Folium interakt√≠v t√©rk√©p inicializ√°l√°sa...")
        register_widget_for_theming(self.status_label, "text")
        layout.addWidget(self.status_label)
        
        # === WEBENGINE VIEW + JAVASCRIPT BRIDGE ===
        
        self.web_view = QWebEngineView()
        register_widget_for_theming(self.web_view, "container")
        
        # üîß WEBENGINE SETTINGS FIX - Same-Origin Policy enged√©lyez√©s
        try:
            from PySide6.QtWebEngineCore import QWebEngineSettings
            
            settings = self.web_view.settings()
            # Helyi f√°jlok el√©r√©s enged√©lyez√©se
            settings.setAttribute(QWebEngineSettings.LocalStorageEnabled, True)
            settings.setAttribute(QWebEngineSettings.LocalContentCanAccessRemoteUrls, True) 
            settings.setAttribute(QWebEngineSettings.LocalContentCanAccessFileUrls, True)
            settings.setAttribute(QWebEngineSettings.AllowRunningInsecureContent, True)
            # JavaScript debugging
            settings.setAttribute(QWebEngineSettings.JavascriptEnabled, True)
            settings.setAttribute(QWebEngineSettings.ErrorPageEnabled, True)
            # WebGL √©s Canvas enged√©lyez√©s
            settings.setAttribute(QWebEngineSettings.WebGLEnabled, True)
            settings.setAttribute(QWebEngineSettings.Accelerated2dCanvasEnabled, True)
            
            print("‚úÖ WebEngine settings configured for local content access")
            
        except ImportError as e:
            print(f"‚ö†Ô∏è WebEngineSettings not available: {e}")
        
        # WebChannel setup JavaScript bridge-hez
        self.web_channel.registerObject("qtBridge", self.js_bridge)
        self.web_view.page().setWebChannel(self.web_channel)
        
        layout.addWidget(self.web_view)
        
        # Layout s√∫lyok
        layout.setStretchFactor(controls_group, 0)
        layout.setStretchFactor(self.web_view, 1)
    
    def _setup_theme(self):
        """
        üé® T√©ma be√°ll√≠t√°sok alkalmaz√°sa.
        """
        register_widget_for_theming(self, "container")
    
    def _connect_signals(self):
        """
        üîó Signal-slot kapcsolatok l√©trehoz√°sa - FOLIUM VERZI√ì.
        """
        # UI vez√©rl≈ëk
        self.style_combo.currentTextChanged.connect(self._on_style_changed)
        self.counties_check.toggled.connect(self._on_counties_toggled)
        self.weather_check.toggled.connect(self._on_weather_toggled)
        self.zoom_slider.valueChanged.connect(self._on_zoom_changed)
        
        self.refresh_btn.clicked.connect(self._refresh_map)
        self.export_btn.clicked.connect(self._export_map)
        self.reset_btn.clicked.connect(self.reset_map_view)
        
        # WebEngine esem√©nyek
        self.web_view.loadFinished.connect(self._on_map_loaded)
        
        # JavaScript Bridge signalok
        self.js_bridge.county_clicked.connect(self._on_js_county_clicked)
        self.js_bridge.coordinates_clicked.connect(self._on_js_coordinates_clicked)
        self.js_bridge.map_moved.connect(self._on_js_map_moved)
        self.js_bridge.county_hovered.connect(self._on_js_county_hovered)
        
        print("‚úÖ Folium MapVisualizer signals connected")
    
    def _show_folium_error(self):
        """
        ‚ùå Folium hi√°ny eset√©n hiba√ºzenet megjelen√≠t√©se.
        """
        self.status_label.setText("‚ùå Folium library hi√°nyzik! pip install folium")
        self.progress_bar.setVisible(False)
        
        # Vez√©rl≈ëk letilt√°sa
        self.refresh_btn.setEnabled(False)
        self.export_btn.setEnabled(False)
        
        error_msg = "Folium library not installed. Please run: pip install folium branca"
        self.error_occurred.emit(error_msg)
    
    def _generate_default_map(self):
        """
        üó∫Ô∏è Alap√©rtelmezett Folium t√©rk√©p gener√°l√°sa.
        """
        if not FOLIUM_AVAILABLE:
            return
        
        self._start_map_generation()
    
    def _start_map_generation(self):
        """
        üîÑ Folium t√©rk√©p gener√°l√°s ind√≠t√°sa h√°tt√©rben.
        """
        if not FOLIUM_AVAILABLE:
            self._show_folium_error()
            return
        
        if self.map_generator and self.map_generator.isRunning():
            return  # M√°r fut egy gener√°l√°s
        
        # Progress bar megjelen√≠t√©se
        self.progress_bar.setVisible(True)
        self.progress_bar.setValue(0)
        self.status_label.setText("üîÑ Folium interakt√≠v t√©rk√©p gener√°l√°sa...")
        
        # Worker l√©trehoz√°sa
        self.map_generator = FoliumMapGenerator(
            config=self.map_config,
            counties_gdf=self.counties_gdf,
            weather_data=self.current_weather_data,
            bridge_id=self.js_bridge.bridge_id
        )
        
        # Worker signalok
        self.map_generator.progress_updated.connect(self.progress_bar.setValue)
        self.map_generator.status_updated.connect(self.status_label.setText)
        self.map_generator.map_generated.connect(self._on_map_generated)
        self.map_generator.error_occurred.connect(self._on_map_error)
        
        # Worker ind√≠t√°sa
        self.map_generator.start()
    
    def _on_map_generated(self, html_path: str):
        """
        ‚úÖ Folium t√©rk√©p gener√°l√°s befejezve.
        """
        self.current_html_path = html_path
        
        # üîß WEBENGINE FIX: Proper file URL handling
        file_url = QUrl.fromLocalFile(os.path.abspath(html_path))
        
        print(f"üîß DEBUG: Loading Folium HTML: {file_url.toString()}")
        
        # üöÄ DELAYED LOADING FIX: WebEngine k√©sleltetett bet√∂lt√©s
        QTimer.singleShot(500, lambda: self._load_folium_html_delayed(file_url))
        
        self.progress_bar.setVisible(False)
        self.status_label.setText("üîÑ Folium t√©rk√©p WebEngine bet√∂lt√©se...")
        
        print(f"‚úÖ Folium map generated: {html_path}")
    
    def _load_folium_html_delayed(self, file_url: QUrl):
        """
        üöÄ FIXED: HTML Content Injection - Same-Origin Policy megker√ºl√©s.
        
        A file:// protokoll korl√°toz√°sok helyett a HTML tartalm√°t 
        k√∂zvetlen√ºl injekt√°ljuk a WebEngine-be.
        """
        try:
            # WebEngine reset before loading
            self.web_view.stop()
            
            # üîß HTML CONTENT INJECTION FIX
            html_path = file_url.toLocalFile()
            
            # HTML tartalom beolvas√°sa
            with open(html_path, 'r', encoding='utf-8') as f:
                html_content = f.read()
            
            # Base URL meghat√°roz√°sa a relat√≠v hivatkoz√°sokhoz
            base_url = QUrl.fromLocalFile(os.path.dirname(html_path))
            
            # HTML tartalom k√∂zvetlen bet√∂lt√©se Same-Origin Policy megker√ºl√©ssel
            self.web_view.setHtml(html_content, base_url)
            
            print(f"‚úÖ HTML Content Injection: {html_path}")
            print(f"üìÅ Base URL for relative paths: {base_url.toString()}")
            
            # Status update
            self.status_label.setText("üîß HTML Content Injection - Same-Origin Policy megker√ºl√©se...")
            
        except Exception as e:
            error_msg = f"HTML Content Injection hiba: {e}"
            print(f"‚ùå HTML Injection Error: {error_msg}")
            self.error_occurred.emit(error_msg)
    
    def _on_map_error(self, error_message: str):
        """
        ‚ùå T√©rk√©p gener√°l√°si hiba.
        """
        self.progress_bar.setVisible(False)
        self.status_label.setText("‚ùå Folium t√©rk√©p gener√°l√°si hiba!")
        
        print(f"‚ùå Folium map generation error: {error_message}")
        self.error_occurred.emit(error_message)
    
    def _on_map_loaded(self, success: bool):
        """
        üó∫Ô∏è WebEngine Folium t√©rk√©p bet√∂lt√©s befejezve.
        """
        if success:
            self.map_ready.emit()
            self.status_label.setText("üó∫Ô∏è Interakt√≠v t√©rk√©p k√©sz! Kattints a megy√©kre!")
            print("‚úÖ Folium map loaded successfully in WebEngine")
        else:
            # üîß DETAILED ERROR DIAGNOSIS
            page = self.web_view.page()
            
            print("‚ùå WebEngine load failed - diagnosing...")
            print(f"üîß DEBUG: Page URL: {page.url().toString()}")
            print(f"üîß DEBUG: Page title: {page.title()}")
            
            # Pr√≥b√°ljuk meg √∫jra bet√∂lteni 2 m√°sodperc m√∫lva
            self.status_label.setText("‚ö†Ô∏è WebEngine √∫jrapr√≥b√°lkoz√°s 2 m√°sodpercben...")
            QTimer.singleShot(2000, self._retry_map_loading)
            
            print("üîÑ Scheduling retry in 2 seconds...")
    
    def _retry_map_loading(self):
        """
        üîÑ T√©rk√©p bet√∂lt√©s √∫jrapr√≥b√°l√°sa alternat√≠v m√≥dszerrel.
        """
        if not self.current_html_path:
            self.error_occurred.emit("No HTML path available for retry")
            return
        
        print("üîÑ Retrying map loading with alternative method...")
        
        try:
            # üîß ALTERNAT√çV M√ìDSZER: Egyszer≈± file:// URL bet√∂lt√©s
            file_url = QUrl.fromLocalFile(os.path.abspath(self.current_html_path))
            
            # WebEngine teljes reset
            self.web_view.stop()
            self.web_view.reload()
            
            # Egyszer≈± bet√∂lt√©s
            self.web_view.load(file_url)
            
            self.status_label.setText("üîÑ Alternat√≠v bet√∂lt√©si m√≥dszer...")
            print(f"üîÑ Alternative loading method: {file_url.toString()}")
            
        except Exception as e:
            error_msg = f"Retry loading failed: {e}"
            print(f"‚ùå Retry failed: {error_msg}")
            self.error_occurred.emit(error_msg)
    
    # === UI EVENT HANDLERS ===
    
    def _on_style_changed(self, style: str):
        """
        üé® T√©rk√©p st√≠lus v√°ltoztat√°sa.
        """
        self.map_config.tiles = style
        print(f"üé® Map style changed to: {style}")
    
    def _on_counties_toggled(self, checked: bool):
        """
        üó∫Ô∏è Megyehat√°rok megjelen√≠t√©s kapcsol√≥.
        """
        self.map_config.show_counties = checked
        print(f"üó∫Ô∏è Counties display: {checked}")
    
    def _on_weather_toggled(self, checked: bool):
        """
        üå§Ô∏è Id≈ëj√°r√°si overlay kapcsol√≥.
        """
        self.map_config.weather_overlay = checked
        print(f"üå§Ô∏è Weather overlay: {checked}")
    
    def _on_zoom_changed(self, zoom: int):
        """
        üîç Zoom szint v√°ltoztat√°sa.
        """
        self.map_config.zoom_start = zoom
        print(f"üîç Zoom level: {zoom}")
    
    # === JAVASCRIPT BRIDGE HANDLERS ===
    
    def _on_js_county_clicked(self, county_name: str):
        """
        üñ±Ô∏è Megye kattint√°s JavaScript bridge-b≈ël.
        """
        print(f"üñ±Ô∏è County clicked from JS: {county_name}")
        self.map_config.selected_county = county_name
        self.county_clicked.emit(county_name)
    
    def _on_js_coordinates_clicked(self, lat: float, lon: float):
        """
        üìç Koordin√°ta kattint√°s JavaScript bridge-b≈ël.
        """
        print(f"üìç Coordinates clicked from JS: {lat}, {lon}")
        self.coordinates_clicked.emit(lat, lon)
    
    def _on_js_map_moved(self, lat: float, lon: float, zoom: int):
        """
        üó∫Ô∏è T√©rk√©p mozg√°s JavaScript bridge-b≈ël.
        """
        self.map_config.center_lat = lat
        self.map_config.center_lon = lon
        self.map_config.zoom_start = zoom
        
        # UI friss√≠t√©se
        self.zoom_slider.setValue(zoom)
        
        self.map_moved.emit(lat, lon, zoom)
    
    def _on_js_county_hovered(self, county_name: str):
        """
        üëÜ Megye hover JavaScript bridge-b≈ël.
        """
        self.county_hovered.emit(county_name)
    
    # === AKCI√ì MET√ìDUSOK ===
    
    def _refresh_map(self):
        """
        üîÑ Folium t√©rk√©p manu√°lis friss√≠t√©se.
        """
        print("üîÑ Manual Folium map refresh requested")
        self._start_map_generation()
    
    def _generate_demo_weather(self):
        """
        üß™ Demo id≈ëj√°r√°si adatok gener√°l√°sa √©s bet√∂lt√©se.
        """
        try:
            # Demo adatok gener√°l√°sa
            demo_data = self.generate_demo_weather_data()
            
            # Adatok be√°ll√≠t√°sa
            self.set_weather_data(demo_data)
            
            # Weather overlay bekapcsol√°sa
            self.weather_check.setChecked(True)
            self.map_config.weather_overlay = True
            
            # T√©rk√©p friss√≠t√©se az √∫j adatokkal
            self._start_map_generation()
            
            self.status_label.setText("üß™ Demo id≈ëj√°r√°si adatok bet√∂ltve! Weather overlay bekapcsolva.")
            
        except Exception as e:
            error_msg = f"Demo weather data generation failed: {e}"
            print(f"‚ùå {error_msg}")
            self.error_occurred.emit(error_msg)
    
    def _export_map(self):
        """
        üíæ Folium t√©rk√©p export√°l√°sa.
        """
        if not self.current_html_path:
            QMessageBox.warning(self, "Export", "Nincs Folium t√©rk√©p az export√°l√°shoz!")
            return
        
        # F√°jl ment√©s dialog
        file_path, _ = QFileDialog.getSaveFileName(
            self,
            "Folium t√©rk√©p export√°l√°sa",
            f"hungarian_folium_map_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html",
            "HTML f√°jlok (*.html);;Minden f√°jl (*)"
        )
        
        if file_path:
            try:
                # HTML f√°jl m√°sol√°sa
                import shutil
                shutil.copy2(self.current_html_path, file_path)
                
                self.export_completed.emit(file_path)
                QMessageBox.information(self, "Export", f"Folium t√©rk√©p sikeresen export√°lva:\n{file_path}")
                
            except Exception as e:
                error_msg = f"Export hiba: {e}"
                self.error_occurred.emit(error_msg)
                QMessageBox.critical(self, "Export hiba", error_msg)
    
    # === PUBLIKUS API - FOLIUM VERZI√ì ===
    
    def set_counties_geodataframe(self, counties_gdf):
        """
        üó∫Ô∏è Megy√©k GeoDataFrame be√°ll√≠t√°sa.
        """
        self.counties_gdf = counties_gdf
        print(f"üó∫Ô∏è Folium counties GeoDataFrame set: {len(counties_gdf) if counties_gdf is not None else 0} counties")
    
    def set_weather_data(self, weather_data: Dict):
        """
        üå§Ô∏è Id≈ëj√°r√°si adatok be√°ll√≠t√°sa Folium overlay-hez.
        
        Expected weather_data format:
        {
            'temperature': {
                'Budapest': {
                    'coordinates': [47.4979, 19.0402],
                    'value': 22.5  # ¬∞C
                },
                ...
            },
            'precipitation': {
                'Budapest': {
                    'coordinates': [47.4979, 19.0402], 
                    'value': 15.3  # mm
                },
                ...
            },
            'wind_speed': {
                'Budapest': {
                    'coordinates': [47.4979, 19.0402],
                    'speed': 18.2,    # km/h
                    'direction': 225  # degrees
                },
                ...
            }
        }
        
        Ez a met√≥dus VAL√ìS ADATOKAT fogad a weather_client.py-b√≥l
        √©s az analytics engine-b≈ël.
        """
        self.current_weather_data = weather_data
        print(f"üå§Ô∏è Real weather data set for Folium overlay:")
        
        if weather_data:
            for data_type, locations in weather_data.items():
                print(f"  üìä {data_type}: {len(locations)} locations")
        
        # Ha a weather overlay be van kapcsolva, friss√≠tj√ºk a t√©rk√©pet
        if self.map_config.weather_overlay:
            self._start_map_generation()
    
    def update_map_bounds(self, bounds: Tuple[float, float, float, float]):
        """
        üéØ T√©rk√©p hat√°rok friss√≠t√©se (minx, miny, maxx, maxy).
        """
        # T√©rk√©p centrum sz√°m√≠t√°sa
        center_lat = (bounds[1] + bounds[3]) / 2
        center_lon = (bounds[0] + bounds[2]) / 2
        
        # Zoom szint sz√°m√≠t√°sa bounds alapj√°n
        lat_diff = abs(bounds[3] - bounds[1])
        lon_diff = abs(bounds[2] - bounds[0])
        
        # Zoom szint heurisztika
        if lat_diff > 2 or lon_diff > 3:
            zoom = 6
        elif lat_diff > 1 or lon_diff > 1.5:
            zoom = 7
        elif lat_diff > 0.5 or lon_diff > 0.8:
            zoom = 8
        else:
            zoom = 9
        
        # Konfigur√°ci√≥ friss√≠t√©se
        self.map_config.center_lat = center_lat
        self.map_config.center_lon = center_lon
        self.map_config.zoom_start = zoom
        
        # UI friss√≠t√©se
        self.zoom_slider.setValue(zoom)
        
        print(f"üéØ Folium map bounds updated: center=({center_lat:.4f}, {center_lon:.4f}), zoom={zoom}")
        
        # Folium t√©rk√©p √∫jragener√°l√°sa
        self._start_map_generation()
    
    def get_map_config(self) -> FoliumMapConfig:
        """
        üìã Jelenlegi t√©rk√©p konfigur√°ci√≥ lek√©rdez√©se.
        """
        return self.map_config
    
    def reset_map_view(self):
        """
        üîÑ T√©rk√©p n√©zet vissza√°ll√≠t√°sa Magyarorsz√°g alap√©rtelmezett n√©zet√©re.
        """
        self.map_config.center_lat = 47.1625
        self.map_config.center_lon = 19.5033
        self.map_config.zoom_start = 7
        self.map_config.selected_county = None
        self.map_config.highlighted_counties = []
        
        # UI reset
        self.zoom_slider.setValue(7)
        self.style_combo.setCurrentText("OpenStreetMap")
        
        self._start_map_generation()
        print("üè† Folium map reset to default Hungary view")
    
    def set_map_style(self, style: str):
        """
        üé® T√©rk√©p st√≠lus programmatic be√°ll√≠t√°sa.
        """
        if style in ["light", "bright"]:
            map_style = "CartoDB positron"
        elif style in ["dark", "night"]:
            map_style = "CartoDB dark_matter"
        else:
            map_style = "OpenStreetMap"
        
        self.style_combo.setCurrentText(map_style)
        self.map_config.tiles = map_style
        self.map_config.theme = style
        
        print(f"üé® Folium map style set to: {map_style} (theme: {style})")
    
    def toggle_counties(self, show: bool):
        """
        üó∫Ô∏è Megyehat√°rok megjelen√≠t√©s programmatic kapcsol√°sa.
        """
        self.counties_check.setChecked(show)
    
    def toggle_weather_overlay(self, show: bool):
        """
        üå§Ô∏è Id≈ëj√°r√°si overlay programmatic kapcsol√°sa.
        """
        self.weather_check.setChecked(show)
    
    def set_selected_county(self, county_name: str):
        """
        üéØ Kiv√°lasztott megye be√°ll√≠t√°sa √©s t√©rk√©p friss√≠t√©se.
        """
        self.map_config.selected_county = county_name
        print(f"üéØ Folium map selected county: {county_name}")
        
        # T√©rk√©p friss√≠t√©se a kiv√°lasztott megy√©vel
        self._start_map_generation()
    
    def highlight_counties(self, county_names: List[str]):
        """
        ‚ú® Megy√©k kiemel√©se a t√©rk√©pen.
        """
        self.map_config.highlighted_counties = county_names
        print(f"‚ú® Highlighted counties: {county_names}")
    
    def is_folium_available(self) -> bool:
        """
        ‚úÖ Folium el√©rhet≈ës√©g ellen≈ërz√©se.
        """
        return FOLIUM_AVAILABLE
    
    def get_javascript_bridge(self) -> JavaScriptBridge:
        """
        üåâ JavaScript bridge referencia lek√©rdez√©se.
        """
        return self.js_bridge


# === DEMO √âS TESZT FUNKCI√ìK ===

def demo_folium_map_visualizer():
    """
    üß™ Folium Map Visualizer demo alkalmaz√°s.
    """
    import sys
    from PySide6.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QWidget
    
    app = QApplication(sys.argv)
    
    # F≈ë ablak
    window = QMainWindow()
    window.setWindowTitle("üó∫Ô∏è Folium Map Visualizer Demo - Teljes Interakt√≠v")
    window.setGeometry(100, 100, 1400, 900)
    
    # Central widget
    central_widget = QWidget()
    window.setCentralWidget(central_widget)
    
    layout = QVBoxLayout(central_widget)
    
    # Folium map visualizer
    map_visualizer = HungarianMapVisualizer()
    layout.addWidget(map_visualizer)
    
    # Event handlers
    def on_map_ready():
        print("üó∫Ô∏è Folium t√©rk√©p bet√∂ltve √©s k√©sz!")
    
    def on_county_clicked(county_name):
        print(f"üñ±Ô∏è Megye kattintva: {county_name}")
    
    def on_coordinates_clicked(lat, lon):
        print(f"üìç Koordin√°ta kattintva: {lat}, {lon}")
    
    def on_map_moved(lat, lon, zoom):
        print(f"üó∫Ô∏è T√©rk√©p mozgott: {lat}, {lon}, zoom={zoom}")
    
    def on_export_completed(file_path):
        print(f"üíæ Export befejezve: {file_path}")
    
    def on_error_occurred(message):
        print(f"‚ùå Hiba: {message}")
    
    # Signalok kapcsol√°sa
    map_visualizer.map_ready.connect(on_map_ready)
    map_visualizer.county_clicked.connect(on_county_clicked)
    map_visualizer.coordinates_clicked.connect(on_coordinates_clicked)
    map_visualizer.map_moved.connect(on_map_moved)
    map_visualizer.export_completed.connect(on_export_completed)
    map_visualizer.error_occurred.connect(on_error_occurred)
    
    window.show()
    
    print("üó∫Ô∏è Folium Map Visualizer Demo elind√≠tva!")
    print("‚úÖ TELJES INTERAKT√çV FOLIUM T√âRK√âP!")
    print("üéÆ El√©rhet≈ë funkci√≥k:")
    print("   üñ±Ô∏è Kattinthat√≥ megy√©k")
    print("   üìç Koordin√°ta kattint√°s")
    print("   üîç Zoom/Pan interakci√≥")
    print("   üëÜ Hover tooltipek")
    print("   üå§Ô∏è Weather overlay")
    print("   üé® T√©ma t√°mogat√°s")
    print("   üíæ HTML export")
    print("   üåâ JavaScript ‚Üî Python bridge")
    
    if FOLIUM_AVAILABLE:
        print("‚úÖ Folium library el√©rhet≈ë!")
    else:
        print("‚ùå Folium library hi√°nyzik - telep√≠tsd: pip install folium branca")
    
    sys.exit(app.exec())


if __name__ == "__main__":
    demo_folium_map_visualizer()