#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Universal Weather Research Platform - Main Window Module
üö® KRITIKUS FIX: ANALYTICS VIEW SIGNAL CHAIN HELYRE√ÅLL√çTVA!
üó∫Ô∏è 2. HULL√ÅM: MAGYAR MEGY√âK AUTOMATIKUS INTEGR√ÅCI√ìJA BEFEJEZVE!
üåç 3. HULL√ÅM: PROVIDER STATUS KEZEL√âS √âS MULTI-CITY ENGINE TELJES B≈êV√çT√âSE K√âSZ!
üßπ 4. HULL√ÅM: DEBUG TISZT√çT√ÅS √âS FINALIZ√ÅL√ÅS!
üîß HOTFIX: _on_analysis_failed met√≥dus hozz√°adva!
üéØ V√âGS≈ê FIX: DUPLA KONVERZI√ì JAV√çTVA - AnalysisWorker eredm√©nye K√ñZVETLEN√úL haszn√°lva!

‚úÖ BEFEJEZETT FUNKCI√ìK:
üéØ Analytics View signal chain helyre√°ll√≠tva - Moscow lek√©rdez√©s ‚Üí AnalyticsView M≈∞K√ñDIK
üó∫Ô∏è Magyar megy√©k automatikusan bet√∂lt≈ëdnek KSH adatb√°zisb√≥l
üåç Provider status tracking √©s warning rendszer
üìä Multi-city engine teljes integr√°ci√≥ja
üé® ThemeManager centraliz√°lt t√©ma rendszer
üìà 5 navig√°ci√≥s tab (V√°ros, Analitika, Trend, T√©rk√©p, Be√°ll√≠t√°sok)
üîß Signal chain optimaliz√°l√°s √©s hibakezel√©s
üõ† Lifecycle management √©s cleanup
"""

from typing import Optional, Dict, Any, Tuple, List
import logging
from datetime import datetime
from pathlib import Path

from PySide6.QtWidgets import (
    QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QStackedWidget,
    QSplitter, QStatusBar, QMenuBar, QMessageBox, QToolBar, QLabel,
    QSizePolicy
)
from PySide6.QtCore import Qt, QSettings, Signal, QSize
from PySide6.QtGui import QAction, QIcon, QActionGroup

from ..config import AppInfo, GUIConfig
from .utils import (
    GUIConstants, ThemeType, get_source_display_name, get_optimal_data_source,
    format_provider_usage, calculate_provider_costs, get_provider_warning_level,
    format_provider_status, get_provider_icon, format_cost_summary
)
from .theme_manager import get_theme_manager, register_widget_for_theming, ThemeManager
from .color_palette import ColorPalette
from .app_controller import AppController
from .control_panel import ControlPanel
from .results_panel import ResultsPanel
from .data_widgets import WeatherDataTable
from .workers.data_fetch_worker import WorkerManager
from .dialogs import ExtremeWeatherDialog
from .analytics_view import AnalyticsView
from .map_view import MapView
from .trend_analytics_tab import TrendAnalyticsTab
from .hungarian_map_tab import HungarianMapTab

# üó∫Ô∏è MAGYAR MEGY√âK AUTOMATIKUS INTEGR√ÅCI√ìJA
try:
    from ..analytics.hungarian_counties_integration import HungarianCountiesLoader, integrate_hungarian_counties_to_app
    HUNGARIAN_COUNTIES_AVAILABLE = True
except ImportError as e:
    HUNGARIAN_COUNTIES_AVAILABLE = False


class MainWindow(QMainWindow):
    """
    üö® TELJES FUNKCIONALIT√ÅS - MINDEN HULL√ÅM BEFEJEZVE!
    
    ‚úÖ 1. HULL√ÅM - Analytics signal chain helyre√°ll√≠tva
    ‚úÖ 2. HULL√ÅM - Magyar megy√©k automatikus integr√°ci√≥ja  
    ‚úÖ 3. HULL√ÅM - Provider status √©s multi-city engine b≈ëv√≠t√©se
    ‚úÖ 4. HULL√ÅM - Debug tiszt√≠t√°s √©s finaliz√°l√°s
    üéØ V√âGS≈ê FIX - Dupla konverzi√≥ jav√≠t√°s
    
    üéØ F≈êBB FUNKCI√ìK:
    - Single city weather analysis (k√∂zponti funkci√≥)
    - Analytics view integration (refaktor√°lt)
    - Multi-city analysis (r√©gi√≥k/megy√©k)  
    - Interactive map with Hungarian counties
    - Trend analysis (professional)
    - Provider status tracking
    - Theme management
    - Export capabilities
    """
    
    # üîß QUERY TYPE ‚Üí T√âRK√âP PARAM√âTER MAPPING
    QUERY_TYPE_TO_PARAMETER = {
        "hottest_today": "H≈ëm√©rs√©klet",
        "coldest_today": "H≈ëm√©rs√©klet", 
        "windiest_today": "Sz√©l",
        "wettest_today": "Csapad√©k",
        "rainiest_today": "Csapad√©k",
        "sunniest_today": "H≈ëm√©rs√©klet",
        "temperature_range": "H≈ëm√©rs√©klet"
    }
    
    def __init__(self):
        """F≈ëablak inicializ√°l√°sa - TELJES FUNKCIONALIT√ÅS."""
        super().__init__()
        
        # QSettings a be√°ll√≠t√°sok perziszt√°l√°s√°hoz
        self.settings = QSettings("Weather Analytics", AppInfo.NAME)
        
        # üé® THEMEMANAGER INTEGR√ÅCI√ì
        self.theme_manager = get_theme_manager()
        self.color_palette = ColorPalette()
        
        # üåç PROVIDER STATUS TRACKING
        self.current_provider = "auto"
        self.provider_usage_stats = {}
        self.provider_cost_summary = ""
        self.provider_warning_level = None
        
        # üó∫Ô∏è MAGYAR MEGY√âK √ÅLLAPOT TRACKING
        self.hungarian_counties_loaded = False
        self.counties_geodataframe = None
        
        # === MVC KOMPONENSEK L√âTREHOZ√ÅSA ===
        
        # Controller (Model + business logic)
        self.controller = AppController()
        
        # Worker Manager (a Controller haszn√°lja, de referencia kell a UI-hoz)
        self.worker_manager = self.controller.worker_manager
        
        # === VIEW KOMPONENSEK ===
        
        # Navig√°ci√≥s toolbar
        self.toolbar: Optional[QToolBar] = None
        
        # Stacked Widget a n√©zetek v√°lt√°s√°hoz
        self.stacked_widget: Optional[QStackedWidget] = None
        
        # VIEW REFERENCI√ÅK
        self.current_view_name = "single_city"
        self.current_theme = ThemeType.LIGHT
        
        # SingleCity view komponensei (K√ñZPONTI FUNKCIONALIT√ÅS)
        self.control_panel: Optional[ControlPanel] = None
        self.results_panel: Optional[ResultsPanel] = None
        self.data_table: Optional[WeatherDataTable] = None
        
        # üìä ANALYTICS VIEW KOMPONENS - REFAKTOR√ÅLT!
        self.analytics_panel: Optional[AnalyticsView] = None
        
        # üó∫Ô∏è MAP VIEW KOMPONENS
        self.map_view: Optional[MapView] = None
        
        # üå§Ô∏è HUNGARIAN MAP TAB KOMPONENS
        self.hungarian_map_tab: Optional[HungarianMapTab] = None
        
        # üìà TREND ANALYTICS KOMPONENS
        self.trend_analytics_tab: Optional[TrendAnalyticsTab] = None
        
        # üåç STATUS BAR PROVIDER WIDGETS
        self.provider_status_label: Optional[QLabel] = None
        self.usage_status_label: Optional[QLabel] = None
        self.cost_status_label: Optional[QLabel] = None
        
        # === UI INICIALIZ√ÅL√ÅSA ===
        
        self._setup_window()
        self._init_navigation_toolbar()
        self._init_stacked_views()
        self._init_menu_bar()
        self._init_status_bar_with_provider_display()
        
        # === SIGNAL CHAIN √ñSSZEK√ñT√âSE ===
        
        self._connect_mvc_signals_clean_with_city_analysis_fix()
        
        # === THEMEMANAGER SETUP ===
        
        self._setup_theme_integration()
        
        # === MAGYAR MEGY√âK AUTOMATIKUS BET√ñLT√âSE ===
        
        self._load_hungarian_counties()
        
        # === BE√ÅLL√çT√ÅSOK BET√ñLT√âSE ===
        
        self._load_settings()
    
    def _load_hungarian_counties(self) -> None:
        """
        üó∫Ô∏è Magyar megy√©k automatikus bet√∂lt√©se √©s integr√°ci√≥ a HungarianMapTab-be.
        """
        try:
            # 1. MODUL EL√âRHET≈êS√âG ELLEN≈êRZ√âSE
            if not HUNGARIAN_COUNTIES_AVAILABLE:
                self.hungarian_counties_loaded = False
                return
            
            # 2. HUNGARIAN COUNTIES LOADER L√âTREHOZ√ÅSA
            counties_loader = HungarianCountiesLoader()
            
            # 3. MEGY√âK BET√ñLT√âSE (KSH ADATB√ÅZIS VAGY DEMO)
            self.counties_geodataframe = counties_loader.load_counties_geodataframe()
            
            if self.counties_geodataframe is None:
                self.hungarian_counties_loaded = False
                return
            
            # 4. HUNGARIAN MAP TAB KERES√âSE √âS KONFIGUR√ÅL√ÅSA
            self._configure_hungarian_map_with_counties()
            
            # 5. SIKERESEN BET√ñLTVE
            self.hungarian_counties_loaded = True
            
        except Exception as e:
            self.hungarian_counties_loaded = False
            self.counties_geodataframe = None
    
    def _configure_hungarian_map_with_counties(self) -> None:
        """
        üó∫Ô∏è HungarianMapTab automatikus konfigur√°l√°sa magyar megy√©kkel.
        """
        try:
            # HUNGARIAN MAP TAB KERES√âSE
            if self.hungarian_map_tab is None:
                return
            
            # MAP VISUALIZER KOMPONENS KERES√âSE A HUNGARIAN MAP TAB-BEN
            if hasattr(self.hungarian_map_tab, 'map_visualizer'):
                map_visualizer = self.hungarian_map_tab.map_visualizer
            else:
                return
            
            # COUNTIES GEODATAFRAME BE√ÅLL√çT√ÅSA A MAP VISUALIZER-EN
            if hasattr(map_visualizer, 'set_counties_geodataframe'):
                map_visualizer.set_counties_geodataframe(self.counties_geodataframe)
                
                # MEGYEHAT√ÅROK AUTOMATIKUS BEKAPCSOL√ÅSA
                if hasattr(map_visualizer, 'show_county_borders'):
                    map_visualizer.show_county_borders = True
            
        except Exception as e:
            pass
    
    def _setup_window(self) -> None:
        """Ablak alapbe√°ll√≠t√°sai."""
        self.setWindowTitle(f"{AppInfo.NAME} - TELJES FUNKCIONALIT√ÅS")
        
        # Ablak m√©retek
        self.setGeometry(
            GUIConstants.MAIN_WINDOW_X,
            GUIConstants.MAIN_WINDOW_Y,
            1400,
            900
        )
        self.setMinimumSize(1200, 700)
        
        # Widget regisztr√°ci√≥ THEMEMANAGER-hez
        register_widget_for_theming(self, "navigation")
        
        # T√©ma rendszer integr√°ci√≥ - alap√©rtelmezett light theme
        self._apply_theme_internal(ThemeType.LIGHT)
    
    def _setup_theme_integration(self) -> None:
        """ThemeManager integr√°ci√≥ be√°ll√≠t√°sa."""
        # ThemeManager signalok feliratkoz√°sa
        self.theme_manager.theme_changed.connect(self._on_theme_manager_changed)
        
        # Widget regisztr√°ci√≥k f≈ë komponensekhez
        register_widget_for_theming(self, "navigation")
    
    def _on_theme_manager_changed(self, theme_name: str) -> None:
        """ThemeManager t√©ma v√°ltoz√°s kezel√©se."""
        # T√©ma tracking friss√≠t√©se
        try:
            self.current_theme = ThemeType(theme_name)
        except ValueError:
            self.current_theme = ThemeType.LIGHT
    
    def _init_navigation_toolbar(self) -> None:
        """Navig√°ci√≥s eszk√∂zt√°r l√©trehoz√°sa - 5 TAB VERZI√ì."""
        # Eszk√∂zt√°r l√©trehoz√°sa
        self.toolbar = QToolBar("Navig√°ci√≥")
        self.toolbar.setMovable(False)
        self.toolbar.setToolButtonStyle(Qt.ToolButtonTextBesideIcon)
        self.toolbar.setIconSize(QSize(24, 24))
        
        # Widget regisztr√°ci√≥ THEMEMANAGER-hez
        register_widget_for_theming(self.toolbar, "navigation")
        
        # === NAVIG√ÅCI√ìS AKCI√ìK - 5 TAB VERZI√ì ===
        
        # üèôÔ∏è Pontszer≈± Elemz√©s (K√ñZPONTI N√âZET)
        self.single_city_action = QAction("V√°ros Elemz√©s", self)
        self.single_city_action.setToolTip("Egyetlen v√°ros r√©szletes id≈ëj√°r√°si elemz√©se")
        self.single_city_action.triggered.connect(lambda: self._switch_view("single_city"))
        self.single_city_action.setCheckable(True)
        self.single_city_action.setChecked(True)
        self.toolbar.addAction(self.single_city_action)
        
        # üìä Analytics (REFAKTOR√ÅLT FUNKCI√ì)
        self.analytics_action = QAction("Analitika", self)
        self.analytics_action.setToolTip("Id≈ëj√°r√°si elemz√©sek √©s statisztik√°k")
        self.analytics_action.triggered.connect(lambda: self._switch_view("analytics"))
        self.analytics_action.setCheckable(True)
        self.toolbar.addAction(self.analytics_action)
        
        # üìà Trend Elemz≈ë
        self.trend_action = QAction("Trend Elemz√©s", self)
        self.trend_action.setToolTip("Hossz√∫ t√°v√∫ klimatikus trendek elemz√©se")
        self.trend_action.triggered.connect(lambda: self._switch_view("trend_analysis"))
        self.trend_action.setCheckable(True)
        self.toolbar.addAction(self.trend_action)
        
        # üó∫Ô∏è Interakt√≠v T√©rk√©p
        self.map_action = QAction("T√©rk√©p", self)
        self.map_action.setToolTip("Interakt√≠v id≈ëj√°r√°si t√©rk√©p magyar megy√©kkel")
        self.map_action.triggered.connect(lambda: self._switch_view("map_view"))
        self.map_action.setCheckable(True)
        self.toolbar.addAction(self.map_action)
        
        self.toolbar.addSeparator()
        
        # ‚öôÔ∏è Be√°ll√≠t√°sok
        self.settings_action = QAction("Be√°ll√≠t√°sok", self)
        self.settings_action.setToolTip("Alkalmaz√°s be√°ll√≠t√°sok")
        self.settings_action.triggered.connect(lambda: self._switch_view("settings"))
        self.settings_action.setCheckable(True)
        self.toolbar.addAction(self.settings_action)
        
        # === AKCI√ìK CSOPORTOS√çT√ÅSA ===
        
        self.view_action_group = QActionGroup(self)
        self.view_action_group.addAction(self.single_city_action)
        self.view_action_group.addAction(self.analytics_action)
        self.view_action_group.addAction(self.trend_action)
        self.view_action_group.addAction(self.map_action)
        self.view_action_group.addAction(self.settings_action)
        
        # Eszk√∂zt√°r hozz√°ad√°sa az ablakhoz
        self.addToolBar(Qt.TopToolBarArea, self.toolbar)
    
    def _init_stacked_views(self) -> None:
        """QStackedWidget inicializ√°l√°sa k√ºl√∂nb√∂z≈ë n√©zetekkel - 5 N√âZET."""
        # K√∂zponti widget √©s layout
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # Widget regisztr√°ci√≥
        register_widget_for_theming(central_widget, "container")
        
        main_layout = QVBoxLayout(central_widget)
        main_layout.setContentsMargins(5, 5, 5, 5)
        main_layout.setSpacing(0)
        
        # === STACKED WIDGET L√âTREHOZ√ÅSA ===
        
        self.stacked_widget = QStackedWidget()
        register_widget_for_theming(self.stacked_widget, "container")
        main_layout.addWidget(self.stacked_widget)
        
        # === VIEW-K L√âTREHOZ√ÅSA - 5 N√âZET VERZI√ì ===
        
        # 1. Single City View (K√ñZPONTI FUNKCIONALIT√ÅS)
        single_city_view = self._create_single_city_view()
        self.stacked_widget.addWidget(single_city_view)  # INDEX 0
        
        # 2. Analytics View (REFAKTOR√ÅLT VERZI√ì)
        analytics_view = self._create_analytics_view()
        self.stacked_widget.addWidget(analytics_view)  # INDEX 1
        
        # 3. Trend Analysis View
        trend_view = self._create_trend_analysis_view()
        self.stacked_widget.addWidget(trend_view)  # INDEX 2
        
        # 4. Map View
        map_view = self._create_hungarian_map_view()
        self.stacked_widget.addWidget(map_view)  # INDEX 3
        
        # 5. Settings View
        settings_view = self._create_settings_placeholder()
        self.stacked_widget.addWidget(settings_view)  # INDEX 4
        
        # === ALAP√âRTELMEZETT N√âZET BE√ÅLL√çT√ÅSA ===
        
        self.stacked_widget.setCurrentIndex(0)  # Single City View alap√©rtelmezett
    
    def _create_single_city_view(self) -> QWidget:
        """Single City View l√©trehoz√°sa."""
        print("üîß DEBUG: Creating Single City View...")
        
        view = QWidget()
        register_widget_for_theming(view, "container")
        
        layout = QVBoxLayout(view)
        layout.setContentsMargins(2, 2, 2, 2)
        layout.setSpacing(0)
        
        # === SPLITTER ===
        
        main_splitter = QSplitter(Qt.Horizontal)
        
        print("üîß DEBUG: Configuring splitter...")
        
        # Splitter be√°ll√≠t√°sok
        main_splitter.setHandleWidth(18)
        main_splitter.setChildrenCollapsible(False)
        main_splitter.setOpaqueResize(True)
        
        # Splitter widget regisztr√°ci√≥ THEMEMANAGER-hez
        register_widget_for_theming(main_splitter, "splitter")
        
        # === BAL OLDAL: CONTROL PANEL ===
        
        print("üéõÔ∏è DEBUG: Creating ControlPanel...")
        self.control_panel = ControlPanel(self.worker_manager)
        
        # Control panel widget regisztr√°ci√≥
        register_widget_for_theming(self.control_panel, "container")
        
        # Size constraints
        self.control_panel.setMinimumWidth(320)
        self.control_panel.setMaximumWidth(520)
        self.control_panel.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Expanding)
        
        main_splitter.addWidget(self.control_panel)
        print(f"‚úÖ DEBUG: ControlPanel added")
        
        # === JOBB OLDAL: RESULTS PANEL ===
        
        print("üìä DEBUG: Creating ResultsPanel...")
        self.results_panel = ResultsPanel()
        
        # Results panel widget regisztr√°ci√≥
        register_widget_for_theming(self.results_panel, "container")
        
        # Results panel constraints
        self.results_panel.setMinimumWidth(450)
        self.results_panel.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        
        main_splitter.addWidget(self.results_panel)
        print("‚úÖ DEBUG: ResultsPanel added")
        
        # === STRETCH FACTOR KONFIGUR√ÅCI√ìK ===
        
        print("üîß DEBUG: Setting stretch factors...")
        
        # Stretch factor be√°ll√≠t√°s:
        # 0 = Control Panel (fix sz√©less√©g 320-520px k√∂z√∂tt)
        # 1 = Results Panel (kit√∂lti a teljes marad√©k helyet)
        main_splitter.setStretchFactor(0, 0)
        main_splitter.setStretchFactor(1, 1)
        
        print("‚úÖ DEBUG: Stretch factors set")
        
        # === INITIAL SIZES ===
        
        # Kezdeti m√©retek
        total_width = 1400
        control_width = 420
        results_width = total_width - control_width - 20
        
        main_splitter.setSizes([control_width, results_width])
        
        print(f"‚úÖ DEBUG: Initial sizes set - Control: {control_width}px, Results: {results_width}px")
        
        # === LAYOUT FINALIZ√ÅL√ÅS ===
        
        layout.addWidget(main_splitter)
        
        print("üîß DEBUG: Single City View created")
        
        return view
    
    def _create_analytics_view(self) -> QWidget:
        """Analytics View l√©trehoz√°sa - REFAKTOR√ÅLT IMPLEMENT√ÅCI√ì + THEMEMANAGER + SIGNAL INTEGRATION."""
        print("üìä DEBUG: Creating REFAKTOR√ÅLT AnalyticsView with ThemeManager + Signal Integration...")
        
        # Refaktor√°lt AnalyticsView l√©trehoz√°sa
        self.analytics_panel = AnalyticsView()  # üîß REFAKTOR√ÅLT VERZI√ì
        
        # üé® WIDGET REGISZTR√ÅCI√ì
        register_widget_for_theming(self.analytics_panel, "container")
        
        print("‚úÖ DEBUG: REFAKTOR√ÅLT AnalyticsView created with ThemeManager + Signal Integration")
        return self.analytics_panel
    
    def _create_trend_analysis_view(self) -> QWidget:
        """üìà Trend Analysis view l√©trehoz√°sa - VAL√ìDI TRENDANALYTICSTAB KOMPONENS + THEMEMANAGER."""
        print("üìà DEBUG: Creating real TrendAnalyticsTab component with ThemeManager...")
        
        # Val√≥di TrendAnalyticsTab komponens l√©trehoz√°sa
        self.trend_analytics_tab = TrendAnalyticsTab()
        
        # üé® WIDGET REGISZTR√ÅCI√ì THEMEMANAGER-HEZ
        register_widget_for_theming(self.trend_analytics_tab, "container")
        
        print("‚úÖ DEBUG: Real TrendAnalyticsTab component created with ThemeManager")
        return self.trend_analytics_tab
    
    def _create_hungarian_map_view(self) -> QWidget:
        """üå§Ô∏è Hungarian Map view l√©trehoz√°sa - VAL√ìDI HUNGARIAN MAP TAB KOMPONENS + THEMEMANAGER + WEATHER INTEGRATION + MAGYAR MEGY√âK AUTOMATIKUS INTEGR√ÅCI√ìJA."""
        print("üå§Ô∏è DEBUG: Creating real HungarianMapTab component with ThemeManager + Weather Integration + Magyar Megy√©k...")
        
        # Val√≥di HungarianMapTab komponens l√©trehoz√°sa
        self.hungarian_map_tab = HungarianMapTab()
        
        # üé® WIDGET REGISZTR√ÅCI√ì THEMEMANAGER-HEZ
        register_widget_for_theming(self.hungarian_map_tab, "container")
        
        # üó∫Ô∏è KRITIKUS: MAGYAR MEGY√âK AUTOMATIKUS KONFIGUR√ÅL√ÅSA MOST HOGY A KOMPONENS L√âTEZIK
        if self.counties_geodataframe is not None:
            print("üó∫Ô∏è DEBUG: HungarianMapTab l√©tezik - megy√©k automatikus konfigur√°l√°sa...")
            self._configure_hungarian_map_with_counties()
        else:
            print("‚ö†Ô∏è DEBUG: Counties m√©g nincsenek bet√∂ltve a HungarianMapTab l√©trehoz√°sakor")
        
        print("‚úÖ DEBUG: Real HungarianMapTab component created with ThemeManager + Weather Integration + Magyar Megy√©k")
        return self.hungarian_map_tab
    
    def _create_settings_placeholder(self) -> QWidget:
        """Settings view placeholder l√©trehoz√°sa + THEMEMANAGER."""
        view = QWidget()
        register_widget_for_theming(view, "container")
        layout = QVBoxLayout(view)
        
        placeholder = self._create_placeholder_content(
            "Be√°ll√≠t√°sok",
            "Fejleszt√©s alatt - F√ÅZIS 8",
            [
                "‚Ä¢ Alkalmaz√°s be√°ll√≠t√°sok k√∂zpontos√≠t√°sa",
                "‚Ä¢ API konfigur√°ci√≥k",
                "‚Ä¢ T√©ma √©s megjelen√©s be√°ll√≠t√°sok",
                "‚Ä¢ Nyelvi be√°ll√≠t√°sok",
                "‚Ä¢ Export preferenci√°k"
            ]
        )
        layout.addWidget(placeholder)
        
        return view
    
    def _create_placeholder_content(self, title: str, subtitle: str, features: list) -> QWidget:
        """Egys√©ges placeholder tartalom l√©trehoz√°sa + THEMEMANAGER."""
        placeholder = QWidget()
        register_widget_for_theming(placeholder, "container")
        
        layout = QVBoxLayout(placeholder)
        layout.setAlignment(Qt.AlignCenter)
        layout.setSpacing(15)
        
        # F≈ëc√≠m
        title_label = QLabel(title)
        title_label.setAlignment(Qt.AlignCenter)
        register_widget_for_theming(title_label, "text")
        layout.addWidget(title_label)
        
        # Alc√≠m
        subtitle_label = QLabel(subtitle)
        subtitle_label.setAlignment(Qt.AlignCenter)
        register_widget_for_theming(subtitle_label, "text")
        layout.addWidget(subtitle_label)
        
        # Funkci√≥k list√°ja
        features_widget = QWidget()
        register_widget_for_theming(features_widget, "text")
        features_layout = QVBoxLayout(features_widget)
        
        for feature in features:
            feature_label = QLabel(feature)
            feature_label.setAlignment(Qt.AlignLeft)
            register_widget_for_theming(feature_label, "text")
            features_layout.addWidget(feature_label)
        
        layout.addWidget(features_widget)
        
        return placeholder
    
    def _switch_view(self, view_name: str) -> None:
        """N√©zet v√°lt√°s kezel√©se - üó∫Ô∏è 5 N√âZET VERZI√ì."""
        print(f"üîÑ DEBUG: Switching to view: {view_name}")
        
        # View index mapping - 5 N√âZET
        view_indices = {
            "single_city": 0,    # SINGLE CITY K√ñZPONTI N√âZET
            "analytics": 1,      # REFAKTOR√ÅLT ANALYTICS VIEW
            "trend_analysis": 2, # üìà VAL√ìDI TREND ANALYTICS TAB
            "map_view": 3,       # üå§Ô∏è VAL√ìDI HUNGARIAN MAP TAB + MAGYAR MEGY√âK
            "settings": 4
        }
        
        if view_name not in view_indices:
            print(f"‚ö†Ô∏è DEBUG: Unknown view name: {view_name}")
            return
        
        # N√©zet v√°lt√°s
        self.current_view_name = view_name
        view_index = view_indices[view_name]
        self.stacked_widget.setCurrentIndex(view_index)
        
        print(f"‚úÖ DEBUG: View switched to: {view_name} (index: {view_index})")
    
    def _init_menu_bar(self) -> None:
        """Men√ºs√°v inicializ√°l√°sa - üó∫Ô∏è MAGYAR MEGY√âK VERZI√ì."""
        menubar = self.menuBar()
        register_widget_for_theming(menubar, "navigation")
        
        # === F√ÅJL MEN√ú ===
        file_menu = menubar.addMenu("üìÑ F√°jl")
        
        # Export akci√≥
        export_action = QAction("üìä Adatok export√°l√°sa...", self)
        export_action.setShortcut("Ctrl+E")
        export_action.triggered.connect(self._export_data)
        export_action.setEnabled(False)  # Kezdetben letiltva
        file_menu.addAction(export_action)
        self.export_action = export_action
        
        file_menu.addSeparator()
        
        # Kil√©p√©s akci√≥
        exit_action = QAction("üö™ Kil√©p√©s", self)
        exit_action.setShortcut("Ctrl+Q")
        exit_action.triggered.connect(self.close)
        file_menu.addAction(exit_action)
        
        # === N√âZET MEN√ú ===
        view_menu = menubar.addMenu("üëÅÔ∏è N√©zet")
        
        # Navig√°ci√≥ - 5 TAB
        view_menu.addAction(self.single_city_action)
        view_menu.addAction(self.analytics_action)
        view_menu.addAction(self.trend_action)  # üìà VAL√ìDI TREND ANALYTICS
        view_menu.addAction(self.map_action)  # üéâ MULTI-CITY R√âGI√ì/MEGYE HUNGARIAN MAP TAB + MAGYAR MEGY√âK
        view_menu.addAction(self.settings_action)
        
        view_menu.addSeparator()
        
        # üé® T√âMA V√ÅLT√ÅS - THEMEMANAGER INTEGR√ÅCI√ì
        light_theme_action = QAction("‚òÄÔ∏è Vil√°gos t√©ma", self)
        light_theme_action.triggered.connect(lambda: self._apply_theme(ThemeType.LIGHT))
        view_menu.addAction(light_theme_action)
        
        dark_theme_action = QAction("üåô S√∂t√©t t√©ma", self)
        dark_theme_action.triggered.connect(lambda: self._apply_theme(ThemeType.DARK))
        view_menu.addAction(dark_theme_action)
        
        view_menu.addSeparator()
        
        # Extr√©m id≈ëj√°r√°s ablak
        extreme_action = QAction("‚ö° Extr√©m id≈ëj√°r√°s...", self)
        extreme_action.setShortcut("Ctrl+X")
        extreme_action.triggered.connect(self._show_extreme_weather)
        extreme_action.setEnabled(False)  # Kezdetben letiltva
        view_menu.addAction(extreme_action)
        self.extreme_action = extreme_action
        
        # === S√öG√ì MEN√ú ===
        help_menu = menubar.addMenu("‚ùì S√∫g√≥")
        
        about_action = QAction("‚ÑπÔ∏è N√©vjegy...", self)
        about_action.triggered.connect(self._show_about)
        help_menu.addAction(about_action)
    
    def _init_status_bar_with_provider_display(self) -> None:
        """Status bar inicializ√°l√°sa Provider Display-jel."""
        print("üåç DEBUG: Creating status bar...")
        
        self.status_bar = QStatusBar()
        register_widget_for_theming(self.status_bar, "navigation")
        self.setStatusBar(self.status_bar)
        
        # === üåç PROVIDER STATUS WIDGETS L√âTREHOZ√ÅSA ===
        
        # 1. Provider Status Label
        self.provider_status_label = QLabel("ü§ñ Automatikus routing")
        self.provider_status_label.setToolTip("Akt√≠v adatforr√°s provider")
        register_widget_for_theming(self.provider_status_label, "text")
        self.status_bar.addPermanentWidget(self.provider_status_label)
        
        # 2. Usage Status Label  
        self.usage_status_label = QLabel("üíé 0/10000 (0%)")
        self.usage_status_label.setToolTip("API haszn√°lat statisztika")
        register_widget_for_theming(self.usage_status_label, "text")
        self.status_bar.addPermanentWidget(self.usage_status_label)
        
        # 3. Cost Status Label
        self.cost_status_label = QLabel("üí∞ $0.00/h√≥")
        self.cost_status_label.setToolTip("Becs√ºlt havi k√∂lts√©g")
        register_widget_for_theming(self.cost_status_label, "text")
        self.status_bar.addPermanentWidget(self.cost_status_label)
        
        # === KEZDETI PROVIDER STATUS ===
        
        self.status_bar.showMessage("‚úÖ ANALYTICS VIEW SIGNAL FIX + MAGYAR MEGY√âK AUTOMATIKUS INTEGR√ÅCI√ìJA + PROVIDER STATUS!")
        
        # Provider info inicializ√°l√°sa
        self._initialize_provider_status()
        
        print("‚úÖ DEBUG: Status bar created")
    
    # === üßπ CLEAN SIGNAL CHAIN + ANALYTICS SIGNAL FIX + üåç PROVIDER STATUS SIGNALS ===
    
    def _connect_mvc_signals_clean_with_city_analysis_fix(self) -> None:
        """
        üö® KRITIKUS: CLEAN MVC komponensek signal-slot √∂sszek√∂t√©se + ANALYTICS SIGNAL FIX + üåç PROVIDER STATUS SIGNALS!
        """
        
        print("üîó DEBUG: Starting CLEAN signals + ANALYTICS SIGNAL FIX + PROVIDER STATUS...")
        
        # === üéØ K√ñZPONTI KAPCSOLAT: CONTROLPANEL ‚Üí APPCONTROLLER ===
        
        print("üéØ DEBUG: Setting up CENTRAL connection: ControlPanel ‚Üí AppController...")
        
        if self.control_panel:
            # üöÄ KRITIKUS: Egyetlen k√∂zponti kapcsolat - minden elemz√©si k√©r√©st az AppController kezel
            if hasattr(self.control_panel, 'analysis_requested'):
                self.control_panel.analysis_requested.connect(
                    self.controller.handle_analysis_request
                )
                print("‚úÖ CLEAN: ControlPanel.analysis_requested ‚Üí AppController.handle_analysis_request CONNECTED")
            else:
                print("‚ö†Ô∏è DEBUG: ControlPanel.analysis_requested signal NOT FOUND!")
            
            # üõ† MEGSZAK√çT√ÅS GOMB BEK√ñT√âSE
            if hasattr(self.control_panel, 'cancel_requested'):
                self.control_panel.cancel_requested.connect(
                    self.controller.stop_current_analysis
                )
                print("‚úÖ CLEAN: ControlPanel.cancel_requested ‚Üí AppController.stop_current_analysis CONNECTED")
            else:
                print("‚ö†Ô∏è DEBUG: ControlPanel.cancel_requested signal NOT FOUND!")
        else:
            print("‚ö†Ô∏è DEBUG: ControlPanel is None!")
        
        # === üì° APPCONTROLLER √âLETCIKLUS JELEK FIGYEL√âSE + üéØ V√ÅROS ELEMZ√âS ADATFOLYAM FIX ===
        
        print("üì° DEBUG: Connecting AppController lifecycle signals + V√ÅROS ELEMZ√âS ADATFOLYAM FIX...")
        
        # Elemz√©s indul√°sa
        if hasattr(self.controller, 'analysis_started'):
            self.controller.analysis_started.connect(self._on_analysis_started)
            print("‚úÖ CLEAN: AppController.analysis_started ‚Üí MainWindow._on_analysis_started CONNECTED")
        
        # üéØ KRITIKUS: Elemz√©s befejez√©se (SIKER) - V√ÅROS ELEMZ√âS FIX!
        if hasattr(self.controller, 'analysis_completed'):
            self.controller.analysis_completed.connect(self._on_analysis_completed_with_city_fix)
            print("üéØ ‚úÖ KRITIKUS: AppController.analysis_completed ‚Üí MainWindow._on_analysis_completed_with_city_fix CONNECTED (V√ÅROS ELEMZ√âS FIX)!")
        
        # Elemz√©s hiba
        if hasattr(self.controller, 'analysis_failed'):
            self.controller.analysis_failed.connect(self._on_analysis_failed)
            print("‚úÖ CLEAN: AppController.analysis_failed ‚Üí MainWindow._on_analysis_failed CONNECTED")
        
        # Elemz√©s megszak√≠tva
        if hasattr(self.controller, 'analysis_cancelled'):
            self.controller.analysis_cancelled.connect(self._on_analysis_cancelled)
            print("‚úÖ CLEAN: AppController.analysis_cancelled ‚Üí MainWindow._on_analysis_cancelled CONNECTED")
        
        # Progress friss√≠t√©sek
        if hasattr(self.controller, 'analysis_progress'):
            self.controller.analysis_progress.connect(self._update_progress_clean)
            print("‚úÖ CLEAN: AppController.analysis_progress ‚Üí MainWindow._update_progress_clean CONNECTED")
        
        # === üö® KRITIKUS: ANALYTICS VIEW SIGNAL HANDLING VISSZA√ÅLL√çT√ÅSA ===
        
        if self.analytics_panel:
            print("üö® DEBUG: ANALYTICS SIGNAL HANDLING VISSZA√ÅLL√çT√ÅSA...")
            
            # üö® KRITIKUS: Analytics View multi_city_query_requested signal
            if hasattr(self.analytics_panel, 'multi_city_query_requested'):
                def debug_analytics_multi_city_query_requested(query_type: str, region_name: str):
                    print(f"üö® DEBUG [ANALYTICS‚ÜíMAIN_WINDOW]: multi_city_query_requested: {query_type}, {region_name}")
                
                self.analytics_panel.multi_city_query_requested.connect(debug_analytics_multi_city_query_requested)
                self.analytics_panel.multi_city_query_requested.connect(
                    self._handle_analytics_view_query
                )
                print("üö® ‚úÖ KRITIKUS: AnalyticsView.multi_city_query_requested ‚Üí MainWindow._handle_analytics_view_query CONNECTED!")
            else:
                print("‚ùå DEBUG: AnalyticsView.multi_city_query_requested signal NOT FOUND!")
            
            # Analytics tov√°bbi signalok
            if hasattr(self.analytics_panel, 'analysis_started'):
                self.analytics_panel.analysis_started.connect(
                    lambda: self.status_bar.showMessage("üìä Analytics elemz√©s folyamatban...")
                )
                print("‚úÖ DEBUG: AnalyticsView.analysis_started signal connected")
            
            if hasattr(self.analytics_panel, 'error_occurred'):
                self.analytics_panel.error_occurred.connect(
                    lambda msg: self.status_bar.showMessage(f"‚ùå Analytics hiba: {msg}")
                )
                print("‚úÖ DEBUG: AnalyticsView.error_occurred signal connected")
        else:
            print("‚ùå DEBUG: Analytics panel is None - signalok nem kapcsol√≥dnak!")
        
        # === üåç PROVIDER STATUS SIGNALOK ===
        
        print("üåç DEBUG: Connecting Provider Status signals...")
        
        # Provider v√°lt√°s
        self.controller.provider_selected.connect(self._on_provider_selected)
        print("‚úÖ DEBUG: Controller.provider_selected ‚Üí MainWindow._on_provider_selected CONNECTED")
        
        # Usage statistics friss√≠t√©se
        self.controller.provider_usage_updated.connect(self._on_provider_usage_updated)
        print("‚úÖ DEBUG: Controller.provider_usage_updated ‚Üí MainWindow._on_provider_usage_updated CONNECTED")
        
        # Warning events
        self.controller.provider_warning.connect(self._on_provider_warning)
        print("‚úÖ DEBUG: Controller.provider_warning ‚Üí MainWindow._on_provider_warning CONNECTED")
        
        # Fallback notifications
        self.controller.provider_fallback.connect(self._on_provider_fallback)
        print("‚úÖ DEBUG: Controller.provider_fallback ‚Üí MainWindow._on_provider_fallback CONNECTED")
        
        # === üìä RESULTS PANEL SIGNALOK (EGYSZER≈∞S√çTVE) ===
        
        if self.results_panel:
            # Export k√©r√©sek
            self.results_panel.export_requested.connect(self._handle_export_request)
            print("‚úÖ DEBUG: ResultsPanel.export_requested ‚Üí MainWindow._handle_export_request CONNECTED")
            
            # Extr√©m id≈ëj√°r√°s k√©r√©sek
            self.results_panel.extreme_weather_requested.connect(self._show_extreme_weather)
            print("‚úÖ DEBUG: ResultsPanel.extreme_weather_requested ‚Üí MainWindow._show_extreme_weather CONNECTED")
        
        # === üé® T√âMA SIGNALOK - THEMEMANAGER INTEGR√ÅCI√ì ===
        
        self.theme_changed.connect(self._propagate_theme_change)
        print("‚úÖ DEBUG: MainWindow.theme_changed ‚Üí MainWindow._propagate_theme_change CONNECTED")
        
        print("üö® ‚úÖ DEBUG: ALL CLEAN signals connected successfully + ANALYTICS SIGNAL FIX + PROVIDER STATUS!")
    
    # === üö® ANALYTICS VIEW QUERY HANDLER - VISSZA√ÅLL√çTOTT MET√ìDUS! ===
    
    def _handle_analytics_view_query(self, query_type: str, region_name: str):
        """
        üö® VISSZA√ÅLL√çTVA: Kezeli az AnalyticsView-b≈ël √©rkez≈ë multi-city lek√©rdez√©si k√©r√©seket.
        
        Args:
            query_type: Lek√©rdez√©s t√≠pusa (pl. "hottest_today", "coldest_today")
            region_name: R√©gi√≥ neve (pl. "√âszak-Magyarorsz√°g")
        """
        print(f"üö® DEBUG: _handle_analytics_view_query called (VISSZA√ÅLL√çTVA): {query_type}, {region_name}")
        
        # A megl√©v≈ë, k√∂zponti lek√©rdez≈ë met√≥dus h√≠v√°sa
        # K√©sz√≠t√ºnk egy 'params' dictionary-t, ami kompatibilis a megl√©v≈ë rendszerrel
        params = {
            "query_type": query_type,
            "auto_switch_to_map": False  # Nem v√°ltunk automatikusan f√ºlet
        }
        
        # Mai d√°tum haszn√°lata
        today_str = datetime.now().strftime("%Y-%m-%d")

        # A m√°r megl√©v≈ë, k√∂zponti handler h√≠v√°sa
        self._handle_multi_city_weather_request(
            analysis_type="region", 
            region_id=region_name, 
            start_date=today_str, 
            end_date=today_str, 
            params=params
        )

    def _handle_multi_city_weather_request(self, analysis_type: str, region_id: str, start_date: str, end_date: str, params: dict) -> None:
        """
        üéâ KRITIKUS JAV√çT√ÅS: Multi-City weather request kezel√©se - R√âGI√ì/MEGYE ‚Üí MULTI-CITY ENGINE ‚Üí T√âRK√âP OVERLAY AUTOMATIKUS WORKFLOW + ANALYTICS RESULT K√ñZVETLEN √ÅTAD√ÅS + üîß WINDSPEED METRIC TELJES JAV√çT√ÅS.
        
        Ez a hi√°nyz√≥ 0.1% ami befejezi a teljes multi-city r√©gi√≥/megye t√©rk√©p integr√°ci√≥t!
        A kritikus jav√≠t√°s: AnalyticsResult objektum k√∂zvetlen √°tad√°sa (NO DICT CONVERSION!)
        
        üîß WINDSPEED METRIC JAV√çT√ÅS:
        - QUERY_TYPE_TO_PARAMETER mapping haszn√°lata
        - 2-l√©p√©ses koordin√°ci√≥: param√©ter be√°ll√≠t√°s + adat √°tad√°s
        - Enhanced debug logging minden l√©p√©shez
        
        Args:
            analysis_type: Elemz√©s t√≠pusa ("region" vagy "county")
            region_id: R√©gi√≥/megye azonos√≠t√≥ (pl. "K√∂z√©p-Magyarorsz√°g", "Budapest")
            start_date: Kezd≈ë d√°tum ISO form√°tumban
            end_date: V√©g d√°tum ISO form√°tumban
            params: Tov√°bbi param√©terek dictionary
        """
        print(f"üéâ DEBUG: _handle_multi_city_weather_request called - COMPLETING MULTI-CITY INTEGRATION + WINDSPEED FIX!")
        print(f"üéâ DEBUG: Analysis type: {analysis_type}, Region: '{region_id}', Date range: {start_date} ‚Üí {end_date}")
        print(f"üéâ DEBUG: Params: {params}")
        
        try:
            # Status update - Multi-city lek√©rdez√©s kezd√©se
            self.status_bar.showMessage(f"üéâ Multi-city lek√©rdez√©s ind√≠t√°sa: {region_id} ({analysis_type})")
            
            # üîß KRITIKUS: Query type meghat√°roz√°sa √©s param√©ter mapping
            query_type = params.get("query_type", "hottest_today")
            limit = params.get("limit", 20)  # Alap√©rtelmezett: 20 v√°ros
            
            print(f"üîß DEBUG: Query type: {query_type}, Limit: {limit}")
            
            # üîß KRITIKUS: 1. L√âP√âS - PARAM√âTER BE√ÅLL√çT√ÅS A T√âRK√âPEN
            if self.hungarian_map_tab:
                display_parameter = self._map_query_type_to_parameter(query_type)
                print(f"üîß DEBUG: 1. L√âP√âS - Setting analytics parameter on map: {display_parameter}")
                
                if hasattr(self.hungarian_map_tab, 'set_analytics_parameter'):
                    self.hungarian_map_tab.set_analytics_parameter(display_parameter)
                    print(f"‚úÖ DEBUG: Analytics parameter set successfully: {display_parameter}")
                else:
                    print("‚ö†Ô∏è DEBUG: HungarianMapTab.set_analytics_parameter method not found!")
            
            # 1. Multi-City Engine p√©ld√°nyos√≠t√°s/haszn√°lat
            print("üéâ DEBUG: Importing Multi-City Engine...")
            from src.analytics.multi_city_engine import MultiCityEngine
            
            engine = MultiCityEngine()
            print("‚úÖ DEBUG: Multi-City Engine instance created")
            
            print(f"üéâ DEBUG: Running multi-city analysis - Query: {query_type}, Limit: {limit}")
            
            # 2. Multi-city elemz√©s futtat√°sa
            result = engine.analyze_multi_city(
                query_type,
                region_id,
                start_date,
                limit=limit
            )
            
            # üîß KRITIKUS JAV√çT√ÅS: RESULT TYPE ELLEN≈êRZ√âS √âS HIBAKEZEL√âS
            if not hasattr(result, 'city_results'):
                print(f"‚ùå DEBUG: Multi-city engine returned invalid result type: {type(result)}")
                error_msg = f"Multi-city engine hib√°s eredm√©ny t√≠pus: {type(result)}"
                self.status_bar.showMessage(f"‚ùå {error_msg}")
                self._show_error(error_msg)
                return
            
            print(f"‚úÖ DEBUG: Multi-city analysis completed - {len(result.city_results)} results")
            print(f"üîß DEBUG: Result type: {type(result)}, has city_results: {hasattr(result, 'city_results')}")
            
            # 3. OPCION√ÅLIS: city_results logging c√©lokra (de NEM konverzi√≥!)
            print("üéâ DEBUG: Multi-city results summary:")
            for i, city_result in enumerate(result.city_results[:5]):  # Els≈ë 5 a loghoz
                print(f"  {i+1}. {city_result.city_name}: {city_result.value} {getattr(city_result.metric, 'value', '')} (rank: {city_result.rank})")
            
            # üîß KRITIKUS: 2. L√âP√âS - ADAT √ÅTAD√ÅS A T√âRK√âPNEK
            if self.hungarian_map_tab and hasattr(self.hungarian_map_tab, 'set_analytics_result'):
                print(f"üîß DEBUG: 2. L√âP√âS - Setting analytics result on map...")
                self.hungarian_map_tab.set_analytics_result(result)
                print("‚úÖ DEBUG: Analytics result set successfully on HungarianMapTab")
            else:
                print("‚ö†Ô∏è DEBUG: HungarianMapTab.set_analytics_result method not found!")
            
            # 4. üî• KRITIKUS JAV√çT√ÅS: EREDM√âNY SZ√âTOSZT√ÅSA MINDEN RELEV√ÅNS N√âZETRE + QUERY TYPE INFORM√ÅCI√ì
            print("üî• DEBUG: Distributing AnalyticsResult to all relevant views...")
            self._on_multi_city_result_ready_for_views(result, query_type)
            
            # 5. Status update - sikeres
            success_message = f"üéâ Multi-city eredm√©ny sz√©tosztva: {len(result.city_results)} v√°ros ({region_id}) [Query: {query_type}]"
            self.status_bar.showMessage(success_message)
            
            # Automatikus t√©rk√©p tab v√°lt√°s (opcion√°lis)
            if params.get("auto_switch_to_map", True):
                print("üéâ DEBUG: Auto-switching to map view...")
                self._switch_view("map_view")
            
            print(f"üîß ‚úÖ DEBUG: WINDSPEED METRIC JAV√çT√ÅS BEFEJEZVE - {query_type} ‚Üí {self._map_query_type_to_parameter(query_type)}")
            
        except ImportError as e:
            print(f"‚ùå DEBUG: Multi-City Engine import error: {e}")
            error_msg = f"Multi-City Engine nem el√©rhet≈ë: {e}"
            self.status_bar.showMessage(f"‚ùå {error_msg}")
            self._show_error(error_msg)
            
        except Exception as e:
            print(f"‚ùå DEBUG: Multi-city request error: {e}")
            import traceback
            traceback.print_exc()
            
            error_msg = f"Multi-city lek√©rdez√©s hiba: {e}"
            self.status_bar.showMessage(f"‚ùå {error_msg}")
            self._show_error(error_msg)
        
        print("üéâ DEBUG: _handle_multi_city_weather_request completed - MULTI-CITY INTEGRATION + WINDSPEED FIX FINISHED!")

    def _on_multi_city_result_ready_for_views(self, result: 'AnalyticsResult', query_type: str = "hottest_today"):
        """
        üî• √öJ: Sz√©tosztja a multi-city elemz√©s eredm√©ny√©t a relev√°ns n√©zeteknek + QUERY TYPE INFORM√ÅCI√ì.
        Ezt a _handle_multi_city_weather_request h√≠vja meg a v√©g√©n.
        
        Args:
            result: AnalyticsResult objektum a Multi-City Engine-b≈ël
            query_type: Lek√©rdez√©s t√≠pusa (pl. "windiest_today", "hottest_today")
        """
        print(f"üî• DEBUG: _on_multi_city_result_ready_for_views called - sz√©toszt√°s a n√©zeteknek (query_type: {query_type})...")
        
        try:
            # Eredm√©ny k√ºld√©se a T√©rk√©pnek + QUERY TYPE INFO
            if self.hungarian_map_tab and hasattr(self.hungarian_map_tab, 'set_analytics_result'):
                # üîß KRITIKUS: Query type alap√∫ param√©ter meghat√°roz√°sa
                analytics_parameter = self._map_query_type_to_parameter(query_type)
                print(f"üîß DEBUG: Mapped query_type '{query_type}' to parameter '{analytics_parameter}'")
                
                # üö® √öJ: Param√©ter be√°ll√≠t√°sa a t√©rk√©pen MIEL≈êTT az eredm√©nyt √°tadjuk
                if hasattr(self.hungarian_map_tab, 'set_analytics_parameter'):
                    self.hungarian_map_tab.set_analytics_parameter(analytics_parameter)
                    print(f"‚úÖ DEBUG: Analytics parameter set on HungarianMapTab: {analytics_parameter}")
                
                # Eredm√©ny √°tad√°sa
                self.hungarian_map_tab.set_analytics_result(result)
                print("  -> Eredm√©ny elk√ºldve a HungarianMapTab-nek (with query type info).")

            # Eredm√©ny k√ºld√©se az Analitika n√©zetnek
            if self.analytics_panel and hasattr(self.analytics_panel, 'update_with_multi_city_result'):
                self.analytics_panel.update_with_multi_city_result(result)
                print("  -> Eredm√©ny elk√ºldve az AnalyticsView-nak.")
                
            print("‚úÖ DEBUG: Multi-city result distribution completed (with query type)")
            
        except Exception as e:
            print(f"‚ùå DEBUG: Multi-city result distribution error: {e}")
            self._show_error(f"Multi-city eredm√©ny sz√©toszt√°si hiba: {e}")
    
    def _map_query_type_to_parameter(self, query_type: str) -> str:
        """
        üîß √öJ: Query type lek√©pez√©se t√©rk√©pi param√©terre.
        
        Args:
            query_type: Analytics query type (pl. "windiest_today")
            
        Returns:
            T√©rk√©p param√©ter neve (pl. "Sz√©l")
        """
        mapped_param = self.QUERY_TYPE_TO_PARAMETER.get(query_type, "H≈ëm√©rs√©klet")
        print(f"üîß DEBUG: Query type mapping: {query_type} ‚Üí {mapped_param}")
        return mapped_param
    
    # === üì° √öJ: APPCONTROLLER √âLETCIKLUS SLOT MET√ìDUSOK + V√ÅROS ELEMZ√âS ADATFOLYAM FIX ===
    
    def _on_analysis_started(self, analysis_type: str) -> None:
        """
        üöÄ Elemz√©s indul√°s√°nak kezel√©se - √öJ SLOT MET√ìDUS.
        
        Args:
            analysis_type: Elemz√©s t√≠pusa (pl. "single_city", "multi_city", "trend_analysis")
        """
        print(f"üöÄ DEBUG: _on_analysis_started called: {analysis_type}")
        
        # St√°tusz friss√≠t√©se
        type_names = {
            "single_city": "V√°ros elemz√©s",
            "multi_city": "Multi-city elemz√©s", 
            "trend_analysis": "Trend elemz√©s",
            "analytics": "Analitika elemz√©s"
        }
        
        type_name = type_names.get(analysis_type, analysis_type)
        self.status_bar.showMessage(f"üöÄ {type_name} folyamatban...")
        
        # UI elemek letilt√°sa (opcion√°lis)
        # P√©ld√°ul: export men√º letilt√°sa elemz√©s k√∂zben
        if hasattr(self, 'export_action'):
            self.export_action.setEnabled(False)
        
        print(f"‚úÖ DEBUG: Analysis start handled: {analysis_type}")
    
    def _on_analysis_completed_with_city_fix(self, result_data: Dict[str, Any]) -> None:
        """
        üéØ KRITIKUS JAV√çT√ÅS: Elemz√©s sikeres befejez√©s√©nek kezel√©se - DUPLA KONVERZI√ì JAV√çTVA!
        
        Az AnalysisWorker m√°r t√∂k√©letesen konvert√°lta List[Dict] ‚Üí Dict[List] form√°tumra!
        A MainWindow NEM konvert√°l √∫jra, hanem K√ñZVETLEN√úL haszn√°lja az eredm√©nyt!
        
        Args:
            result_data: Elemz√©s eredm√©nye (kontextust√≥l f√ºgg≈ë strukt√∫ra)
        """
        print(f"üéØ KRITIKUS DEBUG: _on_analysis_completed_with_city_fix called - DUPLA KONVERZI√ì JAV√çTVA!")
        print(f"üéØ DEBUG: Result keys: {list(result_data.keys()) if result_data else 'NO RESULT'}")
        
        try:
            # Elemz√©s t√≠pus√°nak meghat√°roz√°sa
            analysis_type = result_data.get('analysis_type', 'unknown')
            print(f"üéØ DEBUG: Analysis type detected: {analysis_type}")
            
            # St√°tusz friss√≠t√©se
            self.status_bar.showMessage(f"‚úÖ {analysis_type.title()} elemz√©s befejezve")
            
            # UI elemek enged√©lyez√©se
            if hasattr(self, 'export_action'):
                self.export_action.setEnabled(True)
            
            # === üéØ KRITIKUS: EREDM√âNY TOV√ÅBB√çT√ÅSA A MEGFELEL≈ê N√âZETEKNEK - DUPLA KONVERZI√ì JAV√çTVA! ===
            
            if analysis_type in ["single_city", "single_location"]:
                print("üéØ KRITIKUS: Single city/location analysis detected - DUPLA KONVERZI√ì JAV√çTVA!")
                
                # üéØ KRITIKUS FIX: Az AnalysisWorker m√°r Dict[List] form√°tumban adja vissza az eredm√©nyt!
                weather_data = result_data.get('result_data', {})
                print(f"üéØ DEBUG: Weather data type: {type(weather_data)}")
                print(f"üéØ DEBUG: Weather data keys: {list(weather_data.keys()) if isinstance(weather_data, dict) else 'NOT DICT'}")
                
                # ELLEN≈êRZ√âS: Az AnalysisWorker eredm√©nye m√°r Dict[List] form√°tumban van
                if isinstance(weather_data, dict) and 'daily' in weather_data:
                    print("üéØ ‚úÖ KRITIKUS: AnalysisWorker eredm√©nye HELYES Dict[List] form√°tumban!")
                    print(f"üéØ DEBUG: Daily keys: {list(weather_data['daily'].keys())}")
                    
                    # Location adatok kinyer√©se
                    city_name = result_data.get('request_data', {}).get('location_name', 'Moscow')
                    location_data = {
                        'name': city_name,
                        'latitude': result_data.get('request_data', {}).get('latitude', 55.7558),
                        'longitude': result_data.get('request_data', {}).get('longitude', 37.6178)
                    }
                    
                    print(f"üéØ DEBUG: City: {city_name}")
                    print(f"üéØ DEBUG: Location data: {location_data}")
                    
                    # üéØ KRITIKUS FIX: RESULTS PANEL FRISS√çT√âSE (K√ñZVETLEN Dict[List] form√°tum)
                    if self.results_panel:
                        print("üéØ KRITIKUS: Updating ResultsPanel with DIRECT weather data...")
                        try:
                            self.results_panel.update_data(weather_data, city_name)
                            print("‚úÖ KRITIKUS: ResultsPanel updated successfully!")
                        except Exception as e:
                            print(f"‚ùå KRITIKUS: ResultsPanel update error: {e}")
                            import traceback
                            traceback.print_exc()
                    
                    # üéØ KRITIKUS FIX: ANALYTICS PANEL AUTOMATIKUS FRISS√çT√âSE (K√ñZVETLEN Dict[List] form√°tum)
                    if self.analytics_panel:
                        print("üéØ KRITIKUS: Updating AnalyticsView with DIRECT weather data - DUPLA KONVERZI√ì JAV√çTVA!")
                        try:
                            # Location inform√°ci√≥ hozz√°ad√°sa ha el√©rhet≈ë
                            if location_data:
                                self.analytics_panel.on_location_changed(location_data)
                            
                            # Weather data friss√≠t√©se - K√ñZVETLEN haszn√°lat, NINCS konverzi√≥!
                            self.analytics_panel.update_data(weather_data)
                            print("‚úÖ KRITIKUS: AnalyticsView updated successfully - DUPLA KONVERZI√ì JAV√çTVA!")
                        except Exception as e:
                            print(f"‚ùå KRITIKUS: AnalyticsView update error: {e}")
                            import traceback
                            traceback.print_exc()
                    else:
                        print(f"‚ùå KRITIKUS: AnalyticsView update skipped - analytics_panel: {self.analytics_panel is not None}")
                        
                else:
                    print("‚ùå KRITIKUS: Invalid weather data format - expected Dict[List] from AnalysisWorker")
                    print(f"‚ùå DEBUG: Received type: {type(weather_data)}")
                    if isinstance(weather_data, dict):
                        print(f"‚ùå DEBUG: Dict keys: {list(weather_data.keys())}")
            
            print(f"‚úÖ DEBUG: Analysis completion handled: {analysis_type}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è DEBUG: Analysis completion handling error: {e}")
            import traceback
            traceback.print_exc()
            self._show_error(f"Eredm√©ny feldolgoz√°si hiba: {e}")
    
    def _on_analysis_failed(self, error_message: str) -> None:
        """
        üîß HOTFIX: Elemz√©s sikertelen befejez√©s√©nek kezel√©se - HI√ÅNYZ√ì MET√ìDUS HOZZ√ÅADVA!
        
        Args:
            error_message: Hiba √ºzenet az elemz√©s sikertelens√©g√©r≈ël
        """
        print(f"‚ùå DEBUG: _on_analysis_failed called: {error_message}")
        
        # St√°tusz friss√≠t√©se
        self.status_bar.showMessage(f"‚ùå Elemz√©s sikertelen: {error_message}")
        
        # UI elemek vissza√°ll√≠t√°sa alaphelyzetbe
        if hasattr(self, 'export_action'):
            self.export_action.setEnabled(False)
        
        # Hiba √ºzenet megjelen√≠t√©se felhaszn√°l√≥nak
        self._show_error(f"Elemz√©si hiba: {error_message}")
        
        print("‚úÖ DEBUG: Analysis failure handled")
    
    def _on_analysis_cancelled(self) -> None:
        """üõ† Elemz√©s megszak√≠t√°s kezel√©se - √öJ SLOT MET√ìDUS."""
        print("üõ† DEBUG: _on_analysis_cancelled called")
        
        # St√°tusz friss√≠t√©se
        self.status_bar.showMessage("üõ† Elemz√©s megszak√≠tva")
        
        # UI elemek vissza√°ll√≠t√°sa alaphelyzetbe
        if hasattr(self, 'export_action'):
            self.export_action.setEnabled(False)
        
        print("‚úÖ DEBUG: Analysis cancellation handled")
    
    def _update_progress_clean(self, progress: int, message: str = "") -> None:
        """üìä Progress friss√≠t√©se - CLEAN verzi√≥."""
        if message:
            self.status_bar.showMessage(f"‚è≥ {message} ({progress}%)")
        else:
            self.status_bar.showMessage(f"‚è≥ Folyamatban: {progress}%")
        
        print(f"üìä DEBUG: Progress updated: {progress}% - {message}")
    
    # === üåç PROVIDER STATUS SLOT MET√ìDUSOK ===
    
    def _on_provider_selected(self, provider_name: str) -> None:
        """üåç Provider kiv√°laszt√°s kezel√©se Controller-t≈ël."""
        print(f"üåç DEBUG: _on_provider_selected called: {provider_name}")
        
        # Provider tracking friss√≠t√©se
        self.current_provider = provider_name
        
        # Status display friss√≠t√©se
        self._update_provider_status_display()
        
        print(f"‚úÖ DEBUG: Provider selection handled: {provider_name}")
    
    def _on_provider_usage_updated(self, usage_stats: Dict[str, Dict[str, Any]]) -> None:
        """üåç Provider usage statistics friss√≠t√©se Controller-t≈ël."""
        print(f"üåç DEBUG: _on_provider_usage_updated called: {len(usage_stats)} providers")
        
        # Usage stats friss√≠t√©se
        self.provider_usage_stats = usage_stats
        
        # Status display friss√≠t√©se
        self._update_provider_status_display()
        
        print(f"‚úÖ DEBUG: Provider usage updated")
    
    def _on_provider_warning(self, provider_name: str, usage_percent: int) -> None:
        """üåç Provider warning kezel√©se Controller-t≈ël."""
        print(f"üåç DEBUG: _on_provider_warning called: {provider_name} {usage_percent}%")
        
        # Warning styling friss√≠t√©se
        if usage_percent >= 95:
            warning_level = "critical"
            warning_message = f"‚ö†Ô∏è {provider_name} limit k√∂zel: {usage_percent}%"
        elif usage_percent >= 80:
            warning_level = "warning"  
            warning_message = f"‚ö†Ô∏è {provider_name} haszn√°lat magas: {usage_percent}%"
        else:
            warning_level = "info"
            warning_message = f"üìä {provider_name} haszn√°lat: {usage_percent}%"
        
        # Warning styling alkalmaz√°sa
        self._apply_warning_styling(warning_level)
        
        # Status bar message
        self.status_bar.showMessage(warning_message)
        
        print(f"‚úÖ DEBUG: Provider warning handled: {provider_name} {usage_percent}%")
    
    def _on_provider_fallback(self, from_provider: str, to_provider: str) -> None:
        """üåç Provider fallback notification kezel√©se Controller-t≈ël."""
        print(f"üåç DEBUG: _on_provider_fallback called: {from_provider} ‚Üí {to_provider}")
        
        # Provider tracking friss√≠t√©se
        self.current_provider = to_provider
        
        # Status display friss√≠t√©se
        self._update_provider_status_display()
        
        # Fallback notification message
        from_display = get_source_display_name(from_provider)
        to_display = get_source_display_name(to_provider)
        fallback_message = f"üîÑ Provider fallback: {from_display} ‚Üí {to_display}"
        
        # Status bar message
        self.status_bar.showMessage(fallback_message)
        
        print(f"‚úÖ DEBUG: Provider fallback handled: {from_provider} ‚Üí {to_provider}")
    
    def _initialize_provider_status(self) -> None:
        """üåç Provider status inicializ√°l√°sa - Controller-t≈ël sz√°rmaz√≥ inform√°ci√≥kkal."""
        try:
            print("üåç DEBUG: Initializing provider status...")
            
            # Provider info lek√©rdez√©se a Controller-t≈ël
            provider_info = self.controller.get_provider_info()
            
            self.current_provider = provider_info.get('current_provider', 'auto')
            self.provider_usage_stats = provider_info.get('usage_stats', {})
            
            # Provider status friss√≠t√©se
            self._update_provider_status_display()
            
            print("‚úÖ DEBUG: Provider status initialized")
            
        except Exception as e:
            print(f"‚ö†Ô∏è DEBUG: Provider status initialization error: {e}")
            # Fallback to default values
            self.current_provider = "auto"
            self.provider_usage_stats = {}
            self._update_provider_status_display()
    
    def _update_provider_status_display(self) -> None:
        """üåç Provider status display friss√≠t√©se a status bar-ban."""
        try:
            # 1. Provider Status friss√≠t√©se
            provider_status = format_provider_status(
                self.current_provider, 
                True,  # is_current
                self.provider_usage_stats
            )
            
            provider_icon = get_provider_icon(self.current_provider)
            self.provider_status_label.setText(f"{provider_icon} {provider_status}")
            
            # 2. Usage Status friss√≠t√©se
            if self.current_provider == 'open-meteo':
                usage_text = "üåç Ingyenes (korl√°tlan)"
            elif self.current_provider == 'auto':
                usage_text = "ü§ñ Smart routing"
            else:
                # Premium provider usage
                formatted_usage = format_provider_usage(self.provider_usage_stats)
                usage_text = formatted_usage.get(self.current_provider, "üíé 0/10000 (0%)")
            
            self.usage_status_label.setText(usage_text)
            
            # 3. Cost Status friss√≠t√©se
            cost_summary = format_cost_summary(self.provider_usage_stats)
            self.cost_status_label.setText(cost_summary)
            
            # 4. Warning level ellen≈ërz√©se
            warning_level = None
            if self.current_provider != 'open-meteo' and self.current_provider != 'auto':
                warning_level = get_provider_warning_level(self.current_provider, self.provider_usage_stats)
            
            # Warning styling alkalmaz√°sa
            self._apply_warning_styling(warning_level)
            
            print(f"‚úÖ DEBUG: Provider status display updated: {self.current_provider}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è DEBUG: Provider status display update error: {e}")
    
    def _apply_warning_styling(self, warning_level: Optional[str]) -> None:
        """üåç Warning level alapj√°n styling alkalmaz√°sa status bar widget-ekre."""
        if warning_level == "critical":
            # Kritikus - piros sz√≠nez√©s
            self.usage_status_label.setStyleSheet("color: #dc2626; font-weight: bold;")
            self.cost_status_label.setStyleSheet("color: #dc2626; font-weight: bold;")
        elif warning_level == "warning":
            # Figyelmeztet√©s - s√°rga sz√≠nez√©s
            self.usage_status_label.setStyleSheet("color: #f59e0b; font-weight: bold;")
            self.cost_status_label.setStyleSheet("color: #f59e0b;")
        elif warning_level == "info":
            # Info - k√©k sz√≠nez√©s
            self.usage_status_label.setStyleSheet("color: #3b82f6;")
            self.cost_status_label.setStyleSheet("color: #3b82f6;")
        else:
            # Norm√°lis - alap√©rtelmezett sz√≠nek
            self.usage_status_label.setStyleSheet("")
            self.cost_status_label.setStyleSheet("")
    
    # === EGYSZER≈∞S√çTETT SLOT MET√ìDUSOK - B≈êV√çTVE ===
    
    def _update_status(self, message: str) -> None:
        """St√°tuszsor friss√≠t√©se - Provider status megtart√°s√°val."""
        # General status message update, provider widgets megmaradnak
        self.status_bar.showMessage(message)
    
    def _update_progress(self, worker_type: str, progress: int) -> None:
        """Progress friss√≠t√©se - DUAL-API kompatibilis + Provider status megtart√°s√°val."""
        if progress == 100:
            # Worker t√≠pus alapj√°n specifikus befejez≈ë √ºzenet
            completion_messages = {
                "geocoding": "‚úÖ Keres√©s befejezve",
                "weather_data": "‚úÖ Id≈ëj√°r√°si adatok lek√©rdezve (Dual-API)",
                "sql_query": "‚úÖ Adatb√°zis lek√©rdez√©s befejezve"
            }
            
            message = completion_messages.get(worker_type, f"‚úÖ {worker_type} befejezve")
            self.status_bar.showMessage(message)
        else:
            # Progress √ºzenetek
            progress_messages = {
                "geocoding": f"üîç Keres√©s: {progress}%",
                "weather_data": f"üåç Adatok lek√©rdez√©se (Dual-API): {progress}%",
                "sql_query": f"üóÇÔ∏è Adatb√°zis: {progress}%"
            }
            
            message = progress_messages.get(worker_type, f"‚è≥ {worker_type}: {progress}%")
            self.status_bar.showMessage(message)
    
    def _handle_export_request(self, format: str) -> None:
        """Export k√©r√©s kezel√©se a results panel-t≈ël."""
        data_table = None
        if self.results_panel:
            data_table = self.results_panel.get_data_table()
        
        if format == "csv" and data_table:
            data_table._export_data("csv")
        elif format == "excel" and data_table:
            data_table._export_data("excel")
        else:
            self._show_error(f"Nem t√°mogatott export form√°tum: {format}")
    
    def _show_extreme_weather(self) -> None:
        """Extr√©m id≈ëj√°r√°si esem√©nyek megjelen√≠t√©se."""
        weather_data = self.controller.get_current_weather_data()
        city_data = self.controller.get_current_city()
        
        if not weather_data or not city_data:
            self._show_error("Nincsenek megjelen√≠thet≈ë adatok. El≈ësz√∂r k√©rdezzen le id≈ëj√°r√°si adatokat.")
            return
        
        city_name = city_data.get('name', 'Ismeretlen')
        
        try:
            dialog = ExtremeWeatherDialog(self, weather_data, city_name)
            dialog.exec()
        except Exception as e:
            self._show_error(f"Extr√©m id≈ëj√°r√°s ablak hiba: {e}")
    
    # === üé® T√âMA KEZEL√âS B≈êV√çT√âSEK ===
    
    # Signal definition for theme changes
    theme_changed = Signal(str)
    
    def _propagate_theme_change(self, theme_name: str) -> None:
        """üé® T√©ma v√°ltoz√°s tov√°bb√≠t√°sa - THEMEMANAGER AUTOMATIKUSAN KEZELI."""
        print("‚ö†Ô∏è DEBUG: _propagate_theme_change() DEPRECATED - ThemeManager handles automatically")
        
        # ThemeManager automatikusan kezeli az √∂sszes regisztr√°lt widget-et
        # De a splitter-t k√ºl√∂n kell friss√≠teni, mert az speci√°lis
        dark_theme = (theme_name == "dark")
        self._update_splitter_theme(dark_theme)
        
        print(f"‚úÖ DEBUG: Theme propagation complete via ThemeManager: {theme_name}")
    
    def _update_splitter_theme(self, dark_theme: bool) -> None:
        """üîß SPLITTER t√©ma friss√≠t√©se theme v√°lt√°skor + THEMEMANAGER SZ√çNEK."""
        print(f"üîß DEBUG: Updating splitter theme with ThemeManager colors (dark: {dark_theme})")
        
        # Single City View splitter keres√©se √©s friss√≠t√©se
        single_city_view = None
        if self.stacked_widget and self.stacked_widget.count() > 0:
            single_city_view = self.stacked_widget.widget(0)  # üßπ Index 0 = Single City View
        
        if single_city_view:
            # Splitter megkeres√©se a view-ban
            splitters = single_city_view.findChildren(QSplitter)
            for splitter in splitters:
                # üé® THEMEMANAGER SPLITTER CSS ALKALMAZ√ÅSA
                splitter_css = self.theme_manager.generate_css_for_class("splitter")
                splitter.setStyleSheet(splitter_css)
                
                print(f"‚úÖ DEBUG: Splitter theme updated with ThemeManager CSS: {'dark' if dark_theme else 'light'}")
    
    # === BE√ÅLL√çT√ÅSOK KEZEL√âS B≈êV√çTVE ===
    
    def _save_settings(self) -> None:
        """Be√°ll√≠t√°sok ment√©se + THEMEMANAGER + PROVIDER STATUS."""
        self.settings.setValue("geometry", self.saveGeometry())
        self.settings.setValue("current_view", self.current_view_name)
        self.settings.setValue("theme", self.current_theme.value)
        
        # üé® THEMEMANAGER BE√ÅLL√çT√ÅSOK MENT√âSE
        self.theme_manager.save_theme_preferences(self.settings)
        
        # üåç PROVIDER STATUS MENT√âSE
        self.settings.setValue("current_provider", self.current_provider)
    
    def _load_settings(self) -> None:
        """Be√°ll√≠t√°sok bet√∂lt√©se - THEMEMANAGER INTEGR√ÅCI√ìVAL + PROVIDER STATUS INICIALIZ√ÅL√ÅS."""
        # Ablak poz√≠ci√≥ √©s m√©ret
        geometry = self.settings.value("geometry")
        if geometry:
            self.restoreGeometry(geometry)
        
        # üé® T√âMA BE√ÅLL√çT√ÅS - THEMEMANAGER INTEGR√ÅCI√ì
        theme_name = self.settings.value("theme", "light")
        try:
            theme_type = ThemeType(theme_name)
            self._apply_theme(theme_type)
        except ValueError:
            # Ha invalid t√©ma √©rt√©k, alap√©rtelmezett light
            self._apply_theme(ThemeType.LIGHT)
        
        # üåç PROVIDER STATUS INICIALIZ√ÅL√ÅSA
        self._initialize_provider_status()
        
        # Single City alap√©rtelmezett n√©zet
        self._switch_view("single_city")
        print("üßπ DEBUG: Single City set as default view")
    
    # === MEN√ú AKCI√ìK ===
    
    def _export_data(self) -> None:
        """Adatok export√°l√°sa men√ºb≈ël."""
        weather_data = self.controller.get_current_weather_data()
        if not weather_data:
            self._show_error("Nincsenek export√°lhat√≥ adatok. El≈ësz√∂r k√©rdezzen le adatokat.")
            return
        
        print("üìä DEBUG: Export data requested")
    
    def _show_about(self) -> None:
        """N√©vjegy ablak megjelen√≠t√©se."""
        about_text = f"""
        <h2>{AppInfo.NAME}</h2>
        <p><b>Verzi√≥:</b> {AppInfo.VERSION} (DUPLA KONVERZI√ì JAV√çTVA - ANALYTICS VIEW M≈∞K√ñDIK)</p>
        <p><b>Le√≠r√°s:</b> {AppInfo.DESCRIPTION}</p>
        <p><b>Architekt√∫ra:</b> Clean MVC + ANALYTICS VIEW SIGNAL CHAIN HELYRE√ÅLL√çTVA + üó∫Ô∏è MAGYAR MEGY√âK AUTOMATIKUS INTEGR√ÅCI√ìJA</p>
        <p><b>Technol√≥gia:</b> PySide6, Python 3.8+</p>
        <p><b>Adatforr√°sok:</b> Dual-API rendszer (Open-Meteo + Meteostat)</p>
        <hr>
        <p><i>üéØ <b>DUPLA KONVERZI√ì JAV√çTVA!</b></i></p>
        <p><i>üéØ ‚úÖ AnalysisWorker eredm√©nye K√ñZVETLEN√úL haszn√°lva - NINCS √∫jra konverzi√≥!</i></p>
        <p><i>üéØ ‚úÖ _on_analysis_completed_with_city_fix() met√≥dus JAV√çTVA!</i></p>
        <p><i>üéØ ‚úÖ List[Dict] ‚Üí Dict[List] konverzi√≥ CSAK az AnalysisWorker-ben!</i></p>
        <p><i>üéØ ‚úÖ MainWindow K√ñZVETLEN√úL tov√°bb√≠tja a Dict[List] eredm√©nyt!</i></p>
        <p><i>üéØ ‚úÖ Moscow lek√©rdez√©s ‚Üí AnalyticsView display MOST M√ÅR M≈∞K√ñDIK!</i></p>
        <p><i>üéØ ‚úÖ Sz√©lir√°ny √©s sz√©ll√∂k√©s adatok MEGJELENNEK az AnalyticsView-ban!</i></p>
        <p><i>üó∫Ô∏è <b>MAGYAR MEGY√âK AUTOMATIKUS INTEGR√ÅCI√ìJA BEFEJEZVE!</b></i></p>
        <p><i>üó∫Ô∏è ‚úÖ HungarianCountiesLoader automatikus import √©s haszn√°lat</i></p>
        <p><i>üó∫Ô∏è ‚úÖ _load_hungarian_counties() met√≥dus hozz√°adva MainWindow.__init__-hez</i></p>
        <p><i>üó∫Ô∏è ‚úÖ Automatikus megy√©k bet√∂lt√©se az alkalmaz√°s ind√≠t√°skor</i></p>
        <p><i>üó∫Ô∏è ‚úÖ HungarianMapTab automatikus konfigur√°l√°sa magyar megy√©kkel</i></p>
        <p><i>üó∫Ô∏è ‚úÖ Hibakezel√©s √©s fallback demo megy√©kkel</i></p>
        <p><i>üó∫Ô∏è ‚úÖ Silent operation - nem zavarja a UI bet√∂lt√©st</i></p>
        <p><i>üó∫Ô∏è ‚úÖ Teljes integr√°ci√≥ a megl√©v≈ë CLEAN architekt√∫r√°ba</i></p>
        <p><i>üó∫Ô∏è ‚úÖ Navigation toolbar b≈ëv√≠t√©se 5 tab-ra</i></p>
        <p><i>üó∫Ô∏è ‚úÖ Stacked views b≈ëv√≠t√©se magyar megy√©s komponensekkel</i></p>
        <p><i>üîß <b>HOTFIX: _on_analysis_failed met√≥dus hozz√°adva!</b></i></p>
        """
        
        QMessageBox.about(self, "N√©vjegy", about_text)
    
    # === üé® T√âMA KEZEL√âS - THEMEMANAGER INTEGR√ÅCI√ì ===
    
    def _apply_theme(self, theme_type: ThemeType) -> None:
        """THEMEMANAGER INTEGR√ÅLT t√©ma alkalmaz√°sa."""
        print(f"üé® DEBUG: Applying theme through ThemeManager: {theme_type.value}")
        
        # THEMEMANAGER T√âMA BE√ÅLL√çT√ÅSA
        success = self.theme_manager.set_theme(theme_type.value)
        
        if success:
            # T√©ma tracking friss√≠t√©se
            self.current_theme = theme_type
            
            # Be√°ll√≠t√°sok ment√©se
            self.settings.setValue("theme", theme_type.value)
            
            print(f"‚úÖ DEBUG: Theme applied and saved through ThemeManager: {theme_type.value}")
        else:
            print(f"‚ùå DEBUG: Theme application failed: {theme_type.value}")
    
    def _apply_theme_internal(self, theme_type: ThemeType) -> None:
        """Bels≈ë t√©ma alkalmaz√°s - THEMEMANAGER-RE DELEG√ÅLVA."""
        print("‚ö†Ô∏è DEBUG: _apply_theme_internal() DEPRECATED - using ThemeManager instead")
        
        # ThemeManager-re deleg√°l√°s
        self._apply_theme(theme_type)
    
    # === ERROR HANDLING ===
    
    def _show_error(self, message: str) -> None:
        """Hiba√ºzenet megjelen√≠t√©se."""
        QMessageBox.critical(self, "Hiba", message)
    
    # === LIFECYCLE ===
    
    def closeEvent(self, event) -> None:
        """Alkalmaz√°s bez√°r√°s√°nak kezel√©se."""
        try:
            print("üõ† DEBUG: DUPLA KONVERZI√ì JAV√çTVA + MAGYAR MEGY√âK INTEGR√ÅCI√ìJA + PROVIDER STATUS MainWindow closeEvent called")
            
            # Analytics panel le√°ll√≠t√°sa
            if self.analytics_panel:
                print("üõ† DEBUG: Stopping analytics panel...")
                self.analytics_panel.clear_data()
            
            # Trend analytics tab le√°ll√≠t√°sa
            if self.trend_analytics_tab:
                print("üõ† DEBUG: Stopping trend analytics tab...")
                self.trend_analytics_tab.clear_data()
            
            # Hungarian Map tab le√°ll√≠t√°sa
            if self.hungarian_map_tab:
                print("üõ† DEBUG: Stopping hungarian map tab...")
                # Ha a HungarianMapTab-nak lenne cleanup met√≥dusa, itt h√≠vn√°nk meg
            
            # Map view le√°ll√≠t√°sa
            if self.map_view:
                print("üõ† DEBUG: Stopping map view component...")
                # Ha a MapView-nak lenne cleanup met√≥dusa, itt h√≠vn√°nk meg
            
            # Be√°ll√≠t√°sok ment√©se
            self._save_settings()
            
            # Controller le√°ll√≠t√°sa
            print("üõ† DEBUG: Shutting down controller...")
            self.controller.shutdown()
            
            # Esem√©ny elfogad√°sa
            event.accept()
            
            print("‚úÖ DEBUG: DUPLA KONVERZI√ì JAV√çTVA + MAGYAR MEGY√âK INTEGR√ÅCI√ìJA + PROVIDER STATUS MainWindow bez√°rva")
            
        except Exception as e:
            print(f"‚ö†Ô∏è DEBUG: Bez√°r√°si hiba: {e}")
            import traceback
            traceback.print_exc()
            event.accept()
    
    # === PUBLIKUS API ===
    
    def get_current_view(self) -> str:
        """Jelenlegi n√©zet nev√©nek lek√©rdez√©se."""
        return self.current_view_name
    
    def switch_to_view(self, view_name: str) -> None:
        """Programmatic n√©zet v√°lt√°s."""
        self._switch_view(view_name)
    
    def get_analytics_panel(self) -> Optional[AnalyticsView]:
        """Analytics panel referencia lek√©rdez√©se."""
        return self.analytics_panel
    
    def focus_analytics_panel(self) -> None:
        """Analytics panel f√≥kuszba helyez√©se."""
        self._switch_view("analytics")
    
    def get_available_views(self) -> list:
        """El√©rhet≈ë n√©zetek list√°j√°nak lek√©rdez√©se - üó∫Ô∏è 5 N√âZET VERZI√ì."""
        return ["single_city", "analytics", "trend_analysis", "map_view", "settings"]
    
    def get_map_view(self) -> Optional[MapView]:
        """üó∫Ô∏è Map view referencia lek√©rdez√©se - √öJ FUNKCI√ì."""
        return self.map_view
    
    def focus_map_view(self) -> None:
        """üó∫Ô∏è Map view f√≥kuszba helyez√©se - √öJ FUNKCI√ì."""
        self._switch_view("map_view")
    
    def get_hungarian_map_tab(self) -> Optional[HungarianMapTab]:
        """üå§Ô∏è Hungarian Map Tab referencia lek√©rdez√©se - √öJ FUNKCI√ì + MAGYAR MEGY√âK INTEGR√ÅCI√ìJA."""
        return self.hungarian_map_tab
    
    def focus_hungarian_map_tab(self) -> None:
        """üå§Ô∏è Hungarian Map Tab f√≥kuszba helyez√©se - √öJ FUNKCI√ì + MAGYAR MEGY√âK INTEGR√ÅCI√ìJA."""
        self._switch_view("map_view")
    
    def get_trend_analytics_tab(self) -> Optional[TrendAnalyticsTab]:
        """üìà Trend Analytics tab referencia lek√©rdez√©se - √öJ FUNKCI√ì."""
        return self.trend_analytics_tab
    
    def focus_trend_analytics_tab(self) -> None:
        """üìà Trend Analytics tab f√≥kuszba helyez√©se - √öJ FUNKCI√ì."""
        self._switch_view("trend_analysis")
    
    def get_hungarian_counties_status(self) -> Dict[str, Any]:
        """
        üó∫Ô∏è √öJ: Magyar megy√©k bet√∂lt√©si st√°tusz√°nak lek√©rdez√©se.
        
        Returns:
            St√°tusz inform√°ci√≥k a magyar megy√©kr≈ël
        """
        return {
            'loaded': self.hungarian_counties_loaded,
            'counties_count': len(self.counties_geodataframe) if self.counties_geodataframe is not None else 0,
            'geodataframe_available': self.counties_geodataframe is not None,
            'integration_module_available': HUNGARIAN_COUNTIES_AVAILABLE
        }


# Export
__all__ = ['MainWindow']