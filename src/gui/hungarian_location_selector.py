#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üó∫Ô∏è Hungarian Location Selector - Hierarchikus T√©rk√©pes V√°laszt√≥
Magyar Kl√≠maanalitika MVP - T√©rk√©p Komponens Lok√°ci√≥ V√°laszt√≥

Ez a modul hierarchikus lok√°ci√≥ v√°laszt√°st biztos√≠t:
1. Klimatikus r√©gi√≥k (Magyar √©ghajlati z√≥n√°k)
2. Megy√©k (GeoJSON adatok alapj√°n)
3. J√°r√°sok (telep√ºl√©sek alapj√°n)
4. Konkr√©t telep√ºl√©sek/koordin√°t√°k

F√°jl helye: src/gui/hungarian_location_selector.py
"""

from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass
from enum import Enum
import json
from pathlib import Path

from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QComboBox, QLabel, 
    QGroupBox, QPushButton, QListWidget, QListWidgetItem,
    QSplitter, QTextEdit, QLineEdit, QProgressBar
)
from PySide6.QtCore import Qt, Signal, QThread, QTimer
from PySide6.QtGui import QFont, QPixmap, QIcon

try:
    import geopandas as gpd
    GEOPANDAS_AVAILABLE = True
except ImportError:
    GEOPANDAS_AVAILABLE = False

# Saj√°t modulok
from ..data.models import Location
from .theme_manager import register_widget_for_theming
from .color_palette import ColorPalette


class HungarianClimateRegion(Enum):
    """
    üå°Ô∏è Magyar √©ghajlati r√©gi√≥k klasszifik√°ci√≥.
    Forr√°s: OMSZ (Orsz√°gos Meteorol√≥giai Szolg√°lat)
    """
    ALFOLD = "alfold"                    # Alf√∂ld - kontinent√°lis
    DUNANTUL_WEST = "dunantul_west"      # Dun√°nt√∫l nyugati - √≥ce√°ni hat√°s
    DUNANTUL_SOUTH = "dunantul_south"    # Dun√°nt√∫l d√©li - mediterr√°n hat√°s  
    √âSZAKI_KOZEPHEGYSEG = "north_hills"  # √âszaki-k√∂z√©phegys√©g - hegyvid√©ki
    NYUGATI_HATAR = "west_border"        # Nyugati hat√°rvid√©k - alpesi el≈ët√©r


@dataclass
class HungarianRegionData:
    """
    üó∫Ô∏è Magyar r√©gi√≥ adatstrukt√∫ra.
    """
    name: str
    display_name: str
    description: str
    counties: List[str]
    climate_zone: str
    avg_temp_annual: float
    avg_precipitation_annual: int
    characteristics: List[str]


class HungarianLocationWorker(QThread):
    """
    üîÑ H√°tt√©r munkav√©gz≈ë a GeoJSON adatok bet√∂lt√©s√©hez.
    """
    
    # Signalok
    progress_updated = Signal(int)           # progress (0-100)
    counties_loaded = Signal(object)        # GeoDataFrame
    postal_codes_loaded = Signal(object)    # GeoDataFrame  
    error_occurred = Signal(str)            # error message
    completed = Signal()                    # √∂sszes adat bet√∂ltve
    
    def __init__(self, data_dir: Path):
        super().__init__()
        self.data_dir = data_dir
        self.counties_gdf = None
        self.postal_codes_gdf = None
    
    def run(self):
        """
        GeoJSON adatok bet√∂lt√©se h√°tt√©rben.
        """
        try:
            if not GEOPANDAS_AVAILABLE:
                self.error_occurred.emit("GeoPandas nincs telep√≠tve!")
                return
            
            self.progress_updated.emit(10)
            
            # Counties bet√∂lt√©se
            counties_file = self.data_dir / "counties.geojson"
            if counties_file.exists():
                self.counties_gdf = gpd.read_file(counties_file)
                self.counties_loaded.emit(self.counties_gdf)
                self.progress_updated.emit(50)
            else:
                self.error_occurred.emit(f"Counties f√°jl nem tal√°lhat√≥: {counties_file}")
                return
            
            # Postal codes bet√∂lt√©se (opcion√°lis, nagy f√°jl)
            postal_codes_file = self.data_dir / "postal_codes.geojson"
            if postal_codes_file.exists():
                # Nagy f√°jl, r√©szleges bet√∂lt√©s vagy kihagy√°s
                file_size = postal_codes_file.stat().st_size
                if file_size < 50 * 1024 * 1024:  # 50MB alatt
                    self.postal_codes_gdf = gpd.read_file(postal_codes_file)
                    self.postal_codes_loaded.emit(self.postal_codes_gdf)
                    self.progress_updated.emit(90)
                else:
                    # Nagy f√°jl eset√©n kihagy√°s vagy r√©szleges bet√∂lt√©s
                    self.progress_updated.emit(90)
            
            self.progress_updated.emit(100)
            self.completed.emit()
            
        except Exception as e:
            self.error_occurred.emit(f"GeoJSON bet√∂lt√©si hiba: {e}")


class HungarianLocationSelector(QWidget):
    """
    üó∫Ô∏è Hierarchikus magyar lok√°ci√≥ v√°laszt√≥ widget.
    
    FUNKCI√ìK:
    - Klimatikus r√©gi√≥ v√°laszt√°s
    - Megye v√°laszt√°s (GeoJSON alap√∫)
    - J√°r√°s/telep√ºl√©s sz≈±r√©s
    - Koordin√°ta megjelen√≠t√©s
    - T√©rk√©pes el≈ën√©zet integr√°ci√≥
    
    SIGNALOK:
    - region_selected(region_data): Klimatikus r√©gi√≥ kiv√°lasztva
    - county_selected(county_name, geometry): Megye kiv√°lasztva
    - location_selected(location): Pontos lok√°ci√≥ kiv√°lasztva
    - selection_changed(): B√°rmilyen v√°laszt√°s v√°ltozott
    - map_update_requested(bounds): T√©rk√©p friss√≠t√©s k√©r√©s
    """
    
    # Signalok
    region_selected = Signal(object)        # HungarianRegionData
    county_selected = Signal(str, object)   # county_name, geometry
    location_selected = Signal(object)     # Location object
    selection_changed = Signal()           # √°ltal√°nos v√°ltoz√°s
    map_update_requested = Signal(object)  # map bounds/center
    
    def __init__(self, parent=None):
        super().__init__(parent)
        
        # Komponens inicializ√°l√°s
        self.color_palette = ColorPalette()
        
        # Adatok
        self.region_data = self._init_climate_regions()
        self.counties_gdf = None
        self.postal_codes_gdf = None
        self.current_region = None
        self.current_county = None
        self.current_location = None
        
        # Worker thread
        self.data_worker = None
        
        # UI √©p√≠t√©s
        self._setup_ui()
        self._setup_theme()
        self._connect_signals()
        
        # Adatok bet√∂lt√©s√©nek ind√≠t√°sa
        self._start_data_loading()
    
    def _setup_ui(self):
        """
        üé® UI komponensek l√©trehoz√°sa.
        """
        layout = QVBoxLayout(self)
        layout.setContentsMargins(10, 10, 10, 10)
        layout.setSpacing(10)
        
        # === üå°Ô∏è KLIMATIKUS R√âGI√ì V√ÅLASZT√ì ===
        
        region_group = QGroupBox("üå°Ô∏è Magyar √âghajlati R√©gi√≥k")
        register_widget_for_theming(region_group, "container")
        region_layout = QVBoxLayout(region_group)
        
        self.region_combo = QComboBox()
        self.region_combo.addItem("V√°lassz √©ghajlati r√©gi√≥t...", None)
        register_widget_for_theming(self.region_combo, "input")
        
        for region_key, region_data in self.region_data.items():
            self.region_combo.addItem(
                f"{region_data.display_name} - {region_data.climate_zone}",
                region_key
            )
        
        region_layout.addWidget(self.region_combo)
        
        # R√©gi√≥ inform√°ci√≥s panel
        self.region_info = QTextEdit()
        self.region_info.setMaximumHeight(100)
        self.region_info.setReadOnly(True)
        register_widget_for_theming(self.region_info, "text")
        region_layout.addWidget(self.region_info)
        
        layout.addWidget(region_group)
        
        # === üó∫Ô∏è MEGYE V√ÅLASZT√ì ===
        
        county_group = QGroupBox("üó∫Ô∏è Megye V√°laszt√°s")
        register_widget_for_theming(county_group, "container")
        county_layout = QVBoxLayout(county_group)
        
        self.county_combo = QComboBox()
        self.county_combo.addItem("El≈ësz√∂r v√°lassz r√©gi√≥t...", None)
        self.county_combo.setEnabled(False)
        register_widget_for_theming(self.county_combo, "input")
        county_layout.addWidget(self.county_combo)
        
        layout.addWidget(county_group)
        
        # === üìç LOK√ÅCI√ì R√âSZLETEK ===
        
        location_group = QGroupBox("üìç Lok√°ci√≥ R√©szletek")
        register_widget_for_theming(location_group, "container")
        location_layout = QVBoxLayout(location_group)
        
        # Koordin√°ta megjelen√≠t√©s
        coords_layout = QHBoxLayout()
        
        self.lat_label = QLabel("Sz√©less√©g: -")
        self.lon_label = QLabel("Hossz√∫s√°g: -")
        register_widget_for_theming(self.lat_label, "text")
        register_widget_for_theming(self.lon_label, "text")
        
        coords_layout.addWidget(self.lat_label)
        coords_layout.addWidget(self.lon_label)
        location_layout.addLayout(coords_layout)
        
        # Ter√ºlet inform√°ci√≥
        self.area_label = QLabel("Ter√ºlet: -")
        register_widget_for_theming(self.area_label, "text")
        location_layout.addWidget(self.area_label)
        
        layout.addWidget(location_group)
        
        # === üîÑ BET√ñLT√âSI PROGRESS ===
        
        progress_group = QGroupBox("üîÑ T√©rk√©pi Adatok Bet√∂lt√©se")
        register_widget_for_theming(progress_group, "container")
        progress_layout = QVBoxLayout(progress_group)
        
        self.progress_bar = QProgressBar()
        self.progress_bar.setRange(0, 100)
        self.progress_bar.setValue(0)
        register_widget_for_theming(self.progress_bar, "input")
        progress_layout.addWidget(self.progress_bar)
        
        self.progress_label = QLabel("Adatok bet√∂lt√©se...")
        register_widget_for_theming(self.progress_label, "text")
        progress_layout.addWidget(self.progress_label)
        
        layout.addWidget(progress_group)
        
        # === üéØ AKCI√ì GOMBOK ===
        
        button_layout = QHBoxLayout()
        
        self.refresh_btn = QPushButton("üîÑ Friss√≠t√©s")
        self.refresh_btn.setToolTip("T√©rk√©pi adatok √∫jrat√∂lt√©se")
        register_widget_for_theming(self.refresh_btn, "button")
        button_layout.addWidget(self.refresh_btn)
        
        self.center_map_btn = QPushButton("üéØ T√©rk√©p K√∂zpontos√≠t√°s")
        self.center_map_btn.setToolTip("T√©rk√©p k√∂zpontos√≠t√°sa a kiv√°lasztott ter√ºletre")
        self.center_map_btn.setEnabled(False)
        register_widget_for_theming(self.center_map_btn, "button")
        button_layout.addWidget(self.center_map_btn)
        
        layout.addLayout(button_layout)
        
        # Spacer a v√©g√©n
        layout.addStretch()
    
    def _setup_theme(self):
        """
        üé® T√©ma be√°ll√≠t√°sok alkalmaz√°sa.
        """
        register_widget_for_theming(self, "container")
    
    def _connect_signals(self):
        """
        üîó Signal-slot kapcsolatok l√©trehoz√°sa.
        """
        # UI signalok
        self.region_combo.currentTextChanged.connect(self._on_region_changed)
        self.county_combo.currentTextChanged.connect(self._on_county_changed)
        self.refresh_btn.clicked.connect(self._start_data_loading)
        self.center_map_btn.clicked.connect(self._center_map_on_selection)
    
    def _init_climate_regions(self) -> Dict[str, HungarianRegionData]:
        """
        üå°Ô∏è Magyar √©ghajlati r√©gi√≥k adatainak inicializ√°l√°sa.
        """
        regions = {
            HungarianClimateRegion.ALFOLD.value: HungarianRegionData(
                name="alfold",
                display_name="Nagy Alf√∂ld",
                description="Kontinent√°lis √©ghajlat, csek√©ly csapad√©k, nagy h≈ëing√°s",
                counties=["B√°cs-Kiskun", "B√©k√©s", "Csongr√°d-Csan√°d", "Hajd√∫-Bihar", "J√°sz-Nagykun-Szolnok"],
                climate_zone="Kontinent√°lis",
                avg_temp_annual=10.8,
                avg_precipitation_annual=550,
                characteristics=["Alacsony csapad√©k", "Nagy √©vi h≈ëing√°s", "Sz√°raz nyarak", "Hideg telek"]
            ),
            
            HungarianClimateRegion.DUNANTUL_WEST.value: HungarianRegionData(
                name="dunantul_west",
                display_name="Nyugat-Dun√°nt√∫l",  
                description="√ìce√°ni hat√°s, m√©rs√©kelten kontinent√°lis",
                counties=["Gy≈ër-Moson-Sopron", "Vas", "Zala"],
                climate_zone="M√©rs√©kelten kontinent√°lis",
                avg_temp_annual=9.8,
                avg_precipitation_annual=700,
                characteristics=["√ìce√°ni hat√°s", "Egyenletes csapad√©k", "Enyh√©bb telek", "H≈±v√∂sebb nyarak"]
            ),
            
            HungarianClimateRegion.DUNANTUL_SOUTH.value: HungarianRegionData(
                name="dunantul_south", 
                display_name="D√©l-Dun√°nt√∫l",
                description="Mediterr√°n hat√°s, melegebb √©ghajlat",
                counties=["Baranya", "Somogy", "Tolna"],
                climate_zone="Szubmediterr√°n",
                avg_temp_annual=10.5,
                avg_precipitation_annual=650,
                characteristics=["Mediterr√°n hat√°s", "Melegebb telek", "Hosszabb veget√°ci√≥s peri√≥dus", "≈êszi csapad√©kmaximum"]
            ),
            
            HungarianClimateRegion.√âSZAKI_KOZEPHEGYSEG.value: HungarianRegionData(
                name="north_hills",
                display_name="√âszaki-k√∂z√©phegys√©g",
                description="Hegyvid√©ki √©ghajlat, t√∂bb csapad√©k",
                counties=["Borsod-Aba√∫j-Zempl√©n", "Heves", "N√≥gr√°d"],
                climate_zone="Hegyvid√©ki",
                avg_temp_annual=9.2,
                avg_precipitation_annual=750,
                characteristics=["Magasabb csapad√©k", "H≈±v√∂sebb h≈ëm√©rs√©klet", "Hosszabb t√©lmerid≈ë", "Domborzati hat√°sok"]
            ),
            
            HungarianClimateRegion.NYUGATI_HATAR.value: HungarianRegionData(
                name="west_border",
                display_name="Nyugati hat√°rvid√©k",
                description="Alpesi el≈ët√©r, v√°ltoz√©kony id≈ëj√°r√°s",
                counties=["Kom√°rom-Esztergom", "Fej√©r", "Veszpr√©m", "Budapest", "Pest"],
                climate_zone="√Åtmeneti",
                avg_temp_annual=10.1,
                avg_precipitation_annual=620,
                characteristics=["V√°ltoz√©kony id≈ëj√°r√°s", "Alpesi hat√°s", "Urbaniz√°ci√≥s hat√°s (Budapest)", "√Åtmeneti jelleg"]
            )
        }
        
        return regions
    
    def _start_data_loading(self):
        """
        üîÑ GeoJSON adatok bet√∂lt√©s√©nek ind√≠t√°sa.
        """
        if not GEOPANDAS_AVAILABLE:
            self.progress_label.setText("‚ùå GeoPandas nem el√©rhet≈ë!")
            return
        
        # Worker thread ind√≠t√°sa
        project_root = Path(__file__).parent.parent.parent
        data_dir = project_root / "data" / "geojson"
        
        if not data_dir.exists():
            self.progress_label.setText("‚ùå GeoJSON k√∂nyvt√°r nem tal√°lhat√≥!")
            return
        
        self.data_worker = HungarianLocationWorker(data_dir)
        
        # Worker signalok kapcsol√°sa
        self.data_worker.progress_updated.connect(self.progress_bar.setValue)
        self.data_worker.counties_loaded.connect(self._on_counties_loaded)
        self.data_worker.postal_codes_loaded.connect(self._on_postal_codes_loaded)
        self.data_worker.error_occurred.connect(self._on_data_error)
        self.data_worker.completed.connect(self._on_data_loading_completed)
        
        # Worker ind√≠t√°sa
        self.progress_label.setText("üîÑ GeoJSON adatok bet√∂lt√©se...")
        self.data_worker.start()
    
    def _on_counties_loaded(self, counties_gdf):
        """
        üó∫Ô∏è Megyeadatok bet√∂lt√©se befejezve.
        """
        self.counties_gdf = counties_gdf
        self.progress_label.setText("‚úÖ Megyeadatok bet√∂ltve...")
        
        # Megyenevek friss√≠t√©se combo-ban (r√©gi√≥ alapj√°n)
        self._update_county_combo()
    
    def _on_postal_codes_loaded(self, postal_codes_gdf):
        """
        üì´ Ir√°ny√≠t√≥sz√°m adatok bet√∂lt√©se befejezve.
        """
        self.postal_codes_gdf = postal_codes_gdf
        self.progress_label.setText("‚úÖ Ir√°ny√≠t√≥sz√°m adatok bet√∂ltve...")
    
    def _on_data_error(self, error_message: str):
        """
        ‚ùå Adatok bet√∂lt√©si hiba kezel√©se.
        """
        self.progress_label.setText(f"‚ùå {error_message}")
        self.progress_bar.setValue(0)
    
    def _on_data_loading_completed(self):
        """
        ‚úÖ √ñsszes adat bet√∂lt√©se befejezve.
        """
        self.progress_label.setText("‚úÖ T√©rk√©pi adatok bet√∂ltve!")
        self.progress_bar.setValue(100)
        
        # Funkcionalit√°sok enged√©lyez√©se
        self.county_combo.setEnabled(True)
        self.center_map_btn.setEnabled(True)
        
        # Timer a progress elt√ºntet√©s√©hez
        QTimer.singleShot(3000, lambda: self.progress_label.setText("K√©sz haszn√°latra"))
    
    def _on_region_changed(self):
        """
        üå°Ô∏è Klimatikus r√©gi√≥ v√°laszt√°s v√°ltoz√°s kezel√©se.
        """
        current_data = self.region_combo.currentData()
        
        if current_data is None:
            self.current_region = None
            self.region_info.clear()
            self._update_county_combo()
            return
        
        # R√©gi√≥ adatok megjelen√≠t√©se
        region_data = self.region_data[current_data]
        self.current_region = region_data
        
        # Inform√°ci√≥s panel friss√≠t√©se
        info_text = f"""
<b>{region_data.display_name}</b><br>
<b>√âghajlati z√≥na:</b> {region_data.climate_zone}<br>
<b>√Åtlagos √©vi h≈ëm√©rs√©klet:</b> {region_data.avg_temp_annual}¬∞C<br>
<b>√Åtlagos √©vi csapad√©k:</b> {region_data.avg_precipitation_annual} mm<br>
<br>
<b>Jellemz≈ëk:</b><br>
{' ‚Ä¢ '.join(region_data.characteristics)}<br>
<br>
<b>Le√≠r√°s:</b> {region_data.description}
        """.strip()
        
        self.region_info.setHtml(info_text)
        
        # Megy√©k friss√≠t√©se
        self._update_county_combo()
        
        # Signal kibocs√°t√°sa
        self.region_selected.emit(region_data)
        self.selection_changed.emit()
    
    def _update_county_combo(self):
        """
        üó∫Ô∏è Megye combo friss√≠t√©se a kiv√°lasztott r√©gi√≥ alapj√°n.
        """
        self.county_combo.clear()
        
        if self.current_region is None:
            self.county_combo.addItem("El≈ësz√∂r v√°lassz r√©gi√≥t...", None)
            self.county_combo.setEnabled(False)
            return
        
        if self.counties_gdf is None:
            self.county_combo.addItem("T√©rk√©pi adatok bet√∂lt√©se...", None)
            self.county_combo.setEnabled(False)
            return
        
        # R√©gi√≥ megy√©inek hozz√°ad√°sa
        self.county_combo.addItem("V√°lassz megy√©t...", None)
        
        available_counties = set(self.counties_gdf['megye'].tolist())
        region_counties = set(self.current_region.counties)
        
        # K√∂z√∂s megy√©k (r√©gi√≥ √©s GeoJSON alapj√°n)
        valid_counties = region_counties.intersection(available_counties)
        
        for county in sorted(valid_counties):
            self.county_combo.addItem(county, county)
        
        # Egy√©b megy√©k is (ha vannak)
        other_counties = available_counties - region_counties
        if other_counties:
            self.county_combo.addItem("--- Egy√©b megy√©k ---", None)
            for county in sorted(other_counties):
                self.county_combo.addItem(f"{county} (egy√©b)", county)
        
        self.county_combo.setEnabled(True)
    
    def _on_county_changed(self):
        """
        üó∫Ô∏è Megye v√°laszt√°s v√°ltoz√°s kezel√©se.
        """
        current_county = self.county_combo.currentData()
        
        if current_county is None or self.counties_gdf is None:
            self.current_county = None
            self._update_location_info()
            return
        
        # Megye geometria lek√©rdez√©se
        county_row = self.counties_gdf[self.counties_gdf['megye'] == current_county]
        
        if county_row.empty:
            self.current_county = None
            self._update_location_info()
            return
        
        # Megye adatok t√°rol√°sa
        geometry = county_row.geometry.iloc[0]
        self.current_county = {
            'name': current_county,
            'geometry': geometry,
            'bounds': geometry.bounds,  # (minx, miny, maxx, maxy)
            'centroid': geometry.centroid
        }
        
        # Lok√°ci√≥ info friss√≠t√©se
        self._update_location_info()
        
        # Signalok kibocs√°t√°sa
        self.county_selected.emit(current_county, geometry)
        self.selection_changed.emit()
        
        # T√©rk√©p friss√≠t√©s k√©r√©se
        self.map_update_requested.emit(self.current_county['bounds'])
    
    def _update_location_info(self):
        """
        üìç Lok√°ci√≥ inform√°ci√≥k friss√≠t√©se.
        """
        if self.current_county is None:
            self.lat_label.setText("Sz√©less√©g: -")
            self.lon_label.setText("Hossz√∫s√°g: -")
            self.area_label.setText("Ter√ºlet: -")
            return
        
        # K√∂zponti koordin√°t√°k
        centroid = self.current_county['centroid']
        lat = centroid.y
        lon = centroid.x
        
        self.lat_label.setText(f"Sz√©less√©g: {lat:.4f}¬∞")
        self.lon_label.setText(f"Hossz√∫s√°g: {lon:.4f}¬∞")
        
        # Ter√ºlet sz√°m√≠t√°s (k√∂zel√≠t≈ë, fok alap√∫)
        bounds = self.current_county['bounds']
        width = bounds[2] - bounds[0]  # maxx - minx
        height = bounds[3] - bounds[1]  # maxy - miny
        
        self.area_label.setText(f"Hat√°rol√≥ t√©glalap: {width:.3f}¬∞ √ó {height:.3f}¬∞")
        
        # Location objektum l√©trehoz√°sa
        self.current_location = Location(
            identifier=self.current_county['name'],
            display_name=self.current_county['name'],
            latitude=lat,
            longitude=lon,
            country_code="HU",
            timezone="Europe/Budapest",
            metadata={
                'region': self.current_region.name if self.current_region else None,
                'county': self.current_county['name'],
                'source': 'hungarian_location_selector',
                'bounds': bounds,
                'climate_zone': self.current_region.climate_zone if self.current_region else None
            }
        )
        
        # Location signal kibocs√°t√°sa
        self.location_selected.emit(self.current_location)
    
    def _center_map_on_selection(self):
        """
        üéØ T√©rk√©p k√∂zpontos√≠t√°sa a kiv√°lasztott ter√ºletre.
        """
        if self.current_county is None:
            return
        
        bounds = self.current_county['bounds']
        self.map_update_requested.emit(bounds)
    
    # === PUBLIKUS API ===
    
    def get_current_selection(self) -> Dict[str, Any]:
        """
        üìã Jelenlegi kiv√°lasztott elemek lek√©rdez√©se.
        """
        return {
            'region': self.current_region,
            'county': self.current_county,
            'location': self.current_location,
            'has_geodata': self.counties_gdf is not None
        }
    
    def set_region(self, region_key: str) -> bool:
        """
        üå°Ô∏è R√©gi√≥ programmatic be√°ll√≠t√°sa.
        """
        for i in range(self.region_combo.count()):
            if self.region_combo.itemData(i) == region_key:
                self.region_combo.setCurrentIndex(i)
                return True
        return False
    
    def set_county(self, county_name: str) -> bool:
        """
        üó∫Ô∏è Megye programmatic be√°ll√≠t√°sa.
        """
        for i in range(self.county_combo.count()):
            if self.county_combo.itemData(i) == county_name:
                self.county_combo.setCurrentIndex(i)
                return True
        return False
    
    def get_available_counties(self) -> List[str]:
        """
        üìã El√©rhet≈ë megy√©k list√°ja.
        """
        if self.counties_gdf is None:
            return []
        
        return sorted(self.counties_gdf['megye'].tolist())
    
    def get_counties_geodataframe(self):
        """
        üó∫Ô∏è Megy√©k GeoDataFrame lek√©rdez√©se.
        """
        return self.counties_gdf
    
    def get_postal_codes_geodataframe(self):
        """
        üì´ Ir√°ny√≠t√≥sz√°m ter√ºletek GeoDataFrame lek√©rdez√©se.
        """
        return self.postal_codes_gdf
    
    def reset_selection(self):
        """
        üîÑ Kiv√°laszt√°s vissza√°ll√≠t√°sa.
        """
        self.region_combo.setCurrentIndex(0)
        self.county_combo.setCurrentIndex(0)
        
        self.current_region = None
        self.current_county = None
        self.current_location = None
        
        self.region_info.clear()
        self._update_location_info()
        
        self.selection_changed.emit()


# === DEMO √âS TESZT FUNKCI√ìK ===

def demo_hungarian_location_selector():
    """
    üß™ Hungarian Location Selector demo alkalmaz√°s.
    """
    import sys
    from PySide6.QtWidgets import QApplication, QMainWindow, QHBoxLayout, QWidget
    
    app = QApplication(sys.argv)
    
    # F≈ë ablak
    window = QMainWindow()
    window.setWindowTitle("üó∫Ô∏è Hungarian Location Selector Demo")
    window.setGeometry(100, 100, 800, 600)
    
    # Central widget
    central_widget = QWidget()
    window.setCentralWidget(central_widget)
    
    layout = QHBoxLayout(central_widget)
    
    # Location selector
    location_selector = HungarianLocationSelector()
    layout.addWidget(location_selector)
    
    # Event handlers
    def on_region_selected(region_data):
        print(f"üå°Ô∏è R√©gi√≥ kiv√°lasztva: {region_data.display_name}")
    
    def on_county_selected(county_name, geometry):
        print(f"üó∫Ô∏è Megye kiv√°lasztva: {county_name}")
        print(f"   Hat√°rok: {geometry.bounds}")
    
    def on_location_selected(location):
        print(f"üìç Lok√°ci√≥ kiv√°lasztva: {location.display_name}")
        print(f"   Koordin√°t√°k: {location.latitude:.4f}, {location.longitude:.4f}")
    
    def on_map_update_requested(bounds):
        print(f"üéØ T√©rk√©p friss√≠t√©s: {bounds}")
    
    # Signalok kapcsol√°sa
    location_selector.region_selected.connect(on_region_selected)
    location_selector.county_selected.connect(on_county_selected)
    location_selector.location_selected.connect(on_location_selected)
    location_selector.map_update_requested.connect(on_map_update_requested)
    
    window.show()
    
    print("üó∫Ô∏è Hungarian Location Selector Demo elind√≠tva")
    print("‚úÖ V√°lassz klimatikus r√©gi√≥t √©s megy√©t a tesztel√©shez!")
    
    sys.exit(app.exec())


if __name__ == "__main__":
    demo_hungarian_location_selector()
