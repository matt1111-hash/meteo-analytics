#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Global Weather Analyzer - Data Widgets Module - THEMEMANAGER INTEGR√ÅLT VERZI√ì
T√°bl√°zatos adatmegjelen√≠t√©s modulja - KATTINT√ÅSSAL RENDEZHET≈ê OSZLOPOKKAL.

üé® THEMEMANAGER INTEGR√ÅCI√ì:
- Hardcoded CSS-ek elt√°vol√≠tva/minimaliz√°lva  
- Manual dark theme logika lecser√©lve ThemeManager-re
- Widget regisztr√°ci√≥k automatikus styling-hoz
- _apply_table_theme √©s _apply_controls_theme egyszer≈±s√≠tve

üîß KRITIKUS JAV√çT√ÅS: Adatfeldolgoz√°si hib√°k jav√≠tva
- _convert_to_dataframe() robust hibakezel√©s
- Adathossz valid√°l√°s
- √úres adatok kezel√©se
- DEBUG logging hozz√°adva

FUNKCI√ìK MEGTARTVA:
- Numerikus rendez√©s, intelligens t√°bl√°zat elemek
- K√ñZ√âPH≈êM√âRS√âKLET OSZLOP 
- Kattint√°ssal rendezhet≈ë oszlopok (n√∂vekv≈ë/cs√∂kken≈ë)
"""

from typing import Optional, Dict, Any, List, Tuple
import pandas as pd
import csv
from datetime import datetime
from pathlib import Path
import logging

from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QTableWidget, QTableWidgetItem,
    QHeaderView, QPushButton, QLineEdit, QComboBox, QLabel, QCheckBox,
    QGroupBox, QSpinBox, QFileDialog, QMessageBox, QProgressBar,
    QAbstractItemView
)
from PySide6.QtCore import Qt, Signal, QSortFilterProxyModel, QAbstractTableModel, QModelIndex
from PySide6.QtGui import QFont, QColor

from ..config import GUIConfig
from .utils import GUIConstants
from .theme_manager import get_theme_manager, register_widget_for_theming

# Logging setup
logger = logging.getLogger(__name__)


# =============================================================================
# NUMERIKUS RENDEZ√âST T√ÅMOGAT√ì T√ÅBL√ÅZATELEM - V√ÅLTOZATLAN
# =============================================================================
class NumericTableWidgetItem(QTableWidgetItem):
    """
    Intelligens QTableWidgetItem, amely lehet≈ëv√© teszi a numerikus rendez√©st
    akkor is, ha a megjelen√≠tett sz√∂veg m√©rt√©kegys√©get tartalmaz.
    
    P√©lda: "15.2 ¬∞C" sz√∂veg, de 15.2 numerikus √©rt√©k alapj√°n rendez.
    """
    
    def __init__(self, display_text: str, numeric_value: float):
        """
        Args:
            display_text: Megjelen√≠tend≈ë sz√∂veg (pl. "15.2 ¬∞C")
            numeric_value: Rendez√©shez haszn√°lt numerikus √©rt√©k (pl. 15.2)
        """
        super().__init__(display_text)
        self.numeric_value = numeric_value
    
    def __lt__(self, other: 'NumericTableWidgetItem') -> bool:
        """
        √ñsszehasonl√≠t√≥ met√≥dus fel√ºl√≠r√°sa a rendez√©shez.
        A t√°rolt numerikus √©rt√©k alapj√°n hasonl√≠t √∂ssze, nem a sz√∂veg szerint.
        """
        if isinstance(other, NumericTableWidgetItem):
            return self.numeric_value < other.numeric_value
        # Fallback a sz√∂veges √∂sszehasonl√≠t√°sra, ha m√°s t√≠pus√∫ item
        return super().__lt__(other)
    
    def data(self, role: int):
        """Qt data role kezel√©se - numerikus √©rt√©k visszaad√°sa rendez√©shez."""
        if role == Qt.UserRole:
            return self.numeric_value
        return super().data(role)


# =============================================================================
# WEATHER TABLE MODEL - THEMEMANAGER INTEGR√ÅLT
# =============================================================================
class WeatherTableModel(QAbstractTableModel):
    """
    Id≈ëj√°r√°si adatok t√°bla modellje - THEMEMANAGER KOMPATIBILIS.
    Nagy adathalmazok hat√©kony kezel√©s√©re optimaliz√°lva.
    """
    
    def __init__(self, data: Optional[pd.DataFrame] = None):
        super().__init__()
        self._data = data if data is not None else pd.DataFrame()
        self._headers = []
        self._theme_manager = get_theme_manager()
        self._update_headers()
    
    def _update_headers(self) -> None:
        """Oszlop fejl√©cek friss√≠t√©se - SZAKMAILAG PONTOS ELNEVEZ√âSSEL."""
        if not self._data.empty:
            self._headers = [
                "D√°tum", "Max h≈ëm√©rs√©klet (¬∞C)", "Min h≈ëm√©rs√©klet (¬∞C)",
                "Napi √°tlag (¬∞C)", "Csapad√©k (mm)", "Sz√©lsebess√©g (km/h)"
            ]
        else:
            self._headers = []
    
    def set_theme(self, dark_theme: bool) -> None:
        """
        T√©ma be√°ll√≠t√°sa - THEMEMANAGER DELEG√ÅL√ÅS.
        
        Args:
            dark_theme: True, ha s√∂t√©t t√©ma
        """
        theme_name = "dark" if dark_theme else "light"
        self._theme_manager.set_theme(theme_name)
        self.dataChanged.emit(QModelIndex(), QModelIndex())
    
    def rowCount(self, parent: QModelIndex = QModelIndex()) -> int:
        return len(self._data)
    
    def columnCount(self, parent: QModelIndex = QModelIndex()) -> int:
        return len(self._headers)
    
    def data(self, index: QModelIndex, role: int = Qt.DisplayRole) -> Any:
        if not index.isValid() or self._data.empty:
            return None
        
        row, col = index.row(), index.column()
        
        if role == Qt.DisplayRole:
            if col == 0:  # D√°tum
                return self._data.iloc[row, 0]  # date oszlop
            elif col == 1:  # Max h≈ëm√©rs√©klet
                value = self._data.iloc[row, 1]
                return f"{value:.1f}" if pd.notna(value) else "N/A"
            elif col == 2:  # Min h≈ëm√©rs√©klet  
                value = self._data.iloc[row, 2]
                return f"{value:.1f}" if pd.notna(value) else "N/A"
            elif col == 3:  # √Åtlag h≈ëm√©rs√©klet
                value = self._data.iloc[row, 3] if len(self._data.columns) > 3 else None
                return f"{value:.1f}" if pd.notna(value) else "N/A"
            elif col == 4:  # Csapad√©k
                value = self._data.iloc[row, 4] if len(self._data.columns) > 4 else self._data.iloc[row, 3]
                return f"{value:.1f}" if pd.notna(value) else "0.0"
            elif col == 5:  # Sz√©lsebess√©g
                value = self._data.iloc[row, 5] if len(self._data.columns) > 5 else None
                return f"{value:.1f}" if pd.notna(value) else "N/A"
        
        elif role == Qt.BackgroundRole:
            # ThemeManager sz√≠nek lek√©rdez√©se
            scheme = self._theme_manager.get_color_scheme()
            if scheme:
                if row % 2 == 0:
                    return QColor(scheme.get_color("surface", "base") or "#ffffff")
                return QColor(scheme.get_color("surface", "light") or "#f5f5f5")
            # Fallback
            return QColor(255, 255, 255) if row % 2 else QColor(248, 249, 250)
        
        elif role == Qt.ForegroundRole:
            # ThemeManager sz√∂vegsz√≠n
            scheme = self._theme_manager.get_color_scheme()
            if scheme:
                return QColor(scheme.get_color("primary", "base") or "#1f2937")
            return QColor(31, 41, 55)  # Fallback
        
        elif role == Qt.TextAlignmentRole:
            if col == 0:  # D√°tum
                return Qt.AlignCenter
            else:  # Sz√°mok
                return Qt.AlignRight | Qt.AlignVCenter
        
        return None
    
    def headerData(self, section: int, orientation: Qt.Orientation, role: int = Qt.DisplayRole) -> Any:
        if role == Qt.DisplayRole and orientation == Qt.Horizontal:
            if 0 <= section < len(self._headers):
                return self._headers[section]
        elif role == Qt.ForegroundRole and orientation == Qt.Horizontal:
            # Header sz√∂veg sz√≠ne ThemeManager-b≈ël
            scheme = self._theme_manager.get_color_scheme()
            if scheme:
                return QColor(scheme.get_color("primary", "base") or "#374151")
            return QColor(55, 65, 81)  # Fallback
        return None
    
    def update_data(self, data: pd.DataFrame) -> None:
        """Adatok friss√≠t√©se."""
        self.beginResetModel()
        self._data = data
        self._update_headers()
        self.endResetModel()


# =============================================================================
# F≈ê WEATHER DATA TABLE WIDGET - THEMEMANAGER INTEGR√ÅLT + HIBAKEZEL√âS JAV√çTVA
# =============================================================================
class WeatherDataTable(QWidget):
    """
    Id≈ëj√°r√°si adatok t√°bl√°zatos megjelen√≠t√©se - THEMEMANAGER INTEGR√ÅLT VERZI√ì.
    
    üé® V√ÅLTOZ√ÅSOK:
    - Hardcoded CSS-ek elt√°vol√≠tva
    - Manual dark theme logika ‚Üí ThemeManager deleg√°l√°s
    - Widget regisztr√°ci√≥k automatikus styling-hoz
    - apply_theme egyszer≈±s√≠t√©s
    
    üîß KRITIKUS JAV√çT√ÅS:
    - _convert_to_dataframe() robust hibakezel√©s
    - Adathossz valid√°l√°s
    - √úres adatok kezel√©se
    - DEBUG logging
    
    FUNKCI√ìK MEGTARTVA:
    - Numerikus rendez√©s (15.2 ¬∞C < 8.5 ¬∞C helyett 8.5 < 15.2)
    - Kattint√°ssal rendezhet≈ë oszlopok
    - N√∂vekv≈ë/cs√∂kken≈ë rendez√©s v√°lt√°sa
    - K√ñZ√âPH≈êM√âRS√âKLET OSZLOP
    """
    
    # Signalok
    row_selected = Signal(int)           # kiv√°lasztott sor index
    data_filtered = Signal(int)          # sz≈±rt sorok sz√°ma
    export_completed = Signal(str, bool) # filepath, success
    sorting_changed = Signal(int, str)   # column, order (asc/desc)
    
    def __init__(self, parent: Optional[QWidget] = None):
        """Jav√≠tott t√°bl√°zat widget inicializ√°l√°sa - THEMEMANAGER VERZI√ì."""
        super().__init__(parent)
        
        # ThemeManager singleton
        self._theme_manager = get_theme_manager()
        
        self.current_data: Optional[pd.DataFrame] = None
        self.filtered_data: Optional[pd.DataFrame] = None
        self.current_page = 0
        self.rows_per_page = 1000  # üîß JAV√çT√ÅS: Nagy alap√©rtelmezett, "√ñsszes" override-olja
        
        # Rendez√©si √°llapot k√∂vet√©se
        self.current_sort_column = -1
        self.current_sort_order = Qt.AscendingOrder
        
        self._init_ui()
        self._connect_signals()
        self._register_widgets_for_theming()
    
    def _init_ui(self) -> None:
        """UI elemek inicializ√°l√°sa - MINIMAL CSS APPROACH."""
        layout = QVBoxLayout(self)
        layout.setContentsMargins(5, 5, 5, 5)
        
        # Fels≈ë vez√©rl≈ë panel
        self.controls = self._create_controls()
        layout.addWidget(self.controls)
        
        # === F≈ê T√ÅBL√ÅZAT - RENDEZHET≈êS√âGGEL ===
        self.table = QTableWidget()
        self._setup_sortable_table()
        layout.addWidget(self.table)
        
        # Als√≥ inform√°ci√≥s s√°v
        self.info_bar = self._create_info_bar()
        layout.addWidget(self.info_bar)
    
    def _setup_sortable_table(self) -> None:
        """T√°bl√°zat be√°ll√≠t√°sok rendezhet≈ë funkci√≥val - THEMEMANAGER KOMPATIBILIS."""
        # === KRITIKUS: RENDEZ√âS ENGED√âLYEZ√âSE ===
        self.table.setSortingEnabled(True)
        
        # Alap be√°ll√≠t√°sok
        self.table.setAlternatingRowColors(True)
        self.table.setSelectionBehavior(QTableWidget.SelectRows)
        self.table.setSelectionMode(QTableWidget.SingleSelection)
        
        # Fejl√©c be√°ll√≠t√°sok
        header = self.table.horizontalHeader()
        header.setStretchLastSection(True)
        header.setSectionResizeMode(QHeaderView.Interactive)
        
        # === RENDEZ√âSI SIGNALOK KAPCSOL√ÅSA ===
        header.sectionClicked.connect(self._on_header_clicked)
        
        # ThemeManager automatikus styling (CSS n√©lk√ºl)
    
    def _on_header_clicked(self, logical_index: int) -> None:
        """Fejl√©c kattint√°s kezel√©se - rendez√©si √°llapot k√∂vet√©se."""
        # Rendez√©si ir√°ny meghat√°roz√°sa
        if self.current_sort_column == logical_index:
            # Ugyanaz az oszlop - ir√°ny v√°lt√°sa
            if self.current_sort_order == Qt.AscendingOrder:
                self.current_sort_order = Qt.DescendingOrder
                order_text = "cs√∂kken≈ë"
            else:
                self.current_sort_order = Qt.AscendingOrder
                order_text = "n√∂vekv≈ë"
        else:
            # √öj oszlop - alap√©rtelmezett n√∂vekv≈ë
            self.current_sort_column = logical_index
            self.current_sort_order = Qt.AscendingOrder
            order_text = "n√∂vekv≈ë"
        
        # Oszlop n√©v meghat√°roz√°sa - SZAKMAILAG PONTOS ELNEVEZ√âSSEL
        headers = ["D√°tum", "Max h≈ëm√©rs√©klet", "Min h≈ëm√©rs√©klet", "Napi √°tlag", "Csapad√©k", "Sz√©lsebess√©g"]
        column_name = headers[logical_index] if logical_index < len(headers) else f"Oszlop {logical_index}"
        
        # Rendez√©s v√©grehajt√°sa
        self.table.sortItems(logical_index, self.current_sort_order)
        
        # Signal kibocs√°t√°sa √©s √ºzenet
        self.sorting_changed.emit(logical_index, order_text)
        print(f"üî¢ T√°bl√°zat rendezve: {column_name} ({order_text})")
        
        # St√°tusz friss√≠t√©se
        if hasattr(self, 'rows_info'):
            current_text = self.rows_info.text()
            self.rows_info.setText(f"{current_text} | Rendezve: {column_name} ({order_text})")
    
    def _create_controls(self) -> QWidget:
        """Vez√©rl≈ë panel l√©trehoz√°sa - THEMEMANAGER KOMPATIBILIS."""
        controls = QGroupBox("üîç T√°bl√°zat vez√©rl≈ëk")
        layout = QHBoxLayout(controls)
        
        # Keres√©s
        search_layout = QHBoxLayout()
        search_label = QLabel("Keres√©s:")
        self.search_input = QLineEdit()
        self.search_input.setPlaceholderText("√çrjon be keres√©si kifejez√©st...")
        self.search_input.textChanged.connect(self._apply_filter)
        
        search_layout.addWidget(search_label)
        search_layout.addWidget(self.search_input)
        layout.addLayout(search_layout)
        
        # Oszlop sz≈±r≈ë
        filter_layout = QHBoxLayout()
        filter_label = QLabel("Oszlop:")
        self.column_filter = QComboBox()
        self.column_filter.addItems(["√ñsszes", "D√°tum", "H≈ëm√©rs√©klet", "Csapad√©k", "Sz√©l"])
        self.column_filter.currentTextChanged.connect(self._apply_filter)
        
        filter_layout.addWidget(filter_label)
        filter_layout.addWidget(self.column_filter)
        layout.addLayout(filter_layout)
        
        # Lapoz√°s
        pagination_layout = QHBoxLayout()
        self.page_label = QLabel("Oldal:")
        self.page_spin = QSpinBox()
        self.page_spin.setMinimum(1)
        self.page_spin.setValue(1)
        self.page_spin.valueChanged.connect(self._change_page)
        
        self.rows_per_page_combo = QComboBox()
        self.rows_per_page_combo.addItems(["50", "100", "200", "√ñsszes"])
        self.rows_per_page_combo.setCurrentText("√ñsszes")  # üîß JAV√çT√ÅS: "√ñsszes" alap√©rtelmezett
        self.rows_per_page_combo.currentTextChanged.connect(self._change_page_size)
        
        pagination_layout.addWidget(self.page_label)
        pagination_layout.addWidget(self.page_spin)
        pagination_layout.addWidget(QLabel("/ oldal"))
        pagination_layout.addWidget(self.rows_per_page_combo)
        layout.addLayout(pagination_layout)
        
        # === EXPORT GOMBOK - THEMEMANAGER STYLING ===
        export_layout = QHBoxLayout()
        self.csv_btn = QPushButton("üìÑ CSV")
        self.csv_btn.clicked.connect(lambda: self._export_data("csv"))
        self.csv_btn.setEnabled(False)
        
        self.excel_btn = QPushButton("üìä Excel")
        self.excel_btn.clicked.connect(lambda: self._export_data("excel"))
        self.excel_btn.setEnabled(False)
        
        export_layout.addWidget(self.csv_btn)
        export_layout.addWidget(self.excel_btn)
        layout.addLayout(export_layout)
        
        return controls
    
    def _create_info_bar(self) -> QWidget:
        """Inform√°ci√≥s s√°v l√©trehoz√°sa - THEMEMANAGER KOMPATIBILIS."""
        info_bar = QWidget()
        info_bar.setMaximumHeight(30)
        info_bar.setObjectName("info_bar")
        
        layout = QHBoxLayout(info_bar)
        layout.setContentsMargins(10, 5, 10, 5)
        
        # Sorok info
        self.rows_info = QLabel("Nincs adat")
        self.rows_info.setObjectName("rows_info")
        layout.addWidget(self.rows_info)
        
        layout.addStretch()
        
        # Export progress
        self.export_progress = QProgressBar()
        self.export_progress.setVisible(False)
        self.export_progress.setMaximumWidth(200)
        layout.addWidget(self.export_progress)
        
        return info_bar
    
    def _register_widgets_for_theming(self) -> None:
        """Widget-ek regisztr√°l√°sa ThemeManager-ben."""
        print("üé® DEBUG: Registering WeatherDataTable widgets for theming...")
        
        # Input widgets
        register_widget_for_theming(self.search_input, "input")
        register_widget_for_theming(self.column_filter, "input")
        register_widget_for_theming(self.page_spin, "input")
        register_widget_for_theming(self.rows_per_page_combo, "input")
        
        # Button widgets
        register_widget_for_theming(self.csv_btn, "button")
        register_widget_for_theming(self.excel_btn, "button")
        
        # Table widgets
        register_widget_for_theming(self.table, "table")
        
        # Container widgets
        register_widget_for_theming(self.controls, "container")
        register_widget_for_theming(self, "container")
        
        print("‚úÖ DEBUG: WeatherDataTable widgets registered for theming")
    
    def _connect_signals(self) -> None:
        """Signal-slot kapcsolatok."""
        self.table.itemSelectionChanged.connect(self._on_selection_changed)
    
    def _apply_filter(self) -> None:
        """Sz≈±r√©s alkalmaz√°sa."""
        if self.current_data is None or self.current_data.empty:
            return
        
        search_text = self.search_input.text().lower()
        column_filter = self.column_filter.currentText()
        
        # Alap DataFrame m√°sol√°sa
        filtered_df = self.current_data.copy()
        
        # Sz√∂veges keres√©s
        if search_text:
            if column_filter == "√ñsszes":
                # Minden oszlopban keres√©s
                mask = filtered_df.astype(str).apply(
                    lambda x: x.str.lower().str.contains(search_text, na=False)
                ).any(axis=1)
            elif column_filter == "D√°tum":
                mask = filtered_df.iloc[:, 0].astype(str).str.lower().str.contains(search_text, na=False)
            elif column_filter == "H≈ëm√©rs√©klet":
                # Max, Min, √Åtlag h≈ëm√©rs√©klet oszlopokban keres√©s
                mask = (filtered_df.iloc[:, 1].astype(str).str.contains(search_text, na=False) | 
                       filtered_df.iloc[:, 2].astype(str).str.contains(search_text, na=False) |
                       (len(filtered_df.columns) > 3 and filtered_df.iloc[:, 3].astype(str).str.contains(search_text, na=False)))
            elif column_filter == "Csapad√©k":
                # Csapad√©k oszlop (index f√ºgghet az √°tlag h≈ëm√©rs√©klet jelenl√©t√©t≈ël)
                precip_col = 4 if len(filtered_df.columns) > 4 else 3
                if precip_col < len(filtered_df.columns):
                    mask = filtered_df.iloc[:, precip_col].astype(str).str.contains(search_text, na=False)
                else:
                    mask = pd.Series([False] * len(filtered_df))
            elif column_filter == "Sz√©l":
                # Sz√©l oszlop (utols√≥ oszlop)
                if len(filtered_df.columns) > 5:
                    mask = filtered_df.iloc[:, -1].astype(str).str.contains(search_text, na=False)
                else:
                    mask = pd.Series([False] * len(filtered_df))
            else:
                mask = pd.Series([True] * len(filtered_df))
            
            filtered_df = filtered_df[mask]
        
        self.filtered_data = filtered_df
        self._update_pagination()
        self._display_current_page()
        
        # Signal kibocs√°t√°sa
        self.data_filtered.emit(len(filtered_df))
    
    def _change_page(self, page: int) -> None:
        """Oldal v√°lt√°s."""
        self.current_page = page - 1
        self._display_current_page()
    
    def _change_page_size(self, size_text: str) -> None:
        """Oldalm√©ret v√°lt√°s."""
        if size_text == "√ñsszes":
            self.rows_per_page = len(self.filtered_data) if self.filtered_data is not None else 1000
        else:
            self.rows_per_page = int(size_text)
        
        self.current_page = 0
        self.page_spin.setValue(1)
        self._update_pagination()
        self._display_current_page()
        
        # üîß JAV√çT√ÅS: "√ñsszes" eset√©n jelezz√ºk hogy minden egy oldalon van
        if size_text == "√ñsszes":
            total_rows = len(self.filtered_data) if self.filtered_data is not None else 0
            print(f"‚úÖ T√°bl√°zat be√°ll√≠tva: √ñSSZES {total_rows} sor egy oldalon")
    
    def _update_pagination(self) -> None:
        """Lapoz√°s friss√≠t√©se."""
        if self.filtered_data is None or self.filtered_data.empty:
            self.page_spin.setMaximum(1)
            return
        
        total_pages = max(1, (len(self.filtered_data) - 1) // self.rows_per_page + 1)
        self.page_spin.setMaximum(total_pages)
        
        if self.current_page >= total_pages:
            self.current_page = total_pages - 1
            self.page_spin.setValue(self.current_page + 1)
    
    def _display_current_page(self) -> None:
        """Aktu√°lis oldal megjelen√≠t√©se - NUMERIKUS ITEMEKKEL."""
        if self.filtered_data is None or self.filtered_data.empty:
            self.table.setRowCount(0)
            self.table.setColumnCount(0)
            self._update_info_display(0, 0)
            return
        
        # Aktu√°lis oldal adatainak kisz√°m√≠t√°sa
        start_idx = self.current_page * self.rows_per_page
        end_idx = start_idx + self.rows_per_page
        page_data = self.filtered_data.iloc[start_idx:end_idx]
        
        # === KRITIKUS: NUMERIKUS ITEMEKKEL FELT√ñLT√âS ===
        self._populate_table_with_numeric_items(page_data)
        self._update_info_display(len(self.filtered_data), len(page_data))
    
    def _populate_table_with_numeric_items(self, data: pd.DataFrame) -> None:
        """
        T√°bl√°zat felt√∂lt√©se NumericTableWidgetItem-ekkel - THEMEMANAGER SZ√çNEKKEL.
        Ez a kulcs a funkcion√°lis rendez√©shez!
        """
        rows, cols = data.shape
        
        # Oszlopok be√°ll√≠t√°sa - SZAKMAILAG PONTOS FEJL√âCEKKEL
        headers = ["D√°tum", "Max h≈ëm√©rs√©klet (¬∞C)", "Min h≈ëm√©rs√©klet (¬∞C)", "Napi √°tlag (¬∞C)", "Csapad√©k (mm)"]
        if cols > 5:  # Ha van sz√©lsebess√©g is
            headers.append("Sz√©lsebess√©g (km/h)")
        
        self.table.setRowCount(rows)
        self.table.setColumnCount(len(headers))
        self.table.setHorizontalHeaderLabels(headers)
        
        # ThemeManager sz√≠nek lek√©rdez√©se
        scheme = self._theme_manager.get_color_scheme()
        
        # === ADATOK FELT√ñLT√âSE INTELLIGENS ITEMEKKEL ===
        for i in range(rows):
            for j in range(min(cols, len(headers))):
                value = data.iloc[i, j]
                
                if j == 0:  # D√°tum oszlop
                    # D√°tum eset√©n sima QTableWidgetItem (string rendez√©s j√≥)
                    item = QTableWidgetItem(str(value))
                    item.setTextAlignment(Qt.AlignCenter)
                    
                elif pd.isna(value):  # Hi√°nyz√≥ √©rt√©k
                    # Hi√°nyz√≥ √©rt√©kek kezel√©se
                    item = NumericTableWidgetItem("N/A", -999999)  # Nagy negat√≠v sz√°m a rendez√©shez
                    item.setTextAlignment(Qt.AlignRight | Qt.AlignVCenter)
                    
                else:  # Numerikus oszlopok
                    # === KRITIKUS: NUMERIKUS ITEM HASZN√ÅLATA ===
                    numeric_value = float(value)
                    
                    if j in [1, 2, 3]:  # H≈ëm√©rs√©klet oszlopok (max, min, √°tlag)
                        display_text = f"{numeric_value:.1f}"
                    elif j == 4:  # Csapad√©k (vagy sz√©l ha nincs √°tlag)
                        display_text = f"{numeric_value:.1f}"
                    elif j == 5:  # Sz√©l (ha van)
                        display_text = f"{numeric_value:.1f}"
                    else:
                        display_text = f"{numeric_value:.1f}"
                    
                    item = NumericTableWidgetItem(display_text, numeric_value)
                    item.setTextAlignment(Qt.AlignRight | Qt.AlignVCenter)
                
                # === THEMEMANAGER SZ√çNEK ALKALMAZ√ÅSA ===
                if scheme:
                    # üîß KRITIKUS JAV√çT√ÅS: ColorPalette API helyes haszn√°lata
                    # Altern√°l√≥ h√°tt√©rsz√≠nek
                    if i % 2 == 0:
                        item.setBackground(QColor(scheme.get_color("surface", "base") or "#ffffff"))
                    else:
                        item.setBackground(QColor(scheme.get_color("surface", "light") or "#f5f5f5"))
                    
                    # Sz√∂vegsz√≠n
                    item.setForeground(QColor(scheme.get_color("primary", "base") or "#1f2937"))
                else:
                    # Fallback sz√≠nek
                    if i % 2 == 0:
                        item.setBackground(QColor(248, 249, 250))  # Vil√°gos sz√ºrke
                    else:
                        item.setBackground(QColor(255, 255, 255))  # Feh√©r
                    item.setForeground(QColor(31, 41, 55))        # S√∂t√©t sz√∂veg
                
                self.table.setItem(i, j, item)
        
        # Oszlop sz√©less√©gek automatikus be√°ll√≠t√°sa
        self.table.resizeColumnsToContents()
        
        # Rendez√©si √°llapot meg≈ërz√©se
        if self.current_sort_column >= 0:
            self.table.sortItems(self.current_sort_column, self.current_sort_order)
    
    def _update_info_display(self, total_rows: int, displayed_rows: int) -> None:
        """Inform√°ci√≥s sz√∂veg friss√≠t√©se."""
        if total_rows == 0:
            self.rows_info.setText("Nincs megjelen√≠thet≈ë adat")
        else:
            # üîß JAV√çT√ÅS: "√ñsszes" eset√©n egyszer≈±s√≠tett megjelen√≠t√©s
            if self.rows_per_page_combo.currentText() == "√ñsszes" or displayed_rows == total_rows:
                info_text = f"√ñsszesen: {total_rows} sor (mind megjelen√≠tve)"
            else:
                current_page = self.current_page + 1
                total_pages = max(1, (total_rows - 1) // self.rows_per_page + 1)
                
                info_text = f"√ñsszesen: {total_rows} sor | "
                info_text += f"Megjelen√≠tve: {displayed_rows} sor | "
                info_text += f"Oldal: {current_page}/{total_pages}"
            
            self.rows_info.setText(info_text)
    
    def _on_selection_changed(self) -> None:
        """Kiv√°laszt√°s v√°ltoz√°s kezel√©se."""
        current_row = self.table.currentRow()
        if current_row >= 0:
            # Glob√°lis sor index sz√°m√≠t√°sa
            global_row = self.current_page * self.rows_per_page + current_row
            self.row_selected.emit(global_row)
    
    def _export_data(self, format: str) -> None:
        """Adatok export√°l√°sa."""
        if self.filtered_data is None or self.filtered_data.empty:
            QMessageBox.warning(self, "Export hiba", "Nincsenek export√°lhat√≥ adatok.")
            return
        
        # F√°jl ment√©si dial√≥gus
        if format == "csv":
            file_filter = "CSV f√°jlok (*.csv)"
            default_ext = ".csv"
        else:  # excel
            file_filter = "Excel f√°jlok (*.xlsx)"
            default_ext = ".xlsx"
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        default_filename = f"weather_data_{timestamp}{default_ext}"
        
        filepath, _ = QFileDialog.getSaveFileName(
            self, f"Adatok export√°l√°sa ({format.upper()})", 
            default_filename, file_filter
        )
        
        if not filepath:
            return
        
        # Export v√©grehajt√°sa
        self._perform_export(filepath, format)
    
    def _perform_export(self, filepath: str, format: str) -> None:
        """Export v√©grehajt√°sa."""
        try:
            self.export_progress.setVisible(True)
            self.export_progress.setRange(0, 100)
            self.export_progress.setValue(10)
            
            # Fejl√©cek be√°ll√≠t√°sa - SZAKMAILAG PONTOS OSZLOPOKKAL
            export_data = self.filtered_data.copy()
            column_names = ["D√°tum", "Max h≈ëm√©rs√©klet (¬∞C)", "Min h≈ëm√©rs√©klet (¬∞C)", "Napi √°tlag (¬∞C)", "Csapad√©k (mm)"]
            
            if len(export_data.columns) > 5:
                column_names.append("Sz√©lsebess√©g (km/h)")
            
            export_data.columns = column_names[:len(export_data.columns)]
            
            self.export_progress.setValue(50)
            
            # Export v√©grehajt√°sa
            if format == "csv":
                export_data.to_csv(filepath, index=False, encoding='utf-8')
            else:  # excel
                export_data.to_excel(filepath, index=False, engine='openpyxl')
            
            self.export_progress.setValue(100)
            
            # Sikeres export
            QMessageBox.information(self, "Export sikeres", 
                                  f"Adatok sikeresen export√°lva:\n{filepath}")
            
            self.export_completed.emit(filepath, True)
            
        except Exception as e:
            QMessageBox.critical(self, "Export hiba", f"Hiba az export sor√°n:\n{str(e)}")
            self.export_completed.emit(filepath, False)
        
        finally:
            self.export_progress.setVisible(False)
    
    # === PUBLIC METHODS ===
    def update_data(self, data: Dict[str, Any]) -> None:
        """
        T√°bl√°zat adatainak friss√≠t√©se - ROBUST HIBAKEZEL√âSSEL.
        
        üîß KRITIKUS JAV√çT√ÅS: Hibakezel√©s √©s debug logging hozz√°adva!
        """
        try:
            logger.info("üîÑ WeatherDataTable.update_data() ELINDULT - ROBUST HIBAKEZEL√âSSEL")
            
            # üîß KRITIKUS: Bemen≈ë adatok valid√°l√°sa
            if not data:
                logger.error("‚ùå √úres adatok √©rkeztek a t√°bl√°zatba!")
                self.clear_data()
                return
            
            if "daily" not in data:
                logger.error("‚ùå Hi√°nyzik a 'daily' kulcs az adatokb√≥l!")
                self.clear_data()
                return
            
            logger.info(f"‚úÖ Adatok szerkezete: {list(data.keys())}")
            logger.info(f"‚úÖ Daily adatok: {list(data.get('daily', {}).keys())}")
            
            # DataFrame konvert√°l√°s - ROBUST HIBAKEZEL√âSSEL
            df = self._convert_to_dataframe(data)
            
            if df.empty:
                logger.error("‚ùå DataFrame konvert√°l√°s sikertelen vagy √ºres!")
                self.clear_data()
                return
            
            logger.info(f"‚úÖ DataFrame l√©trehozva: {len(df)} sor, {len(df.columns)} oszlop")
            logger.info(f"‚úÖ Oszlopnevek: {list(df.columns)}")
            
            # Adatok be√°ll√≠t√°sa
            self.current_data = df
            self.filtered_data = df.copy()
            
            # Reset vez√©rl≈ëk
            self.search_input.clear()
            self.column_filter.setCurrentText("√ñsszes")
            self.current_page = 0
            self.page_spin.setValue(1)
            
            # üîß JAV√çT√ÅS: "√ñsszes" sor alap√©rtelmezett √∫j adatokn√°l
            self.rows_per_page_combo.setCurrentText("√ñsszes")
            self.rows_per_page = len(df)  # Teljes adathalmaz megjelen√≠t√©se
            
            # Rendez√©si √°llapot reset
            self.current_sort_column = -1
            self.current_sort_order = Qt.AscendingOrder
            
            # Megjelen√≠t√©s friss√≠t√©se
            self._update_pagination()
            self._display_current_page()
            
            # Export gombok enged√©lyez√©se
            self.csv_btn.setEnabled(True)
            self.excel_btn.setEnabled(True)
            
            logger.info(f"‚úÖ WeatherDataTable.update_data() SIKERES! {len(df)} sor megjelen√≠tve")
            
        except Exception as e:
            logger.error(f"‚ùå WeatherDataTable.update_data() HIBA: {e}")
            logger.exception("R√©szletes hiba:")
            self.clear_data()
    
    def _convert_to_dataframe(self, data: Dict[str, Any]) -> pd.DataFrame:
        """
        API adatok DataFrame-m√© konvert√°l√°sa - ROBUST HIBAKEZEL√âSSEL.
        
        üîß KRITIKUS JAV√çT√ÅS: 
        - Adathossz valid√°l√°s
        - √úres adatok kezel√©se
        - R√©szletes debug logging
        - Exception handling
        
        Args:
            data: API v√°lasz adatok
            
        Returns:
            Feldolgozott DataFrame vagy √ºres DataFrame hiba eset√©n
        """
        try:
            logger.info("üîÑ _convert_to_dataframe() ELINDULT - ROBUST VERZI√ì")
            
            daily_data = data.get("daily", {})
            
            # üîß KRITIKUS: Alapadatok kinyer√©se √©s valid√°l√°sa
            dates = daily_data.get("time", [])
            temp_max = daily_data.get("temperature_2m_max", [])
            temp_min = daily_data.get("temperature_2m_min", [])
            temp_mean = daily_data.get("temperature_2m_mean", [])
            precip = daily_data.get("precipitation_sum", [])
            windspeed = daily_data.get("windspeed_10m_max", [])
            
            # üîß KRITIKUS: Adathossz ellen≈ërz√©s
            data_lengths = {
                'dates': len(dates),
                'temp_max': len(temp_max),
                'temp_min': len(temp_min),
                'temp_mean': len(temp_mean),
                'precip': len(precip),
                'windspeed': len(windspeed)
            }
            
            logger.info(f"üìä Adathosszak: {data_lengths}")
            
            # Alapvet≈ë valid√°l√°s
            if not dates or len(dates) == 0:
                logger.error("‚ùå Nincs d√°tum adat!")
                return pd.DataFrame()
            
            if not temp_max or len(temp_max) == 0:
                logger.error("‚ùå Nincs maximum h≈ëm√©rs√©klet adat!")
                return pd.DataFrame()
            
            base_length = len(dates)
            logger.info(f"‚úÖ Alapvet≈ë hossz: {base_length} nap")
            
            # üîß KRITIKUS: Adatok padding/trimming azonos hosszra
            def normalize_array(arr: List, target_length: int, fill_value=None) -> List:
                """Array normaliz√°l√°sa adott hosszra."""
                if len(arr) == target_length:
                    return arr
                elif len(arr) < target_length:
                    # Padding
                    return arr + [fill_value] * (target_length - len(arr))
                else:
                    # Trimming
                    return arr[:target_length]
            
            # √ñsszes array normaliz√°l√°sa
            dates_norm = normalize_array(dates, base_length)
            temp_max_norm = normalize_array(temp_max, base_length, None)
            temp_min_norm = normalize_array(temp_min, base_length, None)
            temp_mean_norm = normalize_array(temp_mean, base_length, None)
            precip_norm = normalize_array(precip, base_length, 0.0)
            windspeed_norm = normalize_array(windspeed, base_length, None)
            
            # üîß KRITIKUS: temp_mean fallback sz√°m√≠t√°s ha sz√ºks√©ges
            if not temp_mean or all(x is None for x in temp_mean_norm):
                logger.warning("‚ö†Ô∏è temperature_2m_mean hi√°nyzik, fallback sz√°m√≠t√°sra...")
                temp_mean_norm = []
                for i in range(base_length):
                    if (i < len(temp_max_norm) and i < len(temp_min_norm) and 
                        temp_max_norm[i] is not None and temp_min_norm[i] is not None):
                        avg = (temp_max_norm[i] + temp_min_norm[i]) / 2
                        temp_mean_norm.append(round(avg, 1))
                    else:
                        temp_mean_norm.append(None)
                logger.info(f"üîÑ Fallback sz√°m√≠t√°s k√©sz: {len(temp_mean_norm)} √©rt√©k")
            else:
                logger.info(f"‚úÖ temperature_2m_mean haszn√°lva: {len(temp_mean_norm)} √©rt√©k")
            
            # üîß KRITIKUS: DataFrame l√©trehoz√°sa normaliz√°lt adatokkal
            df_data = {
                'date': dates_norm,
                'temp_max': temp_max_norm,
                'temp_min': temp_min_norm,
                'temp_mean': temp_mean_norm,
                'precipitation': precip_norm
            }
            
            # Sz√©l adat hozz√°ad√°sa, ha van
            if windspeed_norm and any(x is not None for x in windspeed_norm):
                df_data['windspeed'] = windspeed_norm
                logger.info("‚úÖ Sz√©lsebess√©g adatok hozz√°adva")
            else:
                logger.info("‚ö†Ô∏è Sz√©lsebess√©g adatok hi√°nyoznak")
            
            # DataFrame l√©trehoz√°sa
            df = pd.DataFrame(df_data)
            
            # üîß KRITIKUS: DataFrame valid√°l√°s
            if df.empty:
                logger.error("‚ùå L√©trehozott DataFrame √ºres!")
                return pd.DataFrame()
            
            logger.info(f"‚úÖ DataFrame sikeresen l√©trehozva:")
            logger.info(f"   - Sorok: {len(df)}")
            logger.info(f"   - Oszlopok: {len(df.columns)}")
            logger.info(f"   - Oszlopnevek: {list(df.columns)}")
            logger.info(f"   - Els≈ë 3 sor d√°tuma: {list(df['date'].head(3))}")
            
            return df
            
        except Exception as e:
            logger.error(f"‚ùå _convert_to_dataframe() HIBA: {e}")
            logger.exception("R√©szletes hiba:")
            return pd.DataFrame()
    
    def clear_data(self) -> None:
        """T√°bl√°zat t√∂rl√©se."""
        self.current_data = None
        self.filtered_data = None
        self.table.setRowCount(0)
        self.table.setColumnCount(0)
        
        # Vez√©rl≈ëk letilt√°sa
        self.csv_btn.setEnabled(False)
        self.excel_btn.setEnabled(False)
        
        # üîß JAV√çT√ÅS: "√ñsszes" alap√©rtelmezett vissza√°ll√≠t√°sa
        self.rows_per_page_combo.setCurrentText("√ñsszes")
        self.rows_per_page = 1000
        
        # Rendez√©si √°llapot reset
        self.current_sort_column = -1
        self.current_sort_order = Qt.AscendingOrder
        
        self._update_info_display(0, 0)
    
    def get_selected_row_data(self) -> Optional[Dict[str, Any]]:
        """Kiv√°lasztott sor adatainak lek√©rdez√©se."""
        current_row = self.table.currentRow()
        if current_row >= 0 and self.filtered_data is not None:
            global_row = self.current_page * self.rows_per_page + current_row
            if global_row < len(self.filtered_data):
                row_data = self.filtered_data.iloc[global_row].to_dict()
                return row_data
        return None
    
    def apply_theme(self, dark_theme: bool) -> None:
        """
        T√©ma alkalmaz√°sa - THEMEMANAGER DELEG√ÅL√ì VERZI√ì.
        
        Args:
            dark_theme: True, ha s√∂t√©t t√©ma
        """
        print(f"üé® DEBUG: WeatherDataTable applying theme via ThemeManager: {'dark' if dark_theme else 'light'}")
        
        # ThemeManager automatikus widget styling
        theme_name = "dark" if dark_theme else "light"
        self._theme_manager.set_theme(theme_name)
        
        # Info bar speci√°lis CSS (nem widget, hanem manual)
        scheme = self._theme_manager.get_color_scheme()
        if scheme and hasattr(self, 'info_bar'):
            # üîß KRITIKUS JAV√çT√ÅS: ColorPalette API helyes haszn√°lata
            surface_variant = scheme.get_color("surface", "light") or "#f5f5f5"
            border_color = scheme.get_color("info", "light") or "#d1d5db"
            
            self.info_bar.setStyleSheet(f"""
                QWidget#info_bar {{
                    background-color: {surface_variant};
                    border-top: 1px solid {border_color};
                }}
            """)
            
            if hasattr(self, 'rows_info'):
                text_color = scheme.get_color("info", "base") or "#6b7280"
                self.rows_info.setStyleSheet(f"""
                    QLabel#rows_info {{
                        color: {text_color};
                        font-size: 11px;
                    }}
                """)
        
        # Ha van adat, √∫jrarajzoljuk a t√°bl√°zatot ThemeManager sz√≠nekkel
        if self.filtered_data is not None and not self.filtered_data.empty:
            self._display_current_page()
        
        print(f"‚úÖ DEBUG: WeatherDataTable theme applied via ThemeManager: {'dark' if dark_theme else 'light'}")
    
    def get_sorting_info(self) -> Tuple[int, str]:
        """Jelenlegi rendez√©si √°llapot lek√©rdez√©se."""
        order_text = "n√∂vekv≈ë" if self.current_sort_order == Qt.AscendingOrder else "cs√∂kken≈ë"
        return (self.current_sort_column, order_text)
