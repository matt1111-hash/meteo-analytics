#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üó∫Ô∏è Magyar T√©rk√©pes Tab - Teljes Interakt√≠v T√©rk√©pes Dashboard
Magyar Kl√≠maanalitika MVP - HungarianLocationSelector + HungarianMapVisualizer Integr√°ci√≥

Ez a modul a teljes magyar t√©rk√©pes funkcionalit√°st biztos√≠tja:
- Bal oldal: HungarianLocationSelector (hierarchikus v√°laszt√°s)
- Jobb oldal: HungarianMapVisualizer (interakt√≠v Folium t√©rk√©p)
- Signal-slot integr√°ci√≥ mindk√©t ir√°nyban
- GeoDataFrame megoszt√°s a komponensek k√∂z√∂tt
- ThemeManager integr√°ci√≥

WORKFLOW:
1. User kiv√°laszt √©ghajlati r√©gi√≥t ‚Üí megy√©k friss√ºlnek
2. User kiv√°laszt megy√©t ‚Üí t√©rk√©p r√°zoomol a megy√©re
3. Interakt√≠v Folium t√©rk√©p: hover, click, export funkci√≥k
4. K√©tir√°ny√∫ integr√°ci√≥: t√©rk√©p click ‚Üí location friss√≠t√©s

F√°jl helye: src/gui/hungarian_map_tab.py
"""

from typing import Dict, List, Optional, Tuple, Any
from pathlib import Path

from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QSplitter, QLabel,
    QGroupBox, QPushButton, QProgressBar, QMessageBox
)
from PySide6.QtCore import Qt, Signal, QTimer
from PySide6.QtGui import QFont

# Saj√°t modulok
from .hungarian_location_selector import HungarianLocationSelector
from .map_visualizer import HungarianMapVisualizer
from .theme_manager import register_widget_for_theming
from .color_palette import ColorPalette


class HungarianMapTab(QWidget):
    """
    üó∫Ô∏è Magyar T√©rk√©pes Tab - Teljes interakt√≠v t√©rk√©pes dashboard.
    
    KOMPONENSEK:
    - HungarianLocationSelector: Hierarchikus lok√°ci√≥ v√°laszt√≥ (bal oldal, 30%)
    - HungarianMapVisualizer: Interakt√≠v Folium t√©rk√©p (jobb oldal, 70%)
    - Signal-slot integr√°ci√≥: k√©tir√°ny√∫ kommunik√°ci√≥
    - GeoDataFrame sharing: egyszer bet√∂lt√©s, k√©tszer haszn√°lat
    
    FUNKCI√ìK:
    - √âghajlati r√©gi√≥ ‚Üí megye hierarchikus v√°laszt√°s
    - Megye kiv√°laszt√°s ‚Üí t√©rk√©p automatikus k√∂zpontos√≠t√°s
    - Interakt√≠v t√©rk√©p: zoom, pan, hover, tooltip
    - T√©rk√©p export√°l√°s HTML form√°tumban
    - Theme-aware design
    
    SIGNALOK:
    - location_selected(location_data): Lok√°ci√≥ kiv√°lasztva
    - map_interaction(interaction_type, data): T√©rk√©p interakci√≥
    - export_completed(file_path): Export befejezve
    - error_occurred(message): Hiba t√∂rt√©nt
    """
    
    # Signalok
    location_selected = Signal(object)        # Location data kiv√°lasztva
    map_interaction = Signal(str, object)     # T√©rk√©p interakci√≥ (type, data)
    export_completed = Signal(str)           # Export f√°jl √∫tvonal
    error_occurred = Signal(str)             # Hiba √ºzenet
    data_loading_started = Signal()          # Adatok bet√∂lt√©se kezd≈ëd√∂tt
    data_loading_completed = Signal()        # Adatok bet√∂lt√©se befejezve
    
    def __init__(self, parent=None):
        super().__init__(parent)
        
        # Komponens inicializ√°l√°s
        self.color_palette = ColorPalette()
        
        # Komponens referenci√°k
        self.location_selector: Optional[HungarianLocationSelector] = None
        self.map_visualizer: Optional[HungarianMapVisualizer] = None
        
        # Adatok
        self.counties_gdf = None
        self.current_location_data = None
        self.is_data_loaded = False
        
        # UI √©p√≠t√©s
        self._setup_ui()
        self._setup_theme()
        self._connect_signals()
        
        # Kezdeti √°llapot
        self._initialize_components()
        
        print("üó∫Ô∏è DEBUG: HungarianMapTab initialized successfully")
    
    def _setup_ui(self):
        """
        üé® UI komponensek l√©trehoz√°sa - QSplitter layout.
        """
        layout = QVBoxLayout(self)
        layout.setContentsMargins(5, 5, 5, 5)
        layout.setSpacing(5)
        
        # === FEJL√âC ===
        
        header_group = QGroupBox("üó∫Ô∏è Magyar Interakt√≠v T√©rk√©p")
        register_widget_for_theming(header_group, "container")
        header_layout = QHBoxLayout(header_group)
        
        # C√≠msor
        title_label = QLabel("üá≠üá∫ Magyarorsz√°g √âghajlati T√©rk√©pe")
        title_font = title_label.font()
        title_font.setPointSize(14)
        title_font.setBold(True)
        title_label.setFont(title_font)
        register_widget_for_theming(title_label, "text")
        header_layout.addWidget(title_label)
        
        header_layout.addStretch()
        
        # Gyors akci√≥k
        self.reset_view_btn = QPushButton("üîÑ Alaphelyzet")
        self.reset_view_btn.setToolTip("T√©rk√©p vissza√°ll√≠t√°sa Magyarorsz√°g teljes n√©zet√©re")
        register_widget_for_theming(self.reset_view_btn, "button")
        header_layout.addWidget(self.reset_view_btn)
        
        self.export_map_btn = QPushButton("üíæ T√©rk√©p Export")
        self.export_map_btn.setToolTip("Interakt√≠v t√©rk√©p export√°l√°sa HTML f√°jlba")
        self.export_map_btn.setEnabled(False)  # Kezdetben letiltva
        register_widget_for_theming(self.export_map_btn, "button")
        header_layout.addWidget(self.export_map_btn)
        
        layout.addWidget(header_group)
        
        # === PROGRESS BAR (KEZDETI BET√ñLT√âSHEZ) ===
        
        self.loading_progress = QProgressBar()
        self.loading_progress.setRange(0, 100)
        self.loading_progress.setValue(0)
        self.loading_progress.setVisible(False)
        register_widget_for_theming(self.loading_progress, "input")
        layout.addWidget(self.loading_progress)
        
        self.loading_status = QLabel("T√©rk√©pes komponensek inicializ√°l√°sa...")
        register_widget_for_theming(self.loading_status, "text")
        layout.addWidget(self.loading_status)
        
        # === F≈ê SPLITTER LAYOUT ===
        
        main_splitter = QSplitter(Qt.Horizontal)
        main_splitter.setHandleWidth(12)
        main_splitter.setChildrenCollapsible(False)
        register_widget_for_theming(main_splitter, "splitter")
        
        # === BAL OLDAL: LOCATION SELECTOR (30%) ===
        
        left_panel = QWidget()
        left_panel.setMinimumWidth(350)
        left_panel.setMaximumWidth(500)
        register_widget_for_theming(left_panel, "container")
        left_layout = QVBoxLayout(left_panel)
        left_layout.setContentsMargins(5, 5, 5, 5)
        
        # Location selector l√©trehoz√°sa
        self.location_selector = HungarianLocationSelector()
        left_layout.addWidget(self.location_selector)
        
        main_splitter.addWidget(left_panel)
        
        # === JOBB OLDAL: MAP VISUALIZER (70%) ===
        
        right_panel = QWidget()
        right_panel.setMinimumWidth(600)
        register_widget_for_theming(right_panel, "container")
        right_layout = QVBoxLayout(right_panel)
        right_layout.setContentsMargins(5, 5, 5, 5)
        
        # Map visualizer l√©trehoz√°sa
        self.map_visualizer = HungarianMapVisualizer()
        right_layout.addWidget(self.map_visualizer)
        
        main_splitter.addWidget(right_panel)
        
        # === SPLITTER KONFIGUR√ÅL√ÅS ===
        
        # Stretch factors: Location selector fix, Map visualizer expand√°lhat√≥
        main_splitter.setStretchFactor(0, 0)  # Left panel fix
        main_splitter.setStretchFactor(1, 1)  # Right panel expand
        
        # Kezdeti m√©retek: 380px left, marad√©k right
        main_splitter.setSizes([380, 820])
        
        layout.addWidget(main_splitter)
        
        # Layout s√∫lyok
        layout.setStretchFactor(header_group, 0)
        layout.setStretchFactor(main_splitter, 1)
        
        print("‚úÖ DEBUG: HungarianMapTab UI setup complete")
    
    def _setup_theme(self):
        """
        üé® T√©ma be√°ll√≠t√°sok alkalmaz√°sa.
        """
        register_widget_for_theming(self, "container")
    
    def _connect_signals(self):
        """
        üîó Signal-slot kapcsolatok l√©trehoz√°sa.
        """
        print("üîó DEBUG: Connecting HungarianMapTab signals...")
        
        # === HEADER GOMBOK ===
        
        self.reset_view_btn.clicked.connect(self._reset_map_view)
        self.export_map_btn.clicked.connect(self._export_map)
        
        # === LOCATION SELECTOR ‚Üí MAP VISUALIZER ===
        
        if self.location_selector:
            # Megye kiv√°laszt√°s ‚Üí t√©rk√©p friss√≠t√©s
            self.location_selector.county_selected.connect(self._on_county_selected)
            print("‚úÖ DEBUG: LocationSelector.county_selected ‚Üí MapTab._on_county_selected CONNECTED")
            
            # T√©rk√©p friss√≠t√©s k√©r√©s ‚Üí t√©rk√©p bounds friss√≠t√©s
            self.location_selector.map_update_requested.connect(self._on_map_update_requested)
            print("‚úÖ DEBUG: LocationSelector.map_update_requested ‚Üí MapTab._on_map_update_requested CONNECTED")
            
            # Lok√°ci√≥ kiv√°laszt√°s ‚Üí forward signal
            self.location_selector.location_selected.connect(self._on_location_selected)
            print("‚úÖ DEBUG: LocationSelector.location_selected ‚Üí MapTab._on_location_selected CONNECTED")
            
            # √Åltal√°nos selection v√°ltoz√°s
            self.location_selector.selection_changed.connect(self._on_selection_changed)
            print("‚úÖ DEBUG: LocationSelector.selection_changed ‚Üí MapTab._on_selection_changed CONNECTED")
        
        # === MAP VISUALIZER ‚Üí LOCATION SELECTOR ===
        
        if self.map_visualizer:
            # T√©rk√©p k√©sz ‚Üí export enged√©lyez√©se
            self.map_visualizer.map_ready.connect(self._on_map_ready)
            print("‚úÖ DEBUG: MapVisualizer.map_ready ‚Üí MapTab._on_map_ready CONNECTED")
            
            # Megye kattint√°s a t√©rk√©pen ‚Üí location selector friss√≠t√©s
            self.map_visualizer.county_clicked.connect(self._on_map_county_clicked)
            print("‚úÖ DEBUG: MapVisualizer.county_clicked ‚Üí MapTab._on_map_county_clicked CONNECTED")
            
            # Export befejez√©s ‚Üí forward signal
            self.map_visualizer.export_completed.connect(self._on_export_completed)
            print("‚úÖ DEBUG: MapVisualizer.export_completed ‚Üí MapTab._on_export_completed CONNECTED")
            
            # Hiba esem√©nyek ‚Üí forward signal
            self.map_visualizer.error_occurred.connect(self._on_error_occurred)
            print("‚úÖ DEBUG: MapVisualizer.error_occurred ‚Üí MapTab._on_error_occurred CONNECTED")
        
        print("‚úÖ DEBUG: All HungarianMapTab signals connected successfully")
    
    def _initialize_components(self):
        """
        üîß Komponensek inicializ√°l√°sa √©s adatok bet√∂lt√©se.
        """
        print("üîß DEBUG: Initializing HungarianMapTab components...")
        
        # Loading indik√°ci√≥
        self.loading_progress.setVisible(True)
        self.loading_progress.setValue(10)
        self.loading_status.setText("üîÑ GeoJSON adatok bet√∂lt√©se...")
        self.data_loading_started.emit()
        
        # Timer a folyamat szimul√°l√°s√°hoz √©s l√©pcs≈ëzetes inicializ√°l√°shoz
        QTimer.singleShot(500, self._initialize_step_1)
    
    def _initialize_step_1(self):
        """
        Inicializ√°l√°s 1. l√©p√©s: Location selector adatok.
        """
        print("üîß DEBUG: Initialization step 1 - Location selector data")
        
        self.loading_progress.setValue(30)
        self.loading_status.setText("üìç Lok√°ci√≥ v√°laszt√≥ inicializ√°l√°sa...")
        
        # Location selector m√°r automatikusan ind√≠tja a GeoJSON bet√∂lt√©st
        # V√°runk az adatok bet√∂lt√©s√©re
        QTimer.singleShot(1000, self._initialize_step_2)
    
    def _initialize_step_2(self):
        """
        Inicializ√°l√°s 2. l√©p√©s: GeoDataFrame megoszt√°s.
        """
        print("üîß DEBUG: Initialization step 2 - GeoDataFrame sharing")
        
        self.loading_progress.setValue(60)
        self.loading_status.setText("üó∫Ô∏è T√©rk√©pes adatok megoszt√°sa...")
        
        # GeoDataFrame lek√©rdez√©se a location selector-t≈ël
        if self.location_selector:
            self.counties_gdf = self.location_selector.get_counties_geodataframe()
            
            if self.counties_gdf is not None:
                print(f"‚úÖ DEBUG: Counties GeoDataFrame received: {len(self.counties_gdf)} counties")
                
                # GeoDataFrame √°tad√°sa a map visualizer-nek
                if self.map_visualizer:
                    self.map_visualizer.set_counties_geodataframe(self.counties_gdf)
                    print("‚úÖ DEBUG: Counties GeoDataFrame shared with MapVisualizer")
            else:
                print("‚ö†Ô∏è DEBUG: Counties GeoDataFrame not available yet")
        
        QTimer.singleShot(1000, self._initialize_step_3)
    
    def _initialize_step_3(self):
        """
        Inicializ√°l√°s 3. l√©p√©s: Finaliz√°l√°s.
        """
        print("üîß DEBUG: Initialization step 3 - Finalization")
        
        self.loading_progress.setValue(90)
        self.loading_status.setText("‚úÖ T√©rk√©pes dashboard inicializ√°l√°sa...")
        
        # √Ållapot friss√≠t√©se
        self.is_data_loaded = True
        
        # Export gomb enged√©lyez√©se (ha t√©rk√©p k√©sz)
        if self.map_visualizer:
            # A map_ready signal automatikusan enged√©lyezi majd
            pass
        
        QTimer.singleShot(500, self._initialization_complete)
    
    def _initialization_complete(self):
        """
        Inicializ√°l√°s befejez√©se.
        """
        print("‚úÖ DEBUG: HungarianMapTab initialization complete")
        
        self.loading_progress.setValue(100)
        self.loading_status.setText("‚úÖ Magyar t√©rk√©pes dashboard k√©sz!")
        
        # Loading indik√°torok elrejt√©se
        QTimer.singleShot(2000, self._hide_loading_indicators)
        
        # Completion signal
        self.data_loading_completed.emit()
    
    def _hide_loading_indicators(self):
        """
        Loading indik√°torok elrejt√©se.
        """
        self.loading_progress.setVisible(False)
        self.loading_status.setText("üó∫Ô∏è Haszn√°ld a bal oldali v√°laszt√≥t a t√©rk√©p navig√°l√°s√°hoz")
    
    # === SIGNAL SLOT MET√ìDUSOK ===
    
    def _on_county_selected(self, county_name: str, geometry):
        """
        üó∫Ô∏è Megye kiv√°lasztva a location selector-ben ‚Üí t√©rk√©p friss√≠t√©s.
        
        Args:
            county_name: Megye neve
            geometry: Megye geometria (Shapely objektum)
        """
        print(f"üó∫Ô∏è DEBUG: County selected: {county_name}")
        
        if not self.map_visualizer or not self.is_data_loaded:
            print("‚ö†Ô∏è DEBUG: MapVisualizer not ready for county selection")
            return
        
        try:
            # Geometry bounds lek√©rdez√©se
            bounds = geometry.bounds  # (minx, miny, maxx, maxy)
            print(f"üéØ DEBUG: County bounds: {bounds}")
            
            # T√©rk√©p bounds friss√≠t√©se
            self.map_visualizer.update_map_bounds(bounds)
            
            # Status friss√≠t√©se
            self.loading_status.setText(f"üéØ T√©rk√©p k√∂zpontos√≠tva: {county_name}")
            
            # Forward signal
            self.map_interaction.emit("county_focused", {
                'county_name': county_name,
                'bounds': bounds
            })
            
        except Exception as e:
            error_msg = f"Megye t√©rk√©pes megjelen√≠t√©si hiba: {e}"
            print(f"‚ùå DEBUG: {error_msg}")
            self._on_error_occurred(error_msg)
    
    def _on_map_update_requested(self, bounds):
        """
        üéØ T√©rk√©p friss√≠t√©s k√©r√©s a location selector-t≈ël.
        
        Args:
            bounds: T√©rk√©p hat√°rok (minx, miny, maxx, maxy)
        """
        print(f"üéØ DEBUG: Map update requested with bounds: {bounds}")
        
        if self.map_visualizer and self.is_data_loaded:
            self.map_visualizer.update_map_bounds(bounds)
            self.loading_status.setText("üéØ T√©rk√©p friss√≠tve")
        else:
            print("‚ö†Ô∏è DEBUG: MapVisualizer not ready for bounds update")
    
    def _on_location_selected(self, location):
        """
        üìç Lok√°ci√≥ kiv√°lasztva a location selector-ben ‚Üí forward signal.
        
        Args:
            location: Location objektum
        """
        print(f"üìç DEBUG: Location selected: {location.display_name if location else 'None'}")
        
        self.current_location_data = location
        
        # Forward signal
        self.location_selected.emit(location)
        
        # Status friss√≠t√©se
        if location:
            self.loading_status.setText(f"üìç Kiv√°lasztva: {location.display_name}")
    
    def _on_selection_changed(self):
        """
        üîÑ Selection v√°ltoz√°s a location selector-ben.
        """
        print("üîÑ DEBUG: Location selector selection changed")
        
        # Selection info lek√©rdez√©se
        if self.location_selector:
            selection_info = self.location_selector.get_current_selection()
            
            # Status friss√≠t√©se
            region = selection_info.get('region')
            county = selection_info.get('county')
            
            if county:
                status = f"üó∫Ô∏è {region.display_name if region else 'R√©gi√≥'} ‚Üí {county['name']}"
            elif region:
                status = f"üå°Ô∏è {region.display_name}"
            else:
                status = "üó∫Ô∏è V√°lassz √©ghajlati r√©gi√≥t √©s megy√©t"
            
            self.loading_status.setText(status)
    
    def _on_map_ready(self):
        """
        ‚úÖ T√©rk√©p k√©sz √©s bet√∂ltve ‚Üí funkci√≥k enged√©lyez√©se.
        """
        print("‚úÖ DEBUG: Map ready - enabling export functionality")
        
        # Export gomb enged√©lyez√©se
        self.export_map_btn.setEnabled(True)
        
        # Status friss√≠t√©se
        self.loading_status.setText("‚úÖ Interakt√≠v t√©rk√©p k√©sz! Navig√°lj a bal oldali v√°laszt√≥val.")
    
    def _on_map_county_clicked(self, county_name: str):
        """
        üñ±Ô∏è Megye kattint√°s a t√©rk√©pen ‚Üí location selector friss√≠t√©s.
        
        Args:
            county_name: Kattintott megye neve
        """
        print(f"üñ±Ô∏è DEBUG: County clicked on map: {county_name}")
        
        # Location selector county be√°ll√≠t√°sa
        if self.location_selector:
            success = self.location_selector.set_county(county_name)
            if success:
                print(f"‚úÖ DEBUG: Location selector updated to county: {county_name}")
            else:
                print(f"‚ö†Ô∏è DEBUG: Failed to set county in location selector: {county_name}")
        
        # Forward signal
        self.map_interaction.emit("county_clicked", {
            'county_name': county_name,
            'source': 'map_click'
        })
    
    def _on_export_completed(self, file_path: str):
        """
        üíæ Export befejezve ‚Üí forward signal √©s status friss√≠t√©s.
        
        Args:
            file_path: Export√°lt f√°jl √∫tvonala
        """
        print(f"üíæ DEBUG: Export completed: {file_path}")
        
        # Status friss√≠t√©se
        self.loading_status.setText(f"üíæ T√©rk√©p export√°lva: {Path(file_path).name}")
        
        # Forward signal
        self.export_completed.emit(file_path)
    
    def _on_error_occurred(self, error_message: str):
        """
        ‚ùå Hiba t√∂rt√©nt ‚Üí forward signal √©s status friss√≠t√©s.
        
        Args:
            error_message: Hiba √ºzenet
        """
        print(f"‚ùå DEBUG: Error occurred: {error_message}")
        
        # Status friss√≠t√©se
        self.loading_status.setText(f"‚ùå Hiba: {error_message}")
        
        # Forward signal
        self.error_occurred.emit(error_message)
    
    # === AKCI√ì MET√ìDUSOK ===
    
    def _reset_map_view(self):
        """
        üîÑ T√©rk√©p n√©zet vissza√°ll√≠t√°sa Magyarorsz√°g alapn√©zet√©re.
        """
        print("üîÑ DEBUG: Resetting map view to default Hungary view")
        
        if self.map_visualizer:
            self.map_visualizer.reset_map_view()
            self.loading_status.setText("üîÑ T√©rk√©p vissza√°ll√≠tva alaphelyzetre")
        
        # Location selector reset
        if self.location_selector:
            self.location_selector.reset_selection()
        
        # Forward signal
        self.map_interaction.emit("view_reset", {
            'action': 'reset_to_hungary'
        })
    
    def _export_map(self):
        """
        üíæ T√©rk√©p export√°l√°s k√©r√©se.
        """
        print("üíæ DEBUG: Map export requested")
        
        if self.map_visualizer:
            # Export deleg√°l√°sa a map visualizer-nek
            self.map_visualizer._export_map()
        else:
            error_msg = "T√©rk√©p nem el√©rhet≈ë az export√°l√°shoz"
            self._on_error_occurred(error_msg)
    
    # === PUBLIKUS API ===
    
    def get_location_selector(self) -> Optional[HungarianLocationSelector]:
        """
        üìç Location selector referencia lek√©rdez√©se.
        
        Returns:
            HungarianLocationSelector p√©ld√°ny vagy None
        """
        return self.location_selector
    
    def get_map_visualizer(self) -> Optional[HungarianMapVisualizer]:
        """
        üó∫Ô∏è Map visualizer referencia lek√©rdez√©se.
        
        Returns:
            HungarianMapVisualizer p√©ld√°ny vagy None
        """
        return self.map_visualizer
    
    def get_current_location(self):
        """
        üìç Jelenlegi kiv√°lasztott lok√°ci√≥ lek√©rdez√©se.
        
        Returns:
            Location objektum vagy None
        """
        return self.current_location_data
    
    def get_counties_geodataframe(self):
        """
        üó∫Ô∏è Megy√©k GeoDataFrame lek√©rdez√©se.
        
        Returns:
            GeoPandas GeoDataFrame vagy None
        """
        return self.counties_gdf
    
    def set_region_and_county(self, region_key: str, county_name: str) -> bool:
        """
        üìç R√©gi√≥ √©s megye programmatic be√°ll√≠t√°sa.
        
        Args:
            region_key: √âghajlati r√©gi√≥ kulcs
            county_name: Megye neve
            
        Returns:
            Sikeres volt-e a be√°ll√≠t√°s
        """
        if not self.location_selector:
            return False
        
        # R√©gi√≥ be√°ll√≠t√°sa
        region_success = self.location_selector.set_region(region_key)
        if not region_success:
            return False
        
        # Megye be√°ll√≠t√°sa
        county_success = self.location_selector.set_county(county_name)
        return county_success
    
    def focus_on_county(self, county_name: str) -> bool:
        """
        üéØ T√©rk√©p f√≥kusz√°l√°sa megadott megy√©re.
        
        Args:
            county_name: Megye neve
            
        Returns:
            Sikeres volt-e a f√≥kusz√°l√°s
        """
        if not self.counties_gdf is not None:
            return False
        
        try:
            # Megye geometria keres√©se
            county_row = self.counties_gdf[self.counties_gdf['megye'] == county_name]
            if county_row.empty:
                return False
            
            geometry = county_row.geometry.iloc[0]
            bounds = geometry.bounds
            
            # T√©rk√©p friss√≠t√©se
            if self.map_visualizer:
                self.map_visualizer.update_map_bounds(bounds)
                return True
            
        except Exception as e:
            print(f"‚ùå DEBUG: Focus on county error: {e}")
        
        return False
    
    def get_available_counties(self) -> List[str]:
        """
        üìã El√©rhet≈ë megy√©k list√°ja.
        
        Returns:
            Megyenevek list√°ja
        """
        if self.location_selector:
            return self.location_selector.get_available_counties()
        return []
    
    def get_map_status(self) -> str:
        """
        üìä T√©rk√©p komponens st√°tusz√°nak lek√©rdez√©se.
        
        Returns:
            St√°tusz sz√∂veg
        """
        return self.loading_status.text()
    
    def is_ready(self) -> bool:
        """
        ‚úÖ T√©rk√©pes tab k√©sz haszn√°latra.
        
        Returns:
            K√©sz-e a haszn√°latra
        """
        return (
            self.is_data_loaded and 
            self.location_selector is not None and 
            self.map_visualizer is not None and
            self.counties_gdf is not None
        )
    
    def refresh_all_components(self):
        """
        üîÑ √ñsszes komponens friss√≠t√©se.
        """
        print("üîÑ DEBUG: Refreshing all HungarianMapTab components")
        
        # Location selector friss√≠t√©se
        if self.location_selector:
            # GeoJSON adatok √∫jrat√∂lt√©se
            self.location_selector._start_data_loading()
        
        # Map visualizer friss√≠t√©se
        if self.map_visualizer:
            self.map_visualizer._refresh_map()
        
        # Status friss√≠t√©se
        self.loading_status.setText("üîÑ Komponensek friss√≠t√©se...")
    
    def clear_selection(self):
        """
        üßπ Kiv√°laszt√°s t√∂rl√©se minden komponensben.
        """
        print("üßπ DEBUG: Clearing all selections in HungarianMapTab")
        
        # Location selector t√∂rl√©se
        if self.location_selector:
            self.location_selector.reset_selection()
        
        # Map reset
        if self.map_visualizer:
            self.map_visualizer.reset_map_view()
        
        # Current data t√∂rl√©se
        self.current_location_data = None
        
        # Status friss√≠t√©se
        self.loading_status.setText("üßπ Kiv√°laszt√°s t√∂r√∂lve - v√°lassz √∫j r√©gi√≥t √©s megy√©t")


# === DEMO √âS TESZT FUNKCI√ìK ===

def demo_hungarian_map_tab():
    """
    üß™ Hungarian Map Tab demo alkalmaz√°s.
    """
    import sys
    from PySide6.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QWidget
    
    app = QApplication(sys.argv)
    
    # F≈ë ablak
    window = QMainWindow()
    window.setWindowTitle("üó∫Ô∏è Hungarian Map Tab Demo - Teljes Interakt√≠v T√©rk√©p")
    window.setGeometry(100, 100, 1400, 900)
    
    # Central widget
    central_widget = QWidget()
    window.setCentralWidget(central_widget)
    
    layout = QVBoxLayout(central_widget)
    
    # Hungarian Map Tab
    map_tab = HungarianMapTab()
    layout.addWidget(map_tab)
    
    # Event handlers
    def on_location_selected(location):
        print(f"üìç DEMO: Location selected: {location.display_name if location else 'None'}")
    
    def on_map_interaction(interaction_type, data):
        print(f"üó∫Ô∏è DEMO: Map interaction: {interaction_type} - {data}")
    
    def on_export_completed(file_path):
        print(f"üíæ DEMO: Export completed: {file_path}")
    
    def on_error_occurred(message):
        print(f"‚ùå DEMO: Error occurred: {message}")
    
    def on_data_loading_completed():
        print("‚úÖ DEMO: Data loading completed - ready to use!")
    
    # Signalok kapcsol√°sa
    map_tab.location_selected.connect(on_location_selected)
    map_tab.map_interaction.connect(on_map_interaction)
    map_tab.export_completed.connect(on_export_completed)
    map_tab.error_occurred.connect(on_error_occurred)
    map_tab.data_loading_completed.connect(on_data_loading_completed)
    
    window.show()
    
    print("üó∫Ô∏è DEMO: Hungarian Map Tab elind√≠tva!")
    print("‚úÖ FUNKCIONALIT√ÅSOK:")
    print("   üìç Bal oldal: √âghajlati r√©gi√≥ ‚Üí Megye v√°laszt√°s")
    print("   üó∫Ô∏è Jobb oldal: Interakt√≠v Folium t√©rk√©p")
    print("   üîó K√©tir√°ny√∫ integr√°ci√≥: v√°laszt√°s ‚Üî t√©rk√©p")
    print("   üíæ HTML t√©rk√©p export√°l√°s")
    print("   üéØ Automatikus t√©rk√©p k√∂zpontos√≠t√°s")
    print("   üîÑ Alaphelyzet vissza√°ll√≠t√°s")
    
    sys.exit(app.exec())


if __name__ == "__main__":
    demo_hungarian_map_tab()