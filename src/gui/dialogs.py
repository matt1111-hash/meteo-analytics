#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Global Weather Analyzer - GUI Dialogs Module - THEMEMANAGER INTEGR√ÅLT VERZI√ì
Id≈ëj√°r√°si alkalmaz√°s dial√≥gus ablakokat tartalmaz√≥ modulja.

üé® THEMEMANAGER INTEGR√ÅCI√ì:
- utils.StyleSheets import elt√°vol√≠tva
- Widget regisztr√°ci√≥k automatikus styling-hoz
- Hardcoded CSS-ek minimaliz√°lva
- Centraliz√°lt t√©ma kezel√©s

Ez a modul tartalmazza az alkalmaz√°s k√ºl√∂nb√∂z≈ë dial√≥gus ablakait,
els≈ësorban az extr√©m id≈ëj√°r√°si esem√©nyek megjelen√≠t√©s√©re szolg√°l√≥
ExtremeWeatherDialog oszt√°lyt.

Portolva: PyQt5 ‚Üí PySide6 + ThemeManager integr√°ci√≥
Architekt√∫ra: Modul√°ris design, centraliz√°lt styling

üîß JAV√çT√ÅS: close_button attribute error megoldva
üîß KRITIKUS JAV√çT√ÅS: Konstruktor t√≠pus hiba jav√≠tva QDialog ‚Üí QWidget
üîß IMPORT BUGFIX: QColor import hozz√°adva
"""

from typing import Dict, List, Optional, Any
import pandas as pd
import datetime

from PySide6.QtWidgets import (
    QDialog, QVBoxLayout, QHBoxLayout, QGroupBox, QButtonGroup,
    QRadioButton, QTableWidget, QTableWidgetItem, QPushButton, QWidget
)
from PySide6.QtCore import Qt
from PySide6.QtGui import QColor

from .utils import GUIConstants
from .theme_manager import get_theme_manager, register_widget_for_theming


class ExtremeWeatherDialog(QDialog):
    """
    Extr√©m id≈ëj√°r√°si esem√©nyek megjelen√≠t√©s√©re szolg√°l√≥ dial√≥gus ablak - THEMEMANAGER INTEGR√ÅLT.
    
    üé® V√ÅLTOZ√ÅSOK:
    - utils.StyleSheets f√ºgg≈ës√©g elt√°vol√≠tva
    - Widget regisztr√°ci√≥k ThemeManager-ben
    - Automatikus t√©ma kezel√©s
    - CSS minimaliz√°l√°s
    
    üîß BUGFIX:
    - close_button attribute error jav√≠tva
    - Widget referenci√°k megfelel≈ëen elmentve
    
    üîß KRITIKUS JAV√çT√ÅS:
    - Konstruktor t√≠pus hiba: QDialog ‚Üí QWidget (QMainWindow kompatibilit√°s)
    
    üîß IMPORT BUGFIX:
    - QColor import hozz√°adva (PySide6.QtGui)
    
    FUNKCIONALIT√ÅS MEGTARTVA:
    - Napi √©s havi extr√©m √©rt√©kek megjelen√≠t√©se
    - Interakt√≠v v√°lt√°s napi/havi n√©zet k√∂z√∂tt
    - Statisztikai sz√°m√≠t√°sok (max/min/√°tlag/h≈ëing√°s)
    - T√°bl√°zatos megjelen√≠t√©s
    """
    
    def __init__(self, parent: Optional[QWidget], data: Dict[str, Any], city_name: str):
        """
        Dial√≥gus inicializ√°l√°sa - THEMEMANAGER VERZI√ì + KONSTRUKTOR JAV√çT√ÅS.
        
        Args:
            parent: Sz√ºl≈ë widget (QWidget - QMainWindow kompatibilis!)
            data: Open-Meteo API v√°lasz adatok
            city_name: Telep√ºl√©s neve
            
        üîß KRITIKUS JAV√çT√ÅS: QDialog ‚Üí QWidget t√≠pus a parent param√©terben
        Most m√°r m≈±k√∂dik QMainWindow sz√ºl≈ëvel is!
        """
        super().__init__(parent)
        
        # ThemeManager singleton lek√©rdez√©se
        self._theme_manager = get_theme_manager()
        
        self.data = data
        self.city_name = city_name
        self.period_type = "daily"  # Alap√©rtelmezett: napi adatok
        
        self._setup_window()
        self._init_ui()
        self._register_widgets_for_theming()
        self._calculate_extremes()
    
    def _setup_window(self) -> None:
        """Ablak alapbe√°ll√≠t√°sai - THEMEMANAGER KOMPATIBILIS."""
        self.setWindowTitle(f"Extr√©m id≈ëj√°r√°si esem√©nyek - {self.city_name}")
        self.setMinimumSize(
            GUIConstants.DIALOG_MIN_WIDTH,
            GUIConstants.DIALOG_MIN_HEIGHT
        )
        
        # ThemeManager automatikus styling (sz√ºl≈ë CSS √∂r√∂kl√©s helyett)
    
    def _init_ui(self) -> None:
        """UI elemek inicializ√°l√°sa - MINIMAL CSS APPROACH."""
        layout = QVBoxLayout(self)
        layout.setSpacing(GUIConstants.LAYOUT_SPACING)
        
        # Peri√≥dus kiv√°laszt√≥ panel
        period_group = self._create_period_selection_group()
        layout.addWidget(period_group)
        
        # Extr√©m √©rt√©kek t√°bl√°zata
        self.extreme_table = self._create_extreme_table()
        layout.addWidget(self.extreme_table)
        
        # Bez√°r√°s gomb - JAV√çTVA: self.close_button ment√©se
        self.close_button = self._create_close_button()
        layout.addWidget(self.close_button)
    
    def _create_period_selection_group(self) -> QGroupBox:
        """Peri√≥dus kiv√°laszt√≥ widget l√©trehoz√°sa - THEMEMANAGER KOMPATIBILIS."""
        period_group = QGroupBox("Id≈ëszak t√≠pusa")
        period_layout = QHBoxLayout(period_group)
        
        # Gomb csoport a k√∂lcs√∂n√∂s kiz√°r√°shoz
        self.period_type_group = QButtonGroup()
        
        # Radio gombok
        self.daily_radio = QRadioButton("Napi adatok")
        self.monthly_radio = QRadioButton("Havi adatok")
        
        # Alap√©rtelmezett kiv√°laszt√°s
        self.daily_radio.setChecked(True)
        
        # Gombok hozz√°ad√°sa a csoporthoz
        self.period_type_group.addButton(self.daily_radio)
        self.period_type_group.addButton(self.monthly_radio)
        
        # Layout-hoz ad√°s
        period_layout.addWidget(self.daily_radio)
        period_layout.addWidget(self.monthly_radio)
        period_layout.addStretch()
        
        # Esem√©nykezel≈ëk
        self.daily_radio.toggled.connect(self._on_period_type_changed)
        self.monthly_radio.toggled.connect(self._on_period_type_changed)
        
        return period_group
    
    def _create_extreme_table(self) -> QTableWidget:
        """Extr√©m √©rt√©kek t√°bl√°zat√°nak l√©trehoz√°sa - THEMEMANAGER KOMPATIBILIS."""
        table = QTableWidget()
        table.setColumnCount(3)
        table.setHorizontalHeaderLabels(["Kateg√≥ria", "√ârt√©k", "D√°tum"])
        
        # T√°bl√°zat be√°ll√≠t√°sok (st√≠lus n√©lk√ºl - ThemeManager kezeli)
        table.setAlternatingRowColors(True)
        table.setSelectionBehavior(QTableWidget.SelectRows)
        table.verticalHeader().setVisible(False)
        
        return table
    
    def _create_close_button(self) -> QPushButton:
        """
        Bez√°r√°s gomb l√©trehoz√°sa - THEMEMANAGER KOMPATIBILIS.
        
        üîß JAV√çT√ÅS: Most m√°r self.close_button-k√©nt mentj√ºk
        """
        close_button = QPushButton("Bez√°r√°s")
        close_button.clicked.connect(self.accept)
        close_button.setMinimumHeight(GUIConstants.BUTTON_HEIGHT)
        return close_button
    
    def _register_widgets_for_theming(self) -> None:
        """
        Widget-ek regisztr√°l√°sa ThemeManager-ben.
        
        üîß JAV√çT√ÅS: self.close_button most m√°r l√©tezik
        """
        print("üé® DEBUG: Registering ExtremeWeatherDialog widgets for theming...")
        
        # Container widgets
        register_widget_for_theming(self, "dialog")
        
        # Radio button widgets (chart style)
        register_widget_for_theming(self.daily_radio, "chart")
        register_widget_for_theming(self.monthly_radio, "chart")
        
        # Table widget
        register_widget_for_theming(self.extreme_table, "table")
        
        # Button widget - JAV√çTVA: self.close_button referencia OK
        register_widget_for_theming(self.close_button, "button")
        
        print("‚úÖ DEBUG: ExtremeWeatherDialog widgets registered for theming")
    
    def _on_period_type_changed(self) -> None:
        """Peri√≥dus t√≠pus v√°ltoz√°s√°nak kezel√©se."""
        self.period_type = "daily" if self.daily_radio.isChecked() else "monthly"
        self._calculate_extremes()
    
    def _calculate_extremes(self) -> None:
        """
        Extr√©m id≈ëj√°r√°si √©rt√©kek kisz√°m√≠t√°sa √©s t√°bl√°zat friss√≠t√©se.
        Deleg√°lja a sz√°m√≠t√°st a megfelel≈ë priv√°t met√≥dushoz.
        """
        try:
            # Alapadatok kinyer√©se
            df = self._extract_weather_dataframe()
            if df.empty:
                self._show_no_data_message()
                return
            
            # Extr√©m √©rt√©kek sz√°m√≠t√°sa a kiv√°lasztott peri√≥dus alapj√°n
            if self.period_type == "monthly":
                extremes = self._calculate_monthly_extremes(df)
            else:
                extremes = self._calculate_daily_extremes(df)
            
            # T√°bl√°zat felt√∂lt√©se
            self._populate_extreme_table(extremes)
            
        except Exception as e:
            print(f"Hiba az extr√©m √©rt√©kek kisz√°m√≠t√°sa k√∂zben: {e}")
            self._show_calculation_error()
    
    def _extract_weather_dataframe(self) -> pd.DataFrame:
        """
        Id≈ëj√°r√°si adatok kinyer√©se a raw API v√°laszb√≥l DataFrame form√°ba.
        
        Returns:
            Feldolgozott DataFrame vagy √ºres DataFrame hiba eset√©n
        """
        try:
            daily_data = self.data.get("daily", {})
            
            # Alapadatok kinyer√©se
            dates = daily_data.get("time", [])
            temp_max = daily_data.get("temperature_2m_max", [])
            temp_min = daily_data.get("temperature_2m_min", [])
            precip = daily_data.get("precipitation_sum", [])
            windspeed = daily_data.get("windspeed_10m_max", [])
            
            # DataFrame l√©trehoz√°sa
            df = pd.DataFrame({
                'date': dates,
                'temp_max': temp_max,
                'temp_min': temp_min,
                'precipitation': precip,
                'windspeed': windspeed if windspeed else [None] * len(dates)
            })
            
            # D√°tum oszlop konvert√°l√°sa
            df['date_obj'] = pd.to_datetime(df['date'])
            df['year'] = df['date_obj'].dt.year
            df['month'] = df['date_obj'].dt.month
            df['formatted_date'] = df['date_obj'].dt.strftime('%Y-%m-%d')
            
            return df
            
        except Exception as e:
            print(f"Hiba az adatok kinyer√©se k√∂zben: {e}")
            return pd.DataFrame()
    
    def _calculate_daily_extremes(self, df: pd.DataFrame) -> List[Dict[str, str]]:
        """
        Napi extr√©m √©rt√©kek sz√°m√≠t√°sa.
        
        Args:
            df: Id≈ëj√°r√°si adatok DataFrame
            
        Returns:
            Lista az extr√©m √©rt√©kekr≈ël
        """
        extremes = []
        
        # Legmelegebb nap
        max_temp_idx = df['temp_max'].idxmax()
        extremes.append({
            'category': 'Legmelegebb nap',
            'value': f"{df.iloc[max_temp_idx]['temp_max']:.1f} ¬∞C",
            'date': df.iloc[max_temp_idx]['formatted_date']
        })
        
        # Leghidegebb nap
        min_temp_idx = df['temp_min'].idxmin()
        extremes.append({
            'category': 'Leghidegebb nap',
            'value': f"{df.iloc[min_temp_idx]['temp_min']:.1f} ¬∞C",
            'date': df.iloc[min_temp_idx]['formatted_date']
        })
        
        # Legnagyobb napi h≈ëing√°s
        df['temp_range'] = df['temp_max'] - df['temp_min']
        max_range_idx = df['temp_range'].idxmax()
        extremes.append({
            'category': 'Legnagyobb napi h≈ëing√°s',
            'value': f"{df.iloc[max_range_idx]['temp_range']:.1f} ¬∞C",
            'date': df.iloc[max_range_idx]['formatted_date']
        })
        
        # Legcsapad√©kosabb nap
        max_precip_idx = df['precipitation'].idxmax()
        extremes.append({
            'category': 'Legcsapad√©kosabb nap',
            'value': f"{df.iloc[max_precip_idx]['precipitation']:.1f} mm",
            'date': df.iloc[max_precip_idx]['formatted_date']
        })
        
        # Legszelesebb nap (ha van adat)
        if not df['windspeed'].isna().all():
            max_wind_idx = df['windspeed'].idxmax()
            extremes.append({
                'category': 'Legszelesebb nap',
                'value': f"{df.iloc[max_wind_idx]['windspeed']:.1f} km/h",
                'date': df.iloc[max_wind_idx]['formatted_date']
            })
        
        # Id≈ëszak √°tlagh≈ëm√©rs√©klete
        avg_temp = (df['temp_max'].mean() + df['temp_min'].mean()) / 2
        extremes.append({
            'category': 'Id≈ëszak √°tlagh≈ëm√©rs√©klete',
            'value': f"{avg_temp:.1f} ¬∞C",
            'date': '-'
        })
        
        return extremes
    
    def _calculate_monthly_extremes(self, df: pd.DataFrame) -> List[Dict[str, str]]:
        """
        Havi extr√©m √©rt√©kek sz√°m√≠t√°sa.
        
        Args:
            df: Id≈ëj√°r√°si adatok DataFrame
            
        Returns:
            Lista az extr√©m √©rt√©kekr≈ël
        """
        extremes = []
        
        # Havi aggreg√°ci√≥
        monthly_data = df.groupby(['year', 'month']).agg({
            'temp_max': 'max',
            'temp_min': 'min',
            'precipitation': 'sum',
            'windspeed': 'max' if not df['windspeed'].isna().all() else 'mean'
        }).reset_index()
        
        # H√≥nap nevek
        month_names = {
            1: 'Janu√°r', 2: 'Febru√°r', 3: 'M√°rcius', 4: '√Åprilis',
            5: 'M√°jus', 6: 'J√∫nius', 7: 'J√∫lius', 8: 'Augusztus',
            9: 'Szeptember', 10: 'Okt√≥ber', 11: 'November', 12: 'December'
        }
        
        monthly_data['month_name'] = monthly_data['month'].map(month_names)
        
        # Legmelegebb h√≥nap (max h≈ëm√©rs√©klet alapj√°n)
        max_temp_idx = monthly_data['temp_max'].idxmax()
        extremes.append({
            'category': 'Legmelegebb h√≥nap (max)',
            'value': f"{monthly_data.iloc[max_temp_idx]['temp_max']:.1f} ¬∞C",
            'date': f"{monthly_data.iloc[max_temp_idx]['month_name']} {monthly_data.iloc[max_temp_idx]['year']}"
        })
        
        # Leghidegebb h√≥nap
        min_temp_idx = monthly_data['temp_min'].idxmin()
        extremes.append({
            'category': 'Leghidegebb h√≥nap',
            'value': f"{monthly_data.iloc[min_temp_idx]['temp_min']:.1f} ¬∞C",
            'date': f"{monthly_data.iloc[min_temp_idx]['month_name']} {monthly_data.iloc[min_temp_idx]['year']}"
        })
        
        # Legcsapad√©kosabb h√≥nap
        max_precip_idx = monthly_data['precipitation'].idxmax()
        extremes.append({
            'category': 'Legcsapad√©kosabb h√≥nap',
            'value': f"{monthly_data.iloc[max_precip_idx]['precipitation']:.1f} mm",
            'date': f"{monthly_data.iloc[max_precip_idx]['month_name']} {monthly_data.iloc[max_precip_idx]['year']}"
        })
        
        # Legszelesebb h√≥nap (ha van adat)
        if not df['windspeed'].isna().all():
            max_wind_idx = monthly_data['windspeed'].idxmax()
            extremes.append({
                'category': 'Legszelesebb h√≥nap',
                'value': f"{monthly_data.iloc[max_wind_idx]['windspeed']:.1f} km/h",
                'date': f"{monthly_data.iloc[max_wind_idx]['month_name']} {monthly_data.iloc[max_wind_idx]['year']}"
            })
        
        # Id≈ëszak √°tlagh≈ëm√©rs√©klete
        avg_temp = (df['temp_max'].mean() + df['temp_min'].mean()) / 2
        extremes.append({
            'category': 'Id≈ëszak √°tlagh≈ëm√©rs√©klete',
            'value': f"{avg_temp:.1f} ¬∞C",
            'date': '-'
        })
        
        return extremes
    
    def _populate_extreme_table(self, extremes: List[Dict[str, str]]) -> None:
        """
        Extr√©m √©rt√©kek t√°bl√°zat√°nak felt√∂lt√©se - THEMEMANAGER SZ√çNEKKEL.
        
        Args:
            extremes: Extr√©m √©rt√©kek list√°ja
        """
        self.extreme_table.setRowCount(len(extremes))
        
        # ThemeManager sz√≠nek lek√©rdez√©se
        scheme = self._theme_manager.get_color_scheme()
        
        for i, extreme in enumerate(extremes):
            # Item-ek l√©trehoz√°sa
            category_item = QTableWidgetItem(extreme['category'])
            value_item = QTableWidgetItem(extreme['value'])
            date_item = QTableWidgetItem(extreme['date'])
            
            # ThemeManager sz√≠nek alkalmaz√°sa item-ekre
            if scheme:
                # üîß KRITIKUS JAV√çT√ÅS: ColorPalette API helyes haszn√°lata
                # Altern√°l√≥ h√°tt√©rsz√≠nek
                if i % 2 == 0:
                    bg_color = QColor(scheme.get_color("surface", "base") or "#ffffff")
                else:
                    bg_color = QColor(scheme.get_color("surface", "light") or "#f5f5f5")
                
                # Sz√∂vegsz√≠n
                text_color = QColor(scheme.get_color("primary", "base") or "#000000")
                
                for item in [category_item, value_item, date_item]:
                    item.setBackground(bg_color)
                    item.setForeground(text_color)
            
            # T√°bl√°zat felt√∂lt√©se
            self.extreme_table.setItem(i, 0, category_item)
            self.extreme_table.setItem(i, 1, value_item)
            self.extreme_table.setItem(i, 2, date_item)
        
        # Oszlopok sz√©less√©g√©nek automatikus be√°ll√≠t√°sa
        self.extreme_table.resizeColumnsToContents()
    
    def _show_no_data_message(self) -> None:
        """Nincs adat √ºzenet megjelen√≠t√©se."""
        self.extreme_table.setRowCount(1)
        self.extreme_table.setItem(0, 0, QTableWidgetItem("Nincs megjelen√≠thet≈ë adat"))
        self.extreme_table.setItem(0, 1, QTableWidgetItem("-"))
        self.extreme_table.setItem(0, 2, QTableWidgetItem("-"))
    
    def _show_calculation_error(self) -> None:
        """Sz√°m√≠t√°si hiba √ºzenet megjelen√≠t√©se."""
        self.extreme_table.setRowCount(1)
        self.extreme_table.setItem(0, 0, QTableWidgetItem("Hiba a sz√°m√≠t√°s sor√°n"))
        self.extreme_table.setItem(0, 1, QTableWidgetItem("Ellen≈ërizze az adatokat"))
        self.extreme_table.setItem(0, 2, QTableWidgetItem("-"))
    
    def apply_theme(self, dark_theme: bool) -> None:
        """
        T√©ma alkalmaz√°sa - THEMEMANAGER DELEG√ÅL√ì VERZI√ì.
        
        Args:
            dark_theme: True, ha s√∂t√©t t√©ma
        """
        print(f"üé® DEBUG: ExtremeWeatherDialog applying theme via ThemeManager: {'dark' if dark_theme else 'light'}")
        
        # ThemeManager automatikus widget styling
        theme_name = "dark" if dark_theme else "light"
        self._theme_manager.set_theme(theme_name)
        
        # Ha van extr√©m adat, √∫jrarajzoljuk a t√°bl√°zatot ThemeManager sz√≠nekkel
        if hasattr(self, 'extreme_table') and self.extreme_table.rowCount() > 0:
            # Re-populate with current data to apply new colors
            self._calculate_extremes()
        
        print(f"‚úÖ DEBUG: ExtremeWeatherDialog theme applied via ThemeManager: {'dark' if dark_theme else 'light'}")
