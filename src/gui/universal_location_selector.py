#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üá≠üá∫ ENHANCED Universal Location Selector - Magyar Priorit√°ssal
Magyar Kl√≠maanalitika MVP - DUAL DATABASE Integr√°ci√≥

üöÄ √öJ FUNKCI√ìK:
‚úÖ search_unified() - KOMBIN√ÅLT keres√©s (3178 magyar + 44k glob√°lis)
‚úÖ Magyar flag-ek (üá≠üá∫) √©s glob√°lis flag-ek (üåç)
‚úÖ Settlement type megjelen√≠t√©s (v√°ros/nagyk√∂zs√©g/k√∂zs√©g)
‚úÖ Magyar priorit√°s - magyar telep√ºl√©sek el≈ëre
‚úÖ Hierarchikus keres√©s - minden magyar telep√ºl√©s t√≠pus
‚úÖ Egyszer≈±s√≠tett UI - 1 panel (3 tab helyett)

KERES√âSI LOGIKA:
- "Kiskunhalas" ‚Üí üá≠üá∫ Kiskunhalas, B√°cs-Kiskun megye (v√°ros) 
- "Abaliget" ‚Üí üá≠üá∫ Abaliget, Baranya megye (k√∂zs√©g)
- "Budapest" ‚Üí üá≠üá∫ Budapest (f≈ëv√°ros) + üåç Budapest, Hungary
- "London" ‚Üí üåç London, England, United Kingdom

F√°jl helye: src/gui/universal_location_selector.py
"""

from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QLineEdit, QListWidget, 
    QListWidgetItem, QLabel, QPushButton, QFrame, QSizePolicy, 
    QScrollArea, QGroupBox
)
from PySide6.QtCore import Signal, Qt, QTimer
from PySide6.QtGui import QFont
from typing import Dict, List, Optional, Any
import logging

from ..data.models import UniversalLocation, LocationType
from ..data.city_manager import CityManager, City
from .theme_manager import register_widget_for_theming

logger = logging.getLogger(__name__)


class LocationCard(QFrame):
    """üé® Kiv√°lasztott lok√°ci√≥ megjelen√≠t≈ë k√°rtya - MAGYAR KOMPATIBILIS"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setFrameStyle(QFrame.StyledPanel)
        self.setMinimumHeight(80)
        self.setMaximumHeight(100)
        self.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        
        # Layout
        layout = QVBoxLayout(self)
        layout.setContentsMargins(16, 12, 16, 12)
        layout.setSpacing(6)
        
        # C√≠m
        self.title_label = QLabel("Nincs kiv√°lasztva")
        title_font = QFont()
        title_font.setPointSize(14)
        title_font.setBold(True)
        self.title_label.setFont(title_font)
        layout.addWidget(self.title_label)
        
        # R√©szletek
        self.details_label = QLabel("V√°lassz egy lok√°ci√≥t a keres√©sb≈ël")
        details_font = QFont()
        details_font.setPointSize(11)
        self.details_label.setFont(details_font)
        self.details_label.setStyleSheet("color: #64748B;")
        self.details_label.setWordWrap(True)
        layout.addWidget(self.details_label)
        
        # Modern styling
        self.setStyleSheet("""
            LocationCard {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                    stop:0 #FFFFFF, stop:1 #F8FAFC);
                border: 2px solid #E2E8F0;
                border-radius: 12px;
                margin: 4px;
            }
            LocationCard:hover {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                    stop:0 #F8FAFC, stop:1 #F1F5F9);
                border: 2px solid #CBD5E1;
            }
        """)
    
    def set_location(self, name: str, details: str, is_hungarian: bool = False):
        """üá≠üá∫ Lok√°ci√≥ be√°ll√≠t√°sa MAGYAR T√ÅMOGAT√ÅSSAL"""
        flag = "üá≠üá∫" if is_hungarian else "üåç"
        self.title_label.setText(f"{flag} {name}")
        self.details_label.setText(details)
    
    def clear(self):
        """K√°rtya t√∂rl√©se"""
        self.title_label.setText("Nincs kiv√°lasztva")
        self.details_label.setText("V√°lassz egy lok√°ci√≥t a keres√©sb≈ël")


class UniversalLocationSelector(QWidget):
    """
    üá≠üá∫ ENHANCED Universal Location Selector - DUAL DATABASE
    
    KOMBIN√ÅLT KERES√âS:
    - 3178+ magyar telep√ºl√©s (falvak, k√∂zs√©gek, v√°rosok)
    - 44k+ glob√°lis v√°ros
    - Magyar priorit√°s m≈±k√∂dik
    - Flag-ek √©s settlement type-ok
    
    SIGNALOK:
    - search_requested(str): keres√©s ind√≠tva
    - city_selected(str, float, float, dict): lok√°ci√≥ kiv√°lasztva
    - location_changed(UniversalLocation): lok√°ci√≥ v√°ltozott
    """
    
    # Signalok
    search_requested = Signal(str)
    city_selected = Signal(str, float, float, dict)
    location_changed = Signal(object)
    
    def __init__(self, city_manager: Optional[CityManager] = None, parent=None):
        super().__init__(parent)
        
        self.city_manager = city_manager or CityManager()
        self.current_location: Optional[UniversalLocation] = None
        
        # Search timer
        self.search_timer = QTimer()
        self.search_timer.setSingleShot(True)
        self.search_timer.timeout.connect(self._perform_search)
        
        self._setup_ui()
        self._connect_signals()
        
        register_widget_for_theming(self, "container")
        
        logger.info("üá≠üá∫ Enhanced Universal Location Selector inicializ√°lva (DUAL DATABASE)")
    
    def _setup_ui(self):
        """üé® Enhanced UI l√©trehoz√°sa - MAGYAR PRIORIT√ÅSSAL"""
        
        # Main layout
        layout = QVBoxLayout(self)
        layout.setContentsMargins(16, 16, 16, 16)
        layout.setSpacing(16)
        
        # === HEADER ===
        header_label = QLabel("üá≠üá∫ Magyar + Glob√°lis Lok√°ci√≥ Keres√©s")
        header_font = QFont()
        header_font.setBold(True)
        header_font.setPointSize(16)
        header_label.setFont(header_font)
        header_label.setStyleSheet("color: #1E293B; margin-bottom: 8px;")
        layout.addWidget(header_label)
        
        # === SEARCH GROUP ===
        search_group = QGroupBox("üîç Kombin√°lt Keres√©s")
        search_group.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                font-size: 14px;
                color: #1E293B;
                border: 2px solid #E2E8F0;
                border-radius: 8px;
                margin-top: 8px;
                padding-top: 8px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 12px;
                padding: 0 8px 0 8px;
                background: #FFFFFF;
            }
        """)
        search_layout = QVBoxLayout(search_group)
        search_layout.setContentsMargins(12, 16, 12, 12)
        search_layout.setSpacing(12)
        
        # Modern search input
        self.search_input = QLineEdit()
        self.search_input.setPlaceholderText("üá≠üá∫ Magyar telep√ºl√©sek + üåç 44k glob√°lis v√°ros... (pl. Kiskunhalas, Abaliget, London)")
        self.search_input.setMinimumHeight(40)
        self.search_input.setMaximumHeight(44)
        self.search_input.setStyleSheet("""
            QLineEdit {
                background: #FFFFFF;
                border: 2px solid #E2E8F0;
                border-radius: 8px;
                padding: 12px 16px;
                font-size: 14px;
                color: #1E293B;
            }
            QLineEdit:hover {
                border: 2px solid #CBD5E1;
            }
            QLineEdit:focus {
                border: 2px solid #3B82F6;
                background: #FFFFFF;
            }
            QLineEdit::placeholder {
                color: #94A3B8;
            }
        """)
        search_layout.addWidget(self.search_input)
        
        # Status label
        self.status_label = QLabel("üí° Kezdj el g√©pelni a keres√©shez...")
        self.status_label.setStyleSheet("""
            color: #64748B; 
            font-style: italic;
            background: #F8FAFC;
            padding: 8px 12px;
            border-radius: 6px;
            border: 1px solid #E2E8F0;
            font-size: 12px;
        """)
        search_layout.addWidget(self.status_label)
        
        layout.addWidget(search_group)
        
        # === RESULTS GROUP ===
        results_group = QGroupBox("üìã Keres√©si Eredm√©nyek")
        results_group.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                font-size: 14px;
                color: #1E293B;
                border: 2px solid #E2E8F0;
                border-radius: 8px;
                margin-top: 8px;
                padding-top: 8px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 12px;
                padding: 0 8px 0 8px;
                background: #FFFFFF;
            }
        """)
        results_layout = QVBoxLayout(results_group)
        results_layout.setContentsMargins(12, 16, 12, 12)
        
        # Results list
        self.results_list = QListWidget()
        self.results_list.setMinimumHeight(200)
        self.results_list.setMaximumHeight(250)
        self.results_list.setStyleSheet("""
            QListWidget {
                background: #FFFFFF;
                border: 1px solid #E2E8F0;
                border-radius: 8px;
                padding: 8px;
            }
            QListWidget::item {
                background: #FFFFFF;
                border: 1px solid #F1F5F9;
                border-radius: 6px;
                padding: 12px;
                margin: 4px 0px;
                font-size: 13px;
            }
            QListWidget::item:hover {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                    stop:0 #F8FAFC, stop:1 #F1F5F9);
                border: 1px solid #CBD5E1;
            }
            QListWidget::item:selected {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                    stop:0 #3B82F6, stop:1 #2563EB);
                color: white;
                border: 1px solid #1D4ED8;
            }
        """)
        results_layout.addWidget(self.results_list)
        
        layout.addWidget(results_group)
        
        # === SELECTED LOCATION GROUP ===
        selection_group = QGroupBox("üéØ Kiv√°lasztott Lok√°ci√≥")
        selection_group.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                font-size: 14px;
                color: #1E293B;
                border: 2px solid #E2E8F0;
                border-radius: 8px;
                margin-top: 8px;
                padding-top: 8px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 12px;
                padding: 0 8px 0 8px;
                background: #FFFFFF;
            }
        """)
        selection_layout = QVBoxLayout(selection_group)
        selection_layout.setContentsMargins(12, 16, 12, 12)
        
        # Location card
        self.location_card = LocationCard()
        selection_layout.addWidget(self.location_card)
        
        # Confirm button
        self.confirm_button = QPushButton("‚úÖ Lok√°ci√≥ Meger≈ës√≠t√©se")
        self.confirm_button.setMinimumHeight(40)
        self.confirm_button.setMaximumHeight(44)
        self.confirm_button.setEnabled(False)
        self.confirm_button.setStyleSheet("""
            QPushButton {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                    stop:0 #3B82F6, stop:1 #2563EB);
                color: white;
                border: none;
                border-radius: 8px;
                font-weight: bold;
                font-size: 14px;
                padding: 12px 16px;
            }
            QPushButton:hover {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                    stop:0 #2563EB, stop:1 #1D4ED8);
            }
            QPushButton:pressed {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                    stop:0 #1D4ED8, stop:1 #1E40AF);
            }
            QPushButton:disabled {
                background: #E2E8F0;
                color: #94A3B8;
            }
        """)
        selection_layout.addWidget(self.confirm_button)
        
        layout.addWidget(selection_group)
        
        # Stretch
        layout.addStretch()
        
        # üéØ KOMPAKT SIZING
        self.setMinimumSize(300, 450)  # 420px ‚Üí 300px sz√©less√©g
        self.setMaximumHeight(550)
        self.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Expanding)
    
    def _connect_signals(self):
        """Signal kapcsolatok"""
        self.search_input.textChanged.connect(self._on_search_text_changed)
        self.results_list.itemDoubleClicked.connect(self._on_result_selected)
        self.results_list.itemClicked.connect(self._on_result_clicked)
        self.confirm_button.clicked.connect(self._on_confirm_selection)
    
    def _on_search_text_changed(self, text: str):
        """Keres√©s sz√∂veg v√°ltoz√°skor"""
        if len(text) < 2:
            self.results_list.clear()
            self.status_label.setText("üí° Legal√°bb 2 karakter sz√ºks√©ges...")
            self.confirm_button.setEnabled(False)
            return
            
        self.search_timer.stop()
        self.search_timer.start(300)  # 300ms k√©sleltet√©s
        self.status_label.setText("üîç Keres√©s...")
    
    def _perform_search(self):
        """üöÄ KOMBIN√ÅLT KERES√âS - Magyar + Glob√°lis"""
        query = self.search_input.text().strip()
        if len(query) < 2:
            return
            
        try:
            self.search_requested.emit(query)
            
            # üá≠üá∫ KULCS V√ÅLTOZ√ÅS: search_unified() h√≠v√°sa
            results = self.city_manager.search_unified(query, limit=20, hungarian_priority=True)
            
            self._display_results(results)
            
            if not results:
                self.status_label.setText(f"‚ùå Nincs tal√°lat a '{query}' keres√©sre")
            else:
                # Eredm√©ny t√≠pusok sz√°ml√°l√°sa
                hungarian_count = sum(1 for city in results if city.is_hungarian)
                global_count = len(results) - hungarian_count
                
                if hungarian_count > 0 and global_count > 0:
                    self.status_label.setText(f"‚úÖ {hungarian_count} magyar + {global_count} glob√°lis = {len(results)} tal√°lat")
                elif hungarian_count > 0:
                    self.status_label.setText(f"‚úÖ {hungarian_count} magyar tal√°lat")
                else:
                    self.status_label.setText(f"‚úÖ {global_count} glob√°lis tal√°lat")
                
        except Exception as e:
            logger.error(f"Keres√©si hiba: {e}")
            self.status_label.setText("‚ùå Keres√©si hiba t√∂rt√©nt")
    
    def _display_results(self, results: List[City]):
        """üá≠üá∫ Keres√©si eredm√©nyek megjelen√≠t√©se MAGYAR PRIORIT√ÅSSAL"""
        self.results_list.clear()
        
        for city in results[:20]:  # Els≈ë 20 eredm√©ny
            try:
                # Alap adatok
                name = city.city
                lat = city.lat
                lon = city.lon
                is_hungarian = city.is_hungarian
                
                # üá≠üá∫ MAGYAR SPECIFIKUS FORMATTING
                if is_hungarian:
                    flag = "üá≠üá∫"
                    
                    # Display n√©v: "Kiskunhalas, B√°cs-Kiskun megye"
                    if city.megye:
                        display_name = f"{name}, {city.megye} megye"
                    else:
                        display_name = name
                    
                    # Settlement type info
                    settlement_info = ""
                    if city.settlement_type:
                        settlement_info = f" ({city.settlement_type})"
                    
                    # Population info
                    pop_info = ""
                    if city.population:
                        pop_info = f"\nüë• {city.population:,} lakos"
                    
                    display_text = f"{flag} {display_name}{settlement_info}{pop_info}\nüó∫Ô∏è [{lat:.3f}, {lon:.3f}]"
                    
                else:
                    # üåç GLOB√ÅLIS FORMATTING (eredeti)
                    flag = "üåç"
                    country = city.country or ''
                    region = city.admin_name or ''
                    
                    display_text = f"{flag} {name}"
                    if region and region != name:
                        display_text += f"\nüìç {region}"
                    if country:
                        display_text += f", {country}"
                    display_text += f"\nüó∫Ô∏è [{lat:.3f}, {lon:.3f}]"
                
                # List item l√©trehoz√°sa
                item = QListWidgetItem(display_text)
                city_dict = city.to_dict()
                item.setData(Qt.UserRole, city_dict)
                self.results_list.addItem(item)
                
            except Exception as e:
                logger.warning(f"Eredm√©ny feldolgoz√°si hiba: {e}")
    
    def _on_result_clicked(self, item: QListWidgetItem):
        """Eredm√©nyre kattint√°s (preview) - MAGYAR T√ÅMOGAT√ÅSSAL"""
        try:
            result_data = item.data(Qt.UserRole)
            if result_data:
                name = result_data.get('city', 'Ismeretlen')
                country = result_data.get('country', '')
                region = result_data.get('admin_name', '')
                lat = float(result_data.get('lat', 0.0))
                lon = float(result_data.get('lon', 0.0))
                is_hungarian = result_data.get('is_hungarian', False)
                
                # üá≠üá∫ MAGYAR SPECIFIKUS DETAILS
                details_parts = []
                
                if is_hungarian:
                    # Magyar telep√ºl√©s r√©szletek
                    settlement_type = result_data.get('settlement_type')
                    if settlement_type:
                        details_parts.append(f"T√≠pus: {settlement_type}")
                    
                    megye = result_data.get('megye')
                    if megye:
                        details_parts.append(f"Megye: {megye}")
                    
                    jaras = result_data.get('jaras')
                    if jaras:
                        details_parts.append(f"J√°r√°s: {jaras}")
                    
                    population = result_data.get('population')
                    if population:
                        details_parts.append(f"Lakoss√°g: {population:,}")
                        
                else:
                    # Glob√°lis v√°ros r√©szletek (eredeti)
                    if region and region != name:
                        details_parts.append(f"R√©gi√≥: {region}")
                    if country:
                        details_parts.append(f"Orsz√°g: {country}")
                
                details_parts.append(f"Koordin√°t√°k: [{lat:.4f}, {lon:.4f}]")
                details = "\n".join(details_parts)
                
                # Card friss√≠t√©se
                self.location_card.set_location(name, details, is_hungarian)
                self.confirm_button.setEnabled(True)
                
                logger.info(f"Eredm√©ny preview: {name} ({'magyar' if is_hungarian else 'glob√°lis'})")
                
        except Exception as e:
            logger.error(f"Preview hiba: {e}")
    
    def _on_result_selected(self, item: QListWidgetItem):
        """Eredm√©ny dupla kattint√°s (azonnali kiv√°laszt√°s)"""
        self._on_result_clicked(item)  # Preview
        self._on_confirm_selection()   # Azonnali meger≈ës√≠t√©s
    
    def _on_confirm_selection(self):
        """Lok√°ci√≥ meger≈ës√≠t√©se"""
        try:
            current_item = self.results_list.currentItem()
            if not current_item:
                return
                
            result_data = current_item.data(Qt.UserRole)
            if not result_data:
                return
            
            name = result_data.get('city', 'Ismeretlen')
            lat = float(result_data.get('lat', 0.0))
            lon = float(result_data.get('lon', 0.0))
            is_hungarian = result_data.get('is_hungarian', False)
            
            # UniversalLocation objektum l√©trehoz√°sa
            location = UniversalLocation(
                type=LocationType.CITY,
                identifier=name,
                display_name=name,
                coordinates=(lat, lon)
            )
            
            self.current_location = location
            
            # Signalok k√ºld√©se
            self.city_selected.emit(name, lat, lon, result_data)
            self.location_changed.emit(location)
            
            flag = "üá≠üá∫" if is_hungarian else "üåç"
            logger.info(f"Lok√°ci√≥ meger≈ës√≠tve: {flag} {name} [{lat:.4f}, {lon:.4f}]")
            
        except Exception as e:
            logger.error(f"Meger≈ës√≠t√©si hiba: {e}")
    
    # === PUBLIKUS API ===
    
    def get_current_location(self) -> Optional[UniversalLocation]:
        """Jelenlegi lok√°ci√≥ lek√©rdez√©se"""
        return self.current_location
    
    def set_current_location(self, location: UniversalLocation):
        """Lok√°ci√≥ programmatic be√°ll√≠t√°sa"""
        self.current_location = location
        self.location_changed.emit(location)
        
        # UI friss√≠t√©se
        if location:
            lat, lon = location.coordinates
            details = f"Koordin√°t√°k: [{lat:.4f}, {lon:.4f}]"
            self.location_card.set_location(location.display_name, details)
            self.confirm_button.setEnabled(True)
    
    def clear_selection(self):
        """Kiv√°laszt√°s t√∂rl√©se"""
        self.current_location = None
        self.search_input.clear()
        self.results_list.clear()
        self.location_card.clear()
        self.confirm_button.setEnabled(False)
        self.status_label.setText("üí° Kezdj el g√©pelni a keres√©shez...")
    
    def focus_search(self):
        """F√≥kusz a keres≈ëmez≈ëre"""
        self.search_input.setFocus()
        self.search_input.selectAll()
    
    def get_search_text(self) -> str:
        """Jelenlegi keres√©s sz√∂veg"""
        return self.search_input.text()
    
    def set_search_text(self, text: str):
        """Keres√©s sz√∂veg be√°ll√≠t√°sa"""
        self.search_input.setText(text)
