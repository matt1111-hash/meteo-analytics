#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Global Weather Analyzer - Detailed Charts Tab Module
üìà "R√©szletes Diagramok" TAB - Nagy, professzion√°lis chartok
üîß KRITIKUS JAV√çT√ÅS: WindChart integr√°ci√≥ - HI√ÅNYZ√ì CHART FRISS√çT√âS
üå™Ô∏è WIND CHART INTEGR√ÅCI√ì: WindChart √©s WindRoseChart explicit friss√≠t√©se
"""

import logging
from typing import Optional, Dict, Any

from PySide6.QtWidgets import QWidget, QVBoxLayout
from PySide6.QtCore import Qt, Signal

from ..chart_container import ChartsContainer
from ..theme_manager import get_theme_manager, register_widget_for_theming

# Logging konfigur√°l√°sa
logger = logging.getLogger(__name__)


class DetailedChartsTab(QWidget):
    """
    üìà "R√©szletes Diagramok" TAB - Nagy, professzion√°lis chartok.
    üîß KRITIKUS JAV√çT√ÅS: WindChart integr√°ci√≥ - HI√ÅNYZ√ì CHART FRISS√çT√âS
    üå™Ô∏è WIND CHART INTEGR√ÅCI√ì: WindChart √©s WindRoseChart explicit friss√≠t√©se
    """
    
    def __init__(self, parent: Optional[QWidget] = None):
        super().__init__(parent)
        
        logger.debug("DetailedChartsTab inicializ√°l√°s START")
        
        # === THEMEMANAGER INICIALIZ√ÅL√ÅSA ===
        self.theme_manager = get_theme_manager()
        
        self.charts_container: Optional[ChartsContainer] = None
        
        # UI inicializ√°l√°sa
        self._init_ui()
        
        # === THEMEMANAGER REGISZTR√ÅCI√ì ===
        self._register_widgets_for_theming()
        
        logger.debug("DetailedChartsTab inicializ√°l√°s BEFEJEZVE")
    
    def _init_ui(self) -> None:
        """UI inicializ√°l√°sa - nagy chartok."""
        logger.debug("DetailedChartsTab._init_ui() START")
        
        layout = QVBoxLayout(self)
        layout.setContentsMargins(10, 10, 10, 10)
        
        # Charts container
        logger.debug("ChartsContainer l√©trehoz√°sa...")
        self.charts_container = ChartsContainer()
        
        if self.charts_container:
            logger.debug("ChartsContainer sikeresen l√©trehozva!")
            layout.addWidget(self.charts_container)
        else:
            logger.error("ChartsContainer l√©trehoz√°sa SIKERTELEN!")
        
        logger.debug("DetailedChartsTab._init_ui() BEFEJEZVE")
    
    def _register_widgets_for_theming(self) -> None:
        """Widget-ek regisztr√°l√°sa ThemeManager-hez."""
        register_widget_for_theming(self, "container")
        logger.debug("DetailedChartsTab - Widget regisztr√°lva ColorPalette API-hez")
    
    def update_data(self, data: Dict[str, Any]) -> None:
        """
        üîß KRITIKUS JAV√çT√ÅS: R√©szletes chartok friss√≠t√©se - WIND CHART INTEGR√ÅCI√ì.
        
        Args:
            data: OpenMeteo API v√°lasz
        """
        logger.info("üå™Ô∏è KRITIKUS JAV√çT√ÅS: DetailedChartsTab.update_data() - WIND CHART INTEGR√ÅCI√ì!")
        
        # === CHARTS CONTAINER ELLEN≈êRZ√âS ===
        if self.charts_container:
            logger.debug("charts_container EXISTS - calling update_charts...")
            
            try:
                # üå™Ô∏è KRITIKUS JAV√çT√ÅS: Explicit chart friss√≠t√©s logging
                logger.info("üå™Ô∏è WIND CHART DEBUG: Calling charts_container.update_charts() with data...")
                
                self.charts_container.update_charts(data)
                
                # üå™Ô∏è EXPLICIT WIND CHART ELLEN≈êRZ√âS
                if hasattr(self.charts_container, 'wind_chart'):
                    logger.info("üå™Ô∏è WIND CHART DEBUG: wind_chart EXISTS in container!")
                    if hasattr(self.charts_container.wind_chart, 'current_data'):
                        wind_data = self.charts_container.wind_chart.current_data
                        if wind_data is not None:
                            logger.info(f"üå™Ô∏è WIND CHART SUCCESS: Wind chart has data: {len(wind_data) if hasattr(wind_data, '__len__') else 'non-empty'}")
                        else:
                            logger.warning("üå™Ô∏è WIND CHART WARNING: Wind chart current_data is None!")
                    else:
                        logger.warning("üå™Ô∏è WIND CHART WARNING: Wind chart has no current_data attribute!")
                else:
                    logger.error("üå™Ô∏è WIND CHART ERROR: wind_chart NOT FOUND in container!")
                
                # üåπ EXPLICIT WIND ROSE CHART ELLEN≈êRZ√âS  
                if hasattr(self.charts_container, 'windrose_chart'):
                    logger.info("üåπ WIND ROSE DEBUG: windrose_chart EXISTS in container!")
                    if hasattr(self.charts_container.windrose_chart, 'current_data'):
                        windrose_data = self.charts_container.windrose_chart.current_data
                        if windrose_data is not None:
                            logger.info(f"üåπ WIND ROSE SUCCESS: Wind rose chart has data: {len(windrose_data) if hasattr(windrose_data, '__len__') else 'non-empty'}")
                        else:
                            logger.warning("üåπ WIND ROSE WARNING: Wind rose chart current_data is None!")
                    else:
                        logger.warning("üåπ WIND ROSE WARNING: Wind rose chart has no current_data attribute!")
                else:
                    logger.error("üåπ WIND ROSE ERROR: windrose_chart NOT FOUND in container!")
                
                logger.info("‚úÖ DetailedChartsTab: charts_container.update_charts() SIKERES! (WIND CHART INTEGRATION)")
                
            except Exception as e:
                logger.error(f"‚ùå HIBA a charts_container.update_charts() h√≠v√°sban: {e}")
                logger.error(f"‚ùå Exception type: {type(e).__name__}")
                import traceback
                logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
        else:
            logger.error("‚ùå charts_container is None! - Ez a probl√©ma oka!")
    
    def clear_data(self) -> None:
        """Chartok t√∂rl√©se."""
        logger.debug("DetailedChartsTab.clear_data() MEGH√çVVA")
        
        if self.charts_container:
            logger.debug("charts_container l√©tezik - clear_charts() h√≠v√°sa...")
            self.charts_container.clear_charts()
            logger.debug("clear_charts() BEFEJEZVE")
        else:
            logger.error("charts_container is None - nem lehet t√∂r√∂lni!")
    
    def apply_theme(self, dark_theme: bool) -> None:
        """T√©ma alkalmaz√°sa."""
        logger.debug(f"DetailedChartsTab.apply_theme({dark_theme}) MEGH√çVVA")
        
        if self.charts_container:
            logger.debug("charts_container l√©tezik - apply_theme() h√≠v√°sa...")
            self.charts_container.apply_theme(dark_theme)
            logger.debug("apply_theme() BEFEJEZVE")
        else:
            logger.error("charts_container is None - nem lehet t√©m√°t alkalmazni!")
