#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Global Weather Analyzer - Results Panel Utility Classes
K√∂z√∂s utility oszt√°lyok a results panel moduljai sz√°m√°ra.
üå™Ô∏è WIND GUSTS T√ÅMOGAT√ÅS: √âleth≈± sz√©ll√∂k√©s kategoriz√°l√°s √©s √©rt√©kel√©s
üöÄ PROFESSIONAL CODING: DRY, KISS, SOLID principles
üîß MODUL√ÅRIS DESIGN: √öjrafelhaszn√°lhat√≥ komponensek

üèóÔ∏è UTILITY OSZT√ÅLYOK:
‚úÖ WindGustsConstants - Sz√©ll√∂k√©s konstansok √©s k√ºsz√∂b√∂k
‚úÖ DataFrameExtractor - DataFrame konvert√°l√°s √©s valid√°l√°s  
‚úÖ WindGustsAnalyzer - Sz√©ll√∂k√©s elemz√©s √©s kategoriz√°l√°s

üéØ HASZN√ÅLAT:
from .utils import WindGustsConstants, DataFrameExtractor, WindGustsAnalyzer
"""

import logging
from typing import Dict, List, Any, Optional
import pandas as pd

# Logging konfigur√°l√°sa
logger = logging.getLogger(__name__)


class WindGustsConstants:
    """
    üå™Ô∏è Sz√©ll√∂k√©s kategoriz√°l√°si √©s k√ºsz√∂b konstansok.
    METEOROL√ìGIAI STANDARDOKRA KALIBR√ÅLT √©rt√©kek.
    """
    
    # Sz√©ll√∂k√©s kateg√≥ri√°k km/h-ban - √âLETH≈∞ √âRT√âKEK
    MODERATE_THRESHOLD = 50.0    # M√©rs√©kelt sz√©ll√∂k√©s (Beaufort 6-7)
    STRONG_THRESHOLD = 70.0      # Er≈ës sz√©ll√∂k√©s (Beaufort 8)
    EXTREME_THRESHOLD = 100.0    # Extr√©m sz√©ll√∂k√©s (Beaufort 10)
    HURRICANE_THRESHOLD = 120.0  # Hurrik√°n er≈ëss√©g≈± (Beaufort 12)
    
    # Windy days k√ºsz√∂b√∂k (data source alapj√°n)
    WINDY_THRESHOLD_GUSTS = 70.0      # wind_gusts_max eset√©n
    WINDY_THRESHOLD_WINDSPEED = 20.0  # windspeed_10m_max eset√©n
    
    # Kateg√≥ria c√≠mk√©k - MAGYAR LOKALIZ√ÅCI√ì
    CATEGORIES = {
        'moderate': 'M√âRS√âKELT',
        'strong': 'ER≈êS', 
        'extreme': 'EXTR√âM',
        'hurricane': 'HURRIK√ÅN ER≈êSS√âG≈∞'
    }
    
    # Kateg√≥ria sz√≠nek (ThemeManager kompatibilis)
    CATEGORY_COLORS = {
        'moderate': 'success',     # Z√∂ld - biztons√°gos
        'strong': 'warning',       # S√°rga - figyelem
        'extreme': 'error',        # Piros - vesz√©lyes  
        'hurricane': 'error'       # Piros - kritikus
    }
    
    # Emoji ikonok kateg√≥ri√°nk√©nt
    CATEGORY_EMOJIS = {
        'moderate': 'üí®',
        'strong': 'üå™Ô∏è', 
        'extreme': '‚ö†Ô∏è',
        'hurricane': 'üö®'
    }


class DataFrameExtractor:
    """
    Adatok DataFrame-be konvert√°l√°s√°√©rt felel≈ës utility oszt√°ly.
    üöÄ SOLID: Single Responsibility Principle
    üå™Ô∏è WIND GUSTS T√ÅMOGAT√ÅS: wind_gusts_max priorit√°ssal, windspeed_10m_max fallback-kel
    """
    
    @staticmethod
    def extract_safely(data: Dict[str, Any]) -> pd.DataFrame:
        """
        Adatok DataFrame-be konvert√°l√°sa - robusztus implement√°ci√≥.
        üå™Ô∏è WIND GUSTS PRIORIT√ÅS: wind_gusts_max ‚Üí windspeed_10m_max fallback
        
        Args:
            data: OpenMeteo API v√°lasz
            
        Returns:
            pandas.DataFrame: Feldolgozott id≈ëj√°r√°si adatok
            
        Raises:
            ValueError: Ha az adatok nem megfelel≈ë form√°tum√∫ak
        """
        try:
            logger.debug("DataFrameExtractor.extract_safely() - START")
            
            daily_data = data.get("daily", {})
            if not daily_data:
                logger.warning("Nincs 'daily' adat a v√°laszban")
                return pd.DataFrame()
            
            dates = daily_data.get("time", [])
            if not dates:
                logger.warning("Nincs 'time' adat a daily adatokban")
                return pd.DataFrame()
            
            logger.debug(f"Extracting {len(dates)} napok adatai...")
            
            # === H≈êM√âRS√âKLET ADATOK ===
            temp_max = daily_data.get("temperature_2m_max", [])
            temp_min = daily_data.get("temperature_2m_min", [])
            temp_mean = daily_data.get("temperature_2m_mean", [])
            
            # === CSAPAD√âK ADATOK ===
            precip = daily_data.get("precipitation_sum", [])
            
            # === üå™Ô∏è KRITIKUS: WIND GUSTS PRIORIT√ÅS ===
            wind_gusts_max = daily_data.get("wind_gusts_max", [])
            windspeed_10m_max = daily_data.get("windspeed_10m_max", [])
            
            # Hi√°nyz√≥ temp_mean sz√°m√≠t√°sa ha nincs
            if not temp_mean and temp_max and temp_min:
                logger.debug("Temp_mean sz√°m√≠t√°sa temp_max √©s temp_min alapj√°n...")
                temp_mean = [
                    round((t_max + t_min) / 2, 1) if t_max is not None and t_min is not None else None
                    for t_max, t_min in zip(temp_max, temp_min)
                ]
            
            max_length = len(dates)
            
            # === DATAFRAME √ñSSZE√ÅLL√çT√ÅSA ===
            df_data = {
                'date': dates,
                'temp_max': DataFrameExtractor._ensure_length(temp_max, max_length),
                'temp_min': DataFrameExtractor._ensure_length(temp_min, max_length),
                'precipitation': DataFrameExtractor._ensure_length(precip, max_length)
            }
            
            # Temp_mean hozz√°ad√°sa ha van
            if temp_mean:
                df_data['temp_mean'] = DataFrameExtractor._ensure_length(temp_mean, max_length)
            
            # === üå™Ô∏è KRITIKUS: WIND DATA SOURCE DETECTION ===
            if wind_gusts_max:
                # ELS≈êDLEGES: wind_gusts_max (√©leth≈± sz√©ll√∂k√©sek)
                df_data['windspeed'] = DataFrameExtractor._ensure_length(wind_gusts_max, max_length)
                df_data['wind_data_source'] = ['wind_gusts_max'] * max_length
                logger.info(f"‚úÖ Wind data source: wind_gusts_max ({len(wind_gusts_max)} values)")
                
            elif windspeed_10m_max:
                # FALLBACK: windspeed_10m_max (sz√©lsebess√©g √°tlag)
                df_data['windspeed'] = DataFrameExtractor._ensure_length(windspeed_10m_max, max_length)
                df_data['wind_data_source'] = ['windspeed_10m_max'] * max_length
                logger.warning(f"‚ö†Ô∏è Fallback to windspeed_10m_max ({len(windspeed_10m_max)} values)")
                
            else:
                # NINCS SZ√âL ADAT
                logger.error("‚ùå Nincs sz√©l adat sem wind_gusts_max, sem windspeed_10m_max")
                df_data['windspeed'] = [None] * max_length
                df_data['wind_data_source'] = ['no_data'] * max_length
            
            # DataFrame l√©trehoz√°sa
            df = pd.DataFrame(df_data)
            
            logger.info(f"‚úÖ DataFrame extracted successfully: {df.shape} (rows, cols)")
            logger.debug(f"Columns: {list(df.columns)}")
            
            return df
            
        except Exception as e:
            logger.error(f"‚ùå DataFrame extract hiba: {e}")
            return pd.DataFrame()
    
    @staticmethod
    def _ensure_length(lst: List, target: int) -> List:
        """
        Lista hossz√°nak biztos√≠t√°sa c√©l√©rt√©k szerint.
        
        Args:
            lst: Input lista
            target: C√©lhossz
            
        Returns:
            List: Megfelel≈ë hossz√∫s√°g√∫ lista
        """
        if not lst:
            return [None] * target
            
        current_len = len(lst)
        
        if current_len == target:
            return lst
        elif current_len < target:
            # Kieg√©sz√≠t√©s None √©rt√©kekkel
            return lst + [None] * (target - current_len)
        else:
            # Lev√°gas c√©lhosszra
            return lst[:target]
    
    @staticmethod
    def validate_dataframe(df: pd.DataFrame) -> Dict[str, Any]:
        """
        DataFrame valid√°l√°sa √©s min≈ës√©g ellen≈ërz√©se.
        
        Args:
            df: Valid√°land√≥ DataFrame
            
        Returns:
            Valid√°ci√≥s eredm√©nyek dictionary
        """
        try:
            if df.empty:
                return {
                    "valid": False,
                    "error": "DataFrame √ºres",
                    "rows": 0,
                    "columns": 0
                }
            
            # Alapvet≈ë statisztik√°k
            stats = {
                "valid": True,
                "rows": len(df),
                "columns": len(df.columns),
                "date_range": None,
                "missing_data": {},
                "wind_source": "unknown"
            }
            
            # D√°tum tartom√°ny
            if 'date' in df.columns and not df['date'].empty:
                stats["date_range"] = f"{df['date'].iloc[0]} - {df['date'].iloc[-1]}"
            
            # Hi√°nyz√≥ adatok sz√°ml√°l√°sa
            for col in df.columns:
                missing_count = df[col].isna().sum()
                if missing_count > 0:
                    stats["missing_data"][col] = missing_count
            
            # Sz√©l adatforr√°s detekt√°l√°sa
            if 'wind_data_source' in df.columns and not df['wind_data_source'].empty:
                stats["wind_source"] = df['wind_data_source'].iloc[0]
            
            logger.debug(f"DataFrame validation: {stats}")
            return stats
            
        except Exception as e:
            logger.error(f"DataFrame validation hiba: {e}")
            return {
                "valid": False,
                "error": str(e),
                "rows": 0,
                "columns": 0
            }


class WindGustsAnalyzer:
    """
    üå™Ô∏è Sz√©ll√∂k√©s elemz√©s√©rt felel≈ës utility oszt√°ly.
    üöÄ SOLID: Single Responsibility Principle
    üå™Ô∏è METEOROL√ìGIAI STANDARDOK: Beaufort sk√°la alap√∫ kategoriz√°l√°s
    """
    
    @staticmethod
    def categorize_wind_gust(wind_speed: float, data_source: str = 'wind_gusts_max') -> str:
        """
        Sz√©ll√∂k√©s kategoriz√°l√°sa √©leth≈± √©rt√©kek alapj√°n.
        üå™Ô∏è METEOROL√ìGIAI KALIBR√ÅL√ÅS: Beaufort sk√°la szerinti kateg√≥ri√°k
        
        Args:
            wind_speed: Sz√©lsebess√©g km/h-ban
            data_source: Adatforr√°s t√≠pusa ('wind_gusts_max' vagy 'windspeed_10m_max')
            
        Returns:
            str: Kateg√≥ria neve ('moderate', 'strong', 'extreme', 'hurricane')
        """
        if wind_speed is None or wind_speed < 0:
            return 'moderate'  # Default safe category
        
        try:
            if data_source == 'wind_gusts_max':
                # √âLETH≈∞ SZ√âLL√ñK√âS K√úSZ√ñB√ñK (wind_gusts_max)
                if wind_speed >= WindGustsConstants.HURRICANE_THRESHOLD:
                    return 'hurricane'    # ‚â•120 km/h - Hurrik√°n (Beaufort 12)
                elif wind_speed >= WindGustsConstants.EXTREME_THRESHOLD:
                    return 'extreme'      # ‚â•100 km/h - Extr√©m vihar (Beaufort 10-11)
                elif wind_speed >= WindGustsConstants.STRONG_THRESHOLD:
                    return 'strong'       # ‚â•70 km/h - Er≈ës vihar (Beaufort 8-9)
                elif wind_speed >= WindGustsConstants.MODERATE_THRESHOLD:
                    return 'strong'       # ‚â•50 km/h - Er≈ës sz√©l (Beaufort 7-8)
                else:
                    return 'moderate'     # <50 km/h - M√©rs√©kelt (Beaufort 1-6)
            
            else:
                # WINDSPEED_10M_MAX K√úSZ√ñB√ñK (alacsonyabbak)
                # Import from parent utils for backward compatibility
                from ..utils import AnomalyConstants
                
                if wind_speed >= AnomalyConstants.WIND_HIGH_THRESHOLD:  # ‚â•70 km/h
                    return 'strong'
                else:
                    return 'moderate'
            
        except Exception as e:
            logger.error(f"Wind gust categorization hiba: {e}")
            return 'moderate'  # Safe fallback
    
    @staticmethod
    def get_windy_days_threshold(data_source: str) -> float:
        """
        Szeles napok k√ºsz√∂b√©nek meghat√°roz√°sa adatforr√°s alapj√°n.
        
        Args:
            data_source: Adatforr√°s t√≠pusa
            
        Returns:
            float: K√ºsz√∂b√©rt√©k km/h-ban
        """
        if data_source == 'wind_gusts_max':
            return WindGustsConstants.WINDY_THRESHOLD_GUSTS  # 70.0 km/h
        else:
            return WindGustsConstants.WINDY_THRESHOLD_WINDSPEED  # 20.0 km/h
    
    @staticmethod
    def generate_wind_description(wind_speed: float, category: str, data_source: str) -> str:
        """
        Sz√©ll√∂k√©s le√≠r√°s√°nak gener√°l√°sa.
        
        Args:
            wind_speed: Sz√©lsebess√©g km/h-ban
            category: Kateg√≥ria ('moderate', 'strong', 'extreme', 'hurricane')
            data_source: Adatforr√°s t√≠pusa
            
        Returns:
            str: Le√≠r√°s sz√∂veg emoji-val √©s √©rt√©kkel
        """
        if wind_speed is None:
            return "‚ùì Nincs adat"
        
        try:
            # Kateg√≥ria c√≠mke √©s emoji lek√©rdez√©se
            category_label = WindGustsConstants.CATEGORIES.get(category, 'ISMERETLEN')
            category_emoji = WindGustsConstants.CATEGORY_EMOJIS.get(category, 'üí®')
            
            if data_source == 'wind_gusts_max':
                # R√©szletes sz√©ll√∂k√©s le√≠r√°s
                return f"{category_emoji} {category_label} ({wind_speed:.1f} km/h)"
            else:
                # Egyszer≈± sz√©lsebess√©g le√≠r√°s
                return f"üí® Sz√©l: {wind_speed:.1f} km/h"
        
        except Exception as e:
            logger.error(f"Wind description generation hiba: {e}")
            return f"üí® {wind_speed:.1f} km/h"
    
    @staticmethod
    def get_wind_risk_level(wind_speed: float, data_source: str = 'wind_gusts_max') -> Dict[str, Any]:
        """
        Sz√©ll√∂k√©s kock√°zati szint meghat√°roz√°sa.
        
        Args:
            wind_speed: Sz√©lsebess√©g km/h-ban
            data_source: Adatforr√°s t√≠pusa
            
        Returns:
            Dict: Kock√°zati inform√°ci√≥k (level, color, warning, actions)
        """
        if wind_speed is None:
            return {
                "level": "unknown",
                "color": "#9ca3af",
                "warning": "Nincs adat",
                "actions": []
            }
        
        try:
            category = WindGustsAnalyzer.categorize_wind_gust(wind_speed, data_source)
            
            risk_levels = {
                'moderate': {
                    "level": "low",
                    "color": "#10b981",  # Z√∂ld
                    "warning": "Alacsony kock√°zat",
                    "actions": ["Szabadt√©ri tev√©kenys√©gek biztons√°gosak"]
                },
                'strong': {
                    "level": "medium", 
                    "color": "#f59e0b",  # S√°rga
                    "warning": "K√∂zepes kock√°zat",
                    "actions": [
                        "√ìvatoss√°g szabadban",
                        "Vezet√©sn√©l figyeljen a sz√©ll√∂k√©sekre"
                    ]
                },
                'extreme': {
                    "level": "high",
                    "color": "#dc2626",  # Piros
                    "warning": "Magas kock√°zat",
                    "actions": [
                        "Ker√ºlje a szabadt√©ri tev√©kenys√©geket",
                        "Biztos√≠tsa a laza t√°rgyakat", 
                        "Vezet√©st ker√ºlje"
                    ]
                },
                'hurricane': {
                    "level": "critical",
                    "color": "#7c2d12",  # S√∂t√©t piros
                    "warning": "KRITIKUS KOCK√ÅZAT",
                    "actions": [
                        "MARADJON BENT!",
                        "Ker√ºlje az ablakokat",
                        "K√©sz√ºlj√∂n √°ramkimarad√°sra",
                        "K√∂vesse a hivatalos figyelmeztet√©seket"
                    ]
                }
            }
            
            return risk_levels.get(category, risk_levels['moderate'])
        
        except Exception as e:
            logger.error(f"Wind risk level calculation hiba: {e}")
            return {
                "level": "unknown",
                "color": "#9ca3af", 
                "warning": "Hiba a sz√°m√≠t√°s sor√°n",
                "actions": []
            }
    
    @staticmethod
    def analyze_wind_series(wind_data: List[float], data_source: str = 'wind_gusts_max') -> Dict[str, Any]:
        """
        Sz√©ll√∂k√©s id≈ësor elemz√©se.
        
        Args:
            wind_data: Sz√©ll√∂k√©s √©rt√©kek list√°ja
            data_source: Adatforr√°s t√≠pusa
            
        Returns:
            Dict: R√©szletes elemz√©si eredm√©nyek
        """
        if not wind_data:
            return {"error": "Nincs sz√©l adat"}
        
        try:
            # Tiszta adatok (None √©s negat√≠v √©rt√©kek elt√°vol√≠t√°sa)
            clean_data = [x for x in wind_data if x is not None and x >= 0]
            
            if not clean_data:
                return {"error": "Nincs √©rv√©nyes sz√©l adat"}
            
            # Alapstatisztik√°k
            import statistics
            
            analysis = {
                "data_source": data_source,
                "total_days": len(wind_data),
                "valid_days": len(clean_data),
                "missing_days": len(wind_data) - len(clean_data),
                
                # Statisztik√°k
                "min_speed": min(clean_data),
                "max_speed": max(clean_data),
                "avg_speed": statistics.mean(clean_data),
                "median_speed": statistics.median(clean_data),
                "std_dev": statistics.stdev(clean_data) if len(clean_data) > 1 else 0,
                
                # Kateg√≥ria elemz√©s
                "categories": {},
                "windy_days": 0,
                "risk_days": 0
            }
            
            # Kateg√≥ri√°nk√©nti eloszl√°s
            for category in ['moderate', 'strong', 'extreme', 'hurricane']:
                count = len([
                    speed for speed in clean_data 
                    if WindGustsAnalyzer.categorize_wind_gust(speed, data_source) == category
                ])
                analysis["categories"][category] = count
            
            # Szeles napok sz√°ma
            threshold = WindGustsAnalyzer.get_windy_days_threshold(data_source)
            analysis["windy_days"] = len([x for x in clean_data if x > threshold])
            
            # Magas kock√°zat√∫ napok (strong+)
            analysis["risk_days"] = len([
                speed for speed in clean_data 
                if WindGustsAnalyzer.categorize_wind_gust(speed, data_source) in ['strong', 'extreme', 'hurricane']
            ])
            
            # Maximum sz√©ll√∂k√©s r√©szletes adatai
            max_speed = max(clean_data)
            max_category = WindGustsAnalyzer.categorize_wind_gust(max_speed, data_source)
            max_risk = WindGustsAnalyzer.get_wind_risk_level(max_speed, data_source)
            
            analysis["max_wind_details"] = {
                "speed": max_speed,
                "category": max_category,
                "risk_level": max_risk["level"],
                "description": WindGustsAnalyzer.generate_wind_description(max_speed, max_category, data_source)
            }
            
            logger.debug(f"Wind series analysis completed: {len(clean_data)} days analyzed")
            return analysis
            
        except Exception as e:
            logger.error(f"Wind series analysis hiba: {e}")
            return {"error": f"Elemz√©si hiba: {str(e)}"}


# === MODUL EXPORT INFORM√ÅCI√ìK ===

__all__ = [
    "WindGustsConstants",
    "DataFrameExtractor", 
    "WindGustsAnalyzer"
]

logger.info("‚úÖ Results panel utils loaded: WindGustsConstants, DataFrameExtractor, WindGustsAnalyzer")
