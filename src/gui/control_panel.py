#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Universal Weather Research Platform - Control Panel Module (MULTI-YEAR BATCH SUPPORT!)
MVC kompatibilis vez√©rl≈ë panel modul - LAYOUT & RESPONSIVENESS JAV√çTOTT + MULTI-YEAR BATCH T√ÅMOGAT√ÅS.

üöÄ MULTI-YEAR BATCH T√ÅMOGAT√ÅS HOZZ√ÅADVA:
‚úÖ Id≈ëtartam dropdown (5/10/25/55 √©v) - ugyanaz mint TrendAnalyticsTab
‚úÖ 1 √©ves limit ELT√ÅVOL√çTVA
‚úÖ weather_client.py v4.0 multi-year batch haszn√°lata
‚úÖ Automatikus d√°tum sz√°m√≠t√°s dropdown alapj√°n
‚úÖ 55 √©ves trend elemz√©sek t√°mogat√°sa
‚úÖ Kompatibilit√°s a megl√©v≈ë manual d√°tum picker-ekkel

üîß LAYOUT & RESPONSIVENESS JAV√çT√ÅSOK:
‚úÖ Panel width constraints optimaliz√°lva (320-450px)
‚úÖ Widget spacing √©s margins jav√≠tva
‚úÖ Button sizing √©s responsiveness jav√≠tva  
‚úÖ GroupBox sizing optimaliz√°lva
‚úÖ UniversalLocationSelector layout constraints jav√≠tva
‚úÖ Fetch button signal chain debug √©s jav√≠t√°s
‚úÖ Layout overflow probl√©m√°k megoldva
‚úÖ Modern spacing √©s padding haszn√°lata

üåç ‚úÖ UNIVERSAL LOCATION SELECTOR INTEGR√ÅCI√ì MEGMARAD:
- UniversalLocationSelector komponens integr√°lva
- 3-f√ºlecsk√©s lok√°ci√≥ v√°laszt√≥ (Keres√©s/Lista/T√©rk√©p)
- Kompatibilis signal interf√©sz fenntartva
- R√©gi city_input + city_results lecser√©lve
- CityManager automatikusan l√©trehozva

üé® ‚úÖ PROFESSZION√ÅLIS COLORPALETTE INTEGR√ÅCI√ì MEGMARAD:
- MockColorScheme elt√°vol√≠tva
- ColorPalette API haszn√°lata
- Dinamikus HSL sz√≠nkezel√©s
- Semantic color mapping
- Material Design support
- Professional theming

‚úÖ PROVIDER SELECTOR SUPPORT MEGMARAD:
- User-controlled API v√°laszt√°s
- Real-time usage tracking display
- Cost monitoring & warnings
- Provider preference persistence
- Smart routing display
"""

from typing import Optional, List, Dict, Any
from datetime import datetime, timedelta

from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QFormLayout, QHBoxLayout, QGroupBox,
    QLineEdit, QComboBox, QPushButton, QDateEdit, QLabel,
    QCheckBox, QSpinBox, QProgressBar, QRadioButton, QButtonGroup,
    QSizePolicy, QFrame, QScrollArea  # üîß LAYOUT JAV√çT√ÅS
)
from PySide6.QtCore import Qt, QDate, Signal, QTimer, QSize
from PySide6.QtGui import QFont

from ..config import APIConfig, GUIConfig, ProviderConfig, UserPreferences, UsageTracker
from .utils import GUIConstants
from .workers.data_fetch_worker import WorkerManager
from .theme_manager import get_theme_manager, register_widget_for_theming
from .universal_location_selector import UniversalLocationSelector
from ..data.city_manager import CityManager
from ..data.models import UniversalLocation


class ControlPanel(QWidget):
    """
    üöÄ MULTI-YEAR BATCH T√ÅMOGAT√ÅS + üîß LAYOUT & RESPONSIVENESS JAV√çTOTT MVC kompatibilis vez√©rl≈ë panel.
    
    üöÄ MULTI-YEAR BATCH T√ÅMOGAT√ÅS EBBEN A VERZI√ìBAN:
    - Id≈ëtartam dropdown (5/10/25/55 √©v) - TrendAnalyticsTab kompatibilis
    - 1 √©ves limit ELT√ÅVOL√çTVA
    - weather_client.py v4.0 multi-year batch haszn√°lata  
    - Automatikus d√°tum sz√°m√≠t√°s dropdown alapj√°n
    - Manual d√°tum v√°laszt√°s tov√°bbra is el√©rhet≈ë
    - 55 √©ves klimatol√≥giai elemz√©sek t√°mogat√°sa
    - Rate limit optimaliz√°lt batch-el√©s
    
    üîß LAYOUT & RESPONSIVENESS JAV√çT√ÅSOK MEGMARADNAK:
    - Panel width constraints optimaliz√°lva (320-450px)
    - Widget spacing √©s margins professzion√°lisan be√°ll√≠tva
    - Button sizing √©s responsiveness probl√©m√°k jav√≠tva
    - GroupBox sizing √©s overflow probl√©m√°k megoldva
    - UniversalLocationSelector layout constraints optimaliz√°lva
    - Fetch button signal chain debug √©s jav√≠t√°s
    - Layout overflow √©s scrolling probl√©m√°k megoldva
    - Modern spacing haszn√°lata (12px, 16px, 20px)
    
    üåç UNIVERSAL LOCATION SELECTOR FEATURES MEGMARADNAK:
    - 3-f√ºlecsk√©s lok√°ci√≥ v√°laszt√≥ (Keres√©s/Lista/T√©rk√©p)
    - UniversalLocation objektum t√°mogat√°s
    - Kompatibilis signal interf√©sz
    - CityManager automatikus inicializ√°l√°s
    
    üé® PROFESSIONAL COLORPALETTE FEATURES MEGMARADNAK:
    - Dinamikus HSL sz√≠nkezel√©s
    - Semantic color mapping
    - Material Design color variants
    - Weather-specific color schemes
    - WCAG accessibility compliance
    - Real-time theme switching
    
    ‚úÖ PROVIDER SELECTOR FEATURES MEGMARADNAK:
    - User-controlled API selection
    - Real-time usage tracking
    - Cost monitoring & alerts
    - Smart routing visualization
    - Automatic fallback handling
    """
    
    # === KIMEN≈ê SIGNALOK A CONTROLLER FEL√â ===
    
    # Telep√ºl√©s keres√©s (kompatibilit√°s)
    search_requested = Signal(str)  # search_query
    
    # Telep√ºl√©s kiv√°laszt√°s (kompatibilit√°s)
    city_selected = Signal(str, float, float, dict)  # name, lat, lon, metadata
    
    # üåç √öJ - UniversalLocation kiv√°laszt√°s
    location_changed = Signal(object)  # UniversalLocation objektum
    
    # üöÄ FRISS√çTETT - Id≈ëj√°r√°si adatok lek√©rdez√©se MULTI-YEAR BATCH t√°mogat√°ssal
    weather_data_requested = Signal(float, float, str, str, dict)  # lat, lon, start_date, end_date, params
    
    # ‚úÖ PROVIDER SELECTOR SIGNALOK
    provider_changed = Signal(str)  # provider_name ("auto", "open-meteo", "meteostat")
    provider_preferences_updated = Signal(dict)  # updated_preferences
    
    # === EGY√âB SIGNALOK ===
    
    # Helyi hib√°k (valid√°ci√≥s hib√°k stb.)
    local_error_occurred = Signal(str)  # error_message
    
    def __init__(self, worker_manager: WorkerManager, parent: Optional[QWidget] = None):
        """
        üöÄ MULTI-YEAR BATCH T√ÅMOGAT√ÅS + üîß LAYOUT & RESPONSIVENESS JAV√çTOTT vez√©rl≈ë panel inicializ√°l√°sa.
        
        Args:
            worker_manager: H√°tt√©rsz√°lak kezel≈ëje (kompatibilit√°s miatt)
            parent: Sz√ºl≈ë widget
        """
        super().__init__(parent)
        
        # Worker manager referencia
        self.worker_manager = worker_manager
        
        # === üåç CITYMANGER AUTOMATIKUS INICIALIZ√ÅL√ÅS ===
        self.city_manager = CityManager()
        
        # === PROFESSZION√ÅLIS THEMEMANAGER INICIALIZ√ÅL√ÅSA ===
        self.theme_manager = get_theme_manager()
        
        # === √ÅLLAPOT V√ÅLTOZ√ìK ===
        
        # üåç UniversalLocation objektum t√°rol√°s
        self.current_location: Optional[UniversalLocation] = None
        self.current_city_data: Optional[Dict[str, Any]] = None  # üîß JAV√çT√ÅS: Kompatibilit√°s
        
        # UI √°llapot
        self.is_fetching = False
        
        # ‚úÖ PROVIDER SELECTOR √°llapot
        self.current_provider: str = "auto"
        self.usage_data: Dict[str, Any] = {}
        self.provider_preferences: Dict[str, Any] = {}
        
        # üöÄ MULTI-YEAR BATCH √°llapot
        self.date_mode: str = "time_range"  # "time_range" vagy "manual_dates"
        
        # === UI ELEMEK ===
        
        # ‚úÖ PROVIDER SELECTOR Timer
        self.usage_update_timer = QTimer()
        self.usage_update_timer.timeout.connect(self._update_usage_display)
        self.usage_update_timer.start(30000)  # 30 seconds interval
        
        # UI inicializ√°l√°sa
        self._init_ui()
        self._setup_default_values()
        self._connect_internal_signals()
        
        # ‚úÖ PROVIDER SELECTOR inicializ√°l√°s
        self._load_provider_preferences()
        self._update_usage_display()
        
        # === PROFESSZION√ÅLIS THEMEMANAGER REGISZTR√ÅCI√ì ===
        self._register_widgets_for_theming()
        
        print("üöÄ DEBUG: ControlPanel MULTI-YEAR BATCH T√ÅMOGAT√ÅS + LAYOUT & RESPONSIVENESS JAV√çTOTT verzi√≥ k√©sz")
    
    def _init_ui(self) -> None:
        """üöÄ MULTI-YEAR BATCH + üîß LAYOUT & RESPONSIVENESS JAV√çTOTT UI elemek inicializ√°l√°sa."""
        
        # üîß KRITIKUS: PANEL SIZE POLICY √âS CONSTRAINTS
        self.setMinimumWidth(320)  # Minimum width n√∂velve
        self.setMaximumWidth(450)  # Maximum width n√∂velve 
        self.setMinimumHeight(600)  # Minimum height biztos√≠t√°sa
        
        # üîß EXPLICIT SIZE POLICY
        self.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Expanding)
        
        # === üîß SCROLL AREA WRAPPER LAYOUT OVERFLOW KEZEL√âSHEZ ===
        
        # Scroll area l√©trehoz√°sa
        scroll_area = QScrollArea(self)
        scroll_area.setWidgetResizable(True)
        scroll_area.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        scroll_area.setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        scroll_area.setFrameShape(QFrame.NoFrame)
        
        # Scroll content widget
        scroll_content = QWidget()
        scroll_area.setWidget(scroll_content)
        
        # Main layout a scroll area-hoz
        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(0, 0, 0, 0)  # Nincs margin az f≈ë layout-on
        main_layout.addWidget(scroll_area)
        
        # Content layout
        layout = QVBoxLayout(scroll_content)
        layout.setContentsMargins(12, 12, 12, 12)  # üîß OPTIM√ÅLIS MARGINS
        layout.setSpacing(16)  # üîß OPTIM√ÅLIS SPACING
        
        # üåç UNIVERSAL LOCATION SELECTOR panel
        location_group = self._create_universal_location_group()
        layout.addWidget(location_group)
        
        # üöÄ MULTI-YEAR BATCH: Id≈ëtartam kiv√°laszt√°s panel (√öJ!)
        time_range_group = self._create_time_range_group()
        layout.addWidget(time_range_group)
        
        # D√°tum kiv√°laszt√°s panel (FRISS√çTETT - opcion√°lis manual mode)
        date_group = self._create_date_group()
        layout.addWidget(date_group)
        
        # ‚úÖ PROVIDER SELECTOR panel
        provider_group = self._create_provider_selector_group()
        layout.addWidget(provider_group)
        
        # API be√°ll√≠t√°sok panel (cs√∂kkentett funkci√≥kkal)
        api_group = self._create_api_settings_group()
        layout.addWidget(api_group)
        
        # Lek√©rdez√©s vez√©rl√©s panel
        query_group = self._create_query_control_group()
        layout.addWidget(query_group)
        
        # √Ållapot panel
        status_group = self._create_status_group()
        layout.addWidget(status_group)
        
        # Rugalmas hely a panel alj√°n
        layout.addStretch()
        
        print(f"üöÄ DEBUG: ControlPanel MULTI-YEAR BATCH + LAYOUT JAV√çTVA - size: {self.minimumWidth()}-{self.maximumWidth()}px, scroll enabled")
    
    def _create_universal_location_group(self) -> QGroupBox:
        """
        üåç UNIVERSAL LOCATION SELECTOR widget csoport l√©trehoz√°sa - LAYOUT JAV√çT√ÅSSAL.
        """
        group = QGroupBox("üåç Lok√°ci√≥ V√°laszt√≥")
        layout = QVBoxLayout(group)
        layout.setContentsMargins(12, 16, 12, 12)  # üîß OPTIM√ÅLIS MARGINS
        layout.setSpacing(12)  # üîß OPTIM√ÅLIS SPACING
        
        # üåç UNIVERSAL LOCATION SELECTOR komponens
        self.universal_location_selector = UniversalLocationSelector(self.city_manager, self)
        
        # üîß KRITIKUS: SIZE CONSTRAINTS A UNIVERSAL LOCATION SELECTOR-RA
        self.universal_location_selector.setMinimumHeight(420)  # Minimum magass√°g n√∂velve
        self.universal_location_selector.setMaximumHeight(500)  # Maximum magass√°g be√°ll√≠tva
        self.universal_location_selector.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        
        layout.addWidget(self.universal_location_selector)
        
        # Kiv√°lasztott lok√°ci√≥ inform√°ci√≥ megjelen√≠t√©se
        info_layout = QHBoxLayout()
        info_layout.setSpacing(8)  # üîß SPACING JAV√çT√ÅS
        
        self.location_info_label = QLabel("V√°lasszon lok√°ci√≥t...")
        self.location_info_label.setWordWrap(True)
        self.location_info_label.setMinimumHeight(40)  # üîß MINIMUM HEIGHT
        info_layout.addWidget(self.location_info_label)
        
        # Clear gomb
        self.clear_location_btn = QPushButton("üóëÔ∏è")
        self.clear_location_btn.clicked.connect(self._clear_location)
        self.clear_location_btn.setEnabled(False)
        self.clear_location_btn.setFixedSize(32, 32)  # üîß FIXED SIZE
        self.clear_location_btn.setToolTip("Lok√°ci√≥ t√∂rl√©se")
        info_layout.addWidget(self.clear_location_btn)
        
        layout.addLayout(info_layout)
        
        # üîß GROUPBOX SIZE CONSTRAINTS
        group.setMinimumHeight(500)
        group.setMaximumHeight(580)
        
        return group
    
    def _create_time_range_group(self) -> QGroupBox:
        """
        üöÄ MULTI-YEAR BATCH: Id≈ëtartam kiv√°laszt√°s widget csoport l√©trehoz√°sa - √öJ!
        
        TrendAnalyticsTab kompatibilis id≈ëtartam opci√≥k.
        """
        group = QGroupBox("‚è∞ Id≈ëtartam (Multi-Year)")
        layout = QVBoxLayout(group)
        layout.setContentsMargins(12, 16, 12, 12)  # üîß OPTIM√ÅLIS MARGINS
        layout.setSpacing(12)  # üîß OPTIM√ÅLIS SPACING
        
        # Mode selector radio buttons
        mode_layout = QHBoxLayout()
        mode_layout.setSpacing(16)
        
        self.time_range_radio = QRadioButton("Id≈ëtartam v√°laszt√≥")
        self.time_range_radio.setChecked(True)
        self.time_range_radio.setToolTip("Automatikus d√°tum sz√°m√≠t√°s id≈ëtartam alapj√°n")
        self.time_range_radio.setMinimumHeight(24)
        mode_layout.addWidget(self.time_range_radio)
        
        self.manual_dates_radio = QRadioButton("Manu√°lis d√°tumok")
        self.manual_dates_radio.setToolTip("Pontos d√°tumok k√©zi megad√°sa")
        self.manual_dates_radio.setMinimumHeight(24)
        mode_layout.addWidget(self.manual_dates_radio)
        
        layout.addLayout(mode_layout)
        
        # Mode v√°ltoz√°s kezel√©se
        self.time_range_radio.toggled.connect(self._on_date_mode_changed)
        self.manual_dates_radio.toggled.connect(self._on_date_mode_changed)
        
        # üöÄ Id≈ëtartam dropdown (TrendAnalyticsTab kompatibilis)
        form_layout = QFormLayout()
        form_layout.setVerticalSpacing(10)
        form_layout.setHorizontalSpacing(8)
        
        self.time_range_combo = QComboBox()
        self.time_range_combo.addItems([
            "5 √©v",
            "10 √©v", 
            "25 √©v",
            "55 √©v (teljes)"
        ])
        self.time_range_combo.setCurrentText("5 √©v")  # Alap√©rtelmezett
        self.time_range_combo.setMinimumHeight(32)
        self.time_range_combo.setToolTip("Automatikus d√°tum sz√°m√≠t√°s a mai napt√≥l visszafel√©")
        self.time_range_combo.currentTextChanged.connect(self._on_time_range_changed)
        
        form_layout.addRow("Id≈ëtartam:", self.time_range_combo)
        layout.addLayout(form_layout)
        
        # Info label a computed d√°tumokhoz
        self.computed_dates_info = QLabel("Sz√°m√≠tott id≈ëszak: 2020-07-25 ‚Üí 2025-07-25")
        self.computed_dates_info.setWordWrap(True)
        self.computed_dates_info.setMinimumHeight(40)
        layout.addWidget(self.computed_dates_info)
        
        # üîß GROUPBOX SIZE CONSTRAINTS
        group.setMinimumHeight(140)
        group.setMaximumHeight(180)
        
        # Kezdeti sz√°m√≠t√°s
        self._update_computed_dates()
        
        print("üöÄ DEBUG: Time range group created with multi-year batch support")
        
        return group
    
    def _create_date_group(self) -> QGroupBox:
        """üöÄ MULTI-YEAR BATCH + üîß LAYOUT JAV√çTOTT d√°tum kiv√°laszt√°s widget csoport - FRISS√çTETT."""
        group = QGroupBox("üìÖ Manu√°lis D√°tumok (Opcion√°lis)")
        layout = QFormLayout(group)
        layout.setContentsMargins(12, 16, 12, 12)  # üîß OPTIM√ÅLIS MARGINS
        layout.setVerticalSpacing(12)  # üîß VERTICAL SPACING
        layout.setHorizontalSpacing(8)  # üîß HORIZONTAL SPACING
        
        # Kezd≈ë d√°tum
        self.start_date = QDateEdit()
        self.start_date.setCalendarPopup(True)
        self.start_date.setDisplayFormat("yyyy-MM-dd")
        self.start_date.setDate(QDate.currentDate().addYears(-5))  # üöÄ 5 √©v alap√©rtelmezett (1 helyett)
        self.start_date.setMinimumHeight(32)  # üîß MIN HEIGHT
        layout.addRow("Kezd≈ë d√°tum:", self.start_date)
        
        # Befejez≈ë d√°tum
        self.end_date = QDateEdit()
        self.end_date.setCalendarPopup(True)
        self.end_date.setDisplayFormat("yyyy-MM-dd")
        self.end_date.setDate(QDate.currentDate())
        self.end_date.setMinimumHeight(32)  # üîß MIN HEIGHT
        layout.addRow("Befejez≈ë d√°tum:", self.end_date)
        
        # Gyors d√°tum be√°ll√≠t√°sok - MULTI-YEAR BATCH FRISS√çT√âS
        quick_layout = QHBoxLayout()
        quick_layout.setSpacing(8)  # üîß SPACING
        
        self.last_month_btn = QPushButton("El≈ëz≈ë h√≥nap")
        self.last_month_btn.clicked.connect(self._set_last_month)
        self.last_month_btn.setMinimumHeight(28)  # üîß MIN HEIGHT
        quick_layout.addWidget(self.last_month_btn)
        
        self.last_year_btn = QPushButton("El≈ëz≈ë √©v")
        self.last_year_btn.clicked.connect(self._set_last_year)
        self.last_year_btn.setMinimumHeight(28)  # üîß MIN HEIGHT
        quick_layout.addWidget(self.last_year_btn)
        
        # üöÄ √öJ: Multi-year gyors gombok
        self.last_5years_btn = QPushButton("5 √©v")
        self.last_5years_btn.clicked.connect(lambda: self._set_years_back(5))
        self.last_5years_btn.setMinimumHeight(28)
        quick_layout.addWidget(self.last_5years_btn)
        
        layout.addRow("Gyors:", quick_layout)
        
        # Tov√°bbi multi-year gyors gombok
        quick_layout2 = QHBoxLayout()
        quick_layout2.setSpacing(8)
        
        self.last_10years_btn = QPushButton("10 √©v")
        self.last_10years_btn.clicked.connect(lambda: self._set_years_back(10))
        self.last_10years_btn.setMinimumHeight(28)
        quick_layout2.addWidget(self.last_10years_btn)
        
        self.last_25years_btn = QPushButton("25 √©v")
        self.last_25years_btn.clicked.connect(lambda: self._set_years_back(25))
        self.last_25years_btn.setMinimumHeight(28)
        quick_layout2.addWidget(self.last_25years_btn)
        
        self.last_55years_btn = QPushButton("55 √©v")
        self.last_55years_btn.clicked.connect(lambda: self._set_years_back(55))
        self.last_55years_btn.setMinimumHeight(28)
        quick_layout2.addWidget(self.last_55years_btn)
        
        layout.addRow("Multi-year:", quick_layout2)
        
        # üîß GROUPBOX SIZE CONSTRAINTS - KIB≈êV√çTVE MULTI-YEAR GOMBOKNAK
        group.setMinimumHeight(160)
        group.setMaximumHeight(200)
        
        # Kezdetben disabled (time_range mode akt√≠v)
        self._set_manual_dates_enabled(False)
        
        return group
    
    def _create_provider_selector_group(self) -> QGroupBox:
        """
        ‚úÖ PROVIDER SELECTOR widget csoport l√©trehoz√°sa - LAYOUT JAV√çT√ÅSSAL.
        """
        group = QGroupBox("üéõÔ∏è Adatforr√°s V√°laszt√≥")
        layout = QVBoxLayout(group)
        layout.setContentsMargins(12, 16, 12, 12)  # üîß OPTIM√ÅLIS MARGINS
        layout.setSpacing(12)  # üîß OPTIM√ÅLIS SPACING
        
        # Provider radio buttons
        providers_layout = QVBoxLayout()
        providers_layout.setSpacing(8)  # üîß RADIO SPACING
        
        # Button group for mutual exclusion
        self.provider_button_group = QButtonGroup()
        
        # Auto provider radio
        self.auto_radio = QRadioButton("ü§ñ Automatikus (Smart Routing)")
        self.auto_radio.setToolTip("Use-case alap√∫ automatikus provider v√°laszt√°s + multi-year batch")
        self.auto_radio.setMinimumHeight(24)  # üîß MIN HEIGHT
        self.provider_button_group.addButton(self.auto_radio, 0)
        providers_layout.addWidget(self.auto_radio)
        
        # Open-Meteo radio
        self.openmeteo_radio = QRadioButton("üåç Open-Meteo (Ingyenes + Multi-Year)")
        self.openmeteo_radio.setToolTip("Ingyenes glob√°lis id≈ëj√°r√°si API 55 √©ves batch t√°mogat√°ssal")
        self.openmeteo_radio.setMinimumHeight(24)  # üîß MIN HEIGHT
        self.provider_button_group.addButton(self.openmeteo_radio, 1)
        providers_layout.addWidget(self.openmeteo_radio)
        
        # Meteostat radio
        self.meteostat_radio = QRadioButton("üíé Meteostat (Pr√©mium + 55+ √©v)")
        self.meteostat_radio.setToolTip("Pr√©mium API 55+ √©ves t√∂rt√©neti adatokkal ($10/h√≥nap)")
        self.meteostat_radio.setMinimumHeight(24)  # üîß MIN HEIGHT
        self.provider_button_group.addButton(self.meteostat_radio, 2)
        providers_layout.addWidget(self.meteostat_radio)
        
        # Provider change signal
        self.provider_button_group.buttonClicked.connect(self._on_provider_changed)
        
        layout.addLayout(providers_layout)
        
        # Usage tracking display
        usage_group = QGroupBox("üìä API Haszn√°lat")
        usage_layout = QVBoxLayout(usage_group)
        usage_layout.setContentsMargins(8, 12, 8, 8)  # üîß INNER MARGINS
        usage_layout.setSpacing(8)  # üîß INNER SPACING
        
        # Meteostat usage display
        meteostat_layout = QHBoxLayout()
        meteostat_layout.setSpacing(8)  # üîß SPACING
        
        self.meteostat_usage_label = QLabel("üíé Meteostat:")
        meteostat_layout.addWidget(self.meteostat_usage_label)
        
        self.meteostat_usage_value = QLabel("0/10000")
        meteostat_layout.addWidget(self.meteostat_usage_value)
        
        meteostat_layout.addStretch()
        usage_layout.addLayout(meteostat_layout)
        
        # Meteostat usage progress bar
        self.meteostat_usage_bar = QProgressBar()
        self.meteostat_usage_bar.setRange(0, 100)
        self.meteostat_usage_bar.setValue(0)
        self.meteostat_usage_bar.setTextVisible(True)
        self.meteostat_usage_bar.setFormat("%p%")
        self.meteostat_usage_bar.setMinimumHeight(20)  # üîß MIN HEIGHT
        self.meteostat_usage_bar.setMaximumHeight(24)  # üîß MAX HEIGHT
        usage_layout.addWidget(self.meteostat_usage_bar)
        
        # Cost display
        cost_layout = QHBoxLayout()
        cost_layout.setSpacing(8)  # üîß SPACING
        
        self.cost_label = QLabel("üí∞ Havi k√∂lts√©g:")
        cost_layout.addWidget(self.cost_label)
        
        self.cost_value = QLabel("$0.00")
        cost_layout.addWidget(self.cost_value)
        
        cost_layout.addStretch()
        usage_layout.addLayout(cost_layout)
        
        # Open-Meteo usage (informational) - FRISS√çTVE MULTI-YEAR INF√ìVAL
        openmeteo_layout = QHBoxLayout()
        openmeteo_layout.setSpacing(8)  # üîß SPACING
        
        self.openmeteo_usage_label = QLabel("üåç Open-Meteo:")
        openmeteo_layout.addWidget(self.openmeteo_usage_label)
        
        self.openmeteo_usage_value = QLabel("Unlimited (Multi-Year)")
        openmeteo_layout.addWidget(self.openmeteo_usage_value)
        
        openmeteo_layout.addStretch()
        usage_layout.addLayout(openmeteo_layout)
        
        layout.addWidget(usage_group)
        
        # Usage warning label
        self.usage_warning_label = QLabel("")
        self.usage_warning_label.setWordWrap(True)
        self.usage_warning_label.setMinimumHeight(20)  # üîß MIN HEIGHT
        layout.addWidget(self.usage_warning_label)
        
        # üîß GROUPBOX SIZE CONSTRAINTS
        group.setMinimumHeight(220)
        group.setMaximumHeight(280)
        
        return group
    
    def _create_api_settings_group(self) -> QGroupBox:
        """üîß LAYOUT JAV√çTOTT API be√°ll√≠t√°sok widget csoport l√©trehoz√°sa."""
        group = QGroupBox("‚öôÔ∏è API Be√°ll√≠t√°sok")
        layout = QFormLayout(group)
        layout.setContentsMargins(12, 16, 12, 12)  # üîß OPTIM√ÅLIS MARGINS
        layout.setVerticalSpacing(10)  # üîß VERTICAL SPACING
        layout.setHorizontalSpacing(8)  # üîß HORIZONTAL SPACING
        
        # Id≈ëz√≥na automatikus detekt√°l√°s
        self.auto_timezone = QCheckBox()
        self.auto_timezone.setChecked(True)
        self.auto_timezone.setMinimumHeight(20)  # üîß MIN HEIGHT
        layout.addRow("Automatikus id≈ëz√≥na:", self.auto_timezone)
        
        # Adatok gyors√≠t√≥t√°raz√°sa
        self.cache_data = QCheckBox()
        self.cache_data.setChecked(True)
        self.cache_data.setMinimumHeight(20)  # üîß MIN HEIGHT
        layout.addRow("Adatok cache-el√©se:", self.cache_data)
        
        # API timeout be√°ll√≠t√°s - MULTI-YEAR BATCH-hez optimaliz√°lt
        self.api_timeout = QSpinBox()
        self.api_timeout.setRange(30, 300)  # üöÄ NAGYOBB RANGE multi-year batch-hez
        self.api_timeout.setValue(60)  # üöÄ NAGYOBB DEFAULT (30‚Üí60s) multi-year batch-hez
        self.api_timeout.setSuffix(" m√°sodperc")
        self.api_timeout.setMinimumHeight(28)  # üîß MIN HEIGHT
        self.api_timeout.setToolTip("Multi-year batch lek√©rdez√©sekhez nagyobb timeout aj√°nlott")
        layout.addRow("API timeout:", self.api_timeout)
        
        # üîß GROUPBOX SIZE CONSTRAINTS
        group.setMinimumHeight(120)
        group.setMaximumHeight(140)
        
        return group
    
    def _create_query_control_group(self) -> QGroupBox:
        """üîß LAYOUT & RESPONSIVENESS JAV√çTOTT lek√©rdez√©s vez√©rl√©s widget csoport."""
        group = QGroupBox("üöÄ Lek√©rdez√©s (Multi-Year)")
        layout = QVBoxLayout(group)
        layout.setContentsMargins(12, 16, 12, 12)  # üîß OPTIM√ÅLIS MARGINS
        layout.setSpacing(10)  # üîß OPTIM√ÅLIS SPACING
        
        # üîß KRITIKUS JAV√çT√ÅS: Lek√©rdez√©s gomb - RESPONSIVE SIZING
        self.fetch_button = QPushButton("üìä Adatok lek√©rdez√©se (Multi-Year)")
        self.fetch_button.clicked.connect(self._trigger_weather_fetch)
        self.fetch_button.setEnabled(False)  # üîß JAV√çT√ÅS: Kezdetben letiltva
        
        # üîß KRITIKUS: RESPONSIVE BUTTON SIZING
        self.fetch_button.setMinimumHeight(44)  # Nagyobb kattinthat√≥ ter√ºlet
        self.fetch_button.setMaximumHeight(48)  # Maximum height constraint
        self.fetch_button.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        
        # Gomb st√≠lus kiemel√©se
        font = QFont()
        font.setBold(True)
        font.setPointSize(12)  # üîß NAGYOBB FONT
        self.fetch_button.setFont(font)
        
        layout.addWidget(self.fetch_button)
        
        # Lek√©rdez√©s megszak√≠t√°s gomb
        self.cancel_button = QPushButton("‚ùå Megszak√≠t√°s")
        self.cancel_button.clicked.connect(self._cancel_operations)
        self.cancel_button.setVisible(False)
        self.cancel_button.setMinimumHeight(36)  # üîß MIN HEIGHT
        self.cancel_button.setMaximumHeight(40)  # üîß MAX HEIGHT
        self.cancel_button.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        layout.addWidget(self.cancel_button)
        
        # üîß GROUPBOX SIZE CONSTRAINTS
        group.setMinimumHeight(100)
        group.setMaximumHeight(120)
        
        print("üöÄ DEBUG: Query control group MULTI-YEAR BATCH + LAYOUT JAV√çTVA - responsive button sizing")
        
        return group
    
    def _create_status_group(self) -> QGroupBox:
        """üîß LAYOUT JAV√çTOTT √°llapot widget csoport l√©trehoz√°sa."""
        group = QGroupBox("üìä √Ållapot")
        layout = QVBoxLayout(group)
        layout.setContentsMargins(12, 16, 12, 12)  # üîß OPTIM√ÅLIS MARGINS
        layout.setSpacing(10)  # üîß OPTIM√ÅLIS SPACING
        
        # √Ållapot sz√∂veg
        self.status_label = QLabel("V√°lasszon lok√°ci√≥t a kezd√©shez")
        self.status_label.setWordWrap(True)
        self.status_label.setMinimumHeight(40)  # üîß MIN HEIGHT 
        self.status_label.setAlignment(Qt.AlignTop | Qt.AlignLeft)  # üîß ALIGNMENT
        layout.addWidget(self.status_label)
        
        # Progressz bar
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        self.progress_bar.setMinimumHeight(20)  # üîß MIN HEIGHT
        self.progress_bar.setMaximumHeight(24)  # üîß MAX HEIGHT
        layout.addWidget(self.progress_bar)
        
        # üîß GROUPBOX SIZE CONSTRAINTS
        group.setMinimumHeight(90)
        group.setMaximumHeight(110)
        
        return group
    
    # === üöÄ MULTI-YEAR BATCH LOGIC - √öJ MET√ìDUSOK ===
    
    def _on_date_mode_changed(self):
        """
        üöÄ D√°tum m√≥d v√°ltoz√°s kezel√©se (time_range vs manual_dates).
        """
        if self.time_range_radio.isChecked():
            self.date_mode = "time_range"
            self._set_manual_dates_enabled(False)
            self._update_computed_dates()
            print("üöÄ DEBUG: Date mode switched to: time_range")
        else:
            self.date_mode = "manual_dates"
            self._set_manual_dates_enabled(True)
            print("üöÄ DEBUG: Date mode switched to: manual_dates")
        
        # Fetch button state friss√≠t√©se
        self._update_fetch_button_state()
    
    def _set_manual_dates_enabled(self, enabled: bool):
        """Manual d√°tum chooser-ek enged√©lyez√©se/letilt√°sa."""
        self.start_date.setEnabled(enabled)
        self.end_date.setEnabled(enabled)
        self.last_month_btn.setEnabled(enabled)
        self.last_year_btn.setEnabled(enabled)
        self.last_5years_btn.setEnabled(enabled)
        self.last_10years_btn.setEnabled(enabled)
        self.last_25years_btn.setEnabled(enabled)
        self.last_55years_btn.setEnabled(enabled)
        
        # Id≈ëtartam dropdown ellenkez≈ëje
        self.time_range_combo.setEnabled(not enabled)
    
    def _on_time_range_changed(self, time_range_text: str):
        """
        üöÄ Id≈ëtartam dropdown v√°ltoz√°s kezel√©se - automatikus d√°tum sz√°m√≠t√°s.
        
        Args:
            time_range_text: Kiv√°lasztott id≈ëtartam sz√∂veg (pl. "5 √©v")
        """
        print(f"üöÄ DEBUG: _on_time_range_changed: {time_range_text}")
        
        if self.date_mode == "time_range":
            self._update_computed_dates()
        
        # Fetch button state friss√≠t√©se
        self._update_fetch_button_state()
    
    def _update_computed_dates(self):
        """
        üöÄ Automatikus d√°tum sz√°m√≠t√°s az id≈ëtartam dropdown alapj√°n.
        
        TrendAnalyticsTab kompatibilis logika.
        """
        try:
            time_range_text = self.time_range_combo.currentText()
            
            # √âvek sz√°m√°nak kinyer√©se
            if "55 √©v" in time_range_text:
                years = 55
            elif "25 √©v" in time_range_text:
                years = 25
            elif "10 √©v" in time_range_text:
                years = 10
            elif "5 √©v" in time_range_text:
                years = 5
            else:
                years = 5  # Default fallback
            
            # D√°tumok sz√°m√≠t√°sa
            end_date = datetime.now().date()
            start_date = end_date - timedelta(days=years * 365)
            
            # Info label friss√≠t√©se
            self.computed_dates_info.setText(
                f"Sz√°m√≠tott id≈ëszak: {start_date.strftime('%Y-%m-%d')} ‚Üí {end_date.strftime('%Y-%m-%d')} ({years} √©v)"
            )
            
            print(f"üöÄ DEBUG: Computed dates updated: {start_date} ‚Üí {end_date} ({years} years)")
            
        except Exception as e:
            print(f"‚ùå DEBUG: Computed dates update error: {e}")
            self.computed_dates_info.setText("D√°tum sz√°m√≠t√°si hiba")
    
    def _get_effective_date_range(self) -> tuple[str, str]:
        """
        üöÄ Effekt√≠v d√°tum tartom√°ny lek√©rdez√©se aktu√°lis m√≥d alapj√°n.
        
        Returns:
            (start_date, end_date) ISO form√°tumban
        """
        if self.date_mode == "time_range":
            # Automatikus sz√°m√≠t√°s
            time_range_text = self.time_range_combo.currentText()
            
            if "55 √©v" in time_range_text:
                years = 55
            elif "25 √©v" in time_range_text:
                years = 25
            elif "10 √©v" in time_range_text:
                years = 10
            elif "5 √©v" in time_range_text:
                years = 5
            else:
                years = 5  # Default
            
            end_date = datetime.now().date()
            start_date = end_date - timedelta(days=years * 365)
            
            return start_date.strftime("%Y-%m-%d"), end_date.strftime("%Y-%m-%d")
        
        else:
            # Manual d√°tumok
            start_date = self.start_date.date().toString(Qt.ISODate)
            end_date = self.end_date.date().toString(Qt.ISODate)
            
            return start_date, end_date
    
    def _set_years_back(self, years: int):
        """
        üöÄ √öJ: N √©vet visszamen≈ë d√°tum be√°ll√≠t√°sa.
        
        Args:
            years: √âvek sz√°ma
        """
        today = QDate.currentDate()
        start = today.addYears(-years)
        end = today
        
        self.start_date.setDate(start)
        self.end_date.setDate(end)
        
        print(f"üöÄ DEBUG: Set {years} years back: {start.toString()} ‚Üí {end.toString()}")
    
    # === WIDGET REGISZTR√ÅCI√ì √âS THEMING ===
    
    def _register_widgets_for_theming(self) -> None:
        """
        Widget-ek regisztr√°l√°sa ThemeManager-hez automatikus t√©ma kezel√©shez.
        üé® PROFESSZION√ÅLIS COLORPALETTE INTEGR√ÅCI√ì - minden widget automatikusan t√©m√°z√≥dik.
        """
        # === CONTAINER WIDGETS ===
        register_widget_for_theming(self, "container")
        
        # === üåç UNIVERSAL LOCATION SELECTOR ===
        register_widget_for_theming(self.universal_location_selector, "container")
        register_widget_for_theming(self.clear_location_btn, "button")
        
        # === üöÄ MULTI-YEAR BATCH UI ELEMEK ===
        register_widget_for_theming(self.time_range_radio, "input")
        register_widget_for_theming(self.manual_dates_radio, "input")
        register_widget_for_theming(self.time_range_combo, "input")
        register_widget_for_theming(self.last_5years_btn, "button")
        register_widget_for_theming(self.last_10years_btn, "button")
        register_widget_for_theming(self.last_25years_btn, "button")
        register_widget_for_theming(self.last_55years_btn, "button")
        
        # === INPUT WIDGETS ===
        register_widget_for_theming(self.start_date, "input")
        register_widget_for_theming(self.end_date, "input")
        register_widget_for_theming(self.auto_timezone, "input")
        register_widget_for_theming(self.cache_data, "input")
        register_widget_for_theming(self.api_timeout, "input")
        
        # ‚úÖ PROVIDER SELECTOR widgets
        register_widget_for_theming(self.auto_radio, "input")
        register_widget_for_theming(self.openmeteo_radio, "input")
        register_widget_for_theming(self.meteostat_radio, "input")
        register_widget_for_theming(self.meteostat_usage_bar, "container")
        
        # === BUTTON WIDGETS ===
        register_widget_for_theming(self.last_month_btn, "button")
        register_widget_for_theming(self.last_year_btn, "button")
        register_widget_for_theming(self.fetch_button, "button")
        register_widget_for_theming(self.cancel_button, "button")
        
        # === TEXT LABELS ===
        self._apply_professional_label_styling(self.location_info_label, "secondary")
        self._apply_professional_label_styling(self.status_label, "primary")
        self._apply_professional_label_styling(self.computed_dates_info, "secondary")
        
        # ‚úÖ PROVIDER SELECTOR labels
        self._apply_professional_label_styling(self.meteostat_usage_label, "primary")
        self._apply_professional_label_styling(self.meteostat_usage_value, "primary")
        self._apply_professional_label_styling(self.cost_label, "primary")
        self._apply_professional_label_styling(self.cost_value, "primary")
        self._apply_professional_label_styling(self.openmeteo_usage_label, "primary")
        self._apply_professional_label_styling(self.openmeteo_usage_value, "success")
        self._apply_professional_label_styling(self.usage_warning_label, "secondary")
        
        # === PROGRESS BAR ===
        register_widget_for_theming(self.progress_bar, "container")
        
        print("üöÄ DEBUG: ControlPanel MULTI-YEAR BATCH + LAYOUT JAV√çTVA - Professional ColorPalette integr√°lva")
    
    def _apply_professional_label_styling(self, label: QLabel, style_type: str) -> None:
        """
        üé® PROFESSZION√ÅLIS label styling alkalmaz√°sa ColorPalette API-val.
        
        Args:
            label: C√≠mke widget
            style_type: St√≠lus t√≠pus ("primary", "secondary", "error", "success")
        """
        color_palette = self.theme_manager.get_color_scheme()
        if not color_palette:
            return
        
        # Professzion√°lis color mapping
        if style_type == "secondary":
            color = color_palette.get_color("info", "light") or "#9ca3af"
            font_size = "11px"
        elif style_type == "error":
            color = color_palette.get_color("error", "base") or "#dc2626"
            font_size = "12px"
            font_weight = "bold"
        elif style_type == "success":
            color = color_palette.get_color("success", "base") or "#10b981"
            font_size = "12px"
            font_weight = "bold"
        elif style_type == "warning":
            color = color_palette.get_color("warning", "base") or "#f59e0b"
            font_size = "12px"
            font_weight = "bold"
        else:  # primary
            color = color_palette.get_color("primary", "base") or "#2563eb"
            font_size = "12px"
        
        # CSS gener√°l√°s
        css_parts = [f"color: {color};", f"font-size: {font_size};"]
        
        if style_type in ["error", "success", "warning"]:
            css_parts.append("font-weight: bold;")
        
        css = f"QLabel {{ {' '.join(css_parts)} }}"
        label.setStyleSheet(css)
        
        register_widget_for_theming(label, "text")
    
    def _setup_default_values(self) -> None:
        """Alap√©rtelmezett √©rt√©kek be√°ll√≠t√°sa."""
        # D√°tumok valid√°l√°sa
        self.start_date.dateChanged.connect(self._validate_dates)
        self.end_date.dateChanged.connect(self._validate_dates)
        
        # üîß JAV√çT√ÅS: Kezdeti √°llapot
        self._update_fetch_button_state()
        
        # ‚úÖ PROVIDER SELECTOR default values
        self._load_provider_preferences()
        
        print("üöÄ DEBUG: Default values MULTI-YEAR BATCH + JAV√çTVA - fetch button state tracking")
    
    def _connect_internal_signals(self) -> None:
        """üîß JAV√çTOTT bels≈ë signal-slot kapcsolatok - SIGNAL CHAIN JAV√çT√ÅS."""
        # Lok√°lis hib√°k kezel√©se
        self.local_error_occurred.connect(self._show_local_error)
        
        # üîß KRITIKUS JAV√çT√ÅS: UNIVERSAL LOCATION SELECTOR signal kapcsolatok
        print("üîß DEBUG: Connecting JAV√çTOTT UniversalLocationSelector signals...")
        
        # Search signal
        self.universal_location_selector.search_requested.connect(self.search_requested.emit)
        print("‚úÖ DEBUG: UniversalLocationSelector.search_requested ‚Üí ControlPanel.search_requested CONNECTED")
        
        # üîß KRITIKUS: City selection signal - JAV√çTOTT VERZI√ì
        self.universal_location_selector.city_selected.connect(self._on_location_selected_fixed)
        print("‚úÖ DEBUG: UniversalLocationSelector.city_selected ‚Üí ControlPanel._on_location_selected_fixed CONNECTED")
        
        # üîß KRITIKUS: Location change signal - JAV√çTOTT VERZI√ì  
        self.universal_location_selector.location_changed.connect(self._on_location_changed_fixed)
        print("‚úÖ DEBUG: UniversalLocationSelector.location_changed ‚Üí ControlPanel._on_location_changed_fixed CONNECTED")
        
        # === PROFESSZION√ÅLIS THEMEMANAGER SIGNAL KAPCSOLATOK ===
        self.theme_manager.theme_changed.connect(self._on_theme_changed)
        
        if hasattr(self.theme_manager, 'color_scheme_updated'):
            self.theme_manager.color_scheme_updated.connect(self._on_color_scheme_updated)
        
        print("üöÄ DEBUG: MULTI-YEAR BATCH + JAV√çTOTT signal connections k√©sz")
    
    def _on_theme_changed(self, theme_name: str) -> None:
        """üé® PROFESSZION√ÅLIS t√©ma v√°ltoz√°s kezel√©se."""
        print(f"üé® DEBUG: ControlPanel JAV√çTOTT theme change: {theme_name}")
        
        # Label-ek √∫jra-st√≠lusoz√°sa
        self._apply_professional_label_styling(self.location_info_label, "secondary")
        self._apply_professional_label_styling(self.status_label, "primary")
        self._apply_professional_label_styling(self.computed_dates_info, "secondary")
        
        # ‚úÖ PROVIDER SELECTOR labels √∫jra-st√≠lusoz√°sa
        self._refresh_provider_selector_styling()
    
    def _on_color_scheme_updated(self, color_palette) -> None:
        """üé® PROFESSZION√ÅLIS ColorPalette v√°ltoz√°s kezel√©se."""
        print("üé® DEBUG: ControlPanel JAV√çTOTT ColorPalette updated")
        
        # √ñsszes styling √∫jra-alkalmaz√°sa
        self._apply_professional_label_styling(self.location_info_label, "secondary")
        self._apply_professional_label_styling(self.status_label, "primary")
        self._apply_professional_label_styling(self.computed_dates_info, "secondary")
        self._refresh_provider_selector_styling()
    
    # === üîß JAV√çTOTT UNIVERSAL LOCATION SELECTOR LOGIC ===
    
    def _on_location_selected_fixed(self, name: str, lat: float, lon: float, data: Dict[str, Any]):
        """
        üîß JAV√çTOTT lok√°ci√≥ kiv√°laszt√°s kezel√©se - SIGNAL CHAIN + FETCH BUTTON FIX.
        
        Args:
            name: V√°ros neve
            lat: Sz√©less√©g
            lon: Hossz√∫s√°g  
            data: Lok√°ci√≥ metadata
        """
        try:
            print(f"üîß DEBUG: _on_location_selected_fixed called: {name} [{lat:.4f}, {lon:.4f}]")
            
            # üîß KRITIKUS JAV√çT√ÅS: current_city_data friss√≠t√©se
            self.current_city_data = {
                "name": name,
                "latitude": lat,
                "longitude": lon,
                "display_name": name,
                **data
            }
            print(f"üîß DEBUG: current_city_data FRISS√çTVE: {self.current_city_data['name']}")
            
            # Lok√°ci√≥ info friss√≠t√©se
            self._update_location_info(name, lat, lon)
            
            # Clear gomb enged√©lyez√©se
            self.clear_location_btn.setEnabled(True)
            
            # üîß KRITIKUS JAV√çT√ÅS: Fetch button √°llapot friss√≠t√©se
            self._update_fetch_button_state()
            print(f"üîß DEBUG: Fetch button state friss√≠tve: {self.fetch_button.isEnabled()}")
            
            # Signal tov√°bb√≠t√°sa (kompatibilit√°s)
            self.city_selected.emit(name, lat, lon, data)
            
            # UI √°llapot friss√≠t√©se
            self._update_status(f"Kiv√°lasztva: {name}")
            
            print(f"‚úÖ DEBUG: Location selection JAV√çTVA: {name} - fetch button enabled: {self.fetch_button.isEnabled()}")
            
        except Exception as e:
            print(f"‚ùå DEBUG: Lok√°ci√≥ kiv√°laszt√°si hiba: {e}")
            self.local_error_occurred.emit("Lok√°ci√≥ kiv√°laszt√°si hiba")
    
    def _on_location_changed_fixed(self, location: UniversalLocation):
        """
        üîß JAV√çTOTT UniversalLocation objektum v√°ltoz√°s kezel√©se.
        
        Args:
            location: UniversalLocation objektum
        """
        try:
            print(f"üîß DEBUG: _on_location_changed_fixed called: {location}")
            
            # UniversalLocation t√°rol√°sa
            self.current_location = location
            
            # üîß KRITIKUS JAV√çT√ÅS: current_city_data friss√≠t√©se UniversalLocation-b≈ël
            if hasattr(location, 'identifier') and hasattr(location, 'coordinates'):
                self.current_city_data = {
                    "name": location.identifier,
                    "latitude": location.coordinates[0],
                    "longitude": location.coordinates[1],
                    "display_name": getattr(location, 'display_name', location.identifier),
                    "location_type": getattr(location, 'type', 'city'),
                    "country": getattr(location, 'country', ''),
                    "region": getattr(location, 'region', '')
                }
                print(f"üîß DEBUG: current_city_data friss√≠tve UniversalLocation-b≈ël: {self.current_city_data['name']}")
                
                # Fetch button √°llapot friss√≠t√©se
                self._update_fetch_button_state()
                print(f"üîß DEBUG: Fetch button state: {self.fetch_button.isEnabled()}")
            
            # Signal tov√°bb√≠t√°sa
            self.location_changed.emit(location)
            
            print(f"‚úÖ DEBUG: UniversalLocation change JAV√çTVA: {location}")
            
        except Exception as e:
            print(f"‚ùå DEBUG: UniversalLocation v√°ltoz√°s hiba: {e}")
    
    def _update_location_info(self, name: str, lat: float, lon: float):
        """Lok√°ci√≥ inform√°ci√≥ megjelen√≠t√©s friss√≠t√©se."""
        info_text = f"üìç {name}\nüó∫Ô∏è Koordin√°t√°k: [{lat:.4f}, {lon:.4f}]"
        self.location_info_label.setText(info_text)
        self._apply_professional_label_styling(self.location_info_label, "primary")
    
    def _clear_location(self):
        """üîß JAV√çTOTT lok√°ci√≥ kiv√°laszt√°s t√∂rl√©se - FETCH BUTTON FIX."""
        try:
            print("üîß DEBUG: _clear_location called")
            
            # UniversalLocationSelector t√∂rl√©se
            self.universal_location_selector.clear_selection()
            
            # üîß KRITIKUS JAV√çT√ÅS: Lok√°lis √°llapot t√∂rl√©se
            self.current_location = None
            self.current_city_data = None
            print("üîß DEBUG: current_city_data T√ñR√ñLVE")
            
            # UI elemek vissza√°ll√≠t√°sa
            self.location_info_label.setText("V√°lasszon lok√°ci√≥t...")
            self._apply_professional_label_styling(self.location_info_label, "secondary")
            self.clear_location_btn.setEnabled(False)
            
            # üîß KRITIKUS: Fetch button √°llapot friss√≠t√©se
            self._update_fetch_button_state()
            print(f"üîß DEBUG: Fetch button disabled: {not self.fetch_button.isEnabled()}")
            
            self._update_status("V√°lasszon lok√°ci√≥t a kezd√©shez")
            
            print("‚úÖ DEBUG: Lok√°ci√≥ t√∂rl√©se JAV√çTVA")
            
        except Exception as e:
            print(f"‚ùå DEBUG: Lok√°ci√≥ t√∂rl√©si hiba: {e}")
    
    # === ‚úÖ PROVIDER SELECTOR LOGIC (UNCHANGED) ===
    
    def _load_provider_preferences(self) -> None:
        """Provider preferences bet√∂lt√©se √©s UI friss√≠t√©se."""
        try:
            self.provider_preferences = UserPreferences.load_provider_preferences()
            self.current_provider = self.provider_preferences.get("selected_provider", "auto")
            
            # Radio button √°llapot be√°ll√≠t√°sa
            if self.current_provider == "auto":
                self.auto_radio.setChecked(True)
            elif self.current_provider == "open-meteo":
                self.openmeteo_radio.setChecked(True)
            elif self.current_provider == "meteostat":
                self.meteostat_radio.setChecked(True)
            
            print(f"üéõÔ∏è Provider preferences loaded: {self.current_provider}")
            
        except Exception as e:
            print(f"‚ùå Error loading provider preferences: {e}")
            self.current_provider = "auto"
            self.auto_radio.setChecked(True)
    
    def _save_provider_preferences(self) -> None:
        """Provider preferences ment√©se."""
        try:
            self.provider_preferences["selected_provider"] = self.current_provider
            success = UserPreferences.save_provider_preferences(self.provider_preferences)
            
            if success:
                print(f"‚úÖ Provider preferences saved: {self.current_provider}")
            else:
                print("‚ùå Failed to save provider preferences")
                
        except Exception as e:
            print(f"‚ùå Error saving provider preferences: {e}")
    
    def _on_provider_changed(self, button) -> None:
        """Provider radio button v√°ltoz√°s kezel√©se."""
        try:
            # √öj provider meghat√°roz√°sa
            if button == self.auto_radio:
                new_provider = "auto"
            elif button == self.openmeteo_radio:
                new_provider = "open-meteo"
            elif button == self.meteostat_radio:
                new_provider = "meteostat"
            else:
                return
            
            if new_provider != self.current_provider:
                self.current_provider = new_provider
                
                # Preferences ment√©se
                self._save_provider_preferences()
                
                # Signal kibocs√°t√°sa Controller fel√©
                self.provider_changed.emit(new_provider)
                
                # UI friss√≠t√©se
                self._update_status_for_provider_change(new_provider)
                
                print(f"üéõÔ∏è Provider changed to: {new_provider}")
                
        except Exception as e:
            print(f"‚ùå Error handling provider change: {e}")
    
    def _update_status_for_provider_change(self, provider: str) -> None:
        """St√°tusz friss√≠t√©se provider v√°ltoz√°s eset√©n."""
        provider_info = ProviderConfig.PROVIDERS.get(provider, {})
        provider_name = provider_info.get("name", provider)
        
        if provider == "auto":
            message = f"‚úÖ Automatikus routing akt√≠v - smart provider v√°laszt√°s + multi-year batch"
        elif provider == "open-meteo":
            message = f"üåç Open-Meteo akt√≠v - ingyenes glob√°lis API + 55 √©ves batch"
        elif provider == "meteostat":
            message = f"üíé Meteostat akt√≠v - pr√©mium API + 55+ √©ves batch ($10/h√≥nap)"
        else:
            message = f"üì° Provider: {provider_name}"
        
        self._update_status(message)
    
    def _update_usage_display(self) -> None:
        """Usage tracking display friss√≠t√©se."""
        try:
            # Usage adatok bet√∂lt√©se
            self.usage_data = UsageTracker.get_usage_summary()
            
            # Meteostat usage update
            meteostat_requests = self.usage_data.get("meteostat_requests", 0)
            meteostat_limit = self.usage_data.get("meteostat_limit", 10000)
            meteostat_percentage = self.usage_data.get("meteostat_percentage", 0.0)
            meteostat_cost = self.usage_data.get("meteostat_cost", 0.0)
            
            # Usage value update
            self.meteostat_usage_value.setText(f"{meteostat_requests}/{meteostat_limit}")
            
            # Progress bar update
            self.meteostat_usage_bar.setValue(int(meteostat_percentage))
            
            # Cost display update
            self.cost_value.setText(f"${meteostat_cost:.2f}")
            
            # Open-Meteo update (informational) - FRISS√çTVE MULTI-YEAR INF√ìVAL
            openmeteo_requests = self.usage_data.get("openmeteo_requests", 0)
            if openmeteo_requests > 0:
                self.openmeteo_usage_value.setText(f"{openmeteo_requests} (Free + Multi-Year)")
            else:
                self.openmeteo_usage_value.setText("Unlimited (Multi-Year)")
            
            # Warning level check
            warning_level = self.usage_data.get("warning_level", "normal")
            self._update_usage_warning(warning_level, meteostat_percentage)
            
            # Progress bar color based on usage
            self._update_usage_bar_styling(warning_level)
            
        except Exception as e:
            print(f"‚ùå Error updating usage display: {e}")
    
    def _update_usage_warning(self, warning_level: str, percentage: float) -> None:
        """Usage warning friss√≠t√©se."""
        if warning_level == "critical":
            warning_text = f"üö® KRITIKUS: {percentage:.1f}% Meteostat haszn√°lat! K√∂zel a havi limithez."
            self._apply_professional_label_styling(self.usage_warning_label, "error")
        elif warning_level == "warning":
            warning_text = f"‚ö†Ô∏è FIGYELEM: {percentage:.1f}% Meteostat haszn√°lat. Havi limit k√∂zeledik."
            self._apply_professional_label_styling(self.usage_warning_label, "warning")
        else:
            days_remaining = self.usage_data.get("days_remaining", 30)
            warning_text = f"‚ÑπÔ∏è {days_remaining} nap maradt a h√≥napb√≥l (Multi-Year batch el√©rhet≈ë)"
            self._apply_professional_label_styling(self.usage_warning_label, "secondary")
        
        self.usage_warning_label.setText(warning_text)
    
    def _update_usage_bar_styling(self, warning_level: str) -> None:
        """Usage progress bar sz√≠nez√©s√©nek friss√≠t√©se."""
        color_palette = self.theme_manager.get_color_scheme()
        if not color_palette:
            return
        
        if warning_level == "critical":
            bar_color = color_palette.get_color("error", "base") or "#dc2626"
        elif warning_level == "warning":
            bar_color = color_palette.get_color("warning", "base") or "#f59e0b"
        else:
            bar_color = color_palette.get_color("success", "base") or "#10b981"
        
        css = f"""
        QProgressBar {{
            border: 1px solid #ccc;
            border-radius: 4px;
            text-align: center;
        }}
        QProgressBar::chunk {{
            background-color: {bar_color};
            border-radius: 3px;
        }}
        """
        self.meteostat_usage_bar.setStyleSheet(css)
    
    def _refresh_provider_selector_styling(self) -> None:
        """Provider Selector √∂sszes styling friss√≠t√©se."""
        # Label styling refresh
        self._apply_professional_label_styling(self.meteostat_usage_label, "primary")
        self._apply_professional_label_styling(self.meteostat_usage_value, "primary")
        self._apply_professional_label_styling(self.cost_label, "primary")
        self._apply_professional_label_styling(self.cost_value, "primary")
        self._apply_professional_label_styling(self.openmeteo_usage_label, "primary")
        self._apply_professional_label_styling(self.openmeteo_usage_value, "success")
        self._update_usage_warning_styling()
    
    def _update_usage_warning_styling(self) -> None:
        """Usage warning styling friss√≠t√©se t√©ma v√°ltoz√°s eset√©n."""
        warning_level = self.usage_data.get("warning_level", "normal")
        percentage = self.usage_data.get("meteostat_percentage", 0.0)
        self._update_usage_warning(warning_level, percentage)
        self._update_usage_bar_styling(warning_level)
    
    # === üöÄ FRISS√çTETT WEATHER DATA REQUEST LOGIC - MULTI-YEAR BATCH T√ÅMOGAT√ÅSSAL ===
    
    def _trigger_weather_fetch(self) -> None:
        """üöÄ MULTI-YEAR BATCH T√ÅMOGAT√ÅS: id≈ëj√°r√°si adatok lek√©rdez√©s√©nek ind√≠t√°sa - 1 √âVES LIMIT ELT√ÅVOL√çTVA."""
        print("üöÄ DEBUG: _trigger_weather_fetch called - MULTI-YEAR BATCH VALID√ÅCI√ì")
        
        # üîß KRITIKUS VALID√ÅCI√ì: Lok√°ci√≥ ellen≈ërz√©se
        if not self.current_city_data:
            error_msg = "Nincs kiv√°lasztva lok√°ci√≥"
            print(f"‚ùå DEBUG: {error_msg}")
            self.local_error_occurred.emit(error_msg)
            return
        
        if self.is_fetching:
            print("‚ö†Ô∏è DEBUG: Already fetching, ignoring request")
            return
        
        # üîß KRITIKUS: D√°tumok √©s param√©terek √∂sszegy≈±jt√©se
        try:
            latitude = self.current_city_data.get("latitude", 0.0)
            longitude = self.current_city_data.get("longitude", 0.0)
            
            # üöÄ MULTI-YEAR BATCH: Effekt√≠v d√°tum tartom√°ny lek√©rdez√©se
            start_date, end_date = self._get_effective_date_range()
            
            print(f"üöÄ DEBUG: MULTI-YEAR BATCH params - lat: {latitude}, lon: {longitude}, {start_date} ‚Üí {end_date}")
            
            # API param√©terek + ‚úÖ PROVIDER SELECTOR info + üöÄ MULTI-YEAR BATCH info
            params = {
                "timezone": "auto" if self.auto_timezone.isChecked() else "UTC",
                "cache": self.cache_data.isChecked(),
                "timeout": self.api_timeout.value(),
                "preferred_provider": self.current_provider,
                "user_override": True if self.current_provider != "auto" else False,
                # üöÄ MULTI-YEAR BATCH param√©terek
                "use_case": "single_city_multiyear",
                "batch_mode": True,
                "date_mode": self.date_mode,
                "time_range": self.time_range_combo.currentText() if self.date_mode == "time_range" else None
            }
            
            # üöÄ MULTI-YEAR BATCH: Lok√°lis d√°tum valid√°ci√≥ (1 √âVES LIMIT ELT√ÅVOL√çTVA!)
            if not self._validate_date_range_multiyear(start_date, end_date):
                return
            
            # UI √°llapot friss√≠t√©se
            self._set_fetch_state(True)
            
            # üîß KRITIKUS JAV√çT√ÅS: Signal kibocs√°t√°sa a Controller fel√©
            print(f"üöÄ DEBUG: Emitting MULTI-YEAR weather_data_requested signal...")
            self.weather_data_requested.emit(latitude, longitude, start_date, end_date, params)
            
            city_name = self.current_city_data.get("display_name", "Ismeretlen")
            provider_info = f"({self.current_provider})" if self.current_provider != "auto" else "(auto)"
            print(f"‚úÖ DEBUG: MULTI-YEAR Weather data signal ELK√úLDVE: {city_name} {provider_info}")
            
        except Exception as e:
            print(f"‚ùå DEBUG: MULTI-YEAR Weather fetch hiba: {e}")
            self.local_error_occurred.emit(f"Lek√©rdez√©si hiba: {str(e)}")
    
    def _validate_date_range_multiyear(self, start_date: str, end_date: str) -> bool:
        """
        üöÄ MULTI-YEAR BATCH: D√°tum tartom√°ny lok√°lis valid√°l√°sa - 1 √âVES LIMIT ELT√ÅVOL√çTVA!
        
        Args:
            start_date: Kezd≈ë d√°tum ISO form√°tumban
            end_date: Befejez≈ë d√°tum ISO form√°tumban
            
        Returns:
            Valid√°l√°si eredm√©ny
        """
        try:
            start = datetime.strptime(start_date, "%Y-%m-%d")
            end = datetime.strptime(end_date, "%Y-%m-%d")
            
            if start > end:
                self.local_error_occurred.emit("A kezd≈ë d√°tum nem lehet nagyobb a befejez≈ë d√°tumn√°l")
                return False
            
            # üöÄ KRITIKUS V√ÅLTOZ√ÅS: 1 √©ves limit ELT√ÅVOL√çTVA!
            # Maximum ~60 √©ves tartom√°ny (praktikus limit)
            if (end - start).days > 60 * 365:
                self.local_error_occurred.emit("Maximum 60 √©ves id≈ëszak k√©rdezhet≈ë le (praktikus limit)")
                return False
            
            # Minimum 1 nap
            if (end - start).days < 1:
                self.local_error_occurred.emit("Minimum 1 napos id≈ëszak sz√ºks√©ges")
                return False
            
            print(f"üöÄ DEBUG: MULTI-YEAR validation PASSED: {(end - start).days} napok")
            return True
            
        except ValueError:
            self.local_error_occurred.emit("√ârv√©nytelen d√°tum form√°tum")
            return False
    
    def _set_fetch_state(self, fetching: bool) -> None:
        """üîß JAV√çTOTT lek√©rdez√©s √°llapot be√°ll√≠t√°sa."""
        print(f"üîß DEBUG: _set_fetch_state: {fetching}")
        
        self.is_fetching = fetching
        
        # Vez√©rl≈ëk megjelen√≠t√©se
        self.fetch_button.setVisible(not fetching)
        self.cancel_button.setVisible(fetching)
        
        # Progress bar
        self.progress_bar.setVisible(fetching)
        if fetching:
            self.progress_bar.setRange(0, 0)  # Indeterminate
        
        # Lok√°ci√≥ selector letilt√°sa fetch k√∂zben
        self.universal_location_selector.setEnabled(not fetching)
        self.clear_location_btn.setEnabled(not fetching and self.current_city_data is not None)
        
        # üöÄ MULTI-YEAR BATCH vez√©rl≈ëk letilt√°sa lek√©rdez√©s k√∂zben
        self.time_range_radio.setEnabled(not fetching)
        self.manual_dates_radio.setEnabled(not fetching)
        self.time_range_combo.setEnabled(not fetching and self.date_mode == "time_range")
        
        # D√°tum vez√©rl≈ëk letilt√°sa lek√©rdez√©s k√∂zben
        self.start_date.setEnabled(not fetching and self.date_mode == "manual_dates")
        self.end_date.setEnabled(not fetching and self.date_mode == "manual_dates")
        
        # ‚úÖ PROVIDER SELECTOR vez√©rl≈ëk letilt√°sa fetch k√∂zben
        self.auto_radio.setEnabled(not fetching)
        self.openmeteo_radio.setEnabled(not fetching)
        self.meteostat_radio.setEnabled(not fetching)
        
        print(f"‚úÖ DEBUG: MULTI-YEAR Fetch state BE√ÅLL√çTVA: {fetching}")
    
    def _cancel_operations(self) -> None:
        """M≈±veletek megszak√≠t√°sa."""
        if self.is_fetching:
            # Worker manager megszak√≠t√°s
            self.worker_manager.cancel_all()
            
            # UI √°llapot vissza√°ll√≠t√°sa
            self._set_fetch_state(False)
            
            self._update_status("M≈±veletek megszak√≠tva")
            print("üõë M≈±veletek megszak√≠tva")
    
    # === D√ÅTUM HELPER MET√ìDUSOK ===
    
    def _set_last_month(self) -> None:
        """El≈ëz≈ë h√≥nap be√°ll√≠t√°sa."""
        today = QDate.currentDate()
        start = today.addMonths(-1).addDays(1 - today.day())  # H√≥nap els≈ë napja
        end = today.addDays(-today.day())  # El≈ëz≈ë h√≥nap utols√≥ napja
        
        self.start_date.setDate(start)
        self.end_date.setDate(end)
    
    def _set_last_year(self) -> None:
        """El≈ëz≈ë √©v be√°ll√≠t√°sa."""
        today = QDate.currentDate()
        start = QDate(today.year() - 1, 1, 1)
        end = QDate(today.year() - 1, 12, 31)
        
        self.start_date.setDate(start)
        self.end_date.setDate(end)
    
    def _validate_dates(self) -> None:
        """üîß JAV√çTOTT d√°tumok valid√°l√°sa - FETCH BUTTON FRISS√çT√âSSEL."""
        start = self.start_date.date()
        end = self.end_date.date()
        
        if start > end:
            # Ha kezd≈ë d√°tum nagyobb, automatikusan jav√≠tjuk
            if self.sender() == self.start_date:
                self.end_date.setDate(start)
            else:
                self.start_date.setDate(end)
        
        # üîß KRITIKUS: Fetch button √°llapot friss√≠t√©se
        self._update_fetch_button_state()
    
    # === üîß JAV√çTOTT UI √ÅLLAPOT KEZEL√âS ===
    
    def _update_fetch_button_state(self) -> None:
        """üîß JAV√çTOTT lek√©rdez√©s gomb √°llapot√°nak friss√≠t√©se - R√âSZLETES LOGGING."""
        has_location = self.current_city_data is not None
        
        # D√°tum valid√°ci√≥ a kiv√°lasztott m√≥d alapj√°n
        if self.date_mode == "time_range":
            has_valid_dates = True  # Dropdown mindig valid
        else:
            has_valid_dates = self.start_date.date() <= self.end_date.date()
        
        should_enable = has_location and has_valid_dates and not self.is_fetching
        
        print(f"üöÄ DEBUG: _update_fetch_button_state (MULTI-YEAR):")
        print(f"  has_location: {has_location} (current_city_data: {self.current_city_data is not None})")
        print(f"  date_mode: {self.date_mode}")
        print(f"  has_valid_dates: {has_valid_dates}")
        print(f"  is_fetching: {self.is_fetching}")
        print(f"  should_enable: {should_enable}")
        
        self.fetch_button.setEnabled(should_enable)
        
        # Debug location info
        if self.current_city_data:
            print(f"  location: {self.current_city_data.get('name', 'N/A')}")
        else:
            print(f"  location: None")
        
        # Debug date range info
        if self.date_mode == "time_range":
            print(f"  time_range: {self.time_range_combo.currentText()}")
        else:
            print(f"  manual_dates: {self.start_date.date().toString()} ‚Üí {self.end_date.date().toString()}")
    
    def _update_status(self, message: str) -> None:
        """üé® PROFESSZION√ÅLIS √°llapot √ºzenet friss√≠t√©se."""
        self.status_label.setText(message)
        self._apply_professional_label_styling(self.status_label, "primary")
    
    def _show_local_error(self, message: str) -> None:
        """üé® PROFESSZION√ÅLIS lok√°lis hiba megjelen√≠t√©se."""
        self.status_label.setText(f"‚ùå {message}")
        self._apply_professional_label_styling(self.status_label, "error")
        
        # 3 m√°sodperc ut√°n vissza√°ll√≠t√°s
        QTimer.singleShot(3000, lambda: self._apply_professional_label_styling(self.status_label, "primary"))
    
    def _show_success_message(self, message: str) -> None:
        """üé® PROFESSZION√ÅLIS siker √ºzenet megjelen√≠t√©se."""
        self.status_label.setText(f"‚úÖ {message}")
        self._apply_professional_label_styling(self.status_label, "success")
        
        # 3 m√°sodperc ut√°n vissza√°ll√≠t√°s
        QTimer.singleShot(3000, lambda: self._apply_professional_label_styling(self.status_label, "primary"))
    
    # === PUBLIKUS SLOT MET√ìDUSOK A CONTROLLER FEL≈êLI KOMMUNIK√ÅCI√ìHOZ ===
    
    def _on_geocoding_completed(self, results: List[Dict[str, Any]]) -> None:
        """
        üåç KOMPATIBILIT√ÅS - Geocoding befejez√©s kezel√©se a Controller-t≈ël.
        UniversalLocationSelector m√°r kezeli a keres√©st, de kompatibilit√°s miatt megtartva.
        """
        print(f"üìç DEBUG: _on_geocoding_completed called (COMPATIBILITY): {len(results)} results")
        
        if not results:
            self._update_status("Nem tal√°lhat√≥ telep√ºl√©s ezzel a n√©vvel")
        else:
            self._update_status(f"{len(results)} telep√ºl√©s tal√°lat")
    
    def update_progress(self, worker_type: str, progress: int) -> None:
        """Progress friss√≠t√©se a Controller-t≈ël."""
        if self.progress_bar.isVisible():
            if progress == 100:
                self.progress_bar.setVisible(False)
                self._set_fetch_state(False)
                self._update_usage_display()
            else:
                self.progress_bar.setRange(0, 100)
                self.progress_bar.setValue(progress)
        
        # St√°tusz friss√≠t√©se - MULTI-YEAR BATCH info
        if progress < 100:
            provider_info = f"({self.current_provider})" if self.current_provider != "auto" else ""
            batch_info = ""
            if self.date_mode == "time_range":
                batch_info = f" [{self.time_range_combo.currentText()}]"
            self._update_status(f"‚è≥ {worker_type}: {progress}% {provider_info}{batch_info}")
    
    def update_status_from_controller(self, message: str) -> None:
        """St√°tusz friss√≠t√©se a Controller-t≈ël."""
        self._update_status(message)
    
    def on_weather_data_completed(self) -> None:
        """Id≈ëj√°r√°si adatok lek√©rdez√©s√©nek befejez√©se a Controller-t≈ël."""
        self._set_fetch_state(False)
        
        # MULTI-YEAR BATCH specifikus success message
        if self.date_mode == "time_range":
            time_range = self.time_range_combo.currentText()
            self._show_success_message(f"Multi-year adatok sikeresen lek√©rdezve ({time_range})")
        else:
            self._show_success_message("Adatok sikeresen lek√©rdezve")
            
        self._update_usage_display()
    
    def on_controller_error(self, error_message: str) -> None:
        """Hiba kezel√©se a Controller-t≈ël."""
        self._set_fetch_state(False)
        self._show_local_error(error_message)
    
    # === ‚úÖ PROVIDER SELECTOR PUBLIKUS API (UNCHANGED) ===
    
    def update_usage_from_controller(self, usage_data: Dict[str, Any]) -> None:
        """Usage adatok friss√≠t√©se a Controller-t≈ël."""
        self.usage_data = usage_data
        self._update_usage_display()
    
    def get_selected_provider(self) -> str:
        """Jelenleg kiv√°lasztott provider lek√©rdez√©se."""
        return self.current_provider
    
    def set_provider(self, provider: str) -> None:
        """Provider be√°ll√≠t√°sa programmatikusan."""
        if provider not in ProviderConfig.PROVIDERS:
            return
        
        self.current_provider = provider
        
        # Radio button friss√≠t√©se
        if provider == "auto":
            self.auto_radio.setChecked(True)
        elif provider == "open-meteo":
            self.openmeteo_radio.setChecked(True)
        elif provider == "meteostat":
            self.meteostat_radio.setChecked(True)
        
        self._save_provider_preferences()
        self._update_status_for_provider_change(provider)
    
    def get_provider_info(self) -> Dict[str, Any]:
        """Jelenlegi provider inform√°ci√≥k lek√©rdez√©se."""
        return {
            "selected_provider": self.current_provider,
            "provider_config": ProviderConfig.PROVIDERS.get(self.current_provider, {}),
            "usage_data": self.usage_data,
            "preferences": self.provider_preferences
        }
    
    # === üåç UNIVERSAL LOCATION SELECTOR PUBLIKUS API ===
    
    def get_current_location(self) -> Optional[UniversalLocation]:
        """üåç √öJ - Jelenlegi UniversalLocation objektum lek√©rdez√©se."""
        return self.current_location
    
    def set_location(self, location: UniversalLocation) -> None:
        """üåç √öJ - UniversalLocation be√°ll√≠t√°sa programmatikusan."""
        try:
            self.universal_location_selector.set_current_location(location)
            # Az _on_location_changed_fixed automatikusan megh√≠v√≥dik
            
        except Exception as e:
            print(f"‚ùå Location be√°ll√≠t√°si hiba: {e}")
    
    def focus_location_search(self) -> None:
        """üåç √öJ - F√≥kusz a lok√°ci√≥ keres√©s f√ºlre."""
        self.universal_location_selector.focus_search()
    
    # === üöÄ MULTI-YEAR BATCH PUBLIKUS API - √öJ FUNKCI√ìK ===
    
    def get_date_mode(self) -> str:
        """üöÄ √öJ - Jelenlegi d√°tum m√≥d lek√©rdez√©se."""
        return self.date_mode
    
    def set_date_mode(self, mode: str) -> None:
        """
        üöÄ √öJ - D√°tum m√≥d be√°ll√≠t√°sa programmatikusan.
        
        Args:
            mode: "time_range" vagy "manual_dates"
        """
        if mode == "time_range":
            self.time_range_radio.setChecked(True)
        elif mode == "manual_dates":
            self.manual_dates_radio.setChecked(True)
        
        self._on_date_mode_changed()
    
    def get_selected_time_range(self) -> str:
        """üöÄ √öJ - Kiv√°lasztott id≈ëtartam lek√©rdez√©se."""
        return self.time_range_combo.currentText()
    
    def set_time_range(self, time_range: str) -> None:
        """
        üöÄ √öJ - Id≈ëtartam be√°ll√≠t√°sa programmatikusan.
        
        Args:
            time_range: "5 √©v", "10 √©v", "25 √©v", vagy "55 √©v (teljes)"
        """
        self.time_range_combo.setCurrentText(time_range)
        self._on_time_range_changed(time_range)
    
    def get_computed_date_range(self) -> tuple[str, str]:
        """üöÄ √öJ - Sz√°m√≠tott d√°tum tartom√°ny lek√©rdez√©se."""
        return self._get_effective_date_range()
    
    def is_multi_year_capable(self) -> bool:
        """üöÄ √öJ - Multi-year batch k√©pess√©g ellen≈ërz√©se."""
        return True  # Ez a verzi√≥ t√°mogatja
    
    def get_max_supported_years(self) -> int:
        """üöÄ √öJ - Maximum t√°mogatott √©vek sz√°ma."""
        return 60  # Praktikus limit
    
    # === PUBLIKUS API (KOMPATIBILIT√ÅS) ===
    
    def clear_selection(self) -> None:
        """Kiv√°laszt√°s t√∂rl√©se."""
        self._clear_location()
    
    def set_enabled(self, enabled: bool) -> None:
        """Panel enged√©lyez√©se/letilt√°sa."""
        self.setEnabled(enabled)
    
    def get_current_city_data(self) -> Optional[Dict[str, Any]]:
        """üîß JAV√çTOTT jelenlegi kiv√°lasztott v√°ros adatainak lek√©rdez√©se."""
        return self.current_city_data.copy() if self.current_city_data else None
    
    # === PROFESSZION√ÅLIS THEMEMANAGER PUBLIKUS API ===
    
    def apply_theme(self, theme_name: str) -> None:
        """üé® PROFESSZION√ÅLIS t√©ma alkalmaz√°sa a panel-re."""
        success = self.theme_manager.set_theme(theme_name)
        if success:
            print(f"üé® DEBUG: ControlPanel Professional theme applied: {theme_name}")
        else:
            print(f"‚ùå DEBUG: ControlPanel Professional theme failed: {theme_name}")
    
    def get_current_theme(self) -> str:
        """Jelenlegi t√©ma nev√©nek lek√©rdez√©se."""
        return self.theme_manager.get_current_theme()
    
    def get_color_palette(self):
        """üé® PROFESSZION√ÅLIS API - ColorPalette objektum lek√©rdez√©se."""
        return self.theme_manager.get_color_scheme()
    
    def get_current_colors(self) -> Dict[str, str]:
        """üé® PROFESSZION√ÅLIS API - Jelenlegi sz√≠nek lek√©rdez√©se."""
        return self.theme_manager.get_current_colors()
    
    def get_weather_colors(self) -> Dict[str, str]:
        """üå¶Ô∏è PROFESSZION√ÅLIS API - Id≈ëj√°r√°s-specifikus sz√≠nek lek√©rdez√©se."""
        return self.theme_manager.get_weather_colors()


# Export
__all__ = ['ControlPanel']