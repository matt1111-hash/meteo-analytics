"""
QueryControlWidget - Lek√©rdez√©s √©s Megszak√≠t√°s Gombok Widget

Felel≈ëss√©g: CSAK a fetch/cancel gombok √°llapot√°nak kezel√©se
- Fetch gomb: elemz√©s ind√≠t√°sa
- Cancel gomb: fut√≥ elemz√©s megszak√≠t√°sa  
- State management: fetching/idle √°llapotok k√∂z√∂tt v√°lt√°s
- Clean interface: egyszer≈± signal-ok kifel√©

Nem tudja: mi az elemz√©s tartalma, hol fut, mennyi ideig tart
"""

from PySide6.QtWidgets import (
    QWidget, QHBoxLayout, QPushButton, QLabel, QProgressBar
)
from PySide6.QtCore import Signal, QTimer
from PySide6.QtGui import QIcon


class QueryControlWidget(QWidget):
    """
    SINGLE RESPONSIBILITY: Fetch/Cancel gombok kezel√©se
    
    KIMEN≈ê JELEK:
    - fetch_requested(): Felhaszn√°l√≥ lek√©rdez√©st k√©rt
    - cancel_requested(): Felhaszn√°l√≥ megszak√≠t√°st k√©rt
    
    BEMEN≈ê MET√ìDUSOK:
    - set_fetching_state(bool): K√ºls≈ë vez√©rl√©s a gomb √°llapotokr√≥l
    - set_progress_text(str): Opcion√°lis progress sz√∂veg megjelen√≠t√©se
    """
    
    # === CLEAN INTERFACE SIGNALS ===
    fetch_requested = Signal()     # Egyszer≈± jelz√©s: "Ind√≠tsuk el!"
    cancel_requested = Signal()    # Egyszer≈± jelz√©s: "√Åll√≠tsuk le!"
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self._is_fetching = False
        self._setup_ui()
        self._connect_signals()
        
    def _setup_ui(self):
        """UI elemek l√©trehoz√°sa √©s elrendez√©se"""
        layout = QHBoxLayout(self)
        layout.setContentsMargins(0, 0, 0, 0)
        
        # === FETCH GOMB ===
        self.fetch_button = QPushButton("üîç Lek√©rdez√©s Ind√≠t√°sa")
        self.fetch_button.setMinimumHeight(35)
        self.fetch_button.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border: none;
                border-radius: 5px;
                font-weight: bold;
                padding: 8px 16px;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
            QPushButton:disabled {
                background-color: #cccccc;
                color: #666666;
            }
        """)
        
        # === CANCEL GOMB ===
        self.cancel_button = QPushButton("‚èπÔ∏è Megszak√≠t√°s")
        self.cancel_button.setMinimumHeight(35)
        self.cancel_button.setStyleSheet("""
            QPushButton {
                background-color: #f44336;
                color: white;
                border: none;
                border-radius: 5px;
                font-weight: bold;
                padding: 8px 16px;
            }
            QPushButton:hover {
                background-color: #da190b;
            }
            QPushButton:disabled {
                background-color: #cccccc;
                color: #666666;
            }
        """)
        
        # === PROGRESS LABEL ===
        self.progress_label = QLabel("")
        self.progress_label.setStyleSheet("""
            QLabel {
                color: #666666;
                font-style: italic;
                padding: 0px 10px;
            }
        """)
        
        # === PROGRESS BAR (opcion√°lis) ===
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)  # Kezdetben rejtett
        self.progress_bar.setStyleSheet("""
            QProgressBar {
                border: 1px solid #cccccc;
                border-radius: 3px;
                text-align: center;
            }
            QProgressBar::chunk {
                background-color: #4CAF50;
                border-radius: 2px;
            }
        """)
        
        # === LAYOUT √ñSSZE√ÅLL√çT√ÅS ===
        layout.addWidget(self.fetch_button)
        layout.addWidget(self.cancel_button)
        layout.addWidget(self.progress_label)
        layout.addWidget(self.progress_bar)
        layout.addStretch()  # Kit√∂lti a marad√©k helyet
        
        # === KEZD≈ê √ÅLLAPOT ===
        self._update_button_states()
        
    def _connect_signals(self):
        """Bels≈ë signal connections"""
        self.fetch_button.clicked.connect(self._on_fetch_clicked)
        self.cancel_button.clicked.connect(self._on_cancel_clicked)
        
    def _on_fetch_clicked(self):
        """
        FETCH GOMB ESEM√âNY
        Nem tudja mi az elemz√©s, csak jelzi hogy ind√≠tani kell
        """
        if not self._is_fetching:
            self.fetch_requested.emit()  # CLEAN SIGNAL - tartalommentes
            
    def _on_cancel_clicked(self):
        """
        CANCEL GOMB ESEM√âNY  
        Nem tudja mi fut, csak jelzi hogy meg kell szak√≠tani
        """
        if self._is_fetching:
            self.cancel_requested.emit()  # CLEAN SIGNAL - tartalommentes
            
    # === PUBLIC INTERFACE METHODS ===
    
    def set_fetching_state(self, is_fetching: bool):
        """
        K√úLS≈ê VEZ√âRL√âS: Gomb √°llapotok be√°ll√≠t√°sa
        
        Args:
            is_fetching (bool): True = folyamatban, False = v√°rakoz√°s
        """
        if self._is_fetching != is_fetching:
            self._is_fetching = is_fetching
            self._update_button_states()
            
    def set_progress_text(self, text: str = ""):
        """
        OPCION√ÅLIS PROGRESS SZ√ñVEG
        
        Args:
            text (str): Megjelen√≠tend≈ë sz√∂veg (pl. "Adatok let√∂lt√©se...")
        """
        self.progress_label.setText(text)
        
    def set_progress_value(self, value: int = 0, maximum: int = 100):
        """
        OPCION√ÅLIS PROGRESS BAR
        
        Args:
            value (int): Jelenlegi √©rt√©k
            maximum (int): Maximum √©rt√©k
        """
        if value > 0 and maximum > 0:
            self.progress_bar.setVisible(True)
            self.progress_bar.setRange(0, maximum)
            self.progress_bar.setValue(value)
        else:
            self.progress_bar.setVisible(False)
            
    def get_state(self) -> dict:
        """
        √ÅLLAPOT LEK√âRDEZ√âS
        Konzisztencia a t√∂bbi widget-tel
        
        Returns:
            dict: Widget jelenlegi √°llapota
        """
        return {
            'is_fetching': self._is_fetching,
            'progress_text': self.progress_label.text(),
            'progress_visible': self.progress_bar.isVisible()
        }
        
    # === PRIVATE HELPER METHODS ===
        
    def _update_button_states(self):
        """Gomb √°llapotok friss√≠t√©se a fetching state alapj√°n"""
        if self._is_fetching:
            # FETCHING √ÅLLAPOT
            self.fetch_button.setText("‚è≥ Elemz√©s Folyamatban...")
            self.fetch_button.setEnabled(False)
            self.cancel_button.setEnabled(True)
            self.cancel_button.setVisible(True)
        else:
            # IDLE √ÅLLAPOT
            self.fetch_button.setText("üîç Lek√©rdez√©s Ind√≠t√°sa")
            self.fetch_button.setEnabled(True)
            self.cancel_button.setEnabled(False)
            self.cancel_button.setVisible(False)  # Elrejtj√ºk ha nincs mit megszak√≠tani
            self.set_progress_text("")  # Progress sz√∂veg t√∂rl√©se
            self.set_progress_value(0)  # Progress bar elrejt√©se


# === USAGE EXAMPLE ===
if __name__ == "__main__":
    from PySide6.QtWidgets import QApplication, QVBoxLayout, QMainWindow
    import sys
    
    class TestWindow(QMainWindow):
        def __init__(self):
            super().__init__()
            self.setWindowTitle("QueryControlWidget Test")
            self.setGeometry(100, 100, 600, 200)
            
            # Central widget
            central_widget = QWidget()
            self.setCentralWidget(central_widget)
            layout = QVBoxLayout(central_widget)
            
            # Test widget
            self.query_widget = QueryControlWidget()
            layout.addWidget(self.query_widget)
            
            # Connect signals for testing
            self.query_widget.fetch_requested.connect(self._test_fetch)
            self.query_widget.cancel_requested.connect(self._test_cancel)
            
            # Test timer for simulating work
            self.test_timer = QTimer()
            self.test_timer.timeout.connect(self._test_finish)
            
        def _test_fetch(self):
            print("üîç FETCH REQUESTED - Szimul√°ljuk a munk√°t...")
            self.query_widget.set_fetching_state(True)
            self.query_widget.set_progress_text("Elemz√©s folyamatban...")
            # Szimul√°ljuk a 3 m√°sodperces munk√°t
            self.test_timer.start(3000)
            
        def _test_cancel(self):
            print("‚èπÔ∏è CANCEL REQUESTED - Munka megszak√≠t√°sa...")
            self.test_timer.stop()
            self.query_widget.set_fetching_state(False)
            
        def _test_finish(self):
            print("‚úÖ MUNKA BEFEJEZVE")
            self.test_timer.stop()
            self.query_widget.set_fetching_state(False)
    
    app = QApplication(sys.argv)
    window = TestWindow()
    window.show()
    sys.exit(app.exec())
