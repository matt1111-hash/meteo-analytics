#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Global Weather Analyzer - Multi-Year Comparison Chart
T√∂bb √©v √∂sszehasonl√≠t√≥ chart widget trend elemz√©ssel.

üìä MULTI-YEAR COMPARISON CHART: Azonos id≈ëszakok √∂sszehasonl√≠t√°sa k√ºl√∂nb√∂z≈ë √©vekb≈ël
üé® T√âMA INTEGR√ÅCI√ì: ColorPalette trend elemz√©si sz√≠nek haszn√°lata
üîß KRITIKUS JAV√çT√ÅS: Duplik√°ci√≥-mentes friss√≠t√©s + SIMPLIFIED THEMEMANAGER
‚úÖ Piros (#C43939) t√©ma t√°mogat√°s
‚úÖ Trend vonalak minden √©vhez
‚úÖ Szezon√°lis vonalak (tavasz, ny√°r, ≈ësz, t√©l)
‚úÖ Statisztikai inform√°ci√≥k
‚úÖ Optim√°lis legend poz√≠cion√°l√°s
"""

from typing import Optional, Dict, Any
import pandas as pd
import numpy as np

from matplotlib.dates import DateFormatter, MonthLocator, DayLocator
import matplotlib.pyplot as plt

from PySide6.QtWidgets import QWidget

from .base_chart import WeatherChart
from ..theme_manager import get_current_colors


class MultiYearComparisonChart(WeatherChart):
    """
    T√∂bb √©v √∂sszehasonl√≠t√≥ chart - TREND ELEMZ√âS + DUPLIK√ÅCI√ì BUGFIX + SIMPLIFIED THEMEMANAGER.
    Azonos id≈ëszakok √∂sszehasonl√≠t√°sa k√ºl√∂nb√∂z≈ë √©vekb≈ël.
    üé® T√âMA INTEGR√ÅCI√ì: ColorPalette trend elemz√©si sz√≠nek haszn√°lata
    """
    
    def __init__(self, parent: Optional[QWidget] = None):
        super().__init__(figsize=(14, 8), parent=parent)
        self.chart_title = "üìä √âvek K√∂z√∂tti √ñsszehasonl√≠t√°s"
        self.comparison_years = []  # √ñsszehasonl√≠tand√≥ √©vek list√°ja
    
    def update_data(self, data: Dict[str, Any]) -> None:
        """
        üîß KRITIKUS JAV√çT√ÅS: Duplik√°ci√≥-mentes multi-year comparison friss√≠t√©s + SIMPLIFIED THEMEMANAGER.
        """
        print("üìä DEBUG: MultiYearComparisonChart.update_data() - DUPLIK√ÅCI√ì BUGFIX + SIMPLIFIED THEMEMANAGER VERZI√ì")
        
        try:
            if self._is_updating:
                return
            
            self._is_updating = True
            
            df = self._extract_yearly_data(data)
            if df.empty:
                print("‚ö†Ô∏è DEBUG: √úres DataFrame, comparison t√∂rl√©se")
                self.clear_chart()
                return
            
            self.current_data = df
            
            # === KRITIKUS: TELJES FIGURE T√ñRL√âSE ===
            print("üßπ DEBUG: MultiYear Figure.clear() - DUPLIK√ÅCI√ì ELLEN")
            self.figure.clear()
            self.ax = self.figure.add_subplot(111)
            
            # üé® T√âMA ALKALMAZ√ÅSA
            self._apply_theme_to_chart()
            
            self._plot_multi_year_comparison(df)
            
            self.draw()
            self._is_updating = False
            
            print("‚úÖ DEBUG: MultiYearComparisonChart friss√≠t√©s k√©sz - DUPLIK√ÅCI√ì MENTES + THEMED")
            
        except Exception as e:
            print(f"‚ùå DEBUG: Multi-year comparison chart hiba: {e}")
            self._is_updating = False
            self._plot_comparison_placeholder()
    
    def _extract_yearly_data(self, data: Dict[str, Any]) -> pd.DataFrame:
        """T√∂bb√©vi adatok kinyer√©se - CSAK VAL√ìDI API ADATOKKAL."""
        daily_data = data.get("daily", {})
        dates = daily_data.get("time", [])
        temp_max = daily_data.get("temperature_2m_max", [])
        temp_min = daily_data.get("temperature_2m_min", [])
        temp_mean = daily_data.get("temperature_2m_mean", [])
        
        # üö® KRITIKUS: CSAK VAL√ìDI API ADATOK! Sz√°m√≠tott √°tlag TILOS!
        if not dates or not temp_max or not temp_min or not temp_mean:
            print("‚ö†Ô∏è DEBUG: Hi√°nyz√≥ t√∂bb√©vi adatok - chart nem jelen√≠thet≈ë meg")
            return pd.DataFrame()
        
        # Adatstrukt√∫ra hosszak ellen≈ërz√©se
        if len(dates) != len(temp_max) or len(dates) != len(temp_min) or len(dates) != len(temp_mean):
            print("‚ùå DEBUG: Elt√©r≈ë hossz√∫s√°g√∫ t√∂bb√©vi adatok - chart nem jelen√≠thet≈ë meg")
            return pd.DataFrame()
        
        df = pd.DataFrame({
            'date': pd.to_datetime(dates),
            'temp_max': temp_max,
            'temp_min': temp_min,
            'temp_mean': temp_mean  # CSAK VAL√ìDI API ADAT!
        })
        
        # √âv √©s nap az √©vben oszlopok - ezek val√≥di d√°tumb√≥l sz√°moltak, OK
        df['year'] = df['date'].dt.year
        df['day_of_year'] = df['date'].dt.dayofyear
        df['month_day'] = df['date'].dt.strftime('%m-%d')
        
        # Csak √©rv√©nyes adatok megtart√°sa
        df = df.dropna()
        
        if df.empty:
            print("‚ö†Ô∏è DEBUG: Nincs √©rv√©nyes t√∂bb√©vi adat - chart nem jelen√≠thet≈ë meg")
        
        return df
    
    def _plot_multi_year_comparison(self, df: pd.DataFrame) -> None:
        """
        T√∂bb√©vi √∂sszehasonl√≠t√°s megrajzol√°sa - DUPLIK√ÅCI√ì BUGFIX + SIMPLIFIED THEMEMANAGER.
        üé® SIMPLIFIED THEMEMANAGER INTEGR√ÅCI√ì: ColorPalette trend sz√≠nek haszn√°lata
        """
        print("üé® DEBUG: _plot_multi_year_comparison() - DUPLIK√ÅCI√ì MENTES + SIMPLIFIED THEMEMANAGER")
        
        # √âvek azonos√≠t√°sa
        years = sorted(df['year'].unique())
        
        if len(years) < 2:
            self._plot_comparison_placeholder()
            return
        
        # üîß KRITIKUS JAV√çT√ÅS: HELYES API HASZN√ÅLAT - trend sz√≠nek gener√°l√°sa
        trend_colors = {
            'year_comparison': [
                self.color_palette.get_color('primary', 'base') or '#C43939',  # Piros t√©ma
                self.color_palette.get_color('success', 'base') or '#10b981',
                self.color_palette.get_color('warning', 'base') or '#f59e0b',
                self.color_palette.get_color('error', 'base') or '#dc2626',
                self.color_palette.get_color('info', 'base') or '#6366f1',
                self.color_palette.get_color('primary', 'light') or '#3b82f6'
            ],
            'average_trend': self.color_palette.get_color('info', 'dark') or '#4338ca'
        }
        
        current_colors = get_current_colors()
        text_color = current_colors.get('on_surface', '#1f2937')
        
        print(f"üé® DEBUG: Using SimplifiedThemeManager trend colors: {trend_colors}")
        
        # Minden √©v megrajzol√°sa
        for i, year in enumerate(years):
            year_data = df[df['year'] == year].copy()
            color = trend_colors['year_comparison'][i % len(trend_colors['year_comparison'])]
            
            # √Åtlag h≈ëm√©rs√©klet vonala √©vente
            self.ax.plot(year_data['day_of_year'], year_data['temp_mean'], 
                        color=color, linewidth=2.5, alpha=0.8, label=f'{year}')
            
            # Min-Max tartom√°ny kit√∂lt√©se (csak az els≈ë 2 √©vn√©l, hogy ne legyen t√∫l zs√∫folt)
            if i < 2:
                self.ax.fill_between(year_data['day_of_year'], 
                                   year_data['temp_min'], year_data['temp_max'],
                                   color=color, alpha=0.1)
        
        # === TREND VONALAK + SIMPLIFIED THEMEMANAGER ===
        
        # √ñsszes √©v √∂sszevont trendje
        if len(df) > 30:  # Csak ha van el√©g adat
            trend_data = df.groupby('day_of_year')['temp_mean'].mean().reset_index()
            self.ax.plot(trend_data['day_of_year'], trend_data['temp_mean'], 
                        '--', linewidth=3, alpha=0.6, label='√Åtlagos trend',
                        color=trend_colors['average_trend'])
        
        # === SZEZON√ÅLIS VONALAK + SIMPLIFIED THEMEMANAGER ===
        
        # üîß KRITIKUS JAV√çT√ÅS: HELYES API HASZN√ÅLAT - szezon√°lis sz√≠nek
        seasonal_colors = {
            'spring': self.color_palette.get_color('success', 'light') or '#86efac',
            'summer': self.color_palette.get_color('warning', 'light') or '#fde047',
            'autumn': self.color_palette.get_color('error', 'light') or '#fb7185',
            'winter': self.color_palette.get_color('info', 'light') or '#a5b4fc'
        }
        
        # Tavasz kezdete (m√°rcius 20.)
        spring_day = 79  # Kb. m√°rcius 20.
        self.ax.axvline(x=spring_day, color=seasonal_colors['spring'], 
                       linestyle=':', alpha=0.7, label='Tavasz')
        
        # Ny√°r kezdete (j√∫nius 21.)
        summer_day = 172  # Kb. j√∫nius 21.
        self.ax.axvline(x=summer_day, color=seasonal_colors['summer'], 
                       linestyle=':', alpha=0.7, label='Ny√°r')
        
        # ≈êsz kezdete (szeptember 23.)
        autumn_day = 266  # Kb. szeptember 23.
        self.ax.axvline(x=autumn_day, color=seasonal_colors['autumn'], 
                       linestyle=':', alpha=0.7, label='≈êsz')
        
        # T√©l kezdete (december 21.)
        winter_day = 355  # Kb. december 21.
        self.ax.axvline(x=winter_day, color=seasonal_colors['winter'], 
                       linestyle=':', alpha=0.7, label='T√©l')
        
        # === FORM√ÅZ√ÅS + SIMPLIFIED THEMEMANAGER ===
        
        self.ax.set_title(f"{self.chart_title} ({min(years)}-{max(years)})", 
                         fontsize=16, fontweight='bold', pad=20, color=text_color)
        self.ax.set_xlabel("Nap az √©vben", fontsize=12, color=text_color)
        self.ax.set_ylabel("√Åtlag h≈ëm√©rs√©klet (¬∞C)", fontsize=12, color=text_color)
        
        # Tick sz√≠nek
        self.ax.tick_params(colors=text_color)
        
        # X tengely h√≥nap c√≠mk√©k
        month_starts = [1, 32, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335]
        month_names = ['Jan', 'Feb', 'M√°r', '√Åpr', 'M√°j', 'J√∫n', 
                      'J√∫l', 'Aug', 'Szep', 'Okt', 'Nov', 'Dec']
        
        self.ax.set_xticks(month_starts)
        self.ax.set_xticklabels(month_names)
        self.ax.set_xlim(1, 366)
        
        # Grid √©s legend + SIMPLIFIED THEMEMANAGER
        if self.grid_enabled:
            grid_color = current_colors.get('border', '#d1d5db')
            grid_alpha = 0.3 if self.theme_manager.get_current_theme() == "light" else 0.2
            self.ax.grid(True, alpha=grid_alpha, color=grid_color)
        
        if self.legend_enabled:
            # JAV√çTOTT LEGEND POZ√çCI√ì + SIMPLIFIED THEMEMANAGER SZ√çNEK
            legend = self.ax.legend(bbox_to_anchor=(1.05, 1), loc='upper left', 
                          ncol=1, fontsize=10, framealpha=0.9)
            legend.get_frame().set_facecolor(current_colors.get('surface', '#ffffff'))
            legend.get_frame().set_edgecolor(current_colors.get('border', '#d1d5db'))
        
        # Statisztikai inform√°ci√≥ + SIMPLIFIED THEMEMANAGER
        stats_text = f"üìä {len(years)} √©v √∂sszehasonl√≠tva\n"
        stats_text += f"üìÖ Id≈ëszak: {years[0]}-{years[-1]}\n"
        stats_text += f"üìà Rekordok sz√°ma: {len(df)}"
        
        self.ax.text(0.02, 0.98, stats_text, transform=self.ax.transAxes, 
                    fontsize=10, verticalalignment='top', color=text_color,
                    bbox=dict(boxstyle="round,pad=0.3", 
                             facecolor=current_colors.get('surface_variant', '#f9fafb'),
                             edgecolor=current_colors.get('border', '#d1d5db'), alpha=0.8))
        
        # Layout optimaliz√°l√°s legend-del
        self.figure.tight_layout(rect=[0, 0, 0.85, 1])
    
    def _plot_comparison_placeholder(self) -> None:
        """Placeholder ha nincs el√©g val√≥di adat az √∂sszehasonl√≠t√°shoz - MOCK ADATOK N√âLK√úL + SIMPLIFIED THEMEMANAGER."""
        # Biztos√≠tjuk, hogy az ax standard subplot legyen
        if not hasattr(self, 'ax') or self.ax is None:
            self.ax = self.figure.add_subplot(111)
        
        # üîß SIMPLIFIED THEMEMANAGER SZ√çNEK
        current_colors = get_current_colors()
        text_color = current_colors.get('on_surface', '#1f2937')
        surface_color = current_colors.get('surface_variant', '#f9fafb')
        
        placeholder_text = "üìä √âvek K√∂z√∂tti √ñsszehasonl√≠t√°s\n\n"
        placeholder_text += "‚ùå Nincs el√©g val√≥di adat\n\n"
        placeholder_text += "Legal√°bb 2 k√ºl√∂nb√∂z≈ë √©v\n"
        placeholder_text += "val√≥di adataira van sz√ºks√©g az\n"
        placeholder_text += "√∂sszehasonl√≠t√°shoz.\n\n"
        placeholder_text += "üö® Mock adatok haszn√°lata TILOS!"
        
        self.ax.text(0.5, 0.5, placeholder_text, ha='center', va='center', 
                    transform=self.ax.transAxes, fontsize=14, color=text_color,
                    bbox=dict(boxstyle="round,pad=0.5", facecolor=surface_color,
                             edgecolor=current_colors.get('border', '#d1d5db'), alpha=0.8))
        
        self.ax.set_title(self.chart_title, fontsize=16, fontweight='bold', pad=20, color=text_color)
        
        # Tengelyek elrejt√©se placeholder m√≥dban
        self.ax.set_xticks([])
        self.ax.set_yticks([])
        for spine in self.ax.spines.values():
            spine.set_visible(False)