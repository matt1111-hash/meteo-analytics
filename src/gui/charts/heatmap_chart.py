#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Global Weather Analyzer - Heatmap Calendar Chart
Heatmap napt√°r chart widget tetsz≈ëleges d√°tumtartom√°ny√∫ vizualiz√°ci√≥val.

üìÖ HEATMAP CALENDAR CHART: √âves/tetsz≈ëleges id≈ëszak√∫ h≈ëm√©rs√©kleti adatok napt√°r form√°tumban
üé® T√âMA INTEGR√ÅCI√ì: ColorPalette heatmap sz√≠nek haszn√°lata
üîß KRITIKUS JAV√çT√ÅS: Duplik√°ci√≥-mentes friss√≠t√©s + tetsz≈ëleges d√°tumtartom√°ny t√°mogat√°s
‚úÖ Piros (#C43939) t√©ma t√°mogat√°s
‚úÖ Dinamikus c√≠mgener√°l√°s id≈ëszak alapj√°n
‚úÖ Folytonos h√©tm√°trix l√©trehoz√°sa
‚úÖ Intelligens sz√≠nsk√°la v√°laszt√°s
‚úÖ Colorbar kezel√©s
"""

from typing import Optional, Dict, Any
import pandas as pd
import numpy as np

from PySide6.QtWidgets import QWidget

from .base_chart import WeatherChart
from ..theme_manager import get_current_colors


class HeatmapCalendarChart(WeatherChart):
    """
    üîß KRITIKUS JAV√çT√ÅS: Heatmap napt√°r chart - DUPLIK√ÅCI√ì BUGFIX VERZI√ì + SIMPLIFIED THEMEMANAGER.
    √âves/tetsz≈ëleges id≈ëszak√∫ h≈ëm√©rs√©kleti adatok napt√°r form√°tumban.
    üé® T√âMA INTEGR√ÅCI√ì: ColorPalette heatmap sz√≠nek haszn√°lata
    Az eredeti probl√©ma: t√∂bbsz√∂r√∂s colorbar √©s grid duplik√°l√≥d√°s.
    """
    
    def __init__(self, parent: Optional[QWidget] = None):
        super().__init__(figsize=(16, 10), parent=parent)  # EXTRA NAGY M√âRET
        self.chart_title = "üìÖ √âves H≈ëm√©rs√©klet Napt√°r"
        self.parameter = "temperature_2m_mean"  # Alap√©rtelmezett param√©ter
        # üîß DUPLIK√ÅCI√ì BUGFIX: Colorbar tracking
        self._colorbar = None
    
    def update_data(self, data: Dict[str, Any]) -> None:
        """
        üîß KRITIKUS JAV√çT√ÅS: Duplik√°ci√≥-mentes heatmap friss√≠t√©s + SIMPLIFIED THEMEMANAGER.
        """
        print("üìÖ DEBUG: HeatmapCalendarChart.update_data() - DUPLIK√ÅCI√ì BUGFIX + SIMPLIFIED THEMEMANAGER VERZI√ì")
        
        try:
            if self._is_updating:
                print("‚ö†Ô∏è DEBUG: Heatmap update m√°r folyamatban, skip")
                return
            
            self._is_updating = True
            
            df = self._extract_daily_data(data)
            if df.empty:
                print("‚ö†Ô∏è DEBUG: √úres DataFrame, heatmap t√∂rl√©se")
                self.clear_chart()
                return
            
            self.current_data = df
            
            # === KRITIKUS: TELJES FIGURE T√ñRL√âSE DUPLIK√ÅCI√ì ELLEN ===
            print("üßπ DEBUG: Heatmap Figure.clear() - DUPLIK√ÅCI√ì ELLENI V√âDELEM")
            self.figure.clear()
            self.ax = self.figure.add_subplot(111)
            self._colorbar = None  # Colorbar referencia reset
            
            # üé® T√âMA ALKALMAZ√ÅSA
            self._apply_theme_to_chart()
            
            # Heatmap megrajzol√°sa
            self._plot_heatmap_calendar(df)
            
            self.draw()
            self._is_updating = False
            
            print("‚úÖ DEBUG: HeatmapCalendarChart friss√≠t√©s k√©sz - DUPLIK√ÅCI√ì MENTES + THEMED")
            
        except Exception as e:
            print(f"‚ùå DEBUG: Heatmap calendar chart hiba: {e}")
            self._is_updating = False
            self.clear_chart()
    
    def _extract_daily_data(self, data: Dict[str, Any]) -> pd.DataFrame:
        """Napi adatok kinyer√©se heatmap-hez - CSAK VAL√ìDI API ADATOKKAL."""
        daily_data = data.get("daily", {})
        dates = daily_data.get("time", [])
        temp_mean = daily_data.get("temperature_2m_mean", [])
        temp_max = daily_data.get("temperature_2m_max", [])
        temp_min = daily_data.get("temperature_2m_min", [])
        
        # üö® KRITIKUS: CSAK VAL√ìDI API ADATOK! Sz√°m√≠tott √©rt√©kek TILTOTTAK!
        if not dates or not temp_mean:
            print("‚ö†Ô∏è DEBUG: Hi√°nyz√≥ heatmap adatok - chart nem jelen√≠thet≈ë meg")
            return pd.DataFrame()
        
        # Adatstrukt√∫ra hosszak ellen≈ërz√©se
        if len(dates) != len(temp_mean):
            print("‚ùå DEBUG: Elt√©r≈ë hossz√∫s√°g√∫ heatmap adatok - chart nem jelen√≠thet≈ë meg")
            return pd.DataFrame()
        
        df = pd.DataFrame({
            'date': pd.to_datetime(dates),
            'temperature_2m_mean': temp_mean,  # CSAK VAL√ìDI API ADAT!
            'temperature_2m_max': temp_max if temp_max and len(temp_max) == len(dates) else None,
            'temperature_2m_min': temp_min if temp_min and len(temp_min) == len(dates) else None
        })
        
        # Csak a k√∂telez≈ë oszlopokat tartjuk meg
        df = df[['date', 'temperature_2m_mean']].dropna()
        
        if df.empty:
            print("‚ö†Ô∏è DEBUG: Nincs √©rv√©nyes heatmap adat - chart nem jelen√≠thet≈ë meg")
        
        return df
    
    def _plot_heatmap_calendar(self, df: pd.DataFrame) -> None:
        """
        üîß KRITIKUS JAV√çT√ÅS: Tetsz≈ëleges d√°tumtartom√°ny heatmap - NEM CSAK NAPT√ÅRI √âV.
        üé® SIMPLIFIED THEMEMANAGER INTEGR√ÅCI√ì: ColorPalette heatmap sz√≠nsk√°la haszn√°lata
        
        T√ÅMOGATOTT D√ÅTUMTARTOM√ÅNYOK:
        - Teljes napt√°ri √©v: 2024.01.01 - 2024.12.31
        - Tetsz≈ëleges id≈ëszak: 2024.05.01 - 2025.05.01
        - T√∂bb √©vet √°tfog√≥: 2023.07.01 - 2025.03.15
        """
        print("üé® DEBUG: _plot_heatmap_calendar() - TETSZ≈êLEGES D√ÅTUMTARTOM√ÅNY T√ÅMOGAT√ÅS")
        
        if df.empty or self.parameter not in df.columns:
            self._plot_heatmap_placeholder()
            return
        
        # === D√ÅTUMTARTOM√ÅNY ELEMZ√âS ===
        
        min_date = df['date'].min()
        max_date = df['date'].max()
        total_days = (max_date - min_date).days + 1
        
        # √âvek list√°ja az id≈ëszakban
        years = sorted(df['date'].dt.year.unique())
        
        if len(years) == 0:
            self._plot_heatmap_placeholder()
            return
        
        # === DINAMIKUS C√çM GENER√ÅL√ÅS ===
        
        if len(years) == 1:
            # Egy √©ven bel√ºli id≈ëszak
            if min_date.month == 1 and min_date.day == 1 and max_date.month == 12 and max_date.day == 31:
                title_suffix = f" ({years[0]})"  # Teljes √©v
            else:
                title_suffix = f" ({min_date.strftime('%Y.%m.%d')} - {max_date.strftime('%Y.%m.%d')})"
        else:
            # T√∂bb √©vet √°tfog√≥ id≈ëszak
            title_suffix = f" ({min_date.strftime('%Y.%m.%d')} - {max_date.strftime('%Y.%m.%d')})"
        
        print(f"üóìÔ∏è DEBUG: Heatmap id≈ëszak: {min_date} - {max_date} ({total_days} nap)")
        
        # === FOLYTONOS H√âTM√ÅTRIX L√âTREHOZ√ÅSA ===
        
        # Els≈ë h√©t kezdete (h√©tf≈ë)
        first_monday = min_date - pd.Timedelta(days=min_date.weekday())
        
        # Utols√≥ h√©t v√©ge (vas√°rnap)
        last_sunday = max_date + pd.Timedelta(days=6-max_date.weekday())
        
        # Teljes hetek sz√°ma
        total_weeks = ((last_sunday - first_monday).days // 7) + 1
        
        print(f"üìä DEBUG: H√©tm√°trix: {total_weeks} h√©t ({first_monday} - {last_sunday})")
        
        # Heatmap m√°trix - teljes id≈ëszakot lefedi
        calendar_data = np.full((total_weeks, 7), np.nan)
        
        # === ADATOK ELHELYEZ√âSE A M√ÅTRIXBAN ===
        
        for _, row in df.iterrows():
            date = row['date']
            temp = row[self.parameter]
            
            # CSAK VAL√ìDI H≈êM√âRS√âKLET √âRT√âKEK
            if pd.isna(temp):
                continue
            
            # H√©t sz√°ma az els≈ë h√©tf≈ët≈ël sz√°m√≠tva
            week_index = (date - first_monday).days // 7
            day_of_week = date.weekday()  # 0=h√©tf≈ë, 6=vas√°rnap
            
            # Biztons√°gi ellen≈ërz√©s
            if 0 <= week_index < total_weeks and 0 <= day_of_week < 7:
                calendar_data[week_index, day_of_week] = temp
        
        # === ADATOK ELLEN≈êRZ√âSE ===
        
        valid_data_count = np.sum(~np.isnan(calendar_data))
        if valid_data_count < 10:
            print(f"‚ö†Ô∏è DEBUG: T√∫l kev√©s val√≥di adat ({valid_data_count}) - heatmap nem jelen√≠thet≈ë meg")
            self._plot_heatmap_placeholder()
            return
        
        # === SZ√çNSK√ÅLA BE√ÅLL√çT√ÅSA ===
        
        valid_temps = df[self.parameter].dropna()
        if len(valid_temps) == 0:
            self._plot_heatmap_placeholder()
            return
            
        vmin = valid_temps.min()
        vmax = valid_temps.max()
        
        # üîß COLORPALETTE SZ√çNT√âRK√âP V√ÅLASZT√ÅS
        if vmin < 0 and vmax > 20:  # Teljes szezon√°lis spektrum
            cmap = 'RdYlBu_r'  # Red-Yellow-Blue reversed
        elif vmax <= 15:  # F≈ëleg hideg id≈ëszak
            cmap = 'Blues'
        elif vmin >= 15:  # F≈ëleg meleg id≈ëszak
            cmap = 'Reds'
        else:
            cmap = 'viridis'
        
        print(f"üé® DEBUG: Colormap: {cmap}, Data range: {vmin:.1f}¬∞C - {vmax:.1f}¬∞C")
        
        # === HEATMAP MEGRAJZOL√ÅSA ===
        
        print("üé® DEBUG: Heatmap rendering - teljes d√°tumtartom√°ny")
        im = self.ax.imshow(calendar_data.T, cmap=cmap, aspect='auto', 
                           vmin=vmin, vmax=vmax, origin='upper')
        
        # === TENGELYEK BE√ÅLL√çT√ÅSA ===
        
        current_colors = get_current_colors()
        text_color = current_colors.get('on_surface', '#1f2937')
        
        # X tengely - hetek
        if total_weeks <= 20:
            # R√∂vid id≈ëszak - minden h√©t
            x_ticks = range(0, total_weeks, 1)
            x_labels = [(first_monday + pd.Timedelta(weeks=i)).strftime('%m.%d') for i in x_ticks]
        else:
            # Hossz√∫ id≈ëszak - minden 4. h√©t
            x_ticks = range(0, total_weeks, 4)
            x_labels = [(first_monday + pd.Timedelta(weeks=i)).strftime('%m.%d') for i in x_ticks]
        
        self.ax.set_xticks(x_ticks)
        self.ax.set_xticklabels(x_labels, color=text_color, rotation=45)
        self.ax.set_xlabel('D√°tum', color=text_color)
        
        # Y tengely - napok
        self.ax.set_yticks(range(7))
        self.ax.set_yticklabels(['H√©tf≈ë', 'Kedd', 'Szerda', 'Cs√ºt√∂rt√∂k', 'P√©ntek', 'Szombat', 'Vas√°rnap'], color=text_color)
        
        # === COLORBAR L√âTREHOZ√ÅSA ===
        
        print("üé® DEBUG: Colorbar l√©trehoz√°s")
        try:
            # Megl√©v≈ë colorbar t√∂rl√©se
            if self._colorbar:
                self._colorbar.remove()
                self._colorbar = None
                
            self._colorbar = self.figure.colorbar(im, ax=self.ax, shrink=0.8, aspect=30)
            self._colorbar.set_label('H≈ëm√©rs√©klet (¬∞C)', fontsize=12, fontweight='500', color=text_color)
            self._colorbar.ax.tick_params(colors=text_color)
            
            print("‚úÖ DEBUG: Colorbar sikeresen l√©trehozva")
        except Exception as e:
            print(f"‚ö†Ô∏è DEBUG: Colorbar hiba (nem kritikus): {e}")
        
        # === FORM√ÅZ√ÅS ===
        
        self.ax.set_title(f"{self.chart_title}{title_suffix}", fontsize=18, fontweight='bold', pad=20, color=text_color)
        
        # Grid
        self.ax.set_xticks(np.arange(-0.5, total_weeks, 1), minor=True)
        self.ax.set_yticks(np.arange(-0.5, 7, 1), minor=True)
        
        grid_color = current_colors.get('surface', '#ffffff')
        self.ax.grid(which='minor', color=grid_color, linestyle='-', linewidth=1)
        
        # Layout
        self.figure.tight_layout()
        
        print(f"‚úÖ DEBUG: Heatmap complete - {total_weeks} h√©t, {valid_data_count} adat")
    
    def _plot_heatmap_placeholder(self) -> None:
        """Heatmap placeholder ha nincs elegend≈ë val√≥di adat - MOCK ADATOK N√âLK√úL + SIMPLIFIED THEMEMANAGER."""
        # üîß SIMPLIFIED THEMEMANAGER SZ√çNEK
        current_colors = get_current_colors()
        text_color = current_colors.get('on_surface', '#1f2937')
        surface_color = current_colors.get('surface_variant', '#f9fafb')
        
        self.ax.text(0.5, 0.5, 'üìÖ Heatmap Napt√°r\n\n‚ùå Nincs elegend≈ë val√≥di adat\n\nA napt√°r megjelen√≠t√©s√©hez\nlegal√°bb 10 val√≥di h≈ëm√©rs√©klet\nadat sz√ºks√©ges az API-b√≥l.\n\nüö® Mock adatok haszn√°lata TILOS!', 
                    ha='center', va='center', transform=self.ax.transAxes,
                    fontsize=14, color=text_color,
                    bbox=dict(boxstyle="round,pad=0.3", facecolor=surface_color, edgecolor=current_colors.get('border', '#d1d5db')))
        
        self.ax.set_title(self.chart_title, fontsize=18, fontweight='bold', pad=20, color=text_color)
        
        # Tengelyek elrejt√©se placeholder m√≥dban
        self.ax.set_xticks([])
        self.ax.set_yticks([])
        for spine in self.ax.spines.values():
            spine.set_visible(False)