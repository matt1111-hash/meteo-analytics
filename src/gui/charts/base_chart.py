#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Global Weather Analyzer - Base Chart Widget
Alaposzt√°ly minden weather chart widget-hez ColorPalette integr√°ci√≥val.

üé® T√âMA INTEGR√ÅCI√ì: SimplifiedThemeManager + ColorPalette haszn√°lata
üîß KRITIKUS JAV√çT√ÅS: Robusztus chart lifecycle management + duplik√°ci√≥ bugfix
üå™Ô∏è WIND GUSTS T√ÅMOGAT√ÅS: Alap infrastrukt√∫ra minden chart t√≠pushoz
‚úÖ Piros (#C43939) t√©ma t√°mogat√°s
‚úÖ Professzion√°lis emoji font kezel√©s
‚úÖ Memory leak-ek megsz√ºntet√©se
‚úÖ Optim√°lis legend poz√≠ci√≥
‚úÖ Teljes t√©ma szinkroniz√°ci√≥
"""

from typing import Optional, Dict, Any
import matplotlib
matplotlib.use('Qt5Agg')  # PySide6 backend

import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure

from PySide6.QtWidgets import QWidget
from PySide6.QtCore import Qt, Signal

from ..theme_manager import get_theme_manager, register_widget_for_theming, get_current_colors
from ..color_palette import ColorPalette


class WeatherChart(FigureCanvas):
    """
    Alap id≈ëj√°r√°si grafikon widget matplotlib-tal.
    Base class a specifikus chart t√≠pusokhoz - B≈êV√çTETT PROFESSZION√ÅLIS VERZI√ì + SIMPLIFIED THEMEMANAGER.
    üé® T√âMA INTEGR√ÅCI√ì: SimplifiedThemeManager sz√≠npaletta automatikus alkalmaz√°sa
    üîß KRITIKUS JAV√çT√ÅS: Robusztus chart lifecycle management + duplik√°ci√≥ bugfix + HELYES API HASZN√ÅLAT
    """
    
    # Signalok
    chart_clicked = Signal(float, float)  # x, y koordin√°t√°k
    export_requested = Signal(str)  # format (png, pdf, svg)
    
    def __init__(self, figsize=(12, 8), parent: Optional[QWidget] = None):
        """
        Chart widget inicializ√°l√°sa - T√âMA SZINKRONIZ√ÅCI√ì JAV√çTVA.
        
        Args:
            figsize: Figure m√©rete (width, height) - NAGYOBB!
            parent: Sz√ºl≈ë widget
        """
        # üîß KRITIKUS JAV√çT√ÅS: Figure sz√≠nek dinamikusan t√©ma alapj√°n
        current_colors = get_current_colors()
        figure_bg = current_colors.get('surface', '#ffffff')
        
        self.figure = Figure(figsize=figsize, dpi=100, facecolor=figure_bg)
        super().__init__(self.figure)
        self.setParent(parent)
        
        # üé® SIMPLIFIED THEMEMANAGER INTEGR√ÅCI√ì
        self.theme_manager = get_theme_manager()
        self.color_palette = ColorPalette()
        
        # üîß KRITIKUS JAV√çT√ÅS: Weather sz√≠npaletta gener√°l√°s
        self.weather_colors = self.color_palette.generate_weather_palette("#C43939")  # Piros t√©ma
        
        # Chart konfigur√°ci√≥
        self.current_data = None
        self.chart_title = ""
        self.x_label = "D√°tum"
        self.y_label = ""
        self.grid_enabled = True
        self.legend_enabled = True
        
        # üîß KRITIKUS JAV√çT√ÅS: Chart state tracking duplik√°ci√≥ ellen
        self._is_updating = False
        self._last_update_data = None
        
        # Font cache tracking
        self._font_cache_rebuilt = False
        
        # Matplotlib st√≠lus be√°ll√≠t√°sok - CSAK FONT/M√âRET, SZ√çNEK K√úL√ñN
        self._setup_matplotlib_style()
        
        # Axis referencia - T√âMA SZ√çNEKKEL
        self.ax = self.figure.add_subplot(111)
        
        # === INITIAL THEME APPLICATION ===
        self._apply_theme_to_chart()
        
        # Interakt√≠v funkci√≥k
        self.mpl_connect('button_press_event', self._on_click)
        
        # üé® WIDGET REGISZTR√ÅCI√ì T√âMA KEZEL√âSHEZ - AUTOMATIKUS
        register_widget_for_theming(self, "chart")
        
        # üé® T√âMA V√ÅLTOZ√ÅS FELIRATKOZ√ÅS
        self.theme_manager.theme_changed.connect(self._on_theme_changed)
        
        print(f"‚úÖ DEBUG: WeatherChart initialized with theme: {self.theme_manager.get_current_theme()}")
    
    def _setup_matplotlib_style(self) -> None:
        """
        Matplotlib st√≠lus be√°ll√≠t√°sok - T√âMA SZINKRONIZ√ÅCI√ì JAV√çTVA.
        üé® SIMPLIFIED THEMEMANAGER INTEGR√ÅCI√ì: Dinamikus sz√≠nek t√©mav√°lt√°skor
        üîß KRITIKUS JAV√çT√ÅS: NEM GLOB√ÅLIS rcParams ‚Üí Figure-specifikus sz√≠nek
        """
        # üîß KRITIKUS JAV√çT√ÅS: NE M√ìDOS√çTSUNK GLOB√ÅLIS rcParams-ot
        # Helyette csak font √©s m√©ret be√°ll√≠t√°sok maradjanak glob√°lisak
        
        # üîß EMOJI-T√ÅMOGATOTT FONTOK BE√ÅLL√çT√ÅSA - EGYSZER GLOB√ÅLISAN
        emoji_font_fallbacks = [
            'Segoe UI Emoji',    # Windows 10/11 emoji font
            'Apple Color Emoji', # macOS emoji font  
            'Noto Color Emoji',  # Linux (Ubuntu, Fedora) emoji font
            'Noto Emoji',        # Linux alternat√≠va
            'Symbola',           # Linux univerz√°lis szimb√≥lum font
            'DejaVu Sans',       # Eredeti fallback (emoji n√©lk√ºl)
            'sans-serif'         # V√©gs≈ë fallback
        ]
        
        print(f"üé® DEBUG: Emoji font setup: {emoji_font_fallbacks[:3]}")
        
        # CSAK FONT √âS M√âRET be√°ll√≠t√°sok glob√°lisan - SZ√çNEK NEM!
        matplotlib.rcParams.update({
            # üîß KRITIKUS JAV√çT√ÅS: Emoji fontok els≈ëdlegesen
            'font.family': emoji_font_fallbacks,
            'font.sans-serif': emoji_font_fallbacks,
            
            # M√©ret √©s st√≠lus be√°ll√≠t√°sok - PROFESSZION√ÅLIS
            'font.size': 12,           # Nagyobb alapfont
            'axes.titlesize': 16,      # Nagyobb c√≠mek
            'axes.labelsize': 14,      # Nagyobb tengelyc√≠mk√©k
            'xtick.labelsize': 11,     # Nagyobb tick labelek
            'ytick.labelsize': 11,
            'legend.fontsize': 12,     # Nagyobb legend
            'figure.titlesize': 18,    # Nagyobb figura c√≠m
            
            # Vonalst√≠lusok √©s vastags√°gok - PROFESSZION√ÅLIS
            'lines.linewidth': 2.5,    # Vastagabb vonalak
            'axes.linewidth': 1.2,     # Vastagabb tengelyek
            'grid.linewidth': 0.8,     # Vastagabb grid
            
            # Modern diz√°jn elemek
            'axes.spines.top': False,  # Modern: fels≈ë keret elt√°vol√≠t√°sa
            'axes.spines.right': False, # Modern: jobb oldali keret elt√°vol√≠t√°sa
            
            # üîß EMOJI ESPEC√çFIKUS BE√ÅLL√çT√ÅSOK
            'axes.unicode_minus': False,  # Unicode m√≠nusz kezel√©s jav√≠t√°sa
            'font.stretch': 'normal',     # Font stretch be√°ll√≠t√°s
            'font.weight': 'normal'       # Font s√∫ly normaliz√°l√°s
        })
        
        # üîß KRITIKUS JAV√çT√ÅS: Font cache tiszt√≠t√°sa - EGYSZER
        try:
            import matplotlib.font_manager as fm
            if not hasattr(self, '_font_cache_rebuilt'):
                fm._rebuild()
                self._font_cache_rebuilt = True
                print("‚úÖ DEBUG: Matplotlib font cache √∫jra√©p√≠tve emoji fontokkal")
        except Exception as e:
            print(f"‚ö†Ô∏è DEBUG: Font cache √∫jra√©p√≠t√©s hiba (nem kritikus): {e}")
        
        print("‚úÖ DEBUG: Matplotlib font/size setup complete - colors will be applied per-figure")
    
    def _on_theme_changed(self, theme_name: str) -> None:
        """
        üé® T√âMA V√ÅLTOZ√ÅS KEZEL√âSE - TELJES CHART SZINKRONIZ√ÅCI√ì.
        
        Args:
            theme_name: √öj t√©ma neve ("light" vagy "dark")
        """
        print(f"üé® DEBUG: WeatherChart theme changing: {self.theme_manager.get_current_theme()} ‚Üí {theme_name}")
        
        # Weather sz√≠npaletta √∫jragener√°l√°sa √∫j t√©m√°val
        self.weather_colors = self.color_palette.generate_weather_palette("#C43939")  # Piros t√©ma
        
        # Chart teljes √∫jrarajzol√°sa √∫j sz√≠nekkel
        self._redraw_with_new_theme()
        
        # Ha van aktu√°lis adat, chart √∫jrafriss√≠t√©se sz√ºks√©ges lehet
        if self.current_data is not None:
            print("üîÑ DEBUG: Re-applying data to chart with new theme colors")
            # A chart tartalm√°t nem rajzoljuk √∫jra, csak a sz√≠neket friss√≠tj√ºk
            # Ez elker√ºli a duplik√°lt adatmegjelen√≠t√©st
        
        print(f"‚úÖ DEBUG: WeatherChart theme change complete: {theme_name}")
    
    def _redraw_with_new_theme(self) -> None:
        """
        üé® KRITIKUS JAV√çT√ÅS: Chart √∫jrarajzol√°sa √∫j t√©ma sz√≠nekkel - TELJES SZINKRONIZ√ÅCI√ì.
        T√©mav√°lt√°skor minden chart elem sz√≠ne friss√ºl.
        """
        try:
            if self._is_updating:
                return
            
            print(f"üé® DEBUG: Redrawing chart with new theme: {self.theme_manager.get_current_theme()}")
            
            # === TELJES CHART T√âMA ALKALMAZ√ÅSA ===
            self._apply_theme_to_chart()
            
            # === SPECIFIKUS CHART ELEMEK SZ√çNFRISS√çT√âSE ===
            
            # Ha van plotolt data, friss√≠tj√ºk a vonalak √©s elemek sz√≠neit is
            if hasattr(self, 'ax') and self.ax:
                current_colors = get_current_colors()
                
                # Minden matplotlib artist (vonalak, pontok, patches) sz√≠nfriss√≠t√©se
                for line in self.ax.get_lines():
                    # Megl√©v≈ë vonalak sz√≠n√©nek m√≥dos√≠t√°sa a t√©ma alapj√°n
                    current_color = line.get_color()
                    # Ha alap√©rtelmezett k√©k, akkor friss√≠tj√ºk
                    if current_color in ['#1f77b4', 'blue', 'b']:  # matplotlib default blue
                        line.set_color(current_colors.get('primary', '#C43939'))  # Piros t√©ma
                
                # Bar chartok sz√≠nfriss√≠t√©se
                for patch in self.ax.patches:
                    current_facecolor = patch.get_facecolor()
                    # Alap√©rtelmezett sz√≠nek friss√≠t√©se
                    if hasattr(patch, '_original_color_category'):
                        # Ha van kateg√≥ria tag, haszn√°ljuk azt
                        category = patch._original_color_category
                        if category in current_colors:
                            patch.set_facecolor(current_colors[category])
                
                # Annotations √©s text elemek friss√≠t√©se
                text_color = current_colors.get('on_surface', '#1f2937')
                for text in self.ax.texts:
                    text.set_color(text_color)
                
                # Colorbar friss√≠t√©se, ha van
                if hasattr(self, '_colorbar') and self._colorbar:
                    self._colorbar.ax.tick_params(colors=text_color)
                    if hasattr(self._colorbar, 'set_label'):
                        # Colorbar label sz√≠ne
                        self._colorbar.set_label(
                            self._colorbar.ax.get_ylabel(), 
                            color=text_color
                        )
            
            # === CANVAS FRISS√çT√âSE ===
            self.draw()
            
            print(f"‚úÖ DEBUG: Chart successfully redrawn with theme: {self.theme_manager.get_current_theme()}")
            
        except Exception as e:
            print(f"‚ùå DEBUG: Theme redraw error: {e}")
    
    def _on_click(self, event) -> None:
        """Grafikon kattint√°s kezel√©se."""
        if event.inaxes and event.xdata and event.ydata:
            self.chart_clicked.emit(event.xdata, event.ydata)
    
    def clear_chart(self) -> None:
        """
        üîß KRITIKUS JAV√çT√ÅS: Teljes chart t√∂rl√©se duplik√°ci√≥ n√©lk√ºl + T√âMA SZ√çNEK ALKALMAZ√ÅSA.
        """
        print(f"üßπ DEBUG: {self.__class__.__name__}.clear_chart() - T√âMA SZINKRONIZ√ÅCI√ì")
        try:
            # State reset
            self._is_updating = True
            
            # Figure teljes t√∂rl√©se - KRITIKUS a duplik√°ci√≥ ellen
            self.figure.clear()
            
            # √öj axis l√©trehoz√°sa
            self.ax = self.figure.add_subplot(111)
            
            # üé® T√âMA SZ√çNEK ALKALMAZ√ÅSA AZ √öJ AXIS-RA
            self._apply_theme_to_chart()
            
            # Canvas friss√≠t√©se
            self.draw()
            
            # State cleanup
            self.current_data = None
            self._last_update_data = None
            self._is_updating = False
            
            print(f"‚úÖ DEBUG: {self.__class__.__name__} chart t√∂r√∂lve t√©ma sz√≠nekkel: {self.theme_manager.get_current_theme()}")
            
        except Exception as e:
            print(f"‚ùå DEBUG: Chart t√∂rl√©si hiba: {e}")
            self._is_updating = False
    
    def _apply_theme_to_chart(self) -> None:
        """
        üé® KRITIKUS JAV√çT√ÅS: Teljes chart t√©ma alkalmaz√°sa figure-specifikusan.
        T√âMA SZINKRONIZ√ÅCI√ì: matplotlib figure ‚Üî SimplifiedThemeManager
        """
        # üîß AKTU√ÅLIS T√âMA SZ√çNEK LEK√âR√âSE
        current_colors = get_current_colors()
        
        print(f"üé® DEBUG: Applying theme colors to chart: {current_colors}")
        
        # === FIGURE SZINT≈∞ SZ√çNEK ===
        
        # Figure h√°tt√©r - T√âMA ALAPJ√ÅN
        self.figure.patch.set_facecolor(current_colors.get('surface', '#ffffff'))
        
        # === AXIS SZINT≈∞ SZ√çNEK ===
        
        if hasattr(self, 'ax') and self.ax:
            # Axis h√°tt√©r
            self.ax.set_facecolor(current_colors.get('surface', '#ffffff'))
            
            # Text sz√≠nek - MINDEN SZ√ñVEG ELEM
            text_color = current_colors.get('on_surface', '#1f2937')
            
            # Tick labelek √©s axis labelek
            self.ax.tick_params(colors=text_color, which='both')
            
            # Axis c√≠mk√©k sz√≠nei - ha m√°r be vannak √°ll√≠tva
            if self.ax.xaxis.label.get_text():
                self.ax.xaxis.label.set_color(text_color)
            if self.ax.yaxis.label.get_text():
                self.ax.yaxis.label.set_color(text_color)
            
            # Chart c√≠m sz√≠ne - ha m√°r be van √°ll√≠tva
            if self.ax.title.get_text():
                self.ax.title.set_color(text_color)
            
            # Axis spine sz√≠nek
            spine_color = current_colors.get('border', '#d1d5db')
            for spine in self.ax.spines.values():
                spine.set_color(spine_color)
            
            # Grid sz√≠nek - ha enged√©lyezve
            if self.grid_enabled:
                grid_color = current_colors.get('border', '#d1d5db')
                grid_alpha = 0.3 if self.theme_manager.get_current_theme() == "light" else 0.2
                self.ax.grid(True, alpha=grid_alpha, color=grid_color)
            
            # Legend sz√≠nek - ha l√©tezik
            legend = self.ax.get_legend()
            if legend and self.legend_enabled:
                legend.get_frame().set_facecolor(current_colors.get('surface', '#ffffff'))
                legend.get_frame().set_edgecolor(current_colors.get('border', '#d1d5db'))
                # Legend text sz√≠nek
                for text in legend.get_texts():
                    text.set_color(text_color)
        
        print(f"‚úÖ DEBUG: Chart theme colors applied successfully")
    
    def export_chart(self, filepath: str, format: str = 'png', dpi: int = 300) -> bool:
        """
        Grafikon export√°l√°sa f√°jlba.
        
        Args:
            filepath: C√©l f√°jl √∫tvonala
            format: F√°jl form√°tum (png, pdf, svg)
            dpi: Felbont√°s
            
        Returns:
            Sikeres export-e
        """
        try:
            self.figure.savefig(filepath, format=format, dpi=dpi, bbox_inches='tight')
            return True
        except Exception as e:
            print(f"Chart export hiba: {e}")
            return False
    
    def update_style(self, dark_theme: bool = False) -> None:
        """
        üé® DEPRECATED: T√©ma v√°lt√°s kezel√©se - SIMPLIFIED THEMEMANAGER-RE DELEG√ÅLVA.
        
        Args:
            dark_theme: S√∂t√©t t√©ma-e (DEPRECATED, haszn√°ld a SimplifiedThemeManager-t)
        """
        print("‚ö†Ô∏è DEBUG: update_style() DEPRECATED - use SimplifiedThemeManager.set_theme() instead")
        
        # Backward compatibility - SimplifiedThemeManager-re deleg√°l√°s
        theme_name = "dark" if dark_theme else "light"
        self.theme_manager.set_theme(theme_name)