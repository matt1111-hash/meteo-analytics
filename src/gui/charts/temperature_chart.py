#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Global Weather Analyzer - Enhanced Temperature Chart
Fejlett h≈ëm√©rs√©klet grafikon widget professzion√°lis vizualiz√°ci√≥val.

üå°Ô∏è ENHANCED TEMPERATURE CHART: Sz√≠nes z√≥n√°k, trend vonalak, statisztikai elemek
üé® T√âMA INTEGR√ÅCI√ì: ColorPalette haszn√°lata professzion√°lis sz√≠nekhez
üîß KRITIKUS JAV√çT√ÅS: Robusztus update cycle duplik√°ci√≥ n√©lk√ºl + LEGEND POZ√çCI√ì JAV√çTVA
‚úÖ Piros (#C43939) t√©ma t√°mogat√°s
‚úÖ Professzion√°lis nagy m√©ret≈± diagramok
‚úÖ Optim√°lis legend elhelyez√©s
‚úÖ Val√≥di API adatok haszn√°lata (mock adatok tiltva)
"""

from typing import Optional, Dict, Any
import pandas as pd
import numpy as np
from datetime import datetime

from matplotlib.dates import DateFormatter, MonthLocator, DayLocator
import matplotlib.pyplot as plt

from PySide6.QtWidgets import QWidget

from .base_chart import WeatherChart
from ..theme_manager import get_current_colors


class EnhancedTemperatureChart(WeatherChart):
    """
    Fejlett h≈ëm√©rs√©klet grafikon widget - PROFESSZION√ÅLIS NAGY VERZI√ì + DUPLIK√ÅCI√ì BUGFIX + SIMPLIFIED THEMEMANAGER.
    Sz√≠nes z√≥n√°k, trend vonalak, statisztikai elemek.
    üé® T√âMA INTEGR√ÅCI√ì: ColorPalette haszn√°lata professzion√°lis sz√≠nekhez
    üîß KRITIKUS JAV√çT√ÅS: Robusztus update cycle duplik√°ci√≥ n√©lk√ºl + LEGEND POZ√çCI√ì JAV√çTVA
    """
    
    def __init__(self, parent: Optional[QWidget] = None):
        super().__init__(figsize=(14, 8), parent=parent)  # NAGY M√âRET
        self.chart_title = "üå°Ô∏è R√©szletes H≈ëm√©rs√©klet Elemz√©s"
        self.y_label = "H≈ëm√©rs√©klet (¬∞C)"
    
    def update_data(self, data: Dict[str, Any]) -> None:
        """
        üîß KRITIKUS JAV√çT√ÅS: Duplik√°ci√≥-mentes h≈ëm√©rs√©klet chart friss√≠t√©s + SIMPLIFIED THEMEMANAGER SZ√çNEK.
        """
        print("üå°Ô∏è DEBUG: EnhancedTemperatureChart.update_data() - DUPLIK√ÅCI√ì BUGFIX + SIMPLIFIED THEMEMANAGER VERZI√ì")
        
        try:
            # Duplik√°ci√≥ ellen≈ërz√©s
            if self._is_updating:
                print("‚ö†Ô∏è DEBUG: Update m√°r folyamatban, skip")
                return
            
            self._is_updating = True
            
            df = self._extract_temperature_data(data)
            if df.empty:
                print("‚ö†Ô∏è DEBUG: √úres DataFrame, chart t√∂rl√©se")
                self.clear_chart()
                return
            
            self.current_data = df
            self._last_update_data = data.copy()
            
            # === KRITIKUS: TELJES FIGURE T√ñRL√âSE DUPLIK√ÅCI√ì ELLEN ===
            print("üßπ DEBUG: Figure.clear() h√≠v√°sa duplik√°ci√≥ ellen")
            self.figure.clear()
            self.ax = self.figure.add_subplot(111)
            
            # üé® T√âMA ALKALMAZ√ÅSA
            self._apply_theme_to_chart()
            
            # Chart megrajzol√°sa
            self._plot_enhanced_temperature(df)
            
            # Finaliz√°l√°s
            self.draw()
            self._is_updating = False
            
            print("‚úÖ DEBUG: EnhancedTemperatureChart friss√≠t√©s k√©sz - DUPLIK√ÅCI√ì MENTES + THEMED")
            
        except Exception as e:
            print(f"‚ùå DEBUG: Enhanced h≈ëm√©rs√©klet chart hiba: {e}")
            self._is_updating = False
            self.clear_chart()
    
    def _extract_temperature_data(self, data: Dict[str, Any]) -> pd.DataFrame:
        """H≈ëm√©rs√©klet adatok kinyer√©se - CSAK VAL√ìDI API ADATOKKAL."""
        daily_data = data.get("daily", {})
        dates = daily_data.get("time", [])
        temp_max = daily_data.get("temperature_2m_max", [])
        temp_min = daily_data.get("temperature_2m_min", [])
        temp_mean = daily_data.get("temperature_2m_mean", [])
        
        # üö® KRITIKUS: CSAK VAL√ìDI API ADATOK! Sz√°m√≠tott √°tlag TILOS!
        if not dates or not temp_max or not temp_min or not temp_mean:
            print("‚ö†Ô∏è DEBUG: Hi√°nyz√≥ h≈ëm√©rs√©klet adatok - chart nem jelen√≠thet≈ë meg")
            return pd.DataFrame()
        
        # Adatstrukt√∫ra hosszak ellen≈ërz√©se
        if len(dates) != len(temp_max) or len(dates) != len(temp_min) or len(dates) != len(temp_mean):
            print("‚ùå DEBUG: Elt√©r≈ë hossz√∫s√°g√∫ h≈ëm√©rs√©klet adatok - chart nem jelen√≠thet≈ë meg")
            return pd.DataFrame()
        
        df = pd.DataFrame({
            'date': pd.to_datetime(dates),
            'temp_max': temp_max,
            'temp_min': temp_min,
            'temp_mean': temp_mean  # CSAK VAL√ìDI API ADAT!
        })
        
        # Csak √©rv√©nyes adatok megtart√°sa
        df = df.dropna()
        
        if df.empty:
            print("‚ö†Ô∏è DEBUG: Nincs √©rv√©nyes h≈ëm√©rs√©klet adat - chart nem jelen√≠thet≈ë meg")
        
        return df
    
    def _plot_enhanced_temperature(self, df: pd.DataFrame) -> None:
        """
        Fejlett h≈ëm√©rs√©klet grafikon rajzol√°sa - PROFESSZION√ÅLIS ST√çLUS + SIMPLIFIED THEMEMANAGER SZ√çNEK.
        üé® SIMPLIFIED THEMEMANAGER INTEGR√ÅCI√ì: ColorPalette haszn√°lata professzion√°lis sz√≠nv√°laszt√°shoz
        üîß KRITIKUS JAV√çT√ÅS: Az ax.clear() m√°r megt√∂rt√©nt a update_data()-ban.
        """
        print("üé® DEBUG: _plot_enhanced_temperature() - DUPLIK√ÅCI√ì MENTES + SIMPLIFIED THEMEMANAGER")
        
        # üîß KRITIKUS JAV√çT√ÅS: HELYES API HASZN√ÅLAT - weather sz√≠npaletta
        temp_colors = {
            'cold': self.color_palette.get_color('info', 'dark') or '#6366f1',
            'moderate': self.color_palette.get_color('primary', 'base') or '#C43939',  # Piros t√©ma
            'warm': self.color_palette.get_color('warning', 'base') or '#f59e0b',
            'hot': self.color_palette.get_color('error', 'base') or '#dc2626',
            'comfort': self.color_palette.get_color('success', 'light') or '#22c55e',
            'trend_up': self.color_palette.get_color('error', 'light') or '#ef4444',
            'trend_down': self.color_palette.get_color('info', 'light') or '#8b5cf6',
            'annotation_hot': self.color_palette.get_color('error', 'light') or '#fef2f2',
            'annotation_cold': self.color_palette.get_color('info', 'light') or '#eff6ff'
        }
        
        # Weather sz√≠npaletta integr√°l√°sa
        weather_temp_colors = self.weather_colors.get('temperature', '#C43939')  # Piros t√©ma
        temp_colors['moderate'] = weather_temp_colors
        
        semantic_colors = {
            'success': self.color_palette.get_color('success', 'base') or '#10b981',
            'warning': self.color_palette.get_color('warning', 'base') or '#f59e0b',
            'error': self.color_palette.get_color('error', 'base') or '#dc2626',
            'info': self.color_palette.get_color('info', 'base') or '#6b7280'
        }
        
        print(f"üé® DEBUG: Using SimplifiedThemeManager colors: {temp_colors}")
        
        # === SZ√çNES H√ÅTT√âR Z√ìN√ÅK ===
        
        # Hideg z√≥na (< 0¬∞C)
        self.ax.axhspan(-50, 0, alpha=0.1, color=temp_colors['cold'], label='Fagyz√≥na')
        
        # Meleg z√≥na (> 25¬∞C)
        self.ax.axhspan(25, 50, alpha=0.1, color=temp_colors['hot'], label='Forr√≥ z√≥na')
        
        # Komfort z√≥na (15-25¬∞C)
        self.ax.axhspan(15, 25, alpha=0.05, color=temp_colors['comfort'], label='Komfort z√≥na')
        
        # === FAGY√ÅS √âS FORR√ìS√ÅG VONALAK ===
        
        self.ax.axhline(y=0, color=temp_colors['cold'], linestyle='--', alpha=0.7, linewidth=2, label='Fagypont')
        self.ax.axhline(y=25, color=temp_colors['warm'], linestyle='--', alpha=0.7, linewidth=2, label='Ny√°ri meleg')
        self.ax.axhline(y=30, color=temp_colors['hot'], linestyle='--', alpha=0.7, linewidth=2, label='H≈ëhull√°m')
        
        # === H≈êM√âRS√âKLET VONALAK - VASTAGABB, SIMPLIFIED THEMEMANAGER SZ√çNEKKEL ===
        
        # Minimum h≈ëm√©rs√©klet
        self.ax.plot(df['date'], df['temp_min'], 'o-', color=temp_colors['cold'], linewidth=3, 
                    markersize=6, alpha=0.9, label='Minimum', markerfacecolor='white', markeredgewidth=2)
        
        # Maximum h≈ëm√©rs√©klet
        self.ax.plot(df['date'], df['temp_max'], 'o-', color=temp_colors['hot'], linewidth=3, 
                    markersize=6, alpha=0.9, label='Maximum', markerfacecolor='white', markeredgewidth=2)
        
        # √Åtlag h≈ëm√©rs√©klet
        self.ax.plot(df['date'], df['temp_mean'], 's-', color=temp_colors['moderate'], linewidth=2.5, 
                    markersize=5, alpha=0.8, label='√Åtlag', markerfacecolor='white', markeredgewidth=1.5)
        
        # === TER√úLETEK KIT√ñLT√âSE - SZ√çN√ÅTMENETES ===
        
        # Min-Max tartom√°ny kit√∂lt√©se gradiens hat√°ssal
        self.ax.fill_between(df['date'], df['temp_min'], df['temp_max'], 
                            alpha=0.2, color=temp_colors['warm'], label='Napi h≈ëing√°s')
        
        # === TREND VONALAK - √öJ FUNKCI√ì ===
        
        # Line√°ris trend sz√°m√≠t√°sa
        if len(df) > 3:
            x_numeric = np.arange(len(df))
            
            # Maximum trend
            max_trend = np.polyfit(x_numeric, df['temp_max'], 1)
            max_trend_line = np.poly1d(max_trend)(x_numeric)
            self.ax.plot(df['date'], max_trend_line, '--', color=temp_colors['trend_up'], alpha=0.6, linewidth=2, label='Max trend')
            
            # Minimum trend
            min_trend = np.polyfit(x_numeric, df['temp_min'], 1)
            min_trend_line = np.poly1d(min_trend)(x_numeric)
            self.ax.plot(df['date'], min_trend_line, '--', color=temp_colors['trend_down'], alpha=0.6, linewidth=2, label='Min trend')
        
        # === STATISZTIKAI ANNOT√ÅCI√ìK ===
        
        # Extr√©m √©rt√©kek kiemel√©se
        max_temp_idx = df['temp_max'].idxmax()
        min_temp_idx = df['temp_min'].idxmin()
        
        max_temp_date = df.loc[max_temp_idx, 'date']
        max_temp_val = df.loc[max_temp_idx, 'temp_max']
        min_temp_date = df.loc[min_temp_idx, 'date']
        min_temp_val = df.loc[min_temp_idx, 'temp_min']
        
        # üîß SIMPLIFIED THEMEMANAGER ANNOT√ÅCI√ì SZ√çNEK
        current_colors = get_current_colors()
        
        # Annot√°ci√≥k a sz√©ls≈ë√©rt√©kekhez
        self.ax.annotate(f'üî• {max_temp_val:.1f}¬∞C', 
                        xy=(max_temp_date, max_temp_val), 
                        xytext=(10, 20), textcoords='offset points',
                        bbox=dict(boxstyle='round,pad=0.5', fc=temp_colors['annotation_hot'], ec=temp_colors['hot'], alpha=0.8),
                        arrowprops=dict(arrowstyle='->', connectionstyle='arc3,rad=0.2', color=temp_colors['hot']))
        
        self.ax.annotate(f'üßä {min_temp_val:.1f}¬∞C', 
                        xy=(min_temp_date, min_temp_val), 
                        xytext=(10, -30), textcoords='offset points',
                        bbox=dict(boxstyle='round,pad=0.5', fc=temp_colors['annotation_cold'], ec=temp_colors['cold'], alpha=0.8),
                        arrowprops=dict(arrowstyle='->', connectionstyle='arc3,rad=-0.2', color=temp_colors['cold']))
        
        # === FORM√ÅZ√ÅS - PROFESSZION√ÅLIS ===
        
        self._format_enhanced_temperature_chart(df)
    
    def _format_enhanced_temperature_chart(self, df: pd.DataFrame) -> None:
        """
        Fejlett h≈ëm√©rs√©klet chart form√°z√°sa - PROFESSZION√ÅLIS ST√çLUS + LEGEND POZ√çCI√ì JAV√çTVA + SIMPLIFIED THEMEMANAGER.
        üéØ KRITIKUS JAV√çT√ÅS: Legend k√≠v√ºlre helyez√©se, hogy ne fedje el a diagramtartalmat
        üé® SIMPLIFIED THEMEMANAGER INTEGR√ÅCI√ì: Sz√≠nek √©s form√°z√°s a centraliz√°lt rendszerb≈ël
        """
        # üîß AKTU√ÅLIS T√âMA SZ√çNEK
        current_colors = get_current_colors()
        
        # C√≠m √©s c√≠mk√©k
        self.ax.set_title(self.chart_title, fontweight='bold', pad=25, fontsize=18, 
                         color=current_colors.get('on_surface', '#1f2937'))
        self.ax.set_xlabel(self.x_label, fontsize=14, fontweight='500',
                          color=current_colors.get('on_surface', '#1f2937'))
        self.ax.set_ylabel(self.y_label, fontsize=14, fontweight='500',
                          color=current_colors.get('on_surface', '#1f2937'))
        
        # D√°tum form√°z√°s - INTELLIGENS
        total_days = len(df)
        if total_days <= 31:  # Egy h√≥nap vagy kevesebb
            self.ax.xaxis.set_major_locator(DayLocator(interval=max(1, total_days // 10)))
            self.ax.xaxis.set_major_formatter(DateFormatter('%m-%d'))
        else:  # T√∂bb h√≥nap
            self.ax.xaxis.set_major_locator(MonthLocator())
            self.ax.xaxis.set_major_formatter(DateFormatter('%Y-%m'))
        
        # Y tengely form√°z√°s - INTELLIGENS TARTOM√ÅNY
        temp_min = df['temp_min'].min()
        temp_max = df['temp_max'].max()
        temp_range = temp_max - temp_min
        padding = max(2, temp_range * 0.1)  # 10% padding vagy minimum 2¬∞C
        
        self.ax.set_ylim(temp_min - padding, temp_max + padding)
        self.ax.yaxis.set_major_locator(plt.MaxNLocator(10))
        
        # Grid √©s legend - PROFESSZION√ÅLIS + KRITIKUS JAV√çT√ÅS + SIMPLIFIED THEMEMANAGER SZ√çNEK
        if self.grid_enabled:
            grid_color = current_colors.get('border', '#d1d5db')
            grid_alpha = 0.3 if self.theme_manager.get_current_theme() == "light" else 0.2
            self.ax.grid(True, alpha=grid_alpha, linestyle='-', linewidth=0.8, color=grid_color)
            self.ax.set_axisbelow(True)  # Grid a h√°tt√©rben
        
        if self.legend_enabled:
            # üéØ KRITIKUS JAV√çT√ÅS: Legend k√≠v√ºlre helyez√©se chart ter√ºleten k√≠v√ºlre
            # bbox_to_anchor=(1.05, 1) - jobb oldalra, fels≈ë sz√©lhez igaz√≠tva
            # ncol=1 - egy oszlop a jobb √°ttekinthet≈ës√©g√©rt
            legend = self.ax.legend(bbox_to_anchor=(1.05, 1), loc='upper left', 
                          framealpha=0.95, fancybox=True, shadow=True, 
                          ncol=1, fontsize=11)
            
            # üé® LEGEND SZ√çNEK SIMPLIFIED THEMEMANAGER-REL
            legend.get_frame().set_facecolor(current_colors.get('surface', '#ffffff'))
            legend.get_frame().set_edgecolor(current_colors.get('border', '#d1d5db'))
            
            print("üéØ DEBUG: Legend poz√≠ci√≥ jav√≠tva - k√≠v√ºlre helyezve (1.05, 1) + SimplifiedThemeManager sz√≠nek")
        
        # Layout optimaliz√°l√°s - EXTRA HELY A LEGEND-NEK
        # bbox_inches='tight' automatikusan alkalmazkodik a k√≠v√ºlre helyezett legend-hez
        self.figure.tight_layout(rect=[0, 0, 0.85, 1])  # 85%-ig a figure, 15% a legend-nek
        
        print("‚úÖ DEBUG: Enhanced temperature chart form√°zva - LEGEND NEM FEDI EL A TARTALMAT + SIMPLIFIED THEMEMANAGER")