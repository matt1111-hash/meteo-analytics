#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Global Weather Analyzer - Wind Gusts Chart
Sz√©ll√∂k√©s grafikon widget professzion√°lis vizualiz√°ci√≥val.

üå™Ô∏è MAGYAR METEOROL√ìGIAI SZABV√ÅNY: 43-61-90-119 km/h k√ºsz√∂b√∂k
üé® T√âMA INTEGR√ÅCI√ì: ColorPalette wind sz√≠nek haszn√°lata
üîß KRITIKUS JAV√çT√ÅS: Magyar sz√©lsebess√©g-kateg√≥ri√°k + SIMPLIFIED THEMEMANAGER
‚úÖ wind_gusts_max priorit√°s ‚Üí windspeed_10m_max fallback rendszer
‚úÖ Magyar sz√©lkateg√≥ri√°k: Er≈ës sz√©l (43), Viharos sz√©l (61), Er≈ës vihar (90), Ork√°n (119)
‚úÖ Piros (#C43939) t√©ma t√°mogat√°s
‚úÖ √âleth≈± sz√©ll√∂k√©s megjelen√≠t√©s VAL√ìDI API adatokkal
‚úÖ Professzion√°lis kategoriz√°l√°s magyar terminol√≥gi√°val
"""

from typing import Optional, Dict, Any
import pandas as pd

from matplotlib.dates import DateFormatter, MonthLocator
import matplotlib.pyplot as plt

from PySide6.QtWidgets import QWidget

from .base_chart import WeatherChart
from ..theme_manager import get_current_colors


class WindChart(WeatherChart):
    """
    üå™Ô∏è MAGYAR METEOROL√ìGIAI SZABV√ÅNY: Sz√©ll√∂k√©s grafikon widget - MAGYAR SZ√âLKATEG√ìRI√ÅK + SIMPLIFIED THEMEMANAGER.
    üé® T√âMA INTEGR√ÅCI√ì: ColorPalette wind sz√≠nek haszn√°lata
    ‚úÖ wind_gusts_max priorit√°s ‚Üí windspeed_10m_max fallback rendszer
    ‚úÖ Magyar sz√©lkateg√≥ri√°k: Er≈ës sz√©l (43), Viharos sz√©l (61), Er≈ës vihar (90), Ork√°n (119)
    ‚úÖ √âleth≈± sz√©ll√∂k√©s megjelen√≠t√©s VAL√ìDI API adatokkal
    """
    
    def __init__(self, parent: Optional[QWidget] = None):
        super().__init__(figsize=(12, 6), parent=parent)
        self.chart_title = "üå™Ô∏è Sz√©ll√∂k√©sek v√°ltoz√°sa"  # üå™Ô∏è WIND GUSTS C√çM
        self.y_label = "Sz√©ll√∂k√©sek (km/h)"  # üå™Ô∏è WIND GUSTS LABEL
    
    def update_data(self, data: Dict[str, Any]) -> None:
        """
        üîß KRITIKUS JAV√çT√ÅS: Duplik√°ci√≥-mentes sz√©l chart friss√≠t√©s + SIMPLIFIED THEMEMANAGER.
        """
        print("üí® DEBUG: WindChart.update_data() - MAGYAR SZABV√ÅNY + SIMPLIFIED THEMEMANAGER VERZI√ì")
        
        try:
            if self._is_updating:
                return
            
            self._is_updating = True
            
            df = self._extract_wind_data(data)
            if df.empty:
                print("‚ö†Ô∏è DEBUG: √úres DataFrame, sz√©l chart t√∂rl√©se")
                self.clear_chart()
                return
            
            self.current_data = df
            
            # === KRITIKUS: TELJES FIGURE T√ñRL√âSE ===
            print("üßπ DEBUG: Wind Figure.clear() - DUPLIK√ÅCI√ì ELLEN")
            self.figure.clear()
            self.ax = self.figure.add_subplot(111)
            
            # üé® T√âMA ALKALMAZ√ÅSA
            self._apply_theme_to_chart()
            
            self._plot_wind(df)
            
            self.draw()
            self._is_updating = False
            
            print("‚úÖ DEBUG: WindChart friss√≠t√©s k√©sz - MAGYAR SZABV√ÅNY + THEMED")
            
        except Exception as e:
            print(f"‚ùå DEBUG: Sz√©l chart hiba: {e}")
            self._is_updating = False
            self.clear_chart()
    
    def _extract_wind_data(self, data: Dict[str, Any]) -> pd.DataFrame:
        """
        üå™Ô∏è KRITIKUS JAV√çT√ÅS: Sz√©ll√∂k√©s adatok kinyer√©se - WIND GUSTS PRIORIT√ÅS + FALLBACK.
        
        PRIORIT√ÅS RENDSZER:
        1. wind_gusts_max (√≥r√°nk√©nti‚Üínapi max sz√©ll√∂k√©sek) ‚≠ê ELS≈êDLEGES
        2. windspeed_10m_max (napi max sz√©lsebess√©g) ‚≠ê FALLBACK
        3. Hiba√ºzenet ha egyik sem el√©rhet≈ë
        """
        daily_data = data.get("daily", {})
        dates = daily_data.get("time", [])
        
        # üå™Ô∏è WIND GUSTS PRIORIT√ÅS: wind_gusts_max ELS≈êDLEGESEN
        wind_gusts_max = daily_data.get("wind_gusts_max", [])
        windspeed_10m_max = daily_data.get("windspeed_10m_max", [])  # Fallback
        
        print(f"üå™Ô∏è DEBUG: WindChart data sources - wind_gusts_max: {len(wind_gusts_max) if wind_gusts_max else 0}, windspeed_10m_max: {len(windspeed_10m_max) if windspeed_10m_max else 0}")
        
        # El√©rhet≈ë adatok ellen≈ërz√©se
        if not dates:
            print("‚ö†Ô∏è DEBUG: Nincs d√°tum adat - WindChart nem jelen√≠thet≈ë meg")
            return pd.DataFrame()
        
        # PRIORIT√ÅS KI√âRT√âKEL√âS
        windspeed_data = []
        data_source = ""
        
        if wind_gusts_max and len(wind_gusts_max) == len(dates):
            # üå™Ô∏è ELS≈êDLEGES: wind_gusts_max haszn√°lata
            windspeed_data = wind_gusts_max
            data_source = "wind_gusts_max"
            self.chart_title = "üå™Ô∏è Sz√©ll√∂k√©sek v√°ltoz√°sa"  # Dinamikus c√≠m
            self.y_label = "Sz√©ll√∂k√©sek (km/h)"
            print(f"‚úÖ DEBUG: WindChart using PRIMARY source: {data_source}")
        elif windspeed_10m_max and len(windspeed_10m_max) == len(dates):
            # ‚ö†Ô∏è FALLBACK: windspeed_10m_max haszn√°lata
            windspeed_data = windspeed_10m_max  
            data_source = "windspeed_10m_max"
            self.chart_title = "üí® Sz√©lsebess√©g v√°ltoz√°sa (Fallback)"  # Jelz√©s a fallback-r≈ël
            self.y_label = "Sz√©lsebess√©g (km/h)"
            print(f"‚ö†Ô∏è DEBUG: WindChart using FALLBACK source: {data_source}")
        else:
            print(f"‚ùå DEBUG: Nincs haszn√°lhat√≥ sz√©l adat - WindChart nem jelen√≠thet≈ë meg")
            print(f"   - wind_gusts_max: {len(wind_gusts_max) if wind_gusts_max else 0} elem")
            print(f"   - windspeed_10m_max: {len(windspeed_10m_max) if windspeed_10m_max else 0} elem") 
            print(f"   - dates: {len(dates)} elem")
            return pd.DataFrame()
        
        # DataFrame l√©trehoz√°sa
        df = pd.DataFrame({
            'date': pd.to_datetime(dates),
            'windspeed': windspeed_data,
            '_data_source': data_source  # Debug info
        })
        
        # NaN √©rt√©kek kezel√©se
        df = df.dropna()
        
        if df.empty:
            print(f"‚ùå DEBUG: √úres DataFrame {data_source} adatok ut√°n - WindChart nem jelen√≠thet≈ë meg")
        else:
            max_wind = df['windspeed'].max()
            avg_wind = df['windspeed'].mean()
            print(f"‚úÖ DEBUG: WindChart DataFrame k√©sz - {data_source}, max: {max_wind:.1f} km/h, avg: {avg_wind:.1f} km/h")
        
        return df
    
    def _plot_wind(self, df: pd.DataFrame) -> None:
        """
        üå™Ô∏è MAGYAR METEOROL√ìGIAI SZABV√ÅNY: Sz√©ll√∂k√©s grafikon rajzol√°sa - MAGYAR SZ√âLKATEG√ìRI√ÅK + SIMPLIFIED THEMEMANAGER.
        üé® SIMPLIFIED THEMEMANAGER INTEGR√ÅCI√ì: ColorPalette wind sz√≠nek haszn√°lata
        ‚úÖ Magyar sz√©lkateg√≥ri√°k: Er≈ës sz√©l (43), Viharos sz√©l (61), Er≈ës vihar (90), Ork√°n (119)
        """
        print("üé® DEBUG: _plot_wind() - MAGYAR SZ√âLKATEG√ìRI√ÅK + SIMPLIFIED THEMEMANAGER")
        
        # üîß KRITIKUS JAV√çT√ÅS: HELYES API HASZN√ÅLAT - magyar sz√©lkateg√≥ria sz√≠nek
        wind_colors = {
            'moderate': self.color_palette.get_color('success', 'base') or '#10b981',      # Gyenge-m√©rs√©kelt sz√©l
            'light': self.color_palette.get_color('success', 'light') or '#86efac',       # Kit√∂lt√©s sz√≠n
            'strong': self.color_palette.get_color('warning', 'base') or '#f59e0b',       # Er≈ës sz√©l (43)
            'stormy': self.color_palette.get_color('warning', 'dark') or '#d97706',       # Viharos sz√©l (61)
            'severe_storm': self.color_palette.get_color('error', 'light') or '#f87171',  # Er≈ës vihar (90)
            'hurricane': self.color_palette.get_color('error', 'base') or '#dc2626'       # Ork√°n (119)
        }
        
        # Weather sz√≠npaletta integr√°l√°sa
        weather_wind_color = self.weather_colors.get('wind', '#10b981')
        wind_colors['moderate'] = weather_wind_color
        
        current_colors = get_current_colors()
        
        print(f"üé® DEBUG: Using Magyar szabv√°ny wind colors: {wind_colors}")
        
        # Adatforr√°s ellen≈ërz√©se
        data_source = df['_data_source'].iloc[0] if '_data_source' in df.columns else 'unknown'
        
        # === SZ√âLL√ñK√âS VONAL + TER√úLET DIAGRAM ===
        
        # Alapvonal √©s kit√∂lt√©s
        line_label = "Max sz√©ll√∂k√©sek" if data_source == "wind_gusts_max" else "Max sz√©lsebess√©g (fallback)"
        self.ax.plot(df['date'], df['windspeed'], color=wind_colors['moderate'], linewidth=2.5, alpha=0.9, label=line_label)
        self.ax.fill_between(df['date'], 0, df['windspeed'], alpha=0.3, color=wind_colors['light'])
        
        # === üå™Ô∏è MAGYAR METEOROL√ìGIAI SZABV√ÅNY - SZ√âLKATEG√ìRI√ÅK ===
        
        max_wind = df['windspeed'].max() if not df.empty else 50
        
        # 43 km/h - Er≈ës sz√©l (magyar szabv√°ny szerint)
        if max_wind >= 30:  # Csak akkor jelen√≠tj√ºk meg, ha relev√°ns
            self.ax.axhline(y=43, color=wind_colors['strong'], linestyle='--', alpha=0.8, linewidth=2, 
                           label='üå¨Ô∏è Er≈ës sz√©l (43 km/h)')
        
        # 61 km/h - Viharos sz√©l (magyar szabv√°ny)
        if max_wind >= 45:
            self.ax.axhline(y=61, color=wind_colors['stormy'], linestyle='--', alpha=0.8, linewidth=2, 
                           label='üå™Ô∏è Viharos sz√©l (61 km/h)')
        
        # 90 km/h - Er≈ës vihar (magyar szabv√°ny)
        if max_wind >= 70:
            self.ax.axhline(y=90, color=wind_colors['severe_storm'], linestyle='--', alpha=0.8, linewidth=2, 
                           label='‚ö†Ô∏è Er≈ës vihar (90 km/h)')
        
        # 119 km/h - Ork√°n (magyar szabv√°ny)
        if max_wind >= 100:
            self.ax.axhline(y=119, color=wind_colors['hurricane'], linestyle='--', alpha=0.9, linewidth=2.5, 
                           label='üö® Ork√°n (119 km/h)')
        
        # === MAGYAR SZ√âLKATEG√ìRI√ÅK ANNOT√ÅCI√ì ===
        
        # Maximum sz√©ll√∂k√©s kiemel√©se magyar kateg√≥ri√°val
        if not df.empty:
            max_wind_idx = df['windspeed'].idxmax()
            max_wind_date = df.loc[max_wind_idx, 'date']
            max_wind_val = df.loc[max_wind_idx, 'windspeed']
            
            # Magyar kategoriz√°l√°s
            if max_wind_val >= 119:
                category_icon = "üö®"
                category_text = "ORK√ÅN"
                annotation_color = wind_colors['hurricane']
            elif max_wind_val >= 90:
                category_icon = "‚ö†Ô∏è"
                category_text = "ER≈êS VIHAR"
                annotation_color = wind_colors['severe_storm']
            elif max_wind_val >= 61:
                category_icon = "üå™Ô∏è"  
                category_text = "VIHAROS SZ√âL"
                annotation_color = wind_colors['stormy']
            elif max_wind_val >= 43:
                category_icon = "üå¨Ô∏è"
                category_text = "ER≈êS SZ√âL"
                annotation_color = wind_colors['strong']
            else:
                category_icon = "üí®"
                category_text = "M√âRS√âKELT SZ√âL"
                annotation_color = wind_colors['moderate']
            
            # Annot√°ci√≥ a cs√∫csponthoz
            self.ax.annotate(f'{category_icon} {max_wind_val:.1f} km/h\n({category_text})', 
                            xy=(max_wind_date, max_wind_val), 
                            xytext=(15, 25), textcoords='offset points',
                            bbox=dict(boxstyle='round,pad=0.5', facecolor=current_colors.get('surface_variant', '#f9fafb'), 
                                     edgecolor=annotation_color, alpha=0.9),
                            arrowprops=dict(arrowstyle='->', connectionstyle='arc3,rad=0.2', color=annotation_color, lw=2))
        
        # Form√°z√°s
        self._format_wind_chart(df)
    
    def _format_wind_chart(self, df: pd.DataFrame) -> None:
        """Sz√©l chart form√°z√°sa + SIMPLIFIED THEMEMANAGER."""
        # üîß SIMPLIFIED THEMEMANAGER SZ√çNEK
        current_colors = get_current_colors()
        text_color = current_colors.get('on_surface', '#1f2937')
        
        self.ax.set_title(self.chart_title, fontweight='bold', pad=20, color=text_color)
        self.ax.set_xlabel(self.x_label, color=text_color)
        self.ax.set_ylabel(self.y_label, color=text_color)
        
        # Tick sz√≠nek
        self.ax.tick_params(colors=text_color)
        
        # D√°tum form√°z√°s
        self.ax.xaxis.set_major_locator(MonthLocator())
        self.ax.xaxis.set_major_formatter(DateFormatter('%Y-%m'))
        
        # Y tengely form√°z√°s - magyar sz√©lkateg√≥ri√°khoz optimaliz√°lt
        max_wind = df['windspeed'].max() if not df.empty else 50
        
        # Y-tengely tartom√°ny optimaliz√°l√°sa magyar k√ºsz√∂b√∂kh√∂z
        if max_wind >= 119:
            y_max = max_wind * 1.1  # Ork√°n feletti √©rt√©kekhez
        elif max_wind >= 90:
            y_max = 130  # Ork√°n k√ºsz√∂big
        elif max_wind >= 61:
            y_max = 100  # Er≈ës vihar k√ºsz√∂big
        elif max_wind >= 43:
            y_max = 75   # Viharos sz√©l k√ºsz√∂big
        else:
            y_max = 55   # Er≈ës sz√©l k√ºsz√∂big
        
        self.ax.set_ylim(0, y_max)
        
        # Grid √©s legend + SIMPLIFIED THEMEMANAGER
        if self.grid_enabled:
            grid_color = current_colors.get('border', '#d1d5db')
            grid_alpha = 0.3 if self.theme_manager.get_current_theme() == "light" else 0.2
            self.ax.grid(True, alpha=grid_alpha, linestyle='-', linewidth=0.5, color=grid_color)
        
        if self.legend_enabled:
            legend = self.ax.legend(loc='upper left', framealpha=0.9)
            legend.get_frame().set_facecolor(current_colors.get('surface', '#ffffff'))
            legend.get_frame().set_edgecolor(current_colors.get('border', '#d1d5db'))
        
        # Layout optimaliz√°l√°s
        self.figure.autofmt_xdate()
        self.figure.tight_layout()