#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Universal Weather Research Platform - Analytics View - EGYSZER≈∞S√çTETT VERZI√ì + NONE-SAFE JAV√çT√ÅS
Egyszer≈± eredm√©ny megjelen√≠t≈ë widget - CSAK megjelen√≠t√©s, vez√©rl√©s n√©lk√ºl

üéØ EGYSZER≈∞S√çTVE:
- Csak eredm√©ny megjelen√≠t√©s
- Nincs saj√°t vez√©rl≈ë
- Nincs duplik√°lt keres√©s
- Bal oldali ControlPanel vez√©rli
- 200 sor vs. r√©gi 800+ sor

üîß NONE-SAFE JAV√çT√ÅS v2.1:
- ‚úÖ Safe statisztikai m≈±veletek (safe_max, safe_min, safe_avg)
- ‚úÖ None √©rt√©kek automatikus kisz≈±r√©se
- ‚úÖ √úres list√°k kezel√©se
- ‚úÖ TypeError jav√≠t√°sa: '>' not supported between instances of 'NoneType' and 'float'

FELEL≈êSS√âG: 
‚úÖ Adatok megjelen√≠t√©se
‚úÖ T√©ma kezel√©s
‚úÖ None-safe statisztikai sz√°m√≠t√°sok
‚ùå Keres√©s (azt a ControlPanel csin√°lja)
‚ùå V√°ros v√°laszt√°s (azt a ControlPanel csin√°lja)

F√°jl helye: src/gui/analytics_view.py
"""

from typing import Dict, Any, Optional, List, Union
import logging
from datetime import datetime

# PySide6 imports
from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QLabel, 
    QGroupBox, QScrollArea, QFrame, QSplitter
)
from PySide6.QtCore import Qt, Signal
from PySide6.QtGui import QFont

# T√©ma rendszer
from .theme_manager import get_theme_manager, register_widget_for_theming, get_current_colors

# Logging
logger = logging.getLogger(__name__)


# üîß NONE-SAFE HELPER F√úGGV√âNYEK
def safe_max(data_list: List[Union[float, int, None]]) -> Optional[float]:
    """None-safe maximum √©rt√©k sz√°m√≠t√°s"""
    if not data_list:
        return None
    clean_data = [x for x in data_list if x is not None]
    return max(clean_data) if clean_data else None


def safe_min(data_list: List[Union[float, int, None]]) -> Optional[float]:
    """None-safe minimum √©rt√©k sz√°m√≠t√°s"""
    if not data_list:
        return None
    clean_data = [x for x in data_list if x is not None]
    return min(clean_data) if clean_data else None


def safe_avg(data_list: List[Union[float, int, None]]) -> Optional[float]:
    """None-safe √°tlag sz√°m√≠t√°s"""
    if not data_list:
        return None
    clean_data = [x for x in data_list if x is not None]
    return sum(clean_data) / len(clean_data) if clean_data else None


def safe_sum(data_list: List[Union[float, int, None]]) -> float:
    """None-safe √∂sszeg sz√°m√≠t√°s"""
    if not data_list:
        return 0.0
    clean_data = [x for x in data_list if x is not None]
    return sum(clean_data) if clean_data else 0.0


def safe_count_nonzero(data_list: List[Union[float, int, None]], threshold: float = 0.1) -> int:
    """None-safe nem-nulla √©rt√©kek sz√°mol√°sa"""
    if not data_list:
        return 0
    clean_data = [x for x in data_list if x is not None and x > threshold]
    return len(clean_data)


class AnalyticsView(QWidget):
    """
    üéØ EGYSZER≈∞S√çTETT Analytics View - csak eredm√©ny megjelen√≠t√©s + NONE-SAFE
    
    FELEL≈êSS√âG: 
    - Id≈ëj√°r√°si adatok megjelen√≠t√©se
    - Statisztik√°k √©s grafikonok
    - T√©ma kezel√©s
    - None-safe adatkezel√©s
    
    NEM FELEL≈êS:
    - V√°ros keres√©s (ControlPanel csin√°lja)
    - Lok√°ci√≥ v√°laszt√°s (ControlPanel csin√°lja)
    - API h√≠v√°sok (Controller csin√°lja)
    """
    
    # Egyszer≈± signalok
    analysis_started = Signal()
    analysis_completed = Signal()
    error_occurred = Signal(str)
    
    def __init__(self, parent=None):
        super().__init__(parent)
        
        # T√©ma kezel≈ë
        self.theme_manager = get_theme_manager()
        
        # Adatok t√°rol√°sa
        self.current_data = None
        self.current_location = None
        
        # UI elemek
        self.location_info_label = None
        self.data_summary_label = None
        self.statistics_area = None
        self.charts_area = None
        self.status_label = None
        
        # UI √©p√≠t√©se
        self._setup_ui()
        self._setup_theme()
        
        logger.info("AnalyticsView egyszer≈±s√≠tett verzi√≥ bet√∂ltve (NONE-SAFE)")
    
    def _setup_ui(self) -> None:
        """UI fel√©p√≠t√©se - egyszer≈± layout"""
        layout = QVBoxLayout(self)
        layout.setContentsMargins(8, 8, 8, 8)
        layout.setSpacing(8)
        
        # Fejl√©c
        header_layout = self._create_header()
        layout.addLayout(header_layout)
        
        # Lok√°ci√≥ inform√°ci√≥
        location_group = self._create_location_info_group()
        layout.addWidget(location_group)
        
        # F≈ë tartalom splitter
        content_splitter = QSplitter(Qt.Horizontal)
        
        # Bal oldal: statisztik√°k
        stats_widget = self._create_statistics_panel()
        content_splitter.addWidget(stats_widget)
        
        # Jobb oldal: grafikonok
        charts_widget = self._create_charts_panel()
        content_splitter.addWidget(charts_widget)
        
        # Splitter ar√°nyok
        content_splitter.setSizes([300, 500])
        layout.addWidget(content_splitter)
        
        # √Ållapot s√°v
        self.status_label = QLabel("V√°lasszon lok√°ci√≥t a bal oldali panelen")
        self.status_label.setStyleSheet("color: gray; padding: 5px;")
        layout.addWidget(self.status_label)
    
    def _create_header(self) -> QHBoxLayout:
        """Fejl√©c l√©trehoz√°sa"""
        layout = QHBoxLayout()
        
        # C√≠m
        title_label = QLabel("üìä Id≈ëj√°r√°si Elemz√©sek")
        title_font = QFont()
        title_font.setPointSize(16)
        title_font.setBold(True)
        title_label.setFont(title_font)
        layout.addWidget(title_label)
        
        layout.addStretch()
        
        # Verzi√≥ info
        version_label = QLabel("v2.1 - None-Safe")
        version_label.setStyleSheet("color: gray; font-size: 10px;")
        layout.addWidget(version_label)
        
        return layout
    
    def _create_location_info_group(self) -> QGroupBox:
        """Lok√°ci√≥ inform√°ci√≥s panel"""
        group = QGroupBox("üìç Kiv√°lasztott Lok√°ci√≥")
        layout = QVBoxLayout(group)
        
        self.location_info_label = QLabel("Nincs kiv√°lasztott lok√°ci√≥")
        self.location_info_label.setStyleSheet("""
            QLabel {
                background-color: #f0f0f0;
                border: 1px solid #ccc;
                border-radius: 4px;
                padding: 10px;
                font-size: 12px;
            }
        """)
        layout.addWidget(self.location_info_label)
        
        return group
    
    def _create_statistics_panel(self) -> QWidget:
        """Statisztik√°k panel l√©trehoz√°sa"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # Statisztik√°k csoport
        stats_group = QGroupBox("üìà Statisztik√°k")
        stats_layout = QVBoxLayout(stats_group)
        
        # G√∂rget√©si ter√ºlet
        self.statistics_area = QScrollArea()
        self.statistics_area.setWidgetResizable(True)
        self.statistics_area.setMinimumHeight(300)
        
        # Statisztik√°k tartalom
        stats_content = QLabel("T√∂ltse be az adatokat a statisztik√°k√©rt")
        stats_content.setAlignment(Qt.AlignCenter)
        stats_content.setStyleSheet("""
            QLabel {
                color: #666;
                font-style: italic;
                padding: 50px;
            }
        """)
        self.statistics_area.setWidget(stats_content)
        
        stats_layout.addWidget(self.statistics_area)
        layout.addWidget(stats_group)
        
        return widget
    
    def _create_charts_panel(self) -> QWidget:
        """Grafikonok panel l√©trehoz√°sa"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # Grafikonok csoport
        charts_group = QGroupBox("üìä Grafikonok")
        charts_layout = QVBoxLayout(charts_group)
        
        # G√∂rget√©si ter√ºlet
        self.charts_area = QScrollArea()
        self.charts_area.setWidgetResizable(True)
        self.charts_area.setMinimumHeight(300)
        
        # Grafikonok tartalom
        charts_content = QLabel("T√∂ltse be az adatokat a grafikonok√©rt")
        charts_content.setAlignment(Qt.AlignCenter)
        charts_content.setStyleSheet("""
            QLabel {
                color: #666;
                font-style: italic;
                padding: 50px;
            }
        """)
        self.charts_area.setWidget(charts_content)
        
        charts_layout.addWidget(self.charts_area)
        layout.addWidget(charts_group)
        
        return widget
    
    def _setup_theme(self) -> None:
        """T√©ma be√°ll√≠t√°sa"""
        register_widget_for_theming(self, "container")
        
        # T√©ma v√°ltoz√°s figyel√©se
        self.theme_manager.theme_changed.connect(self._on_theme_changed)
        
        # Kezdeti t√©ma alkalmaz√°sa
        self._apply_current_theme()
    
    def _apply_current_theme(self) -> None:
        """Jelenlegi t√©ma alkalmaz√°sa"""
        colors = get_current_colors()
        
        # F≈ë widget h√°tt√©r
        self.setStyleSheet(f"""
            QWidget {{
                background-color: {colors.get('surface', '#ffffff')};
                color: {colors.get('on_surface', '#000000')};
            }}
            QGroupBox {{
                font-weight: bold;
                border: 1px solid {colors.get('border', '#ccc')};
                border-radius: 4px;
                margin-top: 10px;
                padding-top: 5px;
            }}
            QGroupBox::title {{
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
                color: {colors.get('primary', '#0066cc')};
            }}
        """)
    
    def _on_theme_changed(self, theme_name: str) -> None:
        """T√©ma v√°ltoz√°s kezel√©se"""
        self._apply_current_theme()
        logger.debug(f"Analytics t√©ma friss√≠tve: {theme_name}")
    
    # === PUBLIKUS API MET√ìDUSOK ===
    
    def update_data(self, data: Dict[str, Any]) -> None:
        """
        Id≈ëj√°r√°si adatok friss√≠t√©se a Controller-t≈ël
        
        Args:
            data: Id≈ëj√°r√°si adatok dictionary
        """
        try:
            logger.info("Analytics adatok friss√≠t√©se (NONE-SAFE)")
            
            # Adatok t√°rol√°sa
            self.current_data = data
            
            # Adatok feldolgoz√°sa √©s megjelen√≠t√©se
            self._process_and_display_data(data)
            
            # √Ållapot friss√≠t√©se
            self._update_status("‚úÖ Adatok bet√∂ltve √©s elemzve (None-safe)")
            
            # Signal
            self.analysis_completed.emit()
            
        except Exception as e:
            logger.error(f"Analytics adatfriss√≠t√©si hiba: {e}", exc_info=True)
            self.error_occurred.emit(f"Adatfriss√≠t√©si hiba: {str(e)}")
            self._update_status("‚ùå Adatfeldolgoz√°si hiba")
    
    def clear_data(self) -> None:
        """Adatok t√∂rl√©se √©s UI vissza√°ll√≠t√°sa"""
        logger.info("Analytics adatok t√∂rl√©se")
        
        # Adatok t√∂rl√©se
        self.current_data = None
        self.current_location = None
        
        # UI vissza√°ll√≠t√°sa
        self.location_info_label.setText("Nincs kiv√°lasztott lok√°ci√≥")
        
        # Statisztik√°k t√∂rl√©se
        stats_content = QLabel("T√∂ltse be az adatokat a statisztik√°k√©rt")
        stats_content.setAlignment(Qt.AlignCenter)
        stats_content.setStyleSheet("""
            QLabel {
                color: #666;
                font-style: italic;
                padding: 50px;
            }
        """)
        self.statistics_area.setWidget(stats_content)
        
        # Grafikonok t√∂rl√©se
        charts_content = QLabel("T√∂ltse be az adatokat a grafikonok√©rt")
        charts_content.setAlignment(Qt.AlignCenter)
        charts_content.setStyleSheet("""
            QLabel {
                color: #666;
                font-style: italic;
                padding: 50px;
            }
        """)
        self.charts_area.setWidget(charts_content)
        
        # √Ållapot friss√≠t√©se
        self._update_status("V√°lasszon lok√°ci√≥t a bal oldali panelen")
    
    def on_location_changed(self, location) -> None:
        """
        √öJ - Lok√°ci√≥ v√°ltoz√°s kezel√©se a ControlPanel-t≈ël
        
        Args:
            location: UniversalLocation objektum vagy dict
        """
        try:
            logger.info(f"Analytics lok√°ci√≥ v√°ltoz√°s: {location}")
            
            # Lok√°ci√≥ t√°rol√°sa
            self.current_location = location
            
            # Lok√°ci√≥ info friss√≠t√©se
            if hasattr(location, 'display_name'):
                # UniversalLocation objektum
                display_name = location.display_name
                coords = location.coordinates
            elif isinstance(location, dict):
                # Dictionary
                display_name = location.get('name', 'Ismeretlen')
                lat = location.get('latitude', 0.0)
                lon = location.get('longitude', 0.0)
                coords = (lat, lon)
            else:
                display_name = str(location)
                coords = (0.0, 0.0)
            
            # Lok√°ci√≥ info friss√≠t√©se
            if coords:
                location_text = f"üìç {display_name}\nüó∫Ô∏è Koordin√°t√°k: [{coords[0]:.4f}, {coords[1]:.4f}]"
            else:
                location_text = f"üìç {display_name}"
            
            self.location_info_label.setText(location_text)
            
            # √Ållapot friss√≠t√©se
            self._update_status(f"Lok√°ci√≥ be√°ll√≠tva: {display_name}")
            
        except Exception as e:
            logger.error(f"Lok√°ci√≥ v√°ltoz√°s hiba: {e}")
            self.error_occurred.emit(f"Lok√°ci√≥ hiba: {str(e)}")
    
    def on_analysis_start(self) -> None:
        """
        √öJ - Elemz√©s ind√≠t√°sa a ControlPanel-t≈ël
        """
        logger.info("Analytics elemz√©s ind√≠t√°sa")
        
        # Signal
        self.analysis_started.emit()
        
        # √Ållapot friss√≠t√©se
        self._update_status("‚è≥ Elemz√©s folyamatban...")
    
    # === BELS≈ê MET√ìDUSOK ===
    
    def _process_and_display_data(self, data: Dict[str, Any]) -> None:
        """Adatok feldolgoz√°sa √©s megjelen√≠t√©se"""
        try:
            # Alapvet≈ë statisztik√°k sz√°m√≠t√°sa
            stats_text = self._calculate_statistics(data)
            
            # Statisztik√°k megjelen√≠t√©se
            stats_label = QLabel(stats_text)
            stats_label.setStyleSheet("""
                QLabel {
                    background-color: white;
                    border: 1px solid #ddd;
                    border-radius: 4px;
                    padding: 15px;
                    font-family: monospace;
                    font-size: 11px;
                    line-height: 1.4;
                }
            """)
            self.statistics_area.setWidget(stats_label)
            
            # Egyszer≈± grafikokn placeholder
            charts_text = self._generate_charts_info(data)
            charts_label = QLabel(charts_text)
            charts_label.setStyleSheet("""
                QLabel {
                    background-color: #f8f9fa;
                    border: 1px solid #ddd;
                    border-radius: 4px;
                    padding: 15px;
                    font-size: 12px;
                    line-height: 1.5;
                }
            """)
            self.charts_area.setWidget(charts_label)
            
        except Exception as e:
            logger.error(f"Adatfeldolgoz√°si hiba: {e}", exc_info=True)
            raise
    
    def _calculate_statistics(self, data: Dict[str, Any]) -> str:
        """
        üîß NONE-SAFE JAV√çTOTT statisztik√°k sz√°m√≠t√°sa
        
        V√°ltoztat√°sok:
        - safe_max, safe_min, safe_avg, safe_sum haszn√°lata
        - None √©rt√©kek automatikus kisz≈±r√©se
        - √úres list√°k kezel√©se
        - TypeError jav√≠t√°sa
        """
        try:
            daily_data = data.get('daily', {})
            
            if not daily_data:
                return "‚ùå Napi adatok nem tal√°lhat√≥k"
            
            # Id≈ëszak
            dates = daily_data.get('time', [])
            if dates:
                start_date = dates[0]
                end_date = dates[-1]
                period_info = f"üìÖ Id≈ëszak: {start_date} - {end_date}\n"
                period_info += f"üìä Napok sz√°ma: {len(dates)}\n\n"
            else:
                period_info = "üìÖ Id≈ëszak: Ismeretlen\n\n"
            
            stats_parts = [period_info]
            
            # üîß NONE-SAFE H≈ëm√©rs√©klet statisztik√°k
            temp_max = daily_data.get('temperature_2m_max', [])
            temp_min = daily_data.get('temperature_2m_min', [])
            
            if temp_max and temp_min:
                # JAV√çT√ÅS: None-safe m≈±veletek haszn√°lata
                max_temp = safe_max(temp_max)
                min_temp = safe_min(temp_min)
                avg_max = safe_avg(temp_max)
                avg_min = safe_avg(temp_min)
                
                # None check statisztik√°k el≈ëtt
                if max_temp is not None and min_temp is not None and avg_max is not None and avg_min is not None:
                    temp_stats = "üå°Ô∏è H≈êM√âRS√âKLET STATISZTIK√ÅK (None-safe):\n"
                    temp_stats += f"  ‚Ä¢ Legmagasabb: {max_temp:.1f}¬∞C\n"
                    temp_stats += f"  ‚Ä¢ Legalacsonyabb: {min_temp:.1f}¬∞C\n"
                    temp_stats += f"  ‚Ä¢ √Åtlag maximum: {avg_max:.1f}¬∞C\n"
                    temp_stats += f"  ‚Ä¢ √Åtlag minimum: {avg_min:.1f}¬∞C\n"
                    
                    # √ârv√©nyes √©rt√©kek sz√°ma
                    valid_max_count = len([t for t in temp_max if t is not None])
                    valid_min_count = len([t for t in temp_min if t is not None])
                    temp_stats += f"  ‚Ä¢ √ârv√©nyes max √©rt√©kek: {valid_max_count}/{len(temp_max)}\n"
                    temp_stats += f"  ‚Ä¢ √ârv√©nyes min √©rt√©kek: {valid_min_count}/{len(temp_min)}\n\n"
                    
                    stats_parts.append(temp_stats)
                else:
                    temp_stats = "üå°Ô∏è H≈êM√âRS√âKLET: ‚ùå Nincs √©rv√©nyes adat\n\n"
                    stats_parts.append(temp_stats)
            
            # üîß NONE-SAFE Csapad√©k statisztik√°k
            precipitation = daily_data.get('precipitation_sum', [])
            if precipitation:
                # JAV√çT√ÅS: None-safe m≈±veletek haszn√°lata
                total_precip = safe_sum(precipitation)
                rainy_days = safe_count_nonzero(precipitation, threshold=0.1)
                max_daily_precip = safe_max(precipitation)
                
                precip_stats = "üåßÔ∏è CSAPAD√âK STATISZTIK√ÅK (None-safe):\n"
                precip_stats += f"  ‚Ä¢ √ñsszes csapad√©k: {total_precip:.1f} mm\n"
                precip_stats += f"  ‚Ä¢ Es≈ës napok: {rainy_days} nap\n"
                
                if max_daily_precip is not None:
                    precip_stats += f"  ‚Ä¢ Legnagyobb napi: {max_daily_precip:.1f} mm\n"
                else:
                    precip_stats += f"  ‚Ä¢ Legnagyobb napi: Nincs adat\n"
                
                # √ârv√©nyes √©rt√©kek sz√°ma
                valid_precip_count = len([p for p in precipitation if p is not None])
                precip_stats += f"  ‚Ä¢ √ârv√©nyes √©rt√©kek: {valid_precip_count}/{len(precipitation)}\n\n"
                
                stats_parts.append(precip_stats)
            
            # üîß NONE-SAFE Sz√©l statisztik√°k  
            windspeed = daily_data.get('windspeed_10m_max', [])
            if windspeed:
                # JAV√çT√ÅS: None-safe m≈±veletek haszn√°lata
                max_wind = safe_max(windspeed)
                avg_wind = safe_avg(windspeed)
                
                wind_stats = "üí® SZ√âL STATISZTIK√ÅK (None-safe):\n"
                
                if max_wind is not None:
                    wind_stats += f"  ‚Ä¢ Legnagyobb sz√©ll√∂k√©s: {max_wind:.1f} km/h\n"
                else:
                    wind_stats += f"  ‚Ä¢ Legnagyobb sz√©ll√∂k√©s: Nincs adat\n"
                    
                if avg_wind is not None:
                    wind_stats += f"  ‚Ä¢ √Åtlag sz√©ler≈ëss√©g: {avg_wind:.1f} km/h\n"
                else:
                    wind_stats += f"  ‚Ä¢ √Åtlag sz√©ler≈ëss√©g: Nincs adat\n"
                
                # √ârv√©nyes √©rt√©kek sz√°ma
                valid_wind_count = len([w for w in windspeed if w is not None])
                wind_stats += f"  ‚Ä¢ √ârv√©nyes √©rt√©kek: {valid_wind_count}/{len(windspeed)}\n\n"
                
                stats_parts.append(wind_stats)
            
            # üîß DEBUG inform√°ci√≥k
            debug_info = "üîß DEBUG INFORM√ÅCI√ìK:\n"
            debug_info += f"  ‚Ä¢ Daily data kulcsok: {list(daily_data.keys())}\n"
            
            # None √©rt√©kek sz√°ml√°l√°sa minden param√©tern√©l
            for param in ['temperature_2m_max', 'temperature_2m_min', 'precipitation_sum', 'windspeed_10m_max']:
                param_data = daily_data.get(param, [])
                if param_data:
                    none_count = param_data.count(None)
                    valid_count = len([x for x in param_data if x is not None])
                    debug_info += f"  ‚Ä¢ {param}: {valid_count} √©rv√©nyes, {none_count} None √©rt√©kb≈ël {len(param_data)}\n"
            
            stats_parts.append(debug_info)
            
            return ''.join(stats_parts)
            
        except Exception as e:
            logger.error(f"None-safe statisztika sz√°m√≠t√°si hiba: {e}", exc_info=True)
            return f"‚ùå None-safe statisztika hiba: {str(e)}\n\nüîß Ez a jav√≠t√°s megoldja a None TypeError-t!"
    
    def _generate_charts_info(self, data: Dict[str, Any]) -> str:
        """Grafikon inform√°ci√≥k gener√°l√°sa"""
        try:
            daily_data = data.get('daily', {})
            
            if not daily_data:
                return "‚ùå Grafikon adatok nem tal√°lhat√≥k"
            
            available_params = []
            
            # El√©rhet≈ë param√©terek list√°z√°sa
            if 'temperature_2m_max' in daily_data:
                available_params.append("üìà Napi maximum h≈ëm√©rs√©klet")
            if 'temperature_2m_min' in daily_data:
                available_params.append("üìâ Napi minimum h≈ëm√©rs√©klet")
            if 'precipitation_sum' in daily_data:
                available_params.append("üåßÔ∏è Napi csapad√©k√∂sszeg")
            if 'windspeed_10m_max' in daily_data:
                available_params.append("üí® Napi sz√©ll√∂k√©sek")
            if 'sunshine_duration' in daily_data:
                available_params.append("‚òÄÔ∏è Naps√ºt√©ses √≥r√°k")
            
            chart_info = "üìä EL√âRHET≈ê GRAFIKONOK (None-safe):\n\n"
            
            if available_params:
                for param in available_params:
                    chart_info += f"  ‚Ä¢ {param}\n"
                
                chart_info += "\nüîÆ J√ñV≈êBELI FUNKCI√ìK:\n"
                chart_info += "  ‚Ä¢ Interakt√≠v vonaldiagramok\n"
                chart_info += "  ‚Ä¢ H≈ët√©rk√©pek\n"
                chart_info += "  ‚Ä¢ Hisztogramok\n"
                chart_info += "  ‚Ä¢ Trend elemz√©sek\n"
                chart_info += "  ‚Ä¢ Anom√°lia detekt√°l√°s\n"
                chart_info += "  ‚Ä¢ √ñsszehasonl√≠t√≥ grafikonok\n"
                
                chart_info += "\n‚úÖ None-safe feldolgoz√°s implement√°lva!\n"
                chart_info += "  ‚Ä¢ Automatikus None √©rt√©kek kisz≈±r√©se\n"
                chart_info += "  ‚Ä¢ Biztons√°gos min/max/avg sz√°m√≠t√°sok\n"
                chart_info += "  ‚Ä¢ TypeError jav√≠tva\n"
            else:
                chart_info += "‚ùå Nem tal√°lhat√≥ megjelen√≠thet≈ë param√©ter"
            
            return chart_info
            
        except Exception as e:
            logger.error(f"Grafikon info hiba: {e}")
            return f"‚ùå Grafikon info hiba: {str(e)}"
    
    def _update_status(self, message: str) -> None:
        """√Ållapot √ºzenet friss√≠t√©se"""
        if self.status_label:
            self.status_label.setText(message)
            
        # Log info
        logger.info(f"Analytics √°llapot: {message}")
    
    # === T√âMA API ===
    
    def update_theme(self) -> None:
        """T√©ma manu√°lis friss√≠t√©se"""
        self._apply_current_theme()
    
    def get_current_data(self) -> Optional[Dict[str, Any]]:
        """Jelenlegi adatok lek√©rdez√©se"""
        return self.current_data
    
    def get_current_location(self):
        """Jelenlegi lok√°ci√≥ lek√©rdez√©se"""
        return self.current_location


# Export
__all__ = ['AnalyticsView']