#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Universal Weather Research Platform - Analytics View Module (REFAKTOR√ÅLT)
Ez a modul a multi-city r√©gi√≥ elemz√©sek dashboardj√°t val√≥s√≠tja meg.

‚úÖ REFAKTOR√ÅLT M≈∞K√ñD√âS:
- A n√©zet most m√°r nem ind√≠t saj√°t lek√©rdez√©seket.
- A gombok egy k√∂zponti `multi_city_query_requested` signalt bocs√°tanak ki.
- A MainWindow kezeli a lek√©rdez√©st √©s az eredm√©nyt egy publikus slot-on
  (`update_with_multi_city_result`) kereszt√ºl k√ºldi vissza.
- Ezzel a n√©zet teljesen szinkronban van a t√∂bbi modullal (T√©rk√©p, ControlPanel).

üîß KRITIKUS JAV√çT√ÅSOK:
‚úÖ Visszat√©r√©s a HEATMAP-ekhez (MINDEN TAB)
‚úÖ KONSTANS 365 T√âGLALAP - mindig ugyanannyi adatpont
‚úÖ METEOROL√ìGIAI SZ√çNSK√ÅL√ÅK - professzion√°lis id≈ëj√°r√°si sz√≠nek
‚úÖ MINDEN T√âGLALAP KIT√ñLTVE - nulla √©rt√©k = megfelel≈ë sz√≠n (nem √ºres!)
‚úÖ 1 √©v = 365 t√©glalap (1 nap/t√©glalap), 5 √©v = 365 t√©glalap (5 nap/t√©glalap)
‚úÖ R√ÅCS VONALAK - t√©glalapok elv√°lasztva (Excel-szer≈±)
‚úÖ INTELLIGENS TENGELYEK - id≈ëszak alap√∫ c√≠mk√©k
‚úÖ BEAUFORT SZ√âL SZ√çNSK√ÅLA - 13 fokozat progressz√≠v sz√≠n√°tmenet
‚úÖ 4. TAB: MAX SZ√âLL√ñK√âS - windgusts_10m_max k√ºl√∂n megjelen√≠t√©s
‚úÖ RELEV√ÅNS METEOROL√ìGIAI STATISZTIK√ÅK - bal oldali panel
‚úÖ KOMPAKT K√ÅRTY√ÅS RENDSZER - 12px olvashat√≥ bet≈±m√©ret
üöÄ MULTI-CITY R√âGI√ì INTEGR√ÅCI√ì - √âszak-Magyarorsz√°g, Pest, stb. elemz√©sek
üî• SIGNAL EMISSION JAV√çT√ÅS - multi_city_analysis_completed signal kibocs√°t√°s
üö® STATISZTIK√ÅK JAV√çT√ÅS - _process_and_display_statistics() MEGH√çV√ÅS
üå™Ô∏è V√âGS≈ê JAV√çT√ÅS: WindChart/WindRoseChart DEDICATED KOMPONENSEK HOZZ√ÅAD√ÅSA

F√°jl helye: src/gui/analytics_view.py
"""

from typing import Dict, Any, Optional, List, Union, Tuple
import logging
from datetime import datetime, timedelta
import pandas as pd
import numpy as np
import matplotlib.colors as mcolors

# PySide6 imports
from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QLabel, 
    QGroupBox, QScrollArea, QFrame, QSplitter, QGridLayout, QTabWidget,
    QPushButton, QComboBox, QMessageBox, QProgressBar
)
from PySide6.QtCore import Qt, Signal, QThread
from PySide6.QtGui import QFont

# T√©ma rendszer
from .theme_manager import get_theme_manager, register_widget_for_theming, get_current_colors

# Chart imports - JAV√çTOTT: VISSZA A HEATMAP-EKHEZ + DEDICATED WIND CHARTOK
from .charts.heatmap_chart import HeatmapCalendarChart
from .charts.wind_chart import WindChart
from .charts.wind_rose_chart import WindRoseChart

# üöÄ MULTI-CITY ENGINE IMPORT
try:
    from ..analytics.multi_city_engine import MultiCityEngine, MultiCityQuery
    from ..data.models import AnalyticsResult, CityWeatherResult, AnalyticsQuestion
    from ..data.enums import RegionScope, AnalyticsMetric, QuestionType
    MULTI_CITY_AVAILABLE = True
    logger = logging.getLogger(__name__)
    logger.info("‚úÖ Multi-City Engine import sikeres!")
except ImportError as e:
    MULTI_CITY_AVAILABLE = False
    logger = logging.getLogger(__name__)
    logger.warning(f"‚ùå Multi-City Engine import hiba: {e}")

# Logging
logger = logging.getLogger(__name__)


# üé® METEOROL√ìGIAI SZ√çNSK√ÅL√ÅK - KONSTANS HEATMAP-EKHEZ (BEAUFORT FRISS√çTETT)
class MeteorologicalColorMaps:
    """üé® Professzion√°lis meteorol√≥giai sz√≠nsk√°l√°k heatmap-ekhez - BEAUFORT VERZI√ì"""
    
    @staticmethod
    def get_precipitation_colormap():
        """üåßÔ∏è Csapad√©k sz√≠nsk√°la - 0mm = FEH√âR!"""
        precipitation_levels = [0, 1, 5, 10, 20, 30, 40, 50, 80, 100]
        precipitation_colors = [
            '#FFFFFF',  # 0 mm - FEH√âR (sz√°raz nap!)
            '#E6F3FF',  # 1 mm - nagyon vil√°gosk√©k  
            '#CCE7FF',  # 5 mm - vil√°gosk√©k
            '#99D6FF',  # 10 mm - k√©k
            '#66C2FF',  # 20 mm - s√∂t√©tk√©k
            '#3399FF',  # 30 mm - er≈ës k√©k
            '#0066CC',  # 40 mm - s√∂t√©t k√©k
            '#004499',  # 50 mm - nagyon s√∂t√©t k√©k
            '#002266',  # 80 mm - s√∂t√©tbord√≥
            '#001133'   # 100+ mm - fekete-k√©k
        ]
        
        cmap = mcolors.ListedColormap(precipitation_colors)
        norm = mcolors.BoundaryNorm(precipitation_levels, len(precipitation_colors))
        return cmap, norm
    
    @staticmethod
    def get_wind_colormap():
        """
        üí® BEAUFORT-ALAP√ö Magyar meteorol√≥giai sz√©l sz√≠nsk√°la - 13 FOKOZAT!
        
        üåà PROGRESSZ√çV SZ√çN√ÅTMENET:
        Feh√©r ‚Üí Vil√°gosk√©k ‚Üí Z√∂ld ‚Üí S√°rga ‚Üí Narancs ‚Üí Piros ‚Üí B√≠bor ‚Üí Ibolya
        
        üéØ H√ÅROM LOGIKUS Z√ìNA:
        ‚Ä¢ Alapfok (0-5): Feh√©r ‚Üí K√©k ‚Üí Z√∂ld (nyugodt szelek)
        ‚Ä¢ Els≈ëfok (6-7): S√°rga ‚Üí Narancs (figyelmeztet≈ë)  
        ‚Ä¢ M√°sodfok (8-12): Piros ‚Üí B√≠bor ‚Üí Ibolya (vesz√©ly)
        
        üìä BEAUFORT STANDARD:
        ‚Ä¢ 13 fokozat (0-12) 
        ‚Ä¢ Hivatalos km/h hat√°rok
        ‚Ä¢ Meteorol√≥giai szakmai megfelel√©s
        """
        
        # üéØ BEAUFORT SZINT≈∞ HAT√ÅROK (km/h) - 13 FOKOZAT
        beaufort_levels = [
            0,    # 0: Sz√©lcsend
            1,    # 1: Gyenge szell≈ë
            6,    # 2: Enyhe sz√©l  
            11,   # 3: Gyenge sz√©l
            19,   # 4: M√©rs√©kelt sz√©l
            29,   # 5: √âl√©nk sz√©l
            39,   # 6: Er≈ës sz√©l
            49,   # 7: Viharos sz√©l
            60,   # 8: √âl√©nk viharos sz√©l
            72,   # 9: Heves vihar
            85,   # 10: D√ºh√∂ng≈ë vihar
            100,  # 11: Heves sz√©lv√©sz
            115,  # 12: Ork√°n
            150   # 12+: Szuper ork√°n (colorbar hat√°rhoz)
        ]
        
        # üåà BEAUFORT PROGRESSZ√çV SZ√çNPALETTA - INTUIT√çV √ÅTMENET
        beaufort_colors = [
            # === ALAPFOK Z√ìNA (0-5): NYUGODT SZ√çNEK ===
            '#FFFFFF',  # 0: Sz√©lcsend - Tiszta feh√©r
            '#F0F8FF',  # 1: Gyenge szell≈ë - Alice blue (nagyon halv√°ny k√©k)
            '#E6F3FF',  # 2: Enyhe sz√©l - Vil√°gos √©gk√©k
            '#CCE7FF',  # 3: Gyenge sz√©l - Vil√°gosabb k√©k
            '#90EE90',  # 4: M√©rs√©kelt sz√©l - Vil√°gos z√∂ld (term√©szet)
            '#32CD32',  # 5: √âl√©nk sz√©l - Lime z√∂ld (akt√≠v, de biztons√°gos)
            
            # === ELS≈êFOK Z√ìNA (6-7): FIGYELMEZTET≈ê SZ√çNEK ===
            '#FFD700',  # 6: Er≈ës sz√©l - Arany s√°rga (FIGYELEM!)
            '#FFA500',  # 7: Viharos sz√©l - Narancs (FOKOZOTT FIGYELEM!)
            
            # === M√ÅSODFOK Z√ìNA (8-12): VESZ√âLY SZ√çNEK ===
            '#FF6347',  # 8: √âl√©nk viharos - Paradicsom piros (VESZ√âLY!)
            '#FF4500',  # 9: Heves vihar - Narancs-piros (NAGY VESZ√âLY!)
            '#DC143C',  # 10: D√ºh√∂ng≈ë vihar - Crimson piros (SZ√âLS≈êS√âGES!)
            '#8B008B',  # 11: Heves sz√©lv√©sz - S√∂t√©t magenta (KRITIKUS!)
            '#4B0082'   # 12: Ork√°n - Indigo ibolya (KATASZTROF√ÅLIS!)
        ]
        
        # üé® MATPLOTLIB COLORMAP OBJEKTUMOK
        cmap = mcolors.ListedColormap(beaufort_colors)
        norm = mcolors.BoundaryNorm(beaufort_levels, len(beaufort_colors))
        
        return cmap, norm


# üîß NONE-SAFE HELPER F√úGGV√âNYEK
def safe_max(data_list: List[Union[float, int, None]]) -> Optional[float]:
    """None-safe maximum √©rt√©k sz√°m√≠t√°s"""
    if not data_list:
        return None
    clean_data = [x for x in data_list if x is not None]
    return max(clean_data) if clean_data else None


def safe_min(data_list: List[Union[float, int, None]]) -> Optional[float]:
    """None-safe minimum √©rt√©k sz√°m√≠t√°s"""
    if not data_list:
        return None
    clean_data = [x for x in data_list if x is not None]
    return min(clean_data) if clean_data else None


def safe_avg(data_list: List[Union[float, int, None]]) -> Optional[float]:
    """None-safe √°tlag sz√°m√≠t√°s"""
    if not data_list:
        return None
    clean_data = [x for x in data_list if x is not None]
    return sum(clean_data) / len(clean_data) if clean_data else None


def safe_sum(data_list: List[Union[float, int, None]]) -> float:
    """None-safe √∂sszeg sz√°m√≠t√°s"""
    if not data_list:
        return 0.0
    clean_data = [x for x in data_list if x is not None]
    return sum(clean_data) if clean_data else 0.0


def safe_count(data_list: List[Union[float, int, None]], condition_func) -> int:
    """None-safe felt√©teles sz√°mol√°s"""
    if not data_list:
        return 0
    clean_data = [x for x in data_list if x is not None]
    return sum(1 for x in clean_data if condition_func(x))


# Rekord k√°rty√°k (v√°ltozatlanok)
class RecordCard(QWidget):
    """üèÜ Kompakt rekord k√°rtya widget - TAB LAYOUT-hoz optimaliz√°lt"""
    
    def __init__(self, icon: str, title: str, value: str = "-", date: str = "-"):
        super().__init__()
        self.icon = icon
        self.title = title
        self._setup_ui()
        self.update_record(value, date)
    
    def _setup_ui(self):
        """Kompakt rekord k√°rtya UI"""
        layout = QVBoxLayout(self)
        layout.setContentsMargins(4, 4, 4, 4)
        layout.setSpacing(2)
        
        # Icon + title
        header_layout = QHBoxLayout()
        
        icon_label = QLabel(self.icon)
        icon_label.setStyleSheet("font-size: 14px;")
        header_layout.addWidget(icon_label)
        
        title_label = QLabel(self.title)
        title_label.setStyleSheet("font-size: 9px; font-weight: bold;")
        header_layout.addWidget(title_label)
        header_layout.addStretch()
        
        layout.addLayout(header_layout)
        
        # Value
        self.value_label = QLabel("-")
        self.value_label.setStyleSheet("font-size: 12px; font-weight: bold; color: #C43939;")
        self.value_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(self.value_label)
        
        # Date
        self.date_label = QLabel("-")
        self.date_label.setStyleSheet("font-size: 7px; color: gray;")
        self.date_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(self.date_label)
        
        # Kompakt styling
        self.setStyleSheet("""
            RecordCard {
                background-color: #f9fafb;
                border: 1px solid #d1d5db;
                border-radius: 3px;
                max-height: 65px;
                max-width: 200px;
            }
        """)
    
    def update_record(self, value: str, date: str):
        """Rekord √©rt√©kek friss√≠t√©se"""
        self.value_label.setText(value)
        self.date_label.setText(date)


class RecordSummaryCard(QWidget):
    """üèÜ 5 rekord kateg√≥ria - EXTRA KOMPAKT TAB LAYOUT-hoz"""
    
    def __init__(self):
        super().__init__()
        self._setup_ui()
    
    def _setup_ui(self):
        """Extra kompakt summary k√°rtya"""
        layout = QVBoxLayout(self)
        layout.setContentsMargins(6, 4, 6, 4)
        
        # C√≠m
        title_label = QLabel("üèÜ REKORD SZ√âLS≈êS√âGEK")
        title_font = QFont()
        title_font.setPointSize(11)
        title_font.setBold(True)
        title_label.setFont(title_font)
        title_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(title_label)
        
        # 5 rekord k√°rtya - EXTRA KOMPAKT
        cards_layout = QHBoxLayout()
        cards_layout.setSpacing(3)
        
        self.hottest_card = RecordCard("üî•", "Legmelegebb")
        self.coldest_card = RecordCard("üßä", "Leghidegebb")
        self.wettest_card = RecordCard("üåßÔ∏è", "Legcsapad√©k")
        self.driest_card = RecordCard("üèúÔ∏è", "Legsz√°raz")
        self.windiest_card = RecordCard("üí®", "Legszelesebb")
        
        cards_layout.addWidget(self.hottest_card)
        cards_layout.addWidget(self.coldest_card)
        cards_layout.addWidget(self.wettest_card)
        cards_layout.addWidget(self.driest_card)
        cards_layout.addWidget(self.windiest_card)
        
        layout.addLayout(cards_layout)
        
        # Extra kompakt styling
        self.setStyleSheet("""
            RecordSummaryCard {
                background-color: white;
                border: 2px solid #C43939;
                border-radius: 4px;
                margin: 2px;
                max-height: 90px;
            }
        """)
    
    def update_records(self, records: Dict[str, Dict[str, str]]):
        """Rekordok friss√≠t√©se"""
        if 'hottest' in records:
            rec = records['hottest']
            self.hottest_card.update_record(rec.get('value', '-'), rec.get('date', '-'))
        
        if 'coldest' in records:
            rec = records['coldest']
            self.coldest_card.update_record(rec.get('value', '-'), rec.get('date', '-'))
        
        if 'wettest' in records:
            rec = records['wettest']
            self.wettest_card.update_record(rec.get('value', '-'), rec.get('date', '-'))
        
        if 'driest' in records:
            rec = records['driest']
            self.driest_card.update_record(rec.get('value', '-'), rec.get('date', '-'))
        
        if 'windiest' in records:
            rec = records['windiest']
            self.windiest_card.update_record(rec.get('value', '-'), rec.get('date', '-'))


# üå°Ô∏è KONSTANS HEATMAP TAB WIDGET-EK

class TemperatureTabWidget(QWidget):
    """üå°Ô∏è H≈ëm√©rs√©klet tab - KONSTANS HEATMAP (RdYlBu_r)"""
    
    def __init__(self):
        super().__init__()
        
        # HEATMAP CHART
        self.temp_heatmap = HeatmapCalendarChart()
        self.temp_heatmap.figure.set_size_inches(20, 10)  # EXTRA NAGY M√âRET
        self.temp_heatmap.parameter = "temperature_2m_mean"
        self.temp_heatmap.chart_title = "üå°Ô∏è Konstans H≈ëm√©rs√©klet Heatmap"
        
        self._setup_ui()
        logger.info("TemperatureTabWidget inicializ√°lva - KONSTANS HEATMAP (365 t√©glalap)")
    
    def _setup_ui(self):
        """H≈ëm√©rs√©klet konstans heatmap tab UI"""
        layout = QVBoxLayout(self)
        layout.setContentsMargins(4, 4, 4, 4)
        
        # Heatmap be√°gyaz√°sa
        layout.addWidget(self.temp_heatmap)
    
    def update_data(self, data: Dict[str, Any]):
        """üéØ H≈ëm√©rs√©klet konstans heatmap friss√≠t√©s"""
        try:
            # ‚úÖ DIREKT ADAT√ÅTAD√ÅS - aggreg√°ci√≥ a heatmap chart-ban t√∂rt√©nik
            self.temp_heatmap.update_data(data)
            
            logger.info("üå°Ô∏è H≈ëm√©rs√©klet KONSTANS HEATMAP tab friss√≠tve")
            
        except Exception as e:
            logger.error(f"TemperatureTabWidget KONSTANS HEATMAP friss√≠t√©si hiba: {e}")


class PrecipitationTabWidget(QWidget):
    """üåßÔ∏è Csapad√©k tab - KONSTANS HEATMAP (meteorol√≥giai sz√≠nsk√°la)"""
    
    def __init__(self):
        super().__init__()
        
        # HEATMAP CHART - CSAPAD√âK VERZI√ì
        self.precip_heatmap = HeatmapCalendarChart()
        self.precip_heatmap.figure.set_size_inches(20, 10)  # EXTRA NAGY M√âRET
        self.precip_heatmap.parameter = "precipitation_sum"
        self.precip_heatmap.chart_title = "üåßÔ∏è Konstans Csapad√©k Heatmap"
        
        # üé® METEOROL√ìGIAI CSAPAD√âK SZ√çNSK√ÅLA
        self.precip_cmap, self.precip_norm = MeteorologicalColorMaps.get_precipitation_colormap()
        
        self._setup_ui()
        logger.info("PrecipitationTabWidget inicializ√°lva - KONSTANS HEATMAP (365 t√©glalap, 0mm=feh√©r)")
    
    def _setup_ui(self):
        """Csapad√©k konstans heatmap tab UI"""
        layout = QVBoxLayout(self)
        layout.setContentsMargins(4, 4, 4, 4)
        
        # Heatmap be√°gyaz√°sa
        layout.addWidget(self.precip_heatmap)
    
    def update_data(self, data: Dict[str, Any]):
        """üéØ Csapad√©k konstans heatmap friss√≠t√©s - MINDEN T√âGLALAP KIT√ñLTVE"""
        try:
            # üé® METEOROL√ìGIAI SZ√çNSK√ÅLA BE√ÅLL√çT√ÅSA
            self.precip_heatmap._custom_cmap = self.precip_cmap
            self.precip_heatmap._custom_norm = self.precip_norm
            logger.debug(f"üé® Csapad√©k custom colormap be√°ll√≠tva: {type(self.precip_cmap)}")
            
            # ‚úÖ DIREKT ADAT√ÅTAD√ÅS - aggreg√°ci√≥ a heatmap chart-ban t√∂rt√©nik
            self.precip_heatmap.update_data(data)
            
            logger.info("üåßÔ∏è Csapad√©k KONSTANS HEATMAP tab friss√≠tve (0mm=feh√©r)")
            
        except Exception as e:
            logger.error(f"PrecipitationTabWidget KONSTANS HEATMAP friss√≠t√©si hiba: {e}")


class WindTabWidget(QWidget):
    """üí® Sz√©l tab - KONSTANS HEATMAP (BEAUFORT-alap√∫ 13 fokozat progressz√≠v sz√≠nsk√°la) - √ÅTLAGOS MAX SZ√âL"""
    
    def __init__(self):
        super().__init__()
        
        # HEATMAP CHART - SZ√âL VERZI√ì (√ÅTLAGOS MAX)
        self.wind_heatmap = HeatmapCalendarChart()
        self.wind_heatmap.figure.set_size_inches(20, 10)  # EXTRA NAGY M√âRET
        self.wind_heatmap.parameter = "windspeed_10m_max"  # √ÅTLAGOS MAX SZ√âL
        self.wind_heatmap.chart_title = "üí® Konstans Sz√©l Heatmap (windspeed_10m_max)"
        
        # üé® BEAUFORT-ALAP√ö 13 FOKOZAT SZ√âL SZ√çNSK√ÅLA
        self.wind_cmap, self.wind_norm = MeteorologicalColorMaps.get_wind_colormap()
        
        self._setup_ui()
        logger.info("WindTabWidget inicializ√°lva - KONSTANS HEATMAP (365 t√©glalap, BEAUFORT 13 fokozat, √°tlagos max sz√©l)")
    
    def _setup_ui(self):
        """Sz√©l konstans heatmap tab UI"""
        layout = QVBoxLayout(self)
        layout.setContentsMargins(4, 4, 4, 4)
        
        # Heatmap be√°gyaz√°sa
        layout.addWidget(self.wind_heatmap)
    
    def update_data(self, data: Dict[str, Any]):
        """üéØ Sz√©l konstans heatmap friss√≠t√©s - BEAUFORT PROGRESSZ√çV SZ√çNSK√ÅLA (√ÅTLAGOS MAX)"""
        try:
            # üîç DEBUG - Sz√©l adatok ellen≈ërz√©se
            daily_data = data.get('daily', {})
            print("üîç DEBUG SZ√âL TAB - El√©rhet≈ë daily adatok:", list(daily_data.keys()))
            print("üîç windspeed_10m_max el√©rhet≈ë:", 'windspeed_10m_max' in daily_data)
            print("üîç wind_gusts_max el√©rhet≈ë:", 'wind_gusts_max' in daily_data)
            
            if 'windspeed_10m_max' in daily_data:
                windspeed_data = daily_data['windspeed_10m_max']
                print(f"üîç windspeed_10m_max minta: {windspeed_data[:5] if windspeed_data else '√úRES'}")
            
            if 'wind_gusts_max' in daily_data:
                windgusts_data = daily_data['wind_gusts_max'] 
                print(f"üîç wind_gusts_max minta: {windgusts_data[:5] if windgusts_data else '√úRES'}")
            
            # Sz√©l param√©ter - VAL√ìS API N√âV (debug szerint)
            wind_param = 'windspeed_10m_max'  # ‚úÖ VAL√ìS API N√âV
            
            if not daily_data.get(wind_param):
                logger.warning("Nincs el√©rhet≈ë windspeed_10m_max adat")
                return
            
            # üé® BEAUFORT-ALAP√ö 13 FOKOZAT SZ√çNSK√ÅLA BE√ÅLL√çT√ÅSA
            self.wind_heatmap._custom_cmap = self.wind_cmap
            self.wind_heatmap._custom_norm = self.wind_norm
            self.wind_heatmap.parameter = wind_param
            logger.debug(f"üé® Sz√©l BEAUFORT colormap be√°ll√≠tva: {type(self.wind_cmap)}, param: {wind_param}")
            
            # ‚úÖ DIREKT ADAT√ÅTAD√ÅS - aggreg√°ci√≥ a heatmap chart-ban t√∂rt√©nik
            self.wind_heatmap.update_data(data)
            
            logger.info("üí® Sz√©l KONSTANS HEATMAP tab friss√≠tve (BEAUFORT 13 fokozat, √°tlagos max)")
            
        except Exception as e:
            logger.error(f"WindTabWidget KONSTANS HEATMAP friss√≠t√©si hiba: {e}")


class WindGustTabWidget(QWidget):
    """üå™Ô∏è Max Sz√©ll√∂k√©s tab - KONSTANS HEATMAP (BEAUFORT-alap√∫ 13 fokozat progressz√≠v sz√≠nsk√°la) - SZ√âLL√ñK√âSEK"""
    
    def __init__(self):
        super().__init__()
        
        # HEATMAP CHART - SZ√âLL√ñK√âS VERZI√ì (MAX GUSTS)
        self.windgust_heatmap = HeatmapCalendarChart()
        self.windgust_heatmap.figure.set_size_inches(20, 10)  # EXTRA NAGY M√âRET
        self.windgust_heatmap.parameter = "wind_gusts_max"  # ‚úÖ VAL√ìS API N√âV (debug szerint)  # MAX SZ√âLL√ñK√âSEK
        self.windgust_heatmap.chart_title = "üå™Ô∏è Konstans Max Sz√©ll√∂k√©s Heatmap (wind_gusts_max)"
        
        # üé® BEAUFORT-ALAP√ö 13 FOKOZAT SZ√âL SZ√çNSK√ÅLA (UGYANAZ, MINT A SZ√âL TAB)
        self.windgust_cmap, self.windgust_norm = MeteorologicalColorMaps.get_wind_colormap()
        
        self._setup_ui()
        logger.info("WindGustTabWidget inicializ√°lva - KONSTANS HEATMAP (365 t√©glalap, BEAUFORT 13 fokozat, max sz√©ll√∂k√©sek)")
    
    def _setup_ui(self):
        """Max sz√©ll√∂k√©s konstans heatmap tab UI"""
        layout = QVBoxLayout(self)
        layout.setContentsMargins(4, 4, 4, 4)
        
        # Heatmap be√°gyaz√°sa
        layout.addWidget(self.windgust_heatmap)
    
    def update_data(self, data: Dict[str, Any]):
        """üéØ Max sz√©ll√∂k√©s konstans heatmap friss√≠t√©s - BEAUFORT PROGRESSZ√çV SZ√çNSK√ÅLA (SZ√âLL√ñK√âSEK)"""
        try:
            # üîç DEBUG - Sz√©ll√∂k√©s adatok ellen≈ërz√©se
            daily_data = data.get('daily', {})
            print("üîç DEBUG MAX SZ√âLL√ñK√âS TAB - El√©rhet≈ë daily adatok:", list(daily_data.keys()))
            print("üîç windspeed_10m_max el√©rhet≈ë:", 'windspeed_10m_max' in daily_data)
            print("üîç wind_gusts_max el√©rhet≈ë:", 'wind_gusts_max' in daily_data)
            
            if 'windspeed_10m_max' in daily_data:
                windspeed_data = daily_data['windspeed_10m_max']
                print(f"üîç windspeed_10m_max minta: {windspeed_data[:5] if windspeed_data else '√úRES'}")
            
            if 'wind_gusts_max' in daily_data:
                windgusts_data = daily_data['wind_gusts_max'] 
                print(f"üîç wind_gusts_max minta: {windgusts_data[:5] if windgusts_data else '√úRES'}")
            
            # Sz√©ll√∂k√©s param√©ter - VAL√ìS API N√âV (debug szerint)
            windgust_param = 'wind_gusts_max'  # ‚úÖ VAL√ìS API N√âV (nincs 10m!)
            
            if not daily_data.get(windgust_param):
                logger.warning("Nincs el√©rhet≈ë wind_gusts_max adat")
                return
            
            # üé® BEAUFORT-ALAP√ö 13 FOKOZAT SZ√çNSK√ÅLA BE√ÅLL√çT√ÅSA
            self.windgust_heatmap._custom_cmap = self.windgust_cmap
            self.windgust_heatmap._custom_norm = self.windgust_norm
            self.windgust_heatmap.parameter = windgust_param
            logger.debug(f"üé® Sz√©ll√∂k√©s BEAUFORT colormap be√°ll√≠tva: {type(self.windgust_cmap)}, param: {windgust_param}")
            
            # ‚úÖ DIREKT ADAT√ÅTAD√ÅS - aggreg√°ci√≥ a heatmap chart-ban t√∂rt√©nik
            self.windgust_heatmap.update_data(data)
            
            logger.info("üå™Ô∏è Max Sz√©ll√∂k√©s KONSTANS HEATMAP tab friss√≠tve (BEAUFORT 13 fokozat)")
            
        except Exception as e:
            logger.error(f"WindGustTabWidget KONSTANS HEATMAP friss√≠t√©si hiba: {e}")


class ClimateTabWidget(QTabWidget):
    """üå°Ô∏è Kl√≠makutat√≥ tab widget - 4 KONSTANS HEATMAP TAB + 2 DEDICATED WIND CHART - BEAUFORT + MAX SZ√âLL√ñK√âS VERZI√ì"""
    
    def __init__(self):
        super().__init__()
        
        # Tab widget-ek l√©trehoz√°sa - KONSTANS HEATMAP VERZI√ìK
        self.temp_tab = TemperatureTabWidget()      # üå°Ô∏è H≈ëm√©rs√©klet KONSTANS HEATMAP
        self.precip_tab = PrecipitationTabWidget()  # üåßÔ∏è Csapad√©k KONSTANS HEATMAP  
        self.wind_tab = WindTabWidget()             # üí® Sz√©l KONSTANS HEATMAP (BEAUFORT, √°tlagos max)
        self.windgust_tab = WindGustTabWidget()     # üå™Ô∏è Max Sz√©ll√∂k√©s KONSTANS HEATMAP (BEAUFORT, gusts)
        
        # üå™Ô∏è DEDICATED WIND CHARTOK HOZZ√ÅAD√ÅSA
        self.dedicated_wind_chart = WindChart()     # üå™Ô∏è WindChart dedicated
        self.dedicated_windrose_chart = WindRoseChart()  # üåπ WindRoseChart dedicated
        
        self._setup_tabs()
        
        # Lazy loading tracking
        self.data_cache = None
        self.tabs_initialized = {'temp': False, 'precip': False, 'wind': False, 'windgust': False, 'wind_chart': False, 'windrose_chart': False}
        
        # Tab v√°ltoz√°s figyel√©se
        self.currentChanged.connect(self._on_tab_changed)
        
        logger.info("ClimateTabWidget inicializ√°lva - 4 KONSTANS HEATMAP TAB + 2 DEDICATED WIND CHART (365 t√©glalap, BEAUFORT sz√©l + max sz√©ll√∂k√©s)")
    
    def _setup_tabs(self):
        """Tab-ok be√°ll√≠t√°sa - KONSTANS HEATMAP-EK + MAX SZ√âLL√ñK√âS + DEDICATED WIND CHARTOK"""
        # Tab-ok hozz√°ad√°sa
        self.addTab(self.temp_tab, "üå°Ô∏è H≈ëm√©rs√©klet")         # KONSTANS HEATMAP
        self.addTab(self.precip_tab, "üåßÔ∏è Csapad√©k")           # KONSTANS HEATMAP (0mm=feh√©r)
        self.addTab(self.wind_tab, "üí® Sz√©l")                 # KONSTANS HEATMAP (BEAUFORT, √°tlagos max)
        self.addTab(self.windgust_tab, "üå™Ô∏è Max Sz√©ll√∂k√©s")   # KONSTANS HEATMAP (BEAUFORT, max gusts)
        
        # üå™Ô∏è DEDICATED WIND CHARTOK HOZZ√ÅAD√ÅSA
        self.addTab(self.dedicated_wind_chart, "üå™Ô∏è Sz√©ll√∂k√©sek")  # DEDICATED WindChart
        self.addTab(self.dedicated_windrose_chart, "üåπ Sz√©ll√∂k√©s R√≥zsa")  # DEDICATED WindRoseChart
        
        # Tab styling
        self.setStyleSheet("""
            QTabWidget::pane {
                border: 1px solid #d1d5db;
                border-radius: 4px;
                background-color: white;
            }
            QTabBar::tab {
                background-color: #f9fafb;
                border: 1px solid #d1d5db;
                border-bottom-color: transparent;
                border-top-left-radius: 4px;
                border-top-right-radius: 4px;
                padding: 6px 12px;
                margin-right: 2px;
                font-weight: 500;
            }
            QTabBar::tab:selected {
                background-color: #C43939;
                color: white;
            }
            QTabBar::tab:hover {
                background-color: #f3f4f6;
            }
        """)
    
    def update_data(self, data: Dict[str, Any]):
        """üéØ KONSTANS HEATMAP + DEDICATED WIND CHARTOK Tab widget adatok friss√≠t√©se - BEAUFORT + MAX SZ√âLL√ñK√âS VERZI√ì"""
        try:
            # Adatok cache-el√©se
            self.data_cache = data
            
            # Akt√≠v tab friss√≠t√©se
            current_index = self.currentIndex()
            self._update_current_tab(current_index)
            
            # üå™Ô∏è KRITIKUS JAV√çT√ÅS: DEDICATED WIND CHARTOK MINDIG FRISS√çT√âSE
            print("üå™Ô∏è DEBUG [ClimateTabWidget]: DEDICATED WIND CHARTOK friss√≠t√©se...")
            
            try:
                self.dedicated_wind_chart.update_data(data)
                print("‚úÖ DEBUG [ClimateTabWidget]: dedicated_wind_chart friss√≠tve!")
            except Exception as e:
                print(f"‚ùå ERROR [ClimateTabWidget]: dedicated_wind_chart hiba: {e}")
            
            try:
                self.dedicated_windrose_chart.update_data(data)
                print("‚úÖ DEBUG [ClimateTabWidget]: dedicated_windrose_chart friss√≠tve!")
            except Exception as e:
                print(f"‚ùå ERROR [ClimateTabWidget]: dedicated_windrose_chart hiba: {e}")
            
            # Teljes napok sz√°m√°nak logol√°sa
            daily_data = data.get('daily', {})
            dates = daily_data.get('time', [])
            total_days = len(dates)
            
            logger.info(f"üéØ ClimateTabWidget friss√≠tve - {total_days} nap ‚Üí 365 t√©glalap/tab (BEAUFORT sz√©l + max sz√©ll√∂k√©s)")
            
        except Exception as e:
            logger.error(f"ClimateTabWidget friss√≠t√©si hiba: {e}")
    
    def _on_tab_changed(self, index: int):
        """Tab v√°lt√°s kezel≈ëje - lazy loading"""
        logger.info(f"Tab v√°lt√°s: {index}")
        self._update_current_tab(index)
    
    def _update_current_tab(self, index: int):
        """Akt√≠v tab friss√≠t√©se - KONSTANS HEATMAP VERZI√ìK + MAX SZ√âLL√ñK√âS + DEDICATED WIND CHARTOK"""
        if not self.data_cache:
            return
        
        try:
            if index == 0:  # H≈ëm√©rs√©klet tab (konstans heatmap)
                self.temp_tab.update_data(self.data_cache)
                self.tabs_initialized['temp'] = True
            elif index == 1:  # Csapad√©k tab (konstans heatmap, 0mm=feh√©r)
                self.precip_tab.update_data(self.data_cache)
                self.tabs_initialized['precip'] = True
            elif index == 2:  # Sz√©l tab (konstans heatmap, BEAUFORT, √°tlagos max)
                self.wind_tab.update_data(self.data_cache)
                self.tabs_initialized['wind'] = True
            elif index == 3:  # Max Sz√©ll√∂k√©s tab (konstans heatmap, BEAUFORT, max gusts)
                self.windgust_tab.update_data(self.data_cache)
                self.tabs_initialized['windgust'] = True
            elif index == 4:  # üå™Ô∏è DEDICATED WindChart tab
                self.dedicated_wind_chart.update_data(self.data_cache)
                self.tabs_initialized['wind_chart'] = True
                print("‚úÖ DEBUG [_update_current_tab]: DEDICATED WindChart tab akt√≠v√°lt √©s friss√≠tve!")
            elif index == 5:  # üåπ DEDICATED WindRoseChart tab
                self.dedicated_windrose_chart.update_data(self.data_cache)
                self.tabs_initialized['windrose_chart'] = True
                print("‚úÖ DEBUG [_update_current_tab]: DEDICATED WindRoseChart tab akt√≠v√°lt √©s friss√≠tve!")
                
        except Exception as e:
            logger.error(f"Tab {index} friss√≠t√©si hiba: {e}")


class AnalyticsView(QWidget):
    """
    üéØ REFAKTOR√ÅLT KONSTANS HEATMAP Analytics View - K√ñZPONTI SIGNAL RENDSZERREL + DEDICATED WIND CHARTOK
    
    ‚úÖ REFAKTOR√ÅLT M≈∞K√ñD√âS:
    - A n√©zet most m√°r nem ind√≠t saj√°t lek√©rdez√©seket.
    - A gombok egy k√∂zponti `multi_city_query_requested` signalt bocs√°tanak ki.
    - A MainWindow kezeli a lek√©rdez√©st √©s az eredm√©nyt egy publikus slot-on
      (`update_with_multi_city_result`) kereszt√ºl k√ºldi vissza.
    - Ezzel a n√©zet teljesen szinkronban van a t√∂bbi modullal (T√©rk√©p, ControlPanel).
    
    FELEL≈êSS√âG: 
    - üå°Ô∏è H≈ëm√©rs√©klet tab: KONSTANS HEATMAP (RdYlBu_r, 365 t√©glalap, r√°cs vonalak)
    - üåßÔ∏è Csapad√©k tab: KONSTANS HEATMAP (meteorol√≥giai, 0mm=feh√©r, 365 t√©glalap, r√°cs vonalak)
    - üí® Sz√©l tab: KONSTANS HEATMAP (BEAUFORT 13 fokozat, √°tlagos max sz√©l, 365 t√©glalap, r√°cs vonalak)
    - üå™Ô∏è Max Sz√©ll√∂k√©s tab: KONSTANS HEATMAP (BEAUFORT 13 fokozat, max gusts, 365 t√©glalap, r√°cs vonalak)
    - üå™Ô∏è Sz√©ll√∂k√©sek tab: DEDICATED WindChart professzion√°lis sz√©l grafikonokkal
    - üåπ Sz√©ll√∂k√©s R√≥zsa tab: DEDICATED WindRoseChart pol√°r r√≥zsadiagrammal
    - üèÜ 5 rekord kateg√≥ria (napi szinten) kompakt megjelen√≠t√©ssel
    - üîß KONSTANS VIZU√ÅLIS FELBONT√ÅS - f√ºggetlen√ºl az id≈ëszakt√≥l
    - üéØ INTELLIGENS TENGELYEK - id≈ëszak alap√∫ c√≠mk√©k
    - üìä KOMPAKT K√ÅRTY√ÅS STATISZTIK√ÅK - 12px olvashat√≥ bet≈±m√©ret
    - üöÄ MULTI-CITY R√âGI√ì ELEMZ√âS - √âszak-Magyarorsz√°g, Pest, stb. elemz√©sek
    - üî• SIGNAL EMISSION JAV√çT√ÅS - multi_city_query_requested signal kibocs√°t√°s MainWindow fel√©
    - üö® STATISZTIK√ÅK JAV√çT√ÅS - _process_and_display_statistics() MEGH√çV√ÅS BIZTOS√çTVA
    - üå™Ô∏è V√âGS≈ê JAV√çT√ÅS: DEDICATED WindChart √©s WindRoseChart komponensek integr√°l√°sa
    """
    
    # Signalok
    analysis_started = Signal()
    analysis_completed = Signal()
    error_occurred = Signal(str)
    
    # üöÄ √öJ: Signal a lek√©rdez√©s ind√≠t√°s√°hoz a MainWindow fel√©
    multi_city_query_requested = Signal(str, str)  # query_type, region_name
    
    def __init__(self, parent=None):
        super().__init__(parent)
        
        # T√©ma kezel≈ë
        self.theme_manager = get_theme_manager()
        
        # Adatok t√°rol√°sa
        self.current_data = None
        self.current_location = None
        
        # UI elemek
        self.location_info_label = None
        self.statistics_area = None
        self.record_summary = None
        self.climate_tabs = None
        self.status_label = None
        
        # üöÄ MULTI-CITY KOMPONENSEK (refaktor√°lt)
        self.region_combo = None
        self.analysis_buttons = []
        
        # UI √©p√≠t√©se
        self._setup_ui()
        self._setup_theme()
        
        logger.info("üóÇÔ∏è AnalyticsView REFAKTOR√ÅLT KONSTANS HEATMAP BEAUFORT + MAX SZ√âLL√ñK√âS + MULTI-CITY R√âGI√ì + DEDICATED WIND CHARTOK VERZI√ì bet√∂ltve - 6 tab + r√©gi√≥ elemz√©s + STATISZTIK√ÅK JAV√çT√ÅS")
    
    def _setup_ui(self) -> None:
        """UI fel√©p√≠t√©se - konstans heatmap dashboard + refaktor√°lt multi-city + dedicated wind chartok"""
        layout = QVBoxLayout(self)
        layout.setContentsMargins(4, 4, 4, 4)
        layout.setSpacing(4)
        
        # Fejl√©c
        header_layout = self._create_header()
        layout.addLayout(header_layout)
        
        # Lok√°ci√≥ inform√°ci√≥ (kompakt)
        location_group = self._create_location_info_group()
        layout.addWidget(location_group)
        
        # F≈ë tartalom splitter
        content_splitter = QSplitter(Qt.Horizontal)
        
        # Bal oldal: statisztik√°k + refaktor√°lt multi-city (kompakt)
        stats_widget = self._create_statistics_panel()
        content_splitter.addWidget(stats_widget)
        
        # Jobb oldal: Tab-os kl√≠makutat√≥ dashboard + DEDICATED WIND CHARTOK
        tab_widget = self._create_tab_dashboard()
        content_splitter.addWidget(tab_widget)
        
        # Splitter ar√°nyok - tab dashboard domin√°l
        content_splitter.setSizes([180, 920])  # M√©g t√∂bb hely a tab-oknak
        layout.addWidget(content_splitter)
        
        # √Ållapot s√°v
        self.status_label = QLabel("V√°lasszon lok√°ci√≥t a bal oldali panelen vagy haszn√°lja a R√©gi√≥ Elemz√©st")
        self.status_label.setStyleSheet("color: gray; padding: 2px; font-size: 9px;")
        layout.addWidget(self.status_label)
    
    def _create_header(self) -> QHBoxLayout:
        """Fejl√©c l√©trehoz√°sa"""
        layout = QHBoxLayout()
        
        # C√≠m
        title_label = QLabel("üéØ Konstans Heatmap Kl√≠makutat√≥ Dashboard + R√©gi√≥ Elemz√©s + DEDICATED Wind Chartok")
        title_font = QFont()
        title_font.setPointSize(14)
        title_font.setBold(True)
        title_label.setFont(title_font)
        layout.addWidget(title_label)
        
        layout.addStretch()
        
        # Verzi√≥ info
        version_label = QLabel("v14.0 - DEDICATED WIND CHARTOK")
        version_label.setStyleSheet("color: gray; font-size: 8px;")
        layout.addWidget(version_label)
        
        return layout
    
    def _create_location_info_group(self) -> QGroupBox:
        """Lok√°ci√≥ inform√°ci√≥s panel - EXTRA KOMPAKT"""
        group = QGroupBox("üìç Lok√°ci√≥")
        layout = QVBoxLayout(group)
        layout.setContentsMargins(4, 4, 4, 4)
        
        self.location_info_label = QLabel("Nincs kiv√°lasztott lok√°ci√≥")
        self.location_info_label.setStyleSheet("""
            QLabel {
                background-color: #f0f0f0;
                border: 1px solid #ccc;
                border-radius: 2px;
                padding: 4px;
                font-size: 9px;
            }
        """)
        layout.addWidget(self.location_info_label)
        
        return group
    
    def _create_statistics_panel(self) -> QWidget:
        """Statisztik√°k panel + Refaktor√°lt Multi-City - KOMPAKT K√ÅRTY√ÅS RENDSZER"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        layout.setContentsMargins(3, 3, 3, 3)
        
        # üöÄ REFAKTOR√ÅLT MULTI-CITY R√âGI√ì ELEMZ√âS PANEL
        multi_city_group = self._create_refactored_multi_city_panel()
        layout.addWidget(multi_city_group)
        
        # Statisztik√°k csoport
        stats_group = QGroupBox("üìà Statisztik√°k")
        stats_layout = QVBoxLayout(stats_group)
        
        # G√∂rget√©si ter√ºlet
        self.statistics_area = QScrollArea()
        self.statistics_area.setWidgetResizable(True)
        self.statistics_area.setMinimumHeight(150)  # Extra kompakt
        
        # Statisztik√°k tartalom
        stats_content = QLabel("T√∂ltse be az adatokat")
        stats_content.setAlignment(Qt.AlignCenter)
        stats_content.setStyleSheet("""
            QLabel {
                color: #666;
                font-style: italic;
                padding: 20px;
                font-size: 12px;
            }
        """)
        self.statistics_area.setWidget(stats_content)
        
        stats_layout.addWidget(self.statistics_area)
        layout.addWidget(stats_group)
        
        return widget
    
    def _create_refactored_multi_city_panel(self) -> QGroupBox:
        """üöÄ REFAKTOR√ÅLT Multi-City r√©gi√≥ elemz√©s panel - SIGNAL EMISSION"""
        group = QGroupBox("üåç R√âGI√ì ELEMZ√âS")
        layout = QVBoxLayout(group)
        layout.setContentsMargins(6, 6, 6, 6)
        layout.setSpacing(4)
        
        # R√©gi√≥ v√°laszt√≥
        region_layout = QVBoxLayout()
        region_label = QLabel("üìç V√°lassz r√©gi√≥t:")
        region_label.setStyleSheet("font-weight: bold; font-size: 10px;")
        region_layout.addWidget(region_label)
        
        self.region_combo = QComboBox()
        self.region_combo.addItems([
            "√âszak-Magyarorsz√°g",
            "√âszak-Alf√∂ld", 
            "D√©l-Alf√∂ld",
            "K√∂z√©p-Magyarorsz√°g", 
            "K√∂z√©p-Dun√°nt√∫l", 
            "Nyugat-Dun√°nt√∫l",
            "D√©l-Dun√°nt√∫l"
        ])
        self.region_combo.setStyleSheet("""
            QComboBox {
                padding: 3px;
                border: 1px solid #ccc;
                border-radius: 3px;
                font-size: 9px;
            }
        """)
        region_layout.addWidget(self.region_combo)
        layout.addLayout(region_layout)
        
        # Elemz√©s gombok
        buttons_layout = QVBoxLayout()
        buttons_layout.setSpacing(3)
        
        # üî• Legmelegebb ma
        self.hottest_button = QPushButton("üî• Legmelegebb ma")
        self.hottest_button.setProperty("query_type", "hottest_today")
        self.hottest_button.clicked.connect(self._emit_query_request)
        self.hottest_button.setStyleSheet("""
            QPushButton {
                background-color: #FF6B6B;
                color: white;
                border: none;
                border-radius: 4px;
                padding: 6px;
                font-weight: bold;
                font-size: 9px;
            }
            QPushButton:hover {
                background-color: #E55555;
            }
            QPushButton:pressed {
                background-color: #CC4444;
            }
        """)
        buttons_layout.addWidget(self.hottest_button)
        self.analysis_buttons.append(self.hottest_button)
        
        # ‚ùÑÔ∏è Leghidegebb ma
        self.coldest_button = QPushButton("‚ùÑÔ∏è Leghidegebb ma")
        self.coldest_button.setProperty("query_type", "coldest_today")
        self.coldest_button.clicked.connect(self._emit_query_request)
        self.coldest_button.setStyleSheet("""
            QPushButton {
                background-color: #4DABF7;
                color: white;
                border: none;
                border-radius: 4px;
                padding: 6px;
                font-weight: bold;
                font-size: 9px;
            }
            QPushButton:hover {
                background-color: #339FE6;
            }
            QPushButton:pressed {
                background-color: #2288CC;
            }
        """)
        buttons_layout.addWidget(self.coldest_button)
        self.analysis_buttons.append(self.coldest_button)
        
        # üåßÔ∏è Legcsapad√©kosabb ma
        self.wettest_button = QPushButton("üåßÔ∏è Legcsapad√©kosabb ma")
        self.wettest_button.setProperty("query_type", "wettest_today")
        self.wettest_button.clicked.connect(self._emit_query_request)
        self.wettest_button.setStyleSheet("""
            QPushButton {
                background-color: #69DB7C;
                color: white;
                border: none;
                border-radius: 4px;
                padding: 6px;
                font-weight: bold;
                font-size: 9px;
            }
            QPushButton:hover {
                background-color: #51CF66;
            }
            QPushButton:pressed {
                background-color: #40C057;
            }
        """)
        buttons_layout.addWidget(self.wettest_button)
        self.analysis_buttons.append(self.wettest_button)
        
        # üí® Legszelesebb ma
        self.windiest_button = QPushButton("üí® Legszelesebb ma")
        self.windiest_button.setProperty("query_type", "windiest_today")
        self.windiest_button.clicked.connect(self._emit_query_request)
        self.windiest_button.setStyleSheet("""
            QPushButton {
                background-color: #FFD93D;
                color: white;
                border: none;
                border-radius: 4px;
                padding: 6px;
                font-weight: bold;
                font-size: 9px;
            }
            QPushButton:hover {
                background-color: #FCC419;
            }
            QPushButton:pressed {
                background-color: #FAB005;
            }
        """)
        buttons_layout.addWidget(self.windiest_button)
        self.analysis_buttons.append(self.windiest_button)
        
        layout.addLayout(buttons_layout)
        
        # Panel styling
        group.setStyleSheet("""
            QGroupBox {
                background-color: #f8f9fa;
                border: 2px solid #C43939;
                border-radius: 6px;
                margin: 2px;
                font-weight: bold;
                font-size: 11px;
                color: #C43939;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 6px;
                padding: 0 3px 0 3px;
            }
        """)
        
        return group
    
    def _emit_query_request(self):
        """üöÄ KRITIKUS: Elk√ºldi a lek√©rdez√©si k√©r√©st a MainWindow fel√© - REFAKTOR√ÅLT SIGNAL EMISSION"""
        sender = self.sender()
        query_type = sender.property("query_type")
        region_name = self.region_combo.currentText()
        
        print(f"üöÄ ANALYTICS_VIEW: Signal 'multi_city_query_requested' emitted with: {query_type}, {region_name}")
        
        # ‚úÖ √öJ: Signal kibocs√°t√°sa a MainWindow fel√©
        self.multi_city_query_requested.emit(query_type, region_name)
        
        # UI visszajelz√©s
        self._update_status(f"üöÄ Multi-City k√©r√©s elk√ºldve: {region_name} ({query_type})")
        
        logger.info(f"üöÄ Multi-City query request emitted: {query_type} for {region_name}")
    
    def _create_tab_dashboard(self) -> QWidget:
        """Tab-os kl√≠makutat√≥ dashboard + DEDICATED WIND CHARTOK"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        layout.setContentsMargins(4, 4, 4, 4)
        layout.setSpacing(4)
        
        # Rekord summary k√°rtya (kompakt)
        self.record_summary = RecordSummaryCard()
        layout.addWidget(self.record_summary)
        
        # Climate tab widget - KONSTANS HEATMAP BEAUFORT + MAX SZ√âLL√ñK√âS + DEDICATED WIND CHARTOK VERZI√ì
        self.climate_tabs = ClimateTabWidget()
        layout.addWidget(self.climate_tabs, 1)  # Expand√°lhat√≥
        
        return widget
    
    def _setup_theme(self) -> None:
        """T√©ma be√°ll√≠t√°sa"""
        register_widget_for_theming(self, "container")
        self.theme_manager.theme_changed.connect(self._on_theme_changed)
        self._apply_current_theme()
    
    def _apply_current_theme(self) -> None:
        """Jelenlegi t√©ma alkalmaz√°sa"""
        colors = get_current_colors()
        
        self.setStyleSheet(f"""
            QWidget {{
                background-color: {colors.get('surface', '#ffffff')};
                color: {colors.get('on_surface', '#000000')};
            }}
            QGroupBox {{
                font-weight: bold;
                border: 1px solid {colors.get('border', '#ccc')};
                border-radius: 3px;
                margin-top: 6px;
                padding-top: 3px;
            }}
            QGroupBox::title {{
                subcontrol-origin: margin;
                left: 6px;
                padding: 0 3px 0 3px;
                color: {colors.get('primary', '#0066cc')};
            }}
        """)
    
    def _on_theme_changed(self, theme_name: str) -> None:
        """T√©ma v√°ltoz√°s kezel√©se"""
        self._apply_current_theme()
        logger.debug(f"Konstans heatmap dashboard t√©ma friss√≠tve: {theme_name}")
    
    # === ‚úÖ √öJ PUBLIKUS SLOT: Eredm√©nyek fogad√°sa a MainWindow-t√≥l ===
    
    def update_with_multi_city_result(self, result: 'AnalyticsResult'):
        """
        ‚úÖ √öJ: Friss√≠ti a n√©zetet a MainWindow-t√≥l kapott elemz√©si eredm√©nnyel.
        
        Args:
            result: AnalyticsResult objektum a Multi-City Engine-b≈ël
        """
        print(f"‚úÖ ANALYTICS_VIEW: Eredm√©ny fogadva a MainWindow-t√≥l: {len(result.city_results) if result and result.city_results else 0} v√°ros.")
        
        try:
            if not result or not result.city_results:
                self._update_status("‚ùå Nincs Multi-City eredm√©ny")
                return
            
            # Fake single-city data l√©trehoz√°sa a heatmap-ekhez (a megl√©v≈ë logika)
            self._create_fake_single_city_data_from_multi_city(result)
            
            # Status friss√≠t√©se
            self._update_status(f"‚úÖ Multi-City eredm√©ny feldolgozva: {len(result.city_results)} v√°ros")
            
            logger.info(f"‚úÖ Multi-City result processed in AnalyticsView: {len(result.city_results)} cities")
            
        except Exception as e:
            logger.error(f"‚ùå Multi-City result processing error: {e}")
            self._update_status(f"‚ùå Multi-City eredm√©ny feldolgoz√°si hiba: {e}")
            self.error_occurred.emit(f"Multi-City eredm√©ny hiba: {e}")
    
    def _create_fake_single_city_data_from_multi_city(self, analytics_result):
        """üéØ Fake single-city data l√©trehoz√°sa Multi-City eredm√©nyekb≈ël a heatmap megjelen√≠t√©shez"""
        try:
            # Ez egy workaround - a heatmap-ek single-city adatokat v√°rnak
            # De a Multi-City eredm√©nyeket szeretn√©nk l√°tni a tab-okban is
            
            if not analytics_result or not analytics_result.city_results:
                logger.warning("Nincs Multi-City eredm√©ny a heatmap friss√≠t√©shez")
                return
            
            # Multi-City eredm√©nyek aggreg√°l√°sa egy fake weather data-ba
            cities = analytics_result.city_results
            question = analytics_result.question
            
            # Fake daily data l√©trehoz√°sa (365 nap)
            fake_daily_data = {
                'time': [f"2024-{i//30+1:02d}-{i%30+1:02d}" for i in range(365)],
                'temperature_2m_mean': [],
                'temperature_2m_max': [],
                'temperature_2m_min': [],
                'precipitation_sum': [],
                'windspeed_10m_max': [],
                'wind_gusts_max': []
            }
            
            # Metric alap√∫ fake data gener√°l√°s
            metric_type = question.metric if question else AnalyticsMetric.TEMPERATURE_2M_MAX
            
            for i in range(365):
                # V√°rosok √©rt√©keinek √°tlaga minden napra (szimul√°ci√≥)
                if metric_type == AnalyticsMetric.TEMPERATURE_2M_MAX:
                    avg_val = sum(city.value for city in cities) / len(cities)
                    fake_daily_data['temperature_2m_max'].append(avg_val + (i % 20 - 10))  # Vari√°ci√≥
                    fake_daily_data['temperature_2m_mean'].append(avg_val - 2)
                    fake_daily_data['temperature_2m_min'].append(avg_val - 8)
                    fake_daily_data['precipitation_sum'].append(0.5)
                    fake_daily_data['windspeed_10m_max'].append(10.0)
                    fake_daily_data['wind_gusts_max'].append(15.0)
                
                elif metric_type == AnalyticsMetric.PRECIPITATION_SUM:
                    avg_val = sum(city.value for city in cities) / len(cities)
                    fake_daily_data['precipitation_sum'].append(avg_val + (i % 10))
                    fake_daily_data['temperature_2m_max'].append(20.0)
                    fake_daily_data['temperature_2m_mean'].append(15.0)
                    fake_daily_data['temperature_2m_min'].append(10.0)
                    fake_daily_data['windspeed_10m_max'].append(10.0)
                    fake_daily_data['wind_gusts_max'].append(15.0)
                
                elif metric_type == AnalyticsMetric.WINDSPEED_10M_MAX:
                    avg_val = sum(city.value for city in cities) / len(cities)
                    fake_daily_data['windspeed_10m_max'].append(avg_val + (i % 15))
                    fake_daily_data['wind_gusts_max'].append(avg_val + 5)
                    fake_daily_data['temperature_2m_max'].append(20.0)
                    fake_daily_data['temperature_2m_mean'].append(15.0)
                    fake_daily_data['temperature_2m_min'].append(10.0)
                    fake_daily_data['precipitation_sum'].append(1.0)
                
                else:
                    # Default √©rt√©kek
                    fake_daily_data['temperature_2m_max'].append(20.0)
                    fake_daily_data['temperature_2m_mean'].append(15.0)
                    fake_daily_data['temperature_2m_min'].append(10.0)
                    fake_daily_data['precipitation_sum'].append(1.0)
                    fake_daily_data['windspeed_10m_max'].append(10.0)
                    fake_daily_data['wind_gusts_max'].append(15.0)
            
            # Fake data objektum
            fake_data = {
                'daily': fake_daily_data,
                'location': {
                    'name': f"Multi-City: {analytics_result.question.question_text if analytics_result.question else 'R√©gi√≥ Elemz√©s'}",
                    'latitude': 47.5,  # Magyarorsz√°g k√∂zepe
                    'longitude': 19.0
                }
            }
            
            # Heatmap-ek friss√≠t√©se
            if self.climate_tabs:
                self.climate_tabs.update_data(fake_data)
            
            # Fake rekordok (Multi-City eredm√©nyekb≈ël)
            fake_records = self._create_fake_records_from_multi_city(analytics_result)
            if self.record_summary:
                self.record_summary.update_records(fake_records)
            
            logger.info(f"üéØ Fake single-city data l√©trehozva Multi-City eredm√©nyekb≈ël ({len(cities)} v√°ros)")
            
        except Exception as e:
            logger.error(f"‚ùå Fake data creation hiba: {e}")
    
    def _create_fake_records_from_multi_city(self, analytics_result) -> Dict[str, Dict[str, str]]:
        """üèÜ Fake rekordok l√©trehoz√°sa Multi-City eredm√©nyekb≈ël"""
        try:
            if not analytics_result.city_results:
                return {}
            
            cities = analytics_result.city_results
            records = {}
            
            # Top 3 v√°ros kiv√°laszt√°sa k√ºl√∂nb√∂z≈ë kateg√≥ri√°khoz
            if len(cities) >= 1:
                top_city = cities[0]
                records['hottest'] = {
                    'value': f"{top_city.value:.1f}¬∞C",
                    'date': top_city.date.strftime("%Y-%m-%d") if hasattr(top_city.date, 'strftime') else str(top_city.date)
                }
            
            if len(cities) >= 2:
                second_city = cities[1]
                records['windiest'] = {
                    'value': f"{second_city.value:.1f}km/h",
                    'date': second_city.date.strftime("%Y-%m-%d") if hasattr(second_city.date, 'strftime') else str(second_city.date)
                }
            
            if len(cities) >= 3:
                third_city = cities[2]
                records['wettest'] = {
                    'value': f"{third_city.value:.1f}mm",
                    'date': third_city.date.strftime("%Y-%m-%d") if hasattr(third_city.date, 'strftime') else str(third_city.date)
                }
            
            # Default √©rt√©kek
            records.setdefault('coldest', {'value': "N/A", 'date': "Multi-City"})
            records.setdefault('driest', {'value': "N/A", 'date': "Multi-City"})
            
            return records
            
        except Exception as e:
            logger.error(f"‚ùå Fake records creation hiba: {e}")
            return {}
    
    # === PUBLIKUS API MET√ìDUSOK ===
    
    def update_data(self, data: Dict[str, Any]) -> None:
        """
        üéØ KONSTANS HEATMAP + DEDICATED WIND CHARTOK adatok friss√≠t√©se - 6 TAB - BEAUFORT + MAX SZ√âLL√ñK√âS VERZI√ì
        üö® STATISZTIK√ÅK JAV√çT√ÅS - _process_and_display_statistics() MEGH√çV√ÅS BIZTOS√çTVA
        üå™Ô∏è V√âGS≈ê JAV√çT√ÅS: DEDICATED WindChart √©s WindRoseChart friss√≠t√©se
        
        Args:
            data: Id≈ëj√°r√°si adatok dictionary
        """
        try:
            logger.info("üóÇÔ∏è Konstans heatmap dashboard + DEDICATED WIND CHARTOK adatok friss√≠t√©se - BEAUFORT + MAX SZ√âLL√ñK√âS VERZI√ì")
            
            # Adatok t√°rol√°sa
            self.current_data = data
            
            # Teljes napok sz√°m√≠t√°sa
            daily_data = data.get('daily', {})
            dates = daily_data.get('time', [])
            total_days = len(dates)
            
            logger.info(f"üéØ KONSTANS AGGREG√ÅCI√ì - BEAUFORT + MAX SZ√âLL√ñK√âS:")
            logger.info(f"  üìä {total_days} nap ‚Üí 365 t√©glalap minden tab-n√°l")
            logger.info(f"  üéØ Bin m√©ret: ~{total_days // 365} nap/t√©glalap")
            logger.info(f"  üìà MINDEN t√©glalap kit√∂ltve (0 √©rt√©k = megfelel≈ë sz√≠n)")
            logger.info(f"  üé® R√°cs vonalak + intelligens tengelyek")
            logger.info(f"  üí® Sz√©l: BEAUFORT 13 fokozat (√°tlagos max)")
            logger.info(f"  üå™Ô∏è Max Sz√©ll√∂k√©s: BEAUFORT 13 fokozat (max gusts)")
            
            # üö® KRITIKUS JAV√çT√ÅS: Bal oldali statisztik√°k friss√≠t√©se - KOMPAKT K√ÅRTY√ÅS RENDSZER
            logger.info("üö® STATISZTIK√ÅK JAV√çT√ÅS: _process_and_display_statistics() megh√≠v√°sa")
            self._process_and_display_statistics(data, total_days)
            
            # Rekordok friss√≠t√©se (mindig napi szinten)
            records = self._calculate_records(data)
            self.record_summary.update_records(records)
            
            # Tab widget friss√≠t√©se (konstans heatmap verzi√≥k + DEDICATED WIND CHARTOK)
            if self.climate_tabs:
                self.climate_tabs.update_data(data)
                
                # üå™Ô∏è V√âGS≈ê KRITIKUS JAV√çT√ÅS: EXPLICIT DEDICATED WIND CHARTOK FRISS√çT√âSE
                print("üå™Ô∏è FINAL DEBUG [AnalyticsView]: EXPLICIT DEDICATED WIND CHARTOK friss√≠t√©se...")
                
                # DEDICATED WindChart explicit friss√≠t√©s
                if hasattr(self.climate_tabs, 'dedicated_wind_chart') and self.climate_tabs.dedicated_wind_chart:
                    try:
                        print("üå™Ô∏è DEBUG [AnalyticsView]: dedicated_wind_chart.update_data() EXPLICIT h√≠v√°s...")
                        self.climate_tabs.dedicated_wind_chart.update_data(data)
                        print("‚úÖ DEBUG [AnalyticsView]: dedicated_wind_chart SIKERESEN friss√≠tve!")
                    except Exception as e:
                        print(f"‚ùå ERROR [AnalyticsView]: dedicated_wind_chart hiba: {e}")
                        import traceback
                        print(f"‚ùå DEBUG [AnalyticsView]: dedicated_wind_chart traceback: {traceback.format_exc()}")
                
                # DEDICATED WindRoseChart explicit friss√≠t√©s
                if hasattr(self.climate_tabs, 'dedicated_windrose_chart') and self.climate_tabs.dedicated_windrose_chart:
                    try:
                        print("üåπ DEBUG [AnalyticsView]: dedicated_windrose_chart.update_data() EXPLICIT h√≠v√°s...")
                        self.climate_tabs.dedicated_windrose_chart.update_data(data)
                        print("‚úÖ DEBUG [AnalyticsView]: dedicated_windrose_chart SIKERESEN friss√≠tve!")
                    except Exception as e:
                        print(f"‚ùå ERROR [AnalyticsView]: dedicated_windrose_chart hiba: {e}")
                        import traceback
                        print(f"‚ùå DEBUG [AnalyticsView]: dedicated_windrose_chart traceback: {traceback.format_exc()}")
            
            # √Ållapot friss√≠t√©se
            self._update_status(f"‚úÖ {total_days} nap ‚Üí 365 t√©glalap - Beaufort + Max Sz√©ll√∂k√©s Dashboard + DEDICATED WIND CHARTOK + STATISZTIK√ÅK")
            
            # Signal
            self.analysis_completed.emit()
            
        except Exception as e:
            logger.error(f"Konstans heatmap dashboard + DEDICATED WIND CHARTOK adatfriss√≠t√©si hiba: {e}", exc_info=True)
            self.error_occurred.emit(f"Adatfriss√≠t√©si hiba: {str(e)}")
            self._update_status("‚ùå Adatfeldolgoz√°si hiba")
    
    def clear_data(self) -> None:
        """Adatok t√∂rl√©se √©s UI vissza√°ll√≠t√°sa"""
        logger.info("Konstans heatmap dashboard + DEDICATED WIND CHARTOK adatok t√∂rl√©se")
        
        self.current_data = None
        self.current_location = None
        
        # UI vissza√°ll√≠t√°sa
        self.location_info_label.setText("Nincs kiv√°lasztott lok√°ci√≥")
        
        # Statisztik√°k t√∂rl√©se
        stats_content = QLabel("T√∂ltse be az adatokat")
        stats_content.setAlignment(Qt.AlignCenter)
        stats_content.setStyleSheet("""
            QLabel {
                color: #666;
                font-style: italic;
                padding: 20px;
                font-size: 12px;
            }
        """)
        self.statistics_area.setWidget(stats_content)
        
        self._update_status("V√°lasszon lok√°ci√≥t a bal oldali panelen vagy haszn√°lja a R√©gi√≥ Elemz√©st")
    
    def on_location_changed(self, location) -> None:
        """Lok√°ci√≥ v√°ltoz√°s kezel√©se"""
        try:
            logger.info(f"Konstans heatmap dashboard lok√°ci√≥ v√°ltoz√°s: {location}")
            self.current_location = location
            
            # Lok√°ci√≥ info friss√≠t√©se
            if hasattr(location, 'display_name'):
                display_name = location.display_name
                coords = location.coordinates
            elif isinstance(location, dict):
                display_name = location.get('name', 'Ismeretlen')
                lat = location.get('latitude', 0.0)
                lon = location.get('longitude', 0.0)
                coords = (lat, lon)
            else:
                display_name = str(location)
                coords = (0.0, 0.0)
            
            if coords:
                location_text = f"üìç {display_name}\nüó∫Ô∏è [{coords[0]:.3f}, {coords[1]:.3f}]"
            else:
                location_text = f"üìç {display_name}"
            
            self.location_info_label.setText(location_text)
            self._update_status(f"Lok√°ci√≥ be√°ll√≠tva: {display_name}")
            
        except Exception as e:
            logger.error(f"Lok√°ci√≥ v√°ltoz√°s hiba: {e}")
            self.error_occurred.emit(f"Lok√°ci√≥ hiba: {str(e)}")
    
    def on_analysis_start(self) -> None:
        """Elemz√©s ind√≠t√°sa"""
        logger.info("Konstans heatmap dashboard + DEDICATED WIND CHARTOK elemz√©s ind√≠t√°sa")
        self.analysis_started.emit()
        self._update_status("‚è≥ Konstans heatmap dashboard + DEDICATED WIND CHARTOK elemz√©s folyamatban...")
    
    # === BELS≈ê MET√ìDUSOK ===
    
    def _process_and_display_statistics(self, data: Dict[str, Any], total_days: int) -> None:
        """üö® JAV√çTOTT: Statisztik√°k feldolgoz√°sa √©s megjelen√≠t√©se - KOMPAKT K√ÅRTY√ÅS RENDSZER"""
        try:
            logger.info("üö® _process_and_display_statistics() MEGH√çVVA - STATISZTIK√ÅK JAV√çT√ÅS")
            
            # Statisztikai adatok sz√°m√≠t√°sa
            stats_data = self._calculate_statistics_data(data, total_days)
            
            # Kompakt k√°rty√°s widget l√©trehoz√°sa
            stats_widget = self._create_statistics_cards_widget(stats_data)
            
            # üö® KRITIKUS: Statisztik√°k widget be√°ll√≠t√°sa a scroll area-ba
            self.statistics_area.setWidget(stats_widget)
            
            logger.info("‚úÖ Statisztik√°k sikeresen megjelen√≠tve a bal oldali panelen")
            
        except Exception as e:
            logger.error(f"Statisztika feldolgoz√°si hiba: {e}", exc_info=True)
            # Hiba eset√©n alap√©rtelmezett √ºzenet
            error_widget = QLabel(f"‚ùå Statisztika hiba: {str(e)}")
            error_widget.setAlignment(Qt.AlignCenter)
            error_widget.setStyleSheet("color: red; padding: 20px;")
            self.statistics_area.setWidget(error_widget)
    
    def _calculate_statistics_data(self, data: Dict[str, Any], total_days: int) -> Dict[str, Any]:
        """üìä STATISZTIKAI ADATOK KISZ√ÅM√çT√ÅSA - K√ÅRTY√ÅS RENDSZERHEZ"""
        try:
            daily_data = data.get('daily', {})
            dates = daily_data.get('time', [])
            
            if not daily_data or not dates:
                return {}
            
            stats = {}
            
            # === H≈êM√âRS√âKLET ADATOK ===
            temp_mean_list = daily_data.get('temperature_2m_mean', [])
            temp_max_list = daily_data.get('temperature_2m_max', [])
            temp_min_list = daily_data.get('temperature_2m_min', [])
            
            if temp_mean_list:
                stats['temp_avg'] = safe_avg(temp_mean_list)
                stats['temp_min'] = safe_min(temp_min_list) if temp_min_list else None
                stats['temp_max'] = safe_max(temp_max_list) if temp_max_list else None
                
                # Speci√°lis napok
                stats['freezing_days'] = safe_count(temp_min_list, lambda x: x < 0) if temp_min_list else 0
                stats['hot_days'] = safe_count(temp_max_list, lambda x: x > 30) if temp_max_list else 0
                
                # H≈ëm√©rs√©klet ingadoz√°s
                if temp_max_list and temp_min_list:
                    daily_ranges = []
                    for i in range(min(len(temp_max_list), len(temp_min_list))):
                        if temp_max_list[i] is not None and temp_min_list[i] is not None:
                            daily_ranges.append(temp_max_list[i] - temp_min_list[i])
                    stats['temp_range_avg'] = safe_avg(daily_ranges) if daily_ranges else None
            
            # === CSAPAD√âK ADATOK ===
            precip_list = daily_data.get('precipitation_sum', [])
            if precip_list:
                stats['precip_avg'] = safe_avg(precip_list)
                stats['precip_total'] = safe_sum(precip_list)
                stats['dry_days'] = safe_count(precip_list, lambda x: x <= 0.1)
                stats['rainy_days'] = len(precip_list) - stats['dry_days']
                stats['dry_percentage'] = (stats['dry_days'] / len(precip_list)) * 100
                stats['rainy_percentage'] = (stats['rainy_days'] / len(precip_list)) * 100
                
                # √âves csapad√©k
                years = len(set(date[:4] for date in dates))
                stats['annual_precip'] = stats['precip_total'] / years if years > 0 else stats['precip_total']
                
                # Leghosszabb sz√°raz id≈ëszak
                dry_streak = self._find_longest_dry_streak(precip_list, dates)
                stats['longest_dry_streak'] = dry_streak['days'] if dry_streak else 0
            
            # === SZ√âL ADATOK ===
            wind_list = daily_data.get('windspeed_10m_max', [])
            windgust_list = daily_data.get('wind_gusts_max', [])
            
            if wind_list:
                stats['wind_avg'] = safe_avg(wind_list)
                stats['wind_max'] = safe_max(wind_list)
                
                # Beaufort kateg√≥ri√°k
                stats['wind_calm'] = safe_count(wind_list, lambda x: x <= 1)       # 0-1: Sz√©lcsend
                stats['wind_light'] = safe_count(wind_list, lambda x: 1 < x <= 11) # 2-3: Gyenge
                stats['wind_moderate'] = safe_count(wind_list, lambda x: 11 < x <= 29)  # 4-5: M√©rs√©kelt
                stats['wind_strong'] = safe_count(wind_list, lambda x: x > 29)     # 6+: Er≈ës
            
            if windgust_list:
                stats['windgust_max'] = safe_max(windgust_list)
            
            # === ID≈êSZAK ADATOK ===
            stats['start_date'] = dates[0][:10] if dates else "N/A"
            stats['end_date'] = dates[-1][:10] if dates else "N/A"
            stats['total_days'] = total_days
            stats['bin_size'] = max(1, total_days // 365)
            stats['years'] = len(set(date[:4] for date in dates)) if dates else 0
            
            return stats
            
        except Exception as e:
            logger.error(f"Statisztikai adatok sz√°m√≠t√°si hiba: {e}")
            return {}
    
    def _create_statistics_cards_widget(self, stats: Dict[str, Any]) -> QWidget:
        """üéØ KOMPAKT K√ÅRTY√ÅS STATISZTIKA WIDGET L√âTREHOZ√ÅSA"""
        try:
            main_widget = QWidget()
            layout = QVBoxLayout(main_widget)
            layout.setContentsMargins(4, 4, 4, 4)
            layout.setSpacing(8)
            
            if not stats:
                no_data_label = QLabel("‚ùå Nincsenek adatok")
                no_data_label.setAlignment(Qt.AlignCenter)
                no_data_label.setStyleSheet("color: #666; font-style: italic; padding: 20px; font-size: 12px;")
                layout.addWidget(no_data_label)
                return main_widget
            
            # === 1. H≈êM√âRS√âKLET K√ÅRTYA ===
            temp_card = self._create_statistic_card(
                "üå°Ô∏è H≈êM√âRS√âKLETI STATISZTIK√ÅK",
                [
                    f"‚Ä¢ √Åtlag h≈ëm√©rs√©klet: {stats.get('temp_avg', 0):.1f}¬∞C" if stats.get('temp_avg') else "‚Ä¢ √Åtlag h≈ëm√©rs√©klet: N/A",
                    f"‚Ä¢ Min/Max: {stats.get('temp_min', 0):.1f}¬∞C / {stats.get('temp_max', 0):.1f}¬∞C" if stats.get('temp_min') and stats.get('temp_max') else "‚Ä¢ Min/Max: N/A",
                    f"‚Ä¢ Fagyos napok: {stats.get('freezing_days', 0)} nap",
                    f"‚Ä¢ H≈ës√©ghull√°m (>30¬∞C): {stats.get('hot_days', 0)} nap",
                    f"‚Ä¢ H≈ëm√©rs√©klet ingadoz√°s: {stats.get('temp_range_avg', 0):.1f}¬∞C" if stats.get('temp_range_avg') else "‚Ä¢ H≈ëm√©rs√©klet ingadoz√°s: N/A"
                ]
            )
            layout.addWidget(temp_card)
            
            # === 2. CSAPAD√âK K√ÅRTYA ===
            precip_card = self._create_statistic_card(
                "üåßÔ∏è CSAPAD√âK ELEMZ√âS",
                [
                    f"‚Ä¢ √Åtlag csapad√©k: {stats.get('precip_avg', 0):.1f}mm/nap" if stats.get('precip_avg') else "‚Ä¢ √Åtlag csapad√©k: N/A",
                    f"‚Ä¢ Sz√°raz napok: {stats.get('dry_days', 0)} nap ({stats.get('dry_percentage', 0):.0f}%)",
                    f"‚Ä¢ Es≈ës napok: {stats.get('rainy_days', 0)} nap ({stats.get('rainy_percentage', 0):.0f}%)",
                    f"‚Ä¢ √ñsszes csapad√©k: {stats.get('annual_precip', 0):.0f}mm/√©v" if stats.get('annual_precip') else "‚Ä¢ √ñsszes csapad√©k: N/A",
                    f"‚Ä¢ Leghosszabb sz√°raz: {stats.get('longest_dry_streak', 0)} nap"
                ]
            )
            layout.addWidget(precip_card)
            
            # === 3. SZ√âL K√ÅRTYA ===
            wind_card = self._create_statistic_card(
                "üí® SZ√âL BEAUFORT ELEMZ√âS",
                [
                    f"‚Ä¢ √Åtlag sz√©lsebess√©g: {stats.get('wind_avg', 0):.1f} km/h" if stats.get('wind_avg') else "‚Ä¢ √Åtlag sz√©lsebess√©g: N/A",
                    f"‚Ä¢ Max sz√©ll√∂k√©s: {stats.get('windgust_max', 0):.1f} km/h" if stats.get('windgust_max') else f"‚Ä¢ Max sz√©lsebess√©g: {stats.get('wind_max', 0):.1f} km/h" if stats.get('wind_max') else "‚Ä¢ Max sz√©l: N/A",
                    f"‚Ä¢ Sz√©lcsend (0-1): {stats.get('wind_calm', 0)} nap",
                    f"‚Ä¢ Gyenge sz√©l (2-3): {stats.get('wind_light', 0)} nap",
                    f"‚Ä¢ M√©rs√©kelt (4-5): {stats.get('wind_moderate', 0)} nap",
                    f"‚Ä¢ Er≈ës sz√©l (6+): {stats.get('wind_strong', 0)} nap"
                ]
            )
            layout.addWidget(wind_card)
            
            # === 4. ID≈êSZAK K√ÅRTYA ===
            period_card = self._create_statistic_card(
                "üìä ID≈êSZAK & RENDSZER INFO",
                [
                    f"‚Ä¢ Id≈ëtartam: {stats.get('start_date', 'N/A')} - {stats.get('end_date', 'N/A')}",
                    f"‚Ä¢ Napok sz√°ma: {stats.get('total_days', 0)} nap",
                    f"‚Ä¢ Konstans felbont√°s: 365 bin",
                    f"‚Ä¢ Bin m√©ret: ~{stats.get('bin_size', 1)} nap/t√©glalap",
                    f"‚Ä¢ Beaufort 13 fokozat sz√≠nek"
                ]
            )
            layout.addWidget(period_card)
            
            # Stretch hozz√°ad√°sa az alj√°ra
            layout.addStretch()
            
            return main_widget
            
        except Exception as e:
            logger.error(f"K√°rty√°s widget l√©trehoz√°si hiba: {e}")
            error_widget = QWidget()
            error_layout = QVBoxLayout(error_widget)
            error_label = QLabel(f"‚ùå Widget hiba: {str(e)}")
            error_label.setAlignment(Qt.AlignCenter)
            error_layout.addWidget(error_label)
            return error_widget
    
    def _create_statistic_card(self, title: str, items: List[str]) -> QWidget:
        """üìã EGYEDI STATISZTIKA K√ÅRTYA L√âTREHOZ√ÅSA"""
        card = QWidget()
        layout = QVBoxLayout(card)
        layout.setContentsMargins(8, 6, 8, 6)
        layout.setSpacing(4)
        
        # C√≠m
        title_label = QLabel(title)
        title_label.setStyleSheet("""
            QLabel {
                font-weight: bold;
                font-size: 14px;
                color: #C43939;
                margin-bottom: 3px;
            }
        """)
        layout.addWidget(title_label)
        
        # Elv√°laszt√≥ vonal
        separator = QFrame()
        separator.setFrameShape(QFrame.HLine)
        separator.setStyleSheet("color: #ddd;")
        layout.addWidget(separator)
        
        # Adatok
        for item in items:
            item_label = QLabel(item)
            item_label.setStyleSheet("""
                QLabel {
                    font-size: 14px;
                    color: #333;
                    padding-left: 4px;
                    line-height: 1.5;
                }
            """)
            layout.addWidget(item_label)
        
        # K√°rtya styling
        card.setStyleSheet("""
            QWidget {
                background-color: white;
                border: 1px solid #ddd;
                border-radius: 4px;
                margin: 2px;
            }
        """)
        
        return card
    
    def _calculate_records(self, data: Dict[str, Any]) -> Dict[str, Dict[str, str]]:
        """üèÜ 5 rekord kateg√≥ria sz√°m√≠t√°sa - MINDIG NAPI SZINTEN (MAX SZ√âLL√ñK√âSEKKEL)"""
        try:
            daily_data = data.get('daily', {})
            
            if not daily_data:
                return {}
            
            dates = daily_data.get('time', [])
            if not dates:
                return {}
            
            records = {}
            
            # üî• 1. LEGMELEGEBB NAP
            temp_max_list = daily_data.get('temperature_2m_max', [])
            if temp_max_list and len(temp_max_list) == len(dates):
                max_temp = safe_max(temp_max_list)
                if max_temp is not None:
                    max_idx = temp_max_list.index(max_temp)
                    records['hottest'] = {
                        'value': f"{max_temp:.1f}¬∞C",
                        'date': dates[max_idx][:10]
                    }
            
            # üßä 2. LEGHIDEGEBB NAP
            temp_min_list = daily_data.get('temperature_2m_min', [])
            if temp_min_list and len(temp_min_list) == len(dates):
                min_temp = safe_min(temp_min_list)
                if min_temp is not None:
                    min_idx = temp_min_list.index(min_temp)
                    records['coldest'] = {
                        'value': f"{min_temp:.1f}¬∞C",
                        'date': dates[min_idx][:10]
                    }
            
            # üåßÔ∏è 3. LEGCSAPAD√âKOSABB NAP
            precip_list = daily_data.get('precipitation_sum', [])
            if precip_list and len(precip_list) == len(dates):
                max_precip = safe_max(precip_list)
                if max_precip is not None and max_precip > 0:
                    max_precip_idx = precip_list.index(max_precip)
                    records['wettest'] = {
                        'value': f"{max_precip:.1f}mm",
                        'date': dates[max_precip_idx][:10]
                    }
            
            # üèúÔ∏è 4. LEGSZ√ÅRAZABB ID≈êSZAK
            if precip_list and len(precip_list) == len(dates):
                dry_streak = self._find_longest_dry_streak(precip_list, dates)
                if dry_streak:
                    records['driest'] = {
                        'value': f"{dry_streak['days']} nap",
                        'date': f"{dry_streak['start'][:5]}-{dry_streak['end'][:5]}"  # R√∂videbb
                    }
            
            # üí® 5. LEGSZELESEBB NAP (VAL√ìS API NEVEK - debug szerint)
            # El≈ënyben r√©szes√≠tj√ºk a sz√©ll√∂k√©seket (wind_gusts_max), ha el√©rhet≈ë
            wind_data = daily_data.get('wind_gusts_max', []) or daily_data.get('windspeed_10m_max', [])
            if wind_data and len(wind_data) == len(dates):
                max_wind = safe_max(wind_data)
                if max_wind is not None:
                    max_wind_idx = wind_data.index(max_wind)
                    records['windiest'] = {
                        'value': f"{max_wind:.1f}km/h",
                        'date': dates[max_wind_idx][:10]
                    }
            
            logger.info(f"Napi rekordok sz√°m√≠tva: {len(records)} kateg√≥ria (max sz√©ll√∂k√©s priorit√°ssal)")
            return records
            
        except Exception as e:
            logger.error(f"Rekord sz√°m√≠t√°si hiba: {e}", exc_info=True)
            return {}
    
    def _find_longest_dry_streak(self, precip_list: List[float], dates: List[str]) -> Optional[Dict[str, Any]]:
        """Leghosszabb sz√°raz id≈ëszak keres√©se"""
        try:
            if not precip_list or not dates:
                return None
            
            max_streak = 0
            current_streak = 0
            max_start_idx = 0
            max_end_idx = 0
            current_start_idx = 0
            
            for i, precip in enumerate(precip_list):
                if precip is not None and precip <= 0.1:
                    if current_streak == 0:
                        current_start_idx = i
                    current_streak += 1
                else:
                    if current_streak > max_streak:
                        max_streak = current_streak
                        max_start_idx = current_start_idx
                        max_end_idx = i - 1
                    current_streak = 0
            
            # Utols√≥ streak ellen≈ërz√©se
            if current_streak > max_streak:
                max_streak = current_streak
                max_start_idx = current_start_idx
                max_end_idx = len(precip_list) - 1
            
            if max_streak >= 3:
                return {
                    'days': max_streak,
                    'start': dates[max_start_idx],
                    'end': dates[max_end_idx]
                }
            
            return None
            
        except Exception as e:
            logger.error(f"Sz√°raz id≈ëszak keres√©si hiba: {e}")
            return None
    
    def _update_status(self, message: str) -> None:
        """√Ållapot √ºzenet friss√≠t√©se"""
        if self.status_label:
            self.status_label.setText(message)
        logger.info(f"Konstans heatmap dashboard + DEDICATED WIND CHARTOK √°llapot: {message}")
    
    # === T√âMA API ===
    
    def update_theme(self) -> None:
        """T√©ma manu√°lis friss√≠t√©se"""
        self._apply_current_theme()
    
    def get_current_data(self) -> Optional[Dict[str, Any]]:
        """Jelenlegi adatok lek√©rdez√©se"""
        return self.current_data
    
    def get_current_location(self):
        """Jelenlegi lok√°ci√≥ lek√©rdez√©se"""
        return self.current_location


# Export
__all__ = ['AnalyticsView', 'MeteorologicalColorMaps']