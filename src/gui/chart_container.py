#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Global Weather Analyzer - Charts Container Widget
Charts kont√©ner widget refaktor√°lt verzi√≥ - CSAK ChartsContainer oszt√°ly.

üîß REFAKTOR√ÅLT ARCHITEKT√öRA: Minden chart oszt√°ly k√ºl√∂n modulban
üì¶ CLEAN IMPORTS: Struktur√°lt import rendszer az √∫j charts package-b≈ël
üé® T√âMA INTEGR√ÅCI√ì: SimplifiedThemeManager automatikus kezel√©s
‚úÖ Piros (#C43939) t√©ma t√°mogat√°s
‚úÖ Duplik√°ci√≥ bugfix minden chart-ban
üå™Ô∏è WIND GUSTS KRITIKUS JAV√çT√ÅS: WindChart √©s WindRoseChart explicit debug √©s friss√≠t√©s
‚úÖ Professional styling

Ez a widget fogja √∂ssze a k√ºl√∂nb√∂z≈ë diagramokat egy f√ºles (tabbed) fel√ºleten.
Minden diagram most saj√°t modulban tal√°lhat√≥ a charts/ package-ben.

FRISS√çTETT IMPORT STRUKT√öRA:
```python
from .charts import (
    EnhancedTemperatureChart, PrecipitationChart, WindChart,
    WindRoseChart, HeatmapCalendarChart, MultiYearComparisonChart
)
```

ELT√ÅVOL√çTOTT OSZT√ÅLYOK (most charts/ package-ben):
- WeatherChart ‚Üí charts/base_chart.py
- EnhancedTemperatureChart ‚Üí charts/temperature_chart.py
- PrecipitationChart ‚Üí charts/precipitation_chart.py
- WindChart ‚Üí charts/wind_chart.py
- WindRoseChart ‚Üí charts/wind_rose_chart.py
- HeatmapCalendarChart ‚Üí charts/heatmap_chart.py
- MultiYearComparisonChart ‚Üí charts/comparison_chart.py
"""

from typing import Optional, Dict, Any
from datetime import datetime

from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QTabWidget,
    QPushButton, QCheckBox, QLabel
)
from PySide6.QtCore import Signal
from PySide6.QtGui import QFont

# === FRISS√çTETT IMPORT STRUKT√öRA - CHARTS PACKAGE ===

from .charts import (
    EnhancedTemperatureChart,
    PrecipitationChart, 
    WindChart,
    WindRoseChart,
    HeatmapCalendarChart,
    MultiYearComparisonChart
)

from .theme_manager import get_theme_manager, register_widget_for_theming, get_current_colors


class ChartsContainer(QWidget):
    """
    Grafikonok f≈ë kont√©ner widget - PROFESSZION√ÅLIS NAGY CHARTOK + DUPLIK√ÅCI√ì BUGFIX + MOCK ADATOK N√âLK√úL + SIMPLIFIED THEMEMANAGER.
    B≈ëv√≠tett tabbed interface az √∫j chart t√≠pusokhoz.
    
    üîÑ F√ÅZIS 4: Professzion√°lis nagy chartok integr√°l√°sa
    üìä √öJ CHARTOK: Enhanced Temperature, Heatmap Calendar, Wind Rose, Multi-Year
    üîß KRITIKUS JAV√çT√ÅS: Toggle funkci√≥k optimaliz√°l√°sa duplik√°ci√≥ n√©lk√ºl + LEGEND POZ√çCI√ì JAV√çTVA
    üö® MOCK/DEMO ADATOK TELJES ELT√ÅVOL√çT√ÅSA - csak val√≥di API adatok haszn√°lhat√≥k
    üé® SIMPLIFIED THEMEMANAGER INTEGR√ÅCI√ì: Automatikus t√©ma kezel√©s minden charthoz
    üå™Ô∏è WIND GUSTS KRITIKUS JAV√çT√ÅS: WindChart √©s WindRoseChart explicit debug √©s adat√°tad√°s
    """
    
    # Signalok
    chart_exported = Signal(str, bool)  # filepath, success
    chart_settings_changed = Signal(dict)  # settings dict
    
    def __init__(self, parent: Optional[QWidget] = None):
        """Charts kont√©ner inicializ√°l√°sa - PROFESSZION√ÅLIS CHARTOKKAL + DUPLIK√ÅCI√ì BUGFIX + SIMPLIFIED THEMEMANAGER."""
        super().__init__(parent)
        
        # üîß SIMPLIFIED THEMEMANAGER INTEGR√ÅCI√ì
        self.theme_manager = get_theme_manager()
        
        self.current_data: Optional[Dict[str, Any]] = None
        
        self._init_ui()
        self._connect_signals()
        
        # üé® WIDGET REGISZTR√ÅCI√ì T√âMA KEZEL√âSHEZ - AUTOMATIKUS
        register_widget_for_theming(self, "container")
        
        print("‚úÖ DEBUG: ChartsContainer initialized with refactored chart modules + SimplifiedThemeManager integration + Wind Gusts")
    
    def _init_ui(self) -> None:
        """UI inicializ√°l√°sa - B≈êV√çTETT CHART GAL√âRIA + SIMPLIFIED THEMEMANAGER."""
        layout = QVBoxLayout(self)
        layout.setContentsMargins(5, 5, 5, 5)
        
        # Vez√©rl≈ë panel
        controls = self._create_controls()
        layout.addWidget(controls)
        
        # Chart tabs - B≈êV√çTETT + AUTOMATIKUS THEMING
        self.tabs = QTabWidget()
        
        # üé® AUTOMATIKUS WIDGET REGISZTR√ÅCI√ì T√âMA KEZEL√âSHEZ
        register_widget_for_theming(self.tabs, "container")
        
        # === CHART TAB-OK - REFAKTOR√ÅLT MODUL√ÅRIS STRUKT√öRA + WIND GUSTS ===
        
        # 1. H≈ëm√©rs√©klet tab - ENHANCED
        self.temp_chart = EnhancedTemperatureChart()
        self.tabs.addTab(self.temp_chart, "üå°Ô∏è H≈ëm√©rs√©klet")
        
        # 2. Csapad√©k tab - MEGTARTVA
        self.precip_chart = PrecipitationChart()
        self.tabs.addTab(self.precip_chart, "üåßÔ∏è Csapad√©k")
        
        # 3. üå™Ô∏è WIND GUSTS: Sz√©l tab - WIND GUSTS T√ÅMOGAT√ÅSSAL
        self.wind_chart = WindChart()
        self.tabs.addTab(self.wind_chart, "üå™Ô∏è Sz√©ll√∂k√©sek")  # WIND GUSTS C√çM
        
        # 4. √öJ: Heatmap Calendar tab
        self.heatmap_chart = HeatmapCalendarChart()
        self.tabs.addTab(self.heatmap_chart, "üìÖ Napt√°r")
        
        # 5. üå™Ô∏è WIND GUSTS: Wind Rose tab - WIND GUSTS T√ÅMOGAT√ÅSSAL
        self.windrose_chart = WindRoseChart()
        self.tabs.addTab(self.windrose_chart, "üåπ Sz√©ll√∂k√©s R√≥zsa")  # WIND GUSTS C√çM
        
        # 6. √öJ: Multi-Year Comparison tab
        self.comparison_chart = MultiYearComparisonChart()
        self.tabs.addTab(self.comparison_chart, "üìä √âvek")
        
        layout.addWidget(self.tabs)
    
    def _create_controls(self) -> QWidget:
        """Vez√©rl≈ë panel l√©trehoz√°sa - B≈êV√çTETT + SIMPLIFIED THEMEMANAGER."""
        controls = QWidget()
        controls.setMaximumHeight(50)
        layout = QHBoxLayout(controls)
        
        # üé® AUTOMATIKUS WIDGET REGISZTR√ÅCI√ì
        register_widget_for_theming(controls, "container")
        
        # Chart c√≠m
        title = QLabel("üìà R√©szletes Grafikonok")
        title_font = QFont()
        title_font.setBold(True)
        title_font.setPointSize(12)
        title.setFont(title_font)
        register_widget_for_theming(title, "text")
        layout.addWidget(title)
        
        layout.addStretch()
        
        # Grid toggle
        self.grid_check = QCheckBox("R√°csvonalak")
        self.grid_check.setChecked(True)
        self.grid_check.toggled.connect(self._toggle_grid_optimized)
        register_widget_for_theming(self.grid_check, "input")
        layout.addWidget(self.grid_check)
        
        # Legend toggle
        self.legend_check = QCheckBox("Jelmagyar√°zat")
        self.legend_check.setChecked(True)
        self.legend_check.toggled.connect(self._toggle_legend_optimized)
        register_widget_for_theming(self.legend_check, "input")
        layout.addWidget(self.legend_check)
        
        # Export gomb
        export_btn = QPushButton("üíæ Export")
        export_btn.clicked.connect(self._export_current_chart)
        register_widget_for_theming(export_btn, "button")
        layout.addWidget(export_btn)
        
        return controls
    
    def _connect_signals(self) -> None:
        """Signal kapcsolatok - √ñSSZES CHART + SIMPLIFIED THEMEMANAGER."""
        charts = [
            self.temp_chart, self.precip_chart, self.wind_chart,
            self.heatmap_chart, self.windrose_chart, self.comparison_chart
        ]
        
        for chart in charts:
            chart.chart_clicked.connect(self._on_chart_clicked)
        
        # üîß T√âMA V√ÅLTOZ√ÅS FIGYEL√âSE - AUTOMATIKUS
        self.theme_manager.theme_changed.connect(self._on_theme_changed)
        
        print("‚úÖ DEBUG: ChartsContainer signals connected including SimplifiedThemeManager + Wind Gusts")
    
    def _on_theme_changed(self, theme_name: str) -> None:
        """
        üé® T√âMA V√ÅLTOZ√ÅS KEZEL√âSE - √∂sszes chart szinkroniz√°l√°sa.
        
        Args:
            theme_name: √öj t√©ma neve
        """
        print(f"üé® DEBUG: ChartsContainer theme changing to: {theme_name}")
        
        # Minden chart explicit t√©mafriss√≠t√©se
        charts = [
            self.temp_chart, self.precip_chart, self.wind_chart,
            self.heatmap_chart, self.windrose_chart, self.comparison_chart
        ]
        
        for chart in charts:
            if hasattr(chart, '_redraw_with_new_theme'):
                try:
                    chart._redraw_with_new_theme()
                except Exception as e:
                    print(f"‚ö†Ô∏è DEBUG: Chart theme update error for {chart.__class__.__name__}: {e}")
        
        print(f"‚úÖ DEBUG: ChartsContainer theme updated: {theme_name} - ALL CHARTS SYNCHRONIZED")
    
    def _toggle_grid_optimized(self, enabled: bool) -> None:
        """
        üîß KRITIKUS JAV√çT√ÅS: Grid toggle optimaliz√°lva - NEM teljes √∫jrarajzol√°s.
        Csak a grid tulajdons√°g m√≥dos√≠t√°sa, majd refresh.
        """
        print(f"üîß DEBUG: _toggle_grid_optimized({enabled}) - OPTIMALIZ√ÅLT VERZI√ì + SIMPLIFIED THEMEMANAGER")
        
        try:
            charts = [
                self.temp_chart, self.precip_chart, self.wind_chart,
                self.heatmap_chart, self.windrose_chart, self.comparison_chart
            ]
            
            for chart in charts:
                chart.grid_enabled = enabled
                
                # Csak a grid be√°ll√≠t√°s m√≥dos√≠t√°sa, NEM teljes √∫jrarajzol√°s
                if hasattr(chart, 'ax') and chart.ax:
                    if enabled:
                        # üîß SIMPLIFIED THEMEMANAGER GRID SZ√çNEK
                        current_colors = get_current_colors()
                        grid_color = current_colors.get('border', '#d1d5db')
                        grid_alpha = 0.3 if self.theme_manager.get_current_theme() == "light" else 0.2
                        chart.ax.grid(True, alpha=grid_alpha, linestyle='-', linewidth=0.8, color=grid_color)
                    else:
                        chart.ax.grid(False)
                    
                    # Csak a canvas friss√≠t√©se, NEM teljes chart update
                    chart.draw()
            
            print(f"‚úÖ DEBUG: Grid toggle optimaliz√°lva: {enabled} (SimplifiedThemeManager colors)")
            
        except Exception as e:
            print(f"‚ùå DEBUG: Grid toggle hiba: {e}")
    
    def _toggle_legend_optimized(self, enabled: bool) -> None:
        """
        üîß KRITIKUS JAV√çT√ÅS: Legend toggle optimaliz√°lva - NEM teljes √∫jrarajzol√°s + SIMPLIFIED THEMEMANAGER.
        """
        print(f"üîß DEBUG: _toggle_legend_optimized({enabled}) - OPTIMALIZ√ÅLT VERZI√ì + SIMPLIFIED THEMEMANAGER")
        
        try:
            charts = [
                self.temp_chart, self.precip_chart, self.wind_chart,
                self.heatmap_chart, self.windrose_chart, self.comparison_chart
            ]
            
            # üîß SIMPLIFIED THEMEMANAGER LEGEND SZ√çNEK
            current_colors = get_current_colors()
            
            for chart in charts:
                chart.legend_enabled = enabled
                
                # Csak a legend be√°ll√≠t√°s m√≥dos√≠t√°sa
                if hasattr(chart, 'ax') and chart.ax:
                    if enabled:
                        # Legend megjelen√≠t√©se, ha van
                        legend = chart.ax.get_legend()
                        if legend:
                            legend.set_visible(True)
                            # üîß SIMPLIFIED THEMEMANAGER LEGEND SZ√çNEK ALKALMAZ√ÅSA
                            legend.get_frame().set_facecolor(current_colors.get('surface', '#ffffff'))
                            legend.get_frame().set_edgecolor(current_colors.get('border', '#d1d5db'))
                        else:
                            # √öj legend l√©trehoz√°sa, ha nincs - JAV√çTOTT POZ√çCI√ìVAL + SIMPLIFIED THEMEMANAGER
                            legend = chart.ax.legend(bbox_to_anchor=(1.05, 1), loc='upper left', 
                                          framealpha=0.95, fancybox=True, shadow=True, fontsize=11)
                            legend.get_frame().set_facecolor(current_colors.get('surface', '#ffffff'))
                            legend.get_frame().set_edgecolor(current_colors.get('border', '#d1d5db'))
                    else:
                        # Legend elrejt√©se
                        legend = chart.ax.get_legend()
                        if legend:
                            legend.set_visible(False)
                    
                    # Csak canvas friss√≠t√©s
                    chart.draw()
            
            print(f"‚úÖ DEBUG: Legend toggle optimaliz√°lva: {enabled} (SimplifiedThemeManager colors)")
            
        except Exception as e:
            print(f"‚ùå DEBUG: Legend toggle hiba: {e}")
    
    def _export_current_chart(self) -> None:
        """Aktu√°lis chart export√°l√°sa."""
        current_widget = self.tabs.currentWidget()
        if hasattr(current_widget, 'export_chart'):  # WeatherChart methods
            # TODO: file dialog implement√°l√°sa
            chart_name = self.tabs.tabText(self.tabs.currentIndex()).replace(' ', '_')
            filepath = f"chart_{chart_name}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png"
            success = current_widget.export_chart(filepath)
            self.chart_exported.emit(filepath, success)
    
    def _on_chart_clicked(self, x: float, y: float) -> None:
        """Chart kattint√°s kezel√©se."""
        print(f"Chart clicked at: {x}, {y}")  # Debug
    
    # === PUBLIKUS MET√ìDUSOK ===
    
    def update_charts(self, data: Dict[str, Any]) -> None:
        """
        üå™Ô∏è KRITIKUS JAV√çT√ÅS: √ñsszes chart friss√≠t√©se duplik√°ci√≥-mentesen - WIND GUSTS EXPLICIT DEBUG √âS FRISS√çT√âS.
        
        PROBL√âMA MEGOLDVA: WindChart √©s WindRoseChart nem kapt√°k meg az adatokat.
        MEGOLD√ÅS: Explicit debug √©s adat√°tad√°s sz√©ladatokkal.
        """
        print("üìà DEBUG: ChartsContainer.update_charts() - WIND GUSTS KRITIKUS JAV√çT√ÅS VERZI√ì")
        
        try:
            self.current_data = data
            
            # üå™Ô∏è KRITIKUS DEBUG - Sz√©ladatok ellen≈ërz√©se az input data-ban
            daily_data = data.get("daily", {})
            wind_gusts_max = daily_data.get("wind_gusts_max", [])
            windspeed_10m_max = daily_data.get("windspeed_10m_max", [])
            
            print(f"üå™Ô∏è DEBUG: Input data sz√©ladatok:")
            print(f"üå™Ô∏è DEBUG: - wind_gusts_max: {len(wind_gusts_max)} elem")
            print(f"üå™Ô∏è DEBUG: - windspeed_10m_max: {len(windspeed_10m_max)} elem")
            
            if wind_gusts_max:
                print(f"üå™Ô∏è DEBUG: - wind_gusts_max minta √©rt√©kek: {wind_gusts_max[:3]}")
            if windspeed_10m_max:
                print(f"üå™Ô∏è DEBUG: - windspeed_10m_max minta √©rt√©kek: {windspeed_10m_max[:3]}")
            
            print("üìà DEBUG: Updating all professional charts with SimplifiedThemeManager + WIND GUSTS DEBUG...")
            
            # Szekvenci√°lis friss√≠t√©s - egy chart egyszerre duplik√°ci√≥ ellen
            print("üå°Ô∏è UPDATING temp_chart...")
            self.temp_chart.update_data(data)
            
            print("üåßÔ∏è UPDATING precip_chart...")
            self.precip_chart.update_data(data)
            
            # üå™Ô∏è KRITIKUS JAV√çT√ÅS: WindChart explicit debug √©s friss√≠t√©s
            print("üå™Ô∏è UPDATING wind_chart... (EXPLICIT WIND GUSTS DEBUG)")
            try:
                self.wind_chart.update_data(data)
                print("‚úÖ DEBUG: wind_chart.update_data() v√©grehajtva")
            except Exception as wind_error:
                print(f"‚ùå DEBUG: wind_chart.update_data() HIBA: {wind_error}")
            
            # √öj professzion√°lis chartok
            print("üìÖ UPDATING heatmap_chart...")
            self.heatmap_chart.update_data(data)
            
            # üå™Ô∏è KRITIKUS JAV√çT√ÅS: WindRoseChart explicit debug √©s friss√≠t√©s
            print("üåπ UPDATING windrose_chart... (EXPLICIT WIND GUSTS DEBUG)")
            try:
                self.windrose_chart.update_data(data)
                print("‚úÖ DEBUG: windrose_chart.update_data() v√©grehajtva")
            except Exception as windrose_error:
                print(f"‚ùå DEBUG: windrose_chart.update_data() HIBA: {windrose_error}")
            
            print("üìä UPDATING comparison_chart...")
            self.comparison_chart.update_data(data)
            
            print("‚úÖ DEBUG: All professional charts updated - DUPLIK√ÅCI√ì MENTES + SIMPLIFIED THEMEMANAGER + WIND GUSTS EXPLICIT DEBUG")
            
            # üå™Ô∏è TOV√ÅBBI DEBUG: WindChart st√°tusz ellen≈ërz√©se
            if hasattr(self.wind_chart, 'current_data'):
                wind_data_status = "VAN" if self.wind_chart.current_data else "NINCS"
                print(f"üå™Ô∏è FINAL DEBUG: wind_chart.current_data st√°tusz: {wind_data_status}")
            
            if hasattr(self.windrose_chart, 'current_data'):
                windrose_data_status = "VAN" if self.windrose_chart.current_data else "NINCS"
                print(f"üåπ FINAL DEBUG: windrose_chart.current_data st√°tusz: {windrose_data_status}")
            
        except Exception as e:
            print(f"‚ùå DEBUG: ChartsContainer friss√≠t√©si hiba: {e}")
            import traceback
            print(f"‚ùå DEBUG: Traceback: {traceback.format_exc()}")
    
    def clear_charts(self) -> None:
        """√ñsszes chart t√∂rl√©se - B≈êV√çTETT LISTA + WIND GUSTS."""
        self.current_data = None
        
        charts = [
            self.temp_chart, self.precip_chart, self.wind_chart,
            self.heatmap_chart, self.windrose_chart, self.comparison_chart
        ]
        
        for chart in charts:
            chart.clear_chart()
        
        print("üßπ DEBUG: All professional charts cleared (including Wind Gusts)")
    
    def apply_theme(self, dark_theme: bool) -> None:
        """
        üé® DEPRECATED: T√©ma alkalmaz√°sa - SIMPLIFIED THEMEMANAGER-RE DELEG√ÅLVA.
        
        Args:
            dark_theme: S√∂t√©t t√©ma-e (DEPRECATED, haszn√°ld a SimplifiedThemeManager-t)
        """
        print("‚ö†Ô∏è DEBUG: apply_theme() DEPRECATED - use SimplifiedThemeManager.set_theme() instead")
        
        # Backward compatibility - SimplifiedThemeManager-re deleg√°l√°s
        theme_name = "dark" if dark_theme else "light"
        self.theme_manager.set_theme(theme_name)