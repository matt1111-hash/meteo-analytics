#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Global Weather Analyzer - Application Controller - PROVIDER ROUTING SUPPORT
Alkalmaz√°s k√∂zponti logikai vez√©rl≈ëje - PROVIDER SELECTOR t√°mogat√°ssal.

üåç PROVIDER ROUTING FUNKCI√ìK:
‚úÖ Smart provider routing (Open-Meteo vs Meteostat)
‚úÖ User preference kezel√©s (Automatikus/K√©nyszer√≠tett)
‚úÖ Usage tracking √©s cost monitoring
‚úÖ Provider status signalok GUI-nak
‚úÖ Rate limiting √©s fallback logic
‚úÖ Wind gusts t√°mogat√°s minden providern√©l
"""

from typing import Optional, Dict, Any, List
from datetime import datetime, timedelta
import sqlite3
from pathlib import Path
import pandas as pd

from PySide6.QtCore import QObject, Signal, Slot
from PySide6.QtWidgets import QMessageBox

from ..config import DATA_DIR, APIConfig, ProviderConfig, UserPreferences, UsageTracker
from .workers.data_fetch_worker import WorkerManager, GeocodingWorker, WeatherDataWorker


class AppController(QObject):
    """
    Az alkalmaz√°s logikai vez√©rl≈ëje - PROVIDER ROUTING t√°mogat√°ssal.
    
    üåç PROVIDER ROUTING FUNKCI√ìK:
    ‚úÖ Smart provider selection (Open-Meteo vs Meteostat)
    ‚úÖ User preference override support
    ‚úÖ Usage tracking √©s cost monitoring
    ‚úÖ Provider fallback strategies
    ‚úÖ Wind gusts t√°mogat√°s minden providern√©l
    """
    
    # Signalok a GUI komponensek fel√©
    geocoding_results_ready = Signal(list)      # List[Dict] - telep√ºl√©s tal√°latok
    weather_data_ready = Signal(dict)           # Dict - API v√°lasz adatok
    error_occurred = Signal(str)                # str - hiba√ºzenet
    status_updated = Signal(str)                # str - st√°tusz √ºzenet
    progress_updated = Signal(str, int)         # worker_type, progress
    
    # Adatb√°zis m≈±veletek eredm√©nyei
    city_saved_to_db = Signal(dict)             # Dict - elmentett telep√ºl√©s adatok
    weather_saved_to_db = Signal(bool)          # bool - sikeres ment√©s
    
    # üåç PROVIDER ROUTING SIGNALOK
    provider_selected = Signal(str)             # str - v√°lasztott provider neve
    provider_usage_updated = Signal(dict)       # Dict - usage statistics
    provider_warning = Signal(str, int)         # provider_name, usage_percent
    provider_fallback = Signal(str, str)        # from_provider, to_provider
    
    def __init__(self, parent: Optional[QObject] = None):
        """Controller inicializ√°l√°sa PROVIDER ROUTING t√°mogat√°ssal."""
        super().__init__(parent)
        
        print("üåç DEBUG: AppController __init__ started (PROVIDER ROUTING support)")
        
        # √Ållapot v√°ltoz√≥k
        self.current_city_data: Optional[Dict[str, Any]] = None
        self.current_weather_data: Optional[Dict[str, Any]] = None
        self.active_search_query: Optional[str] = None
        
        # üåç PROVIDER ROUTING KOMPONENSEK
        self.provider_config = ProviderConfig()
        self.user_preferences = UserPreferences()
        self.usage_tracker = UsageTracker()
        
        print("üåç DEBUG: Provider routing komponensek bet√∂ltve:")
        print(f"üåç DEBUG: - Default provider: {self.user_preferences.get_selected_provider()}")
        print(f"üåç DEBUG: - Available providers: {list(self.provider_config.PROVIDERS.keys())}")
        
        # WorkerManager k√∂zponti haszn√°lata
        self.worker_manager = WorkerManager()
        print("üåç DEBUG: WorkerManager created with PROVIDER ROUTING support")
        
        # Adatb√°zis kapcsolat inicializ√°l√°sa
        self.db_path = DATA_DIR / "meteo_data.db"
        self._init_database_connection()
        
        # Signal kapcsol√°sok
        self._connect_worker_signals()
        
        # Provider preferences bet√∂lt√©se
        self._load_user_preferences()
        
        print("‚úÖ DEBUG: AppController inicializ√°lva (PROVIDER ROUTING support)")
    
    def _load_user_preferences(self) -> None:
        """User preferences bet√∂lt√©se √©s signalok k√ºld√©se."""
        try:
            selected_provider = self.user_preferences.get_selected_provider()
            print(f"üåç DEBUG: User selected provider: {selected_provider}")
            
            # Provider selection signal
            self.provider_selected.emit(selected_provider)
            
            # Usage statistics signal
            usage_summary = self.usage_tracker.get_usage_summary()
            self.provider_usage_updated.emit({
                'meteostat': {
                    'requests': usage_summary.get('meteostat_requests', 0),
                    'limit': usage_summary.get('meteostat_limit', 10000)
                },
                'open-meteo': {
                    'requests': usage_summary.get('openmeteo_requests', 0),
                    'limit': float('inf')  # Unlimited
                }
            })
            
            # Warning ellen≈ërz√©s
            warning_level = usage_summary.get('warning_level', 'normal')
            usage_percent = usage_summary.get('meteostat_percentage', 0)
            
            if warning_level == 'critical':
                self.provider_warning.emit('meteostat', int(usage_percent))
            elif warning_level == 'warning':
                self.provider_warning.emit('meteostat', int(usage_percent))
            
            print("‚úÖ DEBUG: User preferences bet√∂ltve √©s signalok elk√ºldve")
            
        except Exception as e:
            print(f"‚ö†Ô∏è DEBUG: User preferences bet√∂lt√©si hiba: {e}")
    
    def _init_database_connection(self) -> None:
        """üå™Ô∏è KRITIKUS JAV√çT√ÅS: Adatb√°zis kapcsolat inicializ√°l√°sa WIND GUSTS s√©ma friss√≠t√©ssel."""
        try:
            # Adatb√°zis mappa l√©trehoz√°sa ha nem l√©tezik
            self.db_path.parent.mkdir(parents=True, exist_ok=True)
            
            # Kapcsolat tesztel√©se √©s s√©ma friss√≠t√©s
            conn = sqlite3.connect(str(self.db_path))
            
            # üå™Ô∏è KRITIKUS JAV√çT√ÅS: Adatb√°zis s√©ma friss√≠t√©s wind_gusts_max oszloppal
            self._update_database_schema(conn)
            
            conn.close()
            
            print(f"‚úÖ DEBUG: Adatb√°zis kapcsolat OK (WIND GUSTS support): {self.db_path}")
            
        except Exception as e:
            print(f"‚ùå DEBUG: Adatb√°zis kapcsolat hiba: {e}")
            self.error_occurred.emit(f"Adatb√°zis hiba: {e}")
    
    def _update_database_schema(self, conn: sqlite3.Connection) -> None:
        """
        üå™Ô∏è KRITIKUS JAV√çT√ÅS: Adatb√°zis s√©ma friss√≠t√©s wind_gusts_max oszloppal.
        
        Args:
            conn: SQLite kapcsolat
        """
        try:
            cursor = conn.cursor()
            
            # Ellen≈ërizz√ºk, hogy l√©tezik-e a wind_gusts_max oszlop
            cursor.execute("PRAGMA table_info(weather_data)")
            columns = [column[1] for column in cursor.fetchall()]
            
            if 'wind_gusts_max' not in columns:
                print("üå™Ô∏è DEBUG: wind_gusts_max oszlop nem l√©tezik - hozz√°ad√°s...")
                
                # √öj oszlop hozz√°ad√°sa
                cursor.execute("""
                    ALTER TABLE weather_data 
                    ADD COLUMN wind_gusts_max REAL
                """)
                
                print("‚úÖ DEBUG: wind_gusts_max oszlop sikeresen hozz√°adva")
                
                # Index l√©trehoz√°sa a gyorsabb lek√©rdez√©sekhez
                cursor.execute("""
                    CREATE INDEX IF NOT EXISTS idx_weather_data_wind_gusts_max 
                    ON weather_data(wind_gusts_max)
                """)
                
                print("‚úÖ DEBUG: wind_gusts_max index sikeresen l√©trehozva")
                
            else:
                print("‚úÖ DEBUG: wind_gusts_max oszlop m√°r l√©tezik")
            
            # üåç Provider tracking oszlop hozz√°ad√°sa
            if 'data_provider' not in columns:
                print("üåç DEBUG: data_provider oszlop nem l√©tezik - hozz√°ad√°s...")
                
                cursor.execute("""
                    ALTER TABLE weather_data 
                    ADD COLUMN data_provider TEXT DEFAULT 'open-meteo'
                """)
                
                print("‚úÖ DEBUG: data_provider oszlop sikeresen hozz√°adva")
            
            conn.commit()
            
        except Exception as e:
            print(f"‚ùå DEBUG: Adatb√°zis s√©ma friss√≠t√©s hiba: {e}")
            # Nem kritikus hiba, folytatjuk a m≈±k√∂d√©st
    
    def _connect_worker_signals(self) -> None:
        """Worker signal kapcsol√°sok."""
        print("üîó DEBUG: Worker signals kapcsol√°sa...")
        
        # Geocoding worker signalok
        self.worker_manager.geocoding_completed.connect(self._on_geocoding_completed)
        print("üîó DEBUG: geocoding_completed signal connected")
        
        # Weather data worker signalok
        self.worker_manager.weather_data_completed.connect(self._on_weather_data_completed)
        print("üîó DEBUG: weather_data_completed signal connected")
        
        # √Åltal√°nos worker signalok
        self.worker_manager.error_occurred.connect(self._on_worker_error)
        self.worker_manager.progress_updated.connect(self.progress_updated.emit)
        
        print("‚úÖ DEBUG: Signal kapcsol√°sok k√©sz")
    
    # === PROVIDER ROUTING MET√ìDUSOK ===
    
    def _select_provider_for_request(self, latitude: float, longitude: float, 
                                   start_date: str, end_date: str) -> str:
        """
        üåç Smart provider selection a k√©r√©s alapj√°n.
        
        Args:
            latitude: F√∂ldrajzi sz√©less√©g
            longitude: F√∂ldrajzi hossz√∫s√°g
            start_date: Kezd≈ë d√°tum
            end_date: Befejez≈ë d√°tum
            
        Returns:
            V√°lasztott provider neve
        """
        try:
            # User preference ellen≈ërz√©se
            user_provider = self.user_preferences.get_selected_provider()
            
            if user_provider != 'auto':
                print(f"üåç DEBUG: User forced provider: {user_provider}")
                
                # Rate limiting ellen≈ërz√©s premium providerekn√©l
                if user_provider != 'open-meteo':
                    usage_summary = self.usage_tracker.get_usage_summary()
                    if usage_summary.get('warning_level') == 'critical':
                        print(f"‚ö†Ô∏è DEBUG: Provider {user_provider} rate limit exceeded, fallback to open-meteo")
                        self.provider_fallback.emit(user_provider, 'open-meteo')
                        return 'open-meteo'
                
                return user_provider
            
            # Automatikus provider routing
            print("üåç DEBUG: Automatic provider routing...")
            
            # D√°tum tartom√°ny ellen≈ërz√©se
            start = datetime.strptime(start_date, "%Y-%m-%d")
            end = datetime.strptime(end_date, "%Y-%m-%d")
            days_requested = (end - start).days + 1
            
            # Historikus adat ellen≈ërz√©se (2 h√≥napn√°l r√©gebbi)
            historical_threshold = datetime.now() - timedelta(days=60)
            is_historical = start < historical_threshold
            
            # Nagy d√°tum tartom√°ny (3+ h√≥nap)
            is_large_request = days_requested > 90
            
            print(f"üåç DEBUG: Request analysis:")
            print(f"üåç DEBUG: - Days requested: {days_requested}")
            print(f"üåç DEBUG: - Is historical: {is_historical}")
            print(f"üåç DEBUG: - Is large request: {is_large_request}")
            
            # Smart routing logic
            if is_historical or is_large_request:
                # Meteostat jobb historikus adatokhoz
                usage_summary = self.usage_tracker.get_usage_summary()
                if usage_summary.get('warning_level') != 'critical':
                    print("üåç DEBUG: Selected Meteostat for historical/large request")
                    return 'meteostat'
                else:
                    print("üåç DEBUG: Meteostat rate limited, fallback to Open-Meteo")
                    self.provider_fallback.emit('meteostat', 'open-meteo')
                    return 'open-meteo'
            else:
                # Aktu√°lis/k√∂zelm√∫lt adatokhoz Open-Meteo
                print("üåç DEBUG: Selected Open-Meteo for recent data")
                return 'open-meteo'
                
        except Exception as e:
            print(f"‚ùå DEBUG: Provider selection error: {e}")
            return 'open-meteo'  # Fallback to free provider
    
    def _track_provider_usage(self, provider_name: str) -> None:
        """
        Provider haszn√°lat tracking.
        
        Args:
            provider_name: Provider neve
        """
        try:
            # Usage tracking
            updated_usage = self.usage_tracker.track_request(provider_name)
            
            if updated_usage:
                print(f"üåç DEBUG: Tracked usage for {provider_name}")
                
                # Usage statistics friss√≠t√©se - a track_request visszaadott adatok alapj√°n
                usage_summary = self.usage_tracker.get_usage_summary()
                self.provider_usage_updated.emit({
                    'meteostat': {
                        'requests': usage_summary.get('meteostat_requests', 0),
                        'limit': usage_summary.get('meteostat_limit', 10000)
                    },
                    'open-meteo': {
                        'requests': usage_summary.get('openmeteo_requests', 0),
                        'limit': float('inf')  # Unlimited
                    }
                })
                
                # Warning ellen≈ërz√©s
                if provider_name != 'open-meteo':
                    warning_level = usage_summary.get('warning_level', 'normal')
                    usage_percent = usage_summary.get('meteostat_percentage', 0)
                    
                    if warning_level == 'critical':
                        print(f"üö® DEBUG: Provider {provider_name} usage critical: {usage_percent:.1f}%")
                        self.provider_warning.emit(provider_name, int(usage_percent))
                    elif warning_level == 'warning':
                        print(f"‚ö†Ô∏è DEBUG: Provider {provider_name} usage warning: {usage_percent:.1f}%")
                        self.provider_warning.emit(provider_name, int(usage_percent))
            else:
                print(f"‚ö†Ô∏è DEBUG: Failed to track usage for {provider_name}")
                
        except Exception as e:
            print(f"‚ùå DEBUG: Usage tracking error: {e}")
    
    @Slot(str)
    def handle_provider_change(self, provider_name: str) -> None:
        """
        Provider v√°ltoz√°s kezel√©se GUI-b√≥l.
        
        Args:
            provider_name: √öj provider neve
        """
        try:
            print(f"üåç DEBUG: Provider change request: {provider_name}")
            
            # User preferences friss√≠t√©se
            self.user_preferences.set_selected_provider(provider_name)
            
            # Provider selection signal
            self.provider_selected.emit(provider_name)
            
            # St√°tusz friss√≠t√©se
            if provider_name == 'auto':
                status_msg = "ü§ñ Automatikus provider routing bekapcsolva"
            else:
                provider_info = self.provider_config.PROVIDERS.get(provider_name, {})
                provider_display = provider_info.get('name', provider_name)
                status_msg = f"üåç Provider be√°ll√≠tva: {provider_display}"
            
            self.status_updated.emit(status_msg)
            
            print(f"‚úÖ DEBUG: Provider changed to: {provider_name}")
            
        except Exception as e:
            print(f"‚ùå DEBUG: Provider change error: {e}")
            self.error_occurred.emit(f"Provider v√°lt√°si hiba: {e}")
    
    # === TELEP√úL√âS KERES√âS LOGIKA ===
    
    @Slot(str)
    def handle_search_request(self, search_query: str) -> None:
        """
        Telep√ºl√©s keres√©si k√©r√©s kezel√©se a ControlPanel-t≈ël.
        
        Args:
            search_query: Keres√©si kifejez√©s
        """
        print(f"üîç DEBUG: handle_search_request called with: '{search_query}'")
        
        # Alapszint≈± valid√°ci√≥
        if not search_query or len(search_query.strip()) < 2:
            error_msg = "Legal√°bb 2 karakter sz√ºks√©ges a keres√©shez"
            print(f"‚ùå DEBUG: Validation error: {error_msg}")
            self.error_occurred.emit(error_msg)
            return
        
        # Jelenlegi keres√©s t√°rol√°sa
        self.active_search_query = search_query.strip()
        print(f"üîç DEBUG: Active search query set: '{self.active_search_query}'")
        
        # St√°tusz friss√≠t√©se
        search_info = f"Keres√©s: {self.active_search_query}"
        self.status_updated.emit(search_info + "...")
        print(f"üìù DEBUG: Status updated: {search_info}")
        
        # Geocoding worker ind√≠t√°sa
        try:
            print("üöÄ DEBUG: Creating GeocodingWorker...")
            worker = GeocodingWorker(self.active_search_query)
            print(f"‚úÖ DEBUG: GeocodingWorker created for query: '{self.active_search_query}'")
            
            # WorkerManager k√∂zponti haszn√°lata
            print("üöÄ DEBUG: Starting worker via WorkerManager...")
            worker_id = self.worker_manager.start_geocoding(worker)
            print(f"‚úÖ DEBUG: GeocodingWorker started via WorkerManager with ID: {worker_id}")
            
        except Exception as e:
            error_msg = f"Geocoding worker ind√≠t√°si hiba: {e}"
            print(f"‚ùå DEBUG: {error_msg}")
            import traceback
            traceback.print_exc()
            self.error_occurred.emit(error_msg)
            return
        
        print(f"‚úÖ DEBUG: handle_search_request completed successfully for '{search_query}'")
    
    @Slot(list)
    def _on_geocoding_completed(self, results: List[Dict[str, Any]]) -> None:
        """
        Geocoding befejez√©s√©nek kezel√©se.
        
        Args:
            results: Telep√ºl√©s tal√°latok list√°ja
        """
        print(f"üìç DEBUG: _on_geocoding_completed called with {len(results)} results")
        
        try:
            if not results:
                msg = "Nem tal√°lhat√≥ telep√ºl√©s ezzel a n√©vvel"
                print(f"üìç DEBUG: No results found")
                self.status_updated.emit(msg)
                self.geocoding_results_ready.emit([])
                return
            
            print(f"üìç DEBUG: Processing {len(results)} geocoding results...")
            
            # Eredm√©nyek feldolgoz√°sa √©s gazdag√≠t√°sa
            processed_results = self._process_geocoding_results(results)
            print(f"üìç DEBUG: Processed {len(processed_results)} results")
            
            # St√°tusz friss√≠t√©se
            status_msg = f"{len(processed_results)} telep√ºl√©s tal√°lat"
            self.status_updated.emit(status_msg)
            print(f"üìù DEBUG: Status updated: {status_msg}")
            
            # Eredm√©nyek tov√°bb√≠t√°sa a GUI-nak
            print(f"üì° DEBUG: Emitting geocoding_results_ready signal...")
            self.geocoding_results_ready.emit(processed_results)
            
            print(f"‚úÖ DEBUG: Geocoding befejezve: {len(processed_results)} tal√°lat")
            
        except Exception as e:
            print(f"‚ùå DEBUG: Geocoding feldolgoz√°si hiba: {e}")
            import traceback
            traceback.print_exc()
            self.error_occurred.emit(f"Keres√©si eredm√©nyek feldolgoz√°si hiba: {e}")
    
    def _process_geocoding_results(self, raw_results: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """
        Geocoding eredm√©nyek feldolgoz√°sa √©s gazdag√≠t√°sa.
        
        Args:
            raw_results: Nyers API eredm√©nyek
            
        Returns:
            Feldolgozott √©s gazdag√≠tott eredm√©nyek
        """
        processed = []
        
        print(f"üìç DEBUG: Processing {len(raw_results)} raw results")
        
        for i, result in enumerate(raw_results):
            try:
                # Alapadatok kinyer√©se
                processed_result = {
                    'name': result.get('name', ''),
                    'latitude': result.get('latitude', 0.0),
                    'longitude': result.get('longitude', 0.0),
                    'country': result.get('country', ''),
                    'admin1': result.get('admin1', ''),  # megye/r√©gi√≥
                    'admin2': result.get('admin2', ''),  # j√°r√°s
                    'population': result.get('population'),
                    'timezone': result.get('timezone', 'UTC'),
                    'elevation': result.get('elevation'),
                    
                    # Megjegz√≠t√©sek a GUI sz√°m√°ra
                    'display_name': self._create_display_name(result),
                    'search_rank': result.get('rank', 999),
                    'original_query': self.active_search_query,
                }
                
                processed.append(processed_result)
                
                # Debug inform√°ci√≥ minden 5. eredm√©nyhez
                if i < 5 or i % 5 == 0:
                    name = processed_result['name']
                    country = processed_result['country']
                    print(f"üìç DEBUG: Result {i}: {name}, {country}")
                
            except Exception as e:
                print(f"‚ö†Ô∏è DEBUG: Eredm√©ny {i} feldolgoz√°si hiba: {e}")
                continue
        
        # Rendez√©s relevancia szerint
        processed.sort(key=lambda x: x['search_rank'])
        print(f"üìç DEBUG: Results sorted by relevance")
        
        return processed
    
    def _create_display_name(self, result: Dict[str, Any]) -> str:
        """
        Felhaszn√°l√≥bar√°t megjelen√≠t√©si n√©v l√©trehoz√°sa.
        
        Args:
            result: Geocoding eredm√©ny
            
        Returns:
            Form√°zott megjelen√≠t√©si n√©v
        """
        name = result.get('name', 'Ismeretlen')
        admin1 = result.get('admin1', '')
        country = result.get('country', '')
        
        display_parts = [name]
        
        if admin1:
            display_parts.append(admin1)
        
        if country:
            display_parts.append(country)
        
        return ', '.join(display_parts)
    
    # === TELEP√úL√âS KIV√ÅLASZT√ÅS LOGIKA ===
    
    @Slot(str, float, float, dict)
    def handle_city_selection(self, city_name: str, latitude: float, longitude: float, metadata: Dict[str, Any]) -> None:
        """
        Telep√ºl√©s kiv√°laszt√°s kezel√©se a ControlPanel-t≈ël.
        
        Args:
            city_name: Telep√ºl√©s neve
            latitude: F√∂ldrajzi sz√©less√©g
            longitude: F√∂ldrajzi hossz√∫s√°g  
            metadata: Tov√°bbi metaadatok
        """
        print(f"üìç DEBUG: handle_city_selection called: {city_name} ({latitude:.4f}, {longitude:.4f})")
        
        try:
            # Kiv√°lasztott telep√ºl√©s adatainak ment√©se
            self.current_city_data = {
                'name': city_name,
                'latitude': latitude,
                'longitude': longitude,
                'metadata': metadata,
                'selected_at': datetime.now().isoformat(),
            }
            
            # St√°tusz friss√≠t√©se
            status_msg = f"Kiv√°lasztva: {city_name}"
            self.status_updated.emit(status_msg)
            print(f"üìù DEBUG: City selection status: {status_msg}")
            
            # Adatb√°zisba ment√©s (aszinkron)
            self._save_city_to_database(self.current_city_data)
            
            print(f"‚úÖ DEBUG: Telep√ºl√©s kiv√°lasztva: {city_name} ({latitude:.4f}, {longitude:.4f})")
            
        except Exception as e:
            print(f"‚ùå DEBUG: Telep√ºl√©s kiv√°laszt√°si hiba: {e}")
            self.error_occurred.emit(f"Telep√ºl√©s kiv√°laszt√°si hiba: {e}")
    
    def _save_city_to_database(self, city_data: Dict[str, Any]) -> None:
        """
        Telep√ºl√©s adatok ment√©se adatb√°zisba.
        
        Args:
            city_data: Telep√ºl√©s adatok
        """
        try:
            conn = sqlite3.connect(str(self.db_path))
            cursor = conn.cursor()
            
            # Upsert (INSERT OR REPLACE) m≈±velet
            cursor.execute('''
                INSERT OR REPLACE INTO cities (name, latitude, longitude, country, region)
                VALUES (?, ?, ?, ?, ?)
            ''', (
                city_data['name'],
                city_data['latitude'], 
                city_data['longitude'],
                city_data['metadata'].get('country', ''),
                city_data['metadata'].get('admin1', '')
            ))
            
            conn.commit()
            conn.close()
            
            # Sikeres ment√©s jelz√©se
            self.city_saved_to_db.emit(city_data)
            
            print(f"‚úÖ DEBUG: Telep√ºl√©s mentve adatb√°zisba: {city_data['name']}")
            
        except Exception as e:
            print(f"‚ùå DEBUG: Adatb√°zis ment√©si hiba: {e}")
            # Nem kritikus hiba, nem szak√≠tjuk meg a folyamatot
    
    # === ID≈êJ√ÅR√ÅSI ADATOK LEK√âRDEZ√âS LOGIKA (PROVIDER ROUTING + WIND GUSTS) ===
    
    @Slot(float, float, str, str, dict)
    def handle_weather_data_request(self, latitude: float, longitude: float, 
                                   start_date: str, end_date: str, params: Dict[str, Any]) -> None:
        """
        üåçüå™Ô∏è KRITIKUS JAV√çT√ÅS: Id≈ëj√°r√°si adatok lek√©rdez√©s PROVIDER ROUTING + WIND GUSTS t√°mogat√°ssal.
        
        Args:
            latitude: F√∂ldrajzi sz√©less√©g
            longitude: F√∂ldrajzi hossz√∫s√°g
            start_date: Kezd≈ë d√°tum (YYYY-MM-DD)
            end_date: Befejez≈ë d√°tum (YYYY-MM-DD)
            params: API param√©terek
        """
        print(f"üåçüå™Ô∏è DEBUG: Weather data request (PROVIDER ROUTING + WIND GUSTS): {latitude:.4f}, {longitude:.4f}")
        
        try:
            if not self.current_city_data:
                error_msg = "Nincs kiv√°lasztva telep√ºl√©s"
                print(f"‚ùå DEBUG: {error_msg}")
                self.error_occurred.emit(error_msg)
                return
            
            # √Ållapot tiszt√≠t√°s
            self.current_weather_data = None
            
            # K√©r√©s valid√°l√°sa
            if not self._validate_weather_request(latitude, longitude, start_date, end_date):
                return
            
            # üåç PROVIDER ROUTING: Smart provider selection
            selected_provider = self._select_provider_for_request(latitude, longitude, start_date, end_date)
            print(f"üåç DEBUG: Selected provider: {selected_provider}")
            
            # Provider selection signal k√ºld√©se
            self.provider_selected.emit(selected_provider)
            
            # Usage tracking
            self._track_provider_usage(selected_provider)
            
            city_name = self.current_city_data.get('name', 'Ismeretlen')
            
            print(f"üåçüå™Ô∏è DEBUG: {selected_provider.upper()} WIND GUSTS k√©r√©s - {city_name}, {start_date} - {end_date}")
            
            # Provider-specifikus k√©r√©s ind√≠t√°sa
            provider_display = self.provider_config.PROVIDERS.get(selected_provider, {}).get('name', selected_provider)
            self.status_updated.emit(f"üåçüå™Ô∏è Id≈ëj√°r√°si adatok lek√©rdez√©se ({provider_display}): {city_name}")
            
            self._start_weather_request_with_provider(
                latitude, longitude, start_date, end_date, selected_provider
            )
            
        except Exception as e:
            print(f"‚ùå DEBUG: Weather data k√©r√©si hiba: {e}")
            self.error_occurred.emit(f"Lek√©rdez√©si hiba: {e}")
    
    def _start_weather_request_with_provider(self, latitude: float, longitude: float, 
                                           start_date: str, end_date: str, provider: str) -> None:
        """
        üåçüå™Ô∏è KRITIKUS JAV√çT√ÅS: Id≈ëj√°r√°si adatok lek√©rdez√©se megadott providerrel WIND GUSTS t√°mogat√°ssal.
        
        Args:
            latitude: F√∂ldrajzi sz√©less√©g
            longitude: F√∂ldrajzi hossz√∫s√°g
            start_date: Kezd≈ë d√°tum
            end_date: Befejez≈ë d√°tum
            provider: Provider neve
        """
        try:
            print(f"üåçüå™Ô∏è DEBUG: Starting weather request with provider: {provider}")
            
            # Weather data worker l√©trehoz√°sa provider specifikus konfigur√°ci√≥val
            worker = WeatherDataWorker(
                latitude=latitude,
                longitude=longitude, 
                start_date=start_date,
                end_date=end_date,
                preferred_provider=provider  # üåç Provider routing parameter (jav√≠tott!)
            )
            
            # WorkerManager k√∂zponti haszn√°lata
            print(f"üöÄ DEBUG: Starting {provider.upper()} WIND GUSTS worker via WorkerManager...")
            worker_id = self.worker_manager.start_weather_data_fetch(worker)
            print(f"‚úÖ DEBUG: {provider.upper()} WIND GUSTS worker started via WorkerManager with ID: {worker_id}")
            
        except Exception as e:
            print(f"‚ùå DEBUG: {provider} WIND GUSTS worker ind√≠t√°si hiba: {e}")
            
            # Fallback strategy - ha a kiv√°lasztott provider sikertelen
            if provider != 'open-meteo':
                print(f"üåç DEBUG: Fallback to Open-Meteo due to {provider} failure")
                self.provider_fallback.emit(provider, 'open-meteo')
                
                try:
                    # Retry with Open-Meteo
                    fallback_worker = WeatherDataWorker(
                        latitude=latitude,
                        longitude=longitude,
                        start_date=start_date,
                        end_date=end_date,
                        preferred_provider='open-meteo'  # üåç Jav√≠tott param√©ter n√©v!
                    )
                    
                    worker_id = self.worker_manager.start_weather_data_fetch(fallback_worker)
                    print(f"‚úÖ DEBUG: Open-Meteo fallback worker started with ID: {worker_id}")
                    
                except Exception as fallback_error:
                    print(f"‚ùå DEBUG: Fallback worker ind√≠t√°si hiba: {fallback_error}")
                    self.error_occurred.emit(f"Id≈ëj√°r√°si adatok lek√©rdez√©se sikertelen: {e}")
            else:
                self.error_occurred.emit(f"Id≈ëj√°r√°si adatok lek√©rdez√©se sikertelen: {e}")
    
    def _validate_weather_request(self, latitude: float, longitude: float, 
                                 start_date: str, end_date: str) -> bool:
        """
        Weather data k√©r√©s valid√°l√°sa.
        
        Args:
            latitude: F√∂ldrajzi sz√©less√©g
            longitude: F√∂ldrajzi hossz√∫s√°g  
            start_date: Kezd≈ë d√°tum
            end_date: Befejez≈ë d√°tum
            
        Returns:
            √ârv√©nyes-e a k√©r√©s
        """
        # Koordin√°t√°k valid√°l√°sa
        if not (-90 <= latitude <= 90) or not (-180 <= longitude <= 180):
            self.error_occurred.emit("√ârv√©nytelen koordin√°t√°k")
            return False
        
        # D√°tumok valid√°l√°sa
        try:
            start = datetime.strptime(start_date, "%Y-%m-%d")
            end = datetime.strptime(end_date, "%Y-%m-%d")
            
            if start > end:
                self.error_occurred.emit("A kezd≈ë d√°tum nem lehet nagyobb a befejez≈ë d√°tumn√°l")
                return False
            
            # Maximum 60 √©ves tartom√°ny
            if (end - start).days > 60 * 365:
                self.error_occurred.emit("Maximum 60 √©ves id≈ëszak k√©rdezhet≈ë le")
                return False
            
        except ValueError:
            self.error_occurred.emit("√ârv√©nytelen d√°tum form√°tum")
            return False
        
        return True
    
    @Slot(dict)
    def _on_weather_data_completed(self, data: Dict[str, Any]) -> None:
        """
        üåçüå™Ô∏è KRITIKUS JAV√çT√ÅS: Id≈ëj√°r√°si adatok lek√©rdez√©s√©nek befejez√©se PROVIDER ROUTING + WIND GUSTS t√°mogat√°ssal.
        
        Args:
            data: API v√°lasz adatok
        """
        print(f"üåçüå™Ô∏è DEBUG: _on_weather_data_completed called (PROVIDER ROUTING + WIND GUSTS support)")
        
        try:
            # Provider inform√°ci√≥ kinyer√©se az adatokb√≥l
            used_provider = data.get('provider', 'unknown')
            print(f"üåç DEBUG: Weather data received from provider: {used_provider}")
            
            # Adatok feldolgoz√°sa √©s valid√°l√°sa
            processed_data = self._process_weather_data(data)
            
            if not processed_data:
                self.error_occurred.emit("Nincs feldolgozhat√≥ id≈ëj√°r√°si adat")
                return
            
            # Provider inform√°ci√≥ hozz√°ad√°sa a feldolgozott adatokhoz
            processed_data['provider'] = used_provider
            
            # Jelenlegi adatok ment√©se
            self.current_weather_data = processed_data
            
            # Adatb√°zisba ment√©s (aszinkron)
            self._save_weather_to_database(processed_data)
            
            # St√°tusz friss√≠t√©se
            city_name = self.current_city_data.get('name', 'Ismeretlen') if self.current_city_data else 'Ismeretlen'
            record_count = len(processed_data.get('daily', {}).get('time', []))
            
            # üå™Ô∏è KRITIKUS JAV√çT√ÅS: Sz√©ll√∂k√©s statisztika a st√°tuszban
            wind_gusts_info = ""
            if 'wind_gusts_max' in processed_data.get('daily', {}):
                wind_gusts_max = processed_data['daily']['wind_gusts_max']
                if wind_gusts_max:
                    max_gust = max([g for g in wind_gusts_max if g is not None])
                    wind_gusts_info = f", max sz√©ll√∂k√©s: {max_gust:.1f} km/h"
            
            # üåç Provider info a st√°tuszban
            provider_display = self.provider_config.PROVIDERS.get(used_provider, {}).get('name', used_provider)
            
            self.status_updated.emit(
                f"üåçüå™Ô∏è Adatok sikeresen lek√©rdezve ({provider_display}): {city_name} ({record_count} nap{wind_gusts_info})"
            )
            
            # Eredm√©nyek tov√°bb√≠t√°sa a GUI komponenseknek
            print(f"üì° DEBUG: Emitting weather_data_ready signal...")
            self.weather_data_ready.emit(processed_data)
            
            print(f"‚úÖ DEBUG: Weather data befejezve: {record_count} napi rekord (PROVIDER ROUTING + WIND GUSTS support)")
            
        except Exception as e:
            print(f"‚ùå DEBUG: Weather data feldolgoz√°si hiba: {e}")
            import traceback
            traceback.print_exc()
            self.error_occurred.emit(f"Adatok feldolgoz√°si hiba: {e}")
    
    def _process_weather_data(self, raw_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """
        üå™Ô∏è KRITIKUS JAV√çT√ÅS: Id≈ëj√°r√°si adatok feldolgoz√°sa WIND GUSTS t√°mogat√°ssal.
        
        Args:
            raw_data: Nyers API adatok
            
        Returns:
            Feldolgozott adatok vagy None
        """
        try:
            print(f"üå™Ô∏è DEBUG: Processing weather data (WIND GUSTS support)...")
            
            if not raw_data or 'daily' not in raw_data:
                print(f"‚ö†Ô∏è DEBUG: Invalid weather data structure")
                return None
            
            daily_data = raw_data['daily']
            hourly_data = raw_data.get('hourly', {})
            
            # Alapvet≈ë mez≈ëk ellen≈ërz√©se
            required_fields = ['time', 'temperature_2m_max', 'temperature_2m_min', 'precipitation_sum']
            for field in required_fields:
                if field not in daily_data or not daily_data[field]:
                    print(f"‚ö†Ô∏è DEBUG: Hi√°nyz√≥ mez≈ë: {field}")
                    return None
            
            record_count = len(daily_data['time'])
            print(f"üå™Ô∏è DEBUG: Weather data valid - {record_count} records")
            
            # üå™Ô∏è KRITIKUS JAV√çT√ÅS: √ìr√°nk√©nti sz√©ll√∂k√©sek ‚Üí napi maximum sz√°m√≠t√°s
            daily_wind_gusts_max = self._calculate_daily_max_wind_gusts(
                hourly_data.get('wind_gusts_10m', []),
                hourly_data.get('time', []),
                daily_data.get('time', [])
            )
            
            # Feldolgozott adatok √∂ssze√°ll√≠t√°sa
            processed = {
                'daily': daily_data.copy(),
                'hourly': hourly_data,  # √ìr√°nk√©nti adatok megtart√°sa
                'latitude': raw_data.get('latitude'),
                'longitude': raw_data.get('longitude'),
                'timezone': raw_data.get('timezone', 'UTC'),
                'elevation': raw_data.get('elevation'),
                
                # Metaadatok
                'data_source': raw_data.get('provider', 'unknown'),
                'source_type': raw_data.get('provider', 'unknown'),
                'provider': raw_data.get('provider', 'unknown'),  # üåç Provider info biztos√≠t√°sa
                'processed_at': datetime.now().isoformat(),
                'city_data': self.current_city_data.copy() if self.current_city_data else None,
                'record_count': record_count
            }
            
            # üå™Ô∏è KRITIKUS JAV√çT√ÅS: Napi maximum sz√©ll√∂k√©sek hozz√°ad√°sa
            if daily_wind_gusts_max:
                processed['daily']['wind_gusts_max'] = daily_wind_gusts_max
                print(f"üå™Ô∏è DEBUG: Added {len(daily_wind_gusts_max)} daily wind gusts max values")
                
                # Statisztika
                valid_gusts = [g for g in daily_wind_gusts_max if g is not None and g > 0]
                if valid_gusts:
                    max_gust = max(valid_gusts)
                    print(f"üå™Ô∏è DEBUG: Maximum napi sz√©ll√∂k√©s: {max_gust:.1f} km/h")
                    
                    # Kritikus ellen≈ërz√©s - √©letvesz√©lyes alulbecsl√©s detekt√°l√°sa
                    if max_gust > 100:
                        print(f"‚ö†Ô∏è  DEBUG: KRITIKUS: Extr√©m sz√©ll√∂k√©s detekt√°lva: {max_gust:.1f} km/h")
                    elif max_gust > 80:
                        print(f"‚ö†Ô∏è  DEBUG: Viharos sz√©ll√∂k√©s detekt√°lva: {max_gust:.1f} km/h")
                    elif max_gust > 60:
                        print(f"‚úÖ DEBUG: Er≈ës sz√©ll√∂k√©s detekt√°lva: {max_gust:.1f} km/h")
                    else:
                        print(f"‚úÖ DEBUG: M√©rs√©kelt sz√©ll√∂k√©s: {max_gust:.1f} km/h")
            else:
                print(f"‚ö†Ô∏è DEBUG: Nincs sz√©ll√∂k√©s adat az √≥r√°nk√©nti adatokban")
            
            print(f"‚úÖ DEBUG: Weather data processed successfully with WIND GUSTS - {record_count} records")
            
            return processed
            
        except Exception as e:
            print(f"‚ùå DEBUG: Weather data feldolgoz√°si hiba: {e}")
            import traceback
            traceback.print_exc()
            return None
    
    def _calculate_daily_max_wind_gusts(self, hourly_gusts: List[float], 
                                       hourly_times: List[str], 
                                       daily_times: List[str]) -> List[float]:
        """
        üå™Ô∏è KRITIKUS JAV√çT√ÅS: √ìr√°nk√©nti sz√©ll√∂k√©sek ‚Üí napi maximum konverzi√≥.
        
        Args:
            hourly_gusts: √ìr√°nk√©nti sz√©ll√∂k√©sek (km/h)
            hourly_times: √ìr√°nk√©nti id≈ëpontok (ISO format)
            daily_times: Napi id≈ëpontok (YYYY-MM-DD format)
            
        Returns:
            Napi maximum sz√©ll√∂k√©sek list√°ja
        """
        try:
            print(f"üå™Ô∏è DEBUG: Calculating daily max wind gusts...")
            print(f"üå™Ô∏è DEBUG: Hourly gusts count: {len(hourly_gusts)}")
            print(f"üå™Ô∏è DEBUG: Hourly times count: {len(hourly_times)}")
            print(f"üå™Ô∏è DEBUG: Daily times count: {len(daily_times)}")
            
            if not hourly_gusts or not hourly_times or not daily_times:
                print(f"‚ö†Ô∏è DEBUG: Missing data for wind gusts calculation")
                return []
            
            # √ìr√°nk√©nti adatok DataFrame-be konvert√°l√°sa
            hourly_df = pd.DataFrame({
                'time': pd.to_datetime(hourly_times),
                'wind_gusts': hourly_gusts
            })
            
            # Datum oszlop hozz√°ad√°sa (√≥r√°nk√©nti id≈ëpontokb√≥l)
            hourly_df['date'] = hourly_df['time'].dt.date
            
            # Napi maximumok sz√°m√≠t√°sa
            daily_max_gusts = []
            
            for daily_time in daily_times:
                try:
                    # Napi d√°tum konvert√°l√°sa
                    daily_date = pd.to_datetime(daily_time).date()
                    
                    # Adott nap √≥r√°nk√©nti sz√©ll√∂k√©sei
                    day_gusts = hourly_df[hourly_df['date'] == daily_date]['wind_gusts']
                    
                    if not day_gusts.empty:
                        # Csak √©rv√©nyes √©rt√©kek (nem None, nem NaN)
                        valid_gusts = day_gusts.dropna()
                        
                        if not valid_gusts.empty:
                            daily_max = valid_gusts.max()
                            daily_max_gusts.append(daily_max)
                            
                            # Debug logol√°s minden 10. naphoz
                            if len(daily_max_gusts) % 10 == 0:
                                print(f"üå™Ô∏è DEBUG: Day {daily_time}: max gust {daily_max:.1f} km/h")
                        else:
                            # Nincs √©rv√©nyes sz√©ll√∂k√©s adat erre a napra
                            daily_max_gusts.append(None)
                    else:
                        # Nincs √≥r√°nk√©nti adat erre a napra
                        daily_max_gusts.append(None)
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è DEBUG: Error processing day {daily_time}: {e}")
                    daily_max_gusts.append(None)
            
            # Eredm√©ny valid√°l√°s
            valid_gusts = [g for g in daily_max_gusts if g is not None and g > 0]
            
            if valid_gusts:
                max_overall = max(valid_gusts)
                avg_gusts = sum(valid_gusts) / len(valid_gusts)
                
                print(f"üå™Ô∏è DEBUG: Daily wind gusts calculation complete:")
                print(f"üå™Ô∏è DEBUG: - Valid days: {len(valid_gusts)}/{len(daily_max_gusts)}")
                print(f"üå™Ô∏è DEBUG: - Maximum overall: {max_overall:.1f} km/h")
                print(f"üå™Ô∏è DEBUG: - Average gusts: {avg_gusts:.1f} km/h")
                
                # Kritikus ellen≈ërz√©s - √©letvesz√©lyes alulbecsl√©s detekt√°l√°sa
                if max_overall > 120:
                    print(f"üö® DEBUG: KRITIKUS: Hurrik√°n er≈ëss√©g≈± sz√©ll√∂k√©s: {max_overall:.1f} km/h")
                elif max_overall > 100:
                    print(f"‚ö†Ô∏è  DEBUG: KRITIKUS: Extr√©m sz√©ll√∂k√©s: {max_overall:.1f} km/h")
                elif max_overall > 80:
                    print(f"‚ö†Ô∏è  DEBUG: Viharos sz√©ll√∂k√©s: {max_overall:.1f} km/h")
                else:
                    print(f"‚úÖ DEBUG: M√©rs√©kelt sz√©ll√∂k√©s: {max_overall:.1f} km/h")
                    
            else:
                print(f"‚ö†Ô∏è DEBUG: Nincs √©rv√©nyes sz√©ll√∂k√©s adat")
            
            return daily_max_gusts
            
        except Exception as e:
            print(f"‚ùå DEBUG: Daily wind gusts calculation error: {e}")
            import traceback
            traceback.print_exc()
            return []
    
    def _save_weather_to_database(self, weather_data: Dict[str, Any]) -> None:
        """
        üåçüå™Ô∏è KRITIKUS JAV√çT√ÅS: Id≈ëj√°r√°si adatok ment√©se adatb√°zisba PROVIDER ROUTING + WIND GUSTS t√°mogat√°ssal.
        
        Args:
            weather_data: Feldolgozott id≈ëj√°r√°si adatok
        """
        try:
            if not self.current_city_data:
                print("‚ö†Ô∏è DEBUG: Nincs v√°ros adat az id≈ëj√°r√°si adatok ment√©s√©hez")
                return
            
            conn = sqlite3.connect(str(self.db_path))
            cursor = conn.cursor()
            
            # V√°ros ID lek√©rdez√©se
            cursor.execute('SELECT id FROM cities WHERE name = ? AND latitude = ? AND longitude = ?', 
                          (self.current_city_data['name'], 
                           self.current_city_data['latitude'],
                           self.current_city_data['longitude']))
            
            city_result = cursor.fetchone()
            if not city_result:
                print("‚ö†Ô∏è DEBUG: V√°ros nem tal√°lhat√≥ az adatb√°zisban")
                conn.close()
                return
            
            city_id = city_result[0]
            daily_data = weather_data['daily']
            
            # üåç Provider inform√°ci√≥
            data_provider = weather_data.get('provider', 'unknown')
            
            # Id≈ëj√°r√°si adatok ment√©se
            saved_count = 0
            for i, date in enumerate(daily_data['time']):
                try:
                    # üå™Ô∏è KRITIKUS JAV√çT√ÅS: wind_gusts_max oszlop hozz√°ad√°sa
                    wind_gusts_max = None
                    if 'wind_gusts_max' in daily_data and i < len(daily_data['wind_gusts_max']):
                        wind_gusts_max = daily_data['wind_gusts_max'][i]
                    
                    cursor.execute('''
                        INSERT OR REPLACE INTO weather_data 
                        (city_id, date, temp_max, temp_min, precipitation, windspeed_max, wind_gusts_max, data_provider)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                    ''', (
                        city_id,
                        date,
                        daily_data['temperature_2m_max'][i] if i < len(daily_data['temperature_2m_max']) else None,
                        daily_data['temperature_2m_min'][i] if i < len(daily_data['temperature_2m_min']) else None,
                        daily_data['precipitation_sum'][i] if i < len(daily_data['precipitation_sum']) else None,
                        daily_data.get('windspeed_10m_max', [None] * len(daily_data['time']))[i] if 'windspeed_10m_max' in daily_data else None,
                        wind_gusts_max,  # üå™Ô∏è KRITIKUS JAV√çT√ÅS: √öj wind_gusts_max oszlop
                        data_provider   # üåç Provider tracking
                    ))
                    saved_count += 1
                    
                    # Debug logol√°s sz√©ll√∂k√©sekhez
                    if wind_gusts_max is not None and wind_gusts_max > 80:
                        print(f"üå™Ô∏è DEBUG: Saved extreme wind gust ({data_provider}): {date} - {wind_gusts_max:.1f} km/h")
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è DEBUG: Rekord ment√©si hiba: {e}")
                    continue
            
            conn.commit()
            conn.close()
            
            # Sikeres ment√©s jelz√©se
            self.weather_saved_to_db.emit(True)
            
            print(f"‚úÖ DEBUG: Weather data mentve adatb√°zisba ({data_provider}): {saved_count} rekord")
            
        except Exception as e:
            print(f"‚ùå DEBUG: Weather data adatb√°zis hiba: {e}")
            self.weather_saved_to_db.emit(False)
    
    # === HIBA KEZEL√âS ===
    
    @Slot(str)
    def _on_worker_error(self, error_message: str) -> None:
        """
        Worker hib√°k kezel√©se.
        
        Args:
            error_message: Hiba√ºzenet
        """
        print(f"‚ùå DEBUG: Worker error: {error_message}")
        
        self.status_updated.emit(f"Hiba: {error_message}")
        self.error_occurred.emit(error_message)
    
    # === PUBLIKUS API ===
    
    def get_current_city(self) -> Optional[Dict[str, Any]]:
        """Jelenlegi kiv√°lasztott v√°ros adatainak lek√©rdez√©se."""
        return self.current_city_data.copy() if self.current_city_data else None
    
    def get_current_weather_data(self) -> Optional[Dict[str, Any]]:
        """Jelenlegi id≈ëj√°r√°si adatok lek√©rdez√©se."""
        return self.current_weather_data.copy() if self.current_weather_data else None
    
    def get_provider_info(self) -> Dict[str, Any]:
        """
        üåç Provider inform√°ci√≥k lek√©rdez√©se GUI sz√°m√°ra.
        
        Returns:
            Provider inform√°ci√≥k √©s statistics
        """
        try:
            current_provider = self.user_preferences.get_selected_provider()
            usage_summary = self.usage_tracker.get_usage_summary()
            
            return {
                'current_provider': current_provider,
                'usage_summary': usage_summary,
                'available_providers': list(self.provider_config.PROVIDERS.keys()),
                'provider_configs': self.provider_config.PROVIDERS
            }
        except Exception as e:
            print(f"‚ùå DEBUG: Provider info hiba: {e}")
            return {}
    
    def cancel_all_operations(self) -> None:
        """
        √ñsszes akt√≠v m≈±velet megszak√≠t√°sa.
        """
        try:
            print("üõë DEBUG: Cancelling all operations...")
            
            # WorkerManager k√∂zponti cancel
            self.worker_manager.cancel_all()
            
            self.status_updated.emit("M≈±veletek megszak√≠tva")
            print("‚úÖ DEBUG: √ñsszes m≈±velet megszak√≠tva via WorkerManager")
            
        except Exception as e:
            print(f"‚ùå DEBUG: M≈±veletek megszak√≠t√°si hiba: {e}")
    
    def shutdown(self) -> None:
        """Controller le√°ll√≠t√°sa √©s cleanup."""
        try:
            print("üõë DEBUG: AppController le√°ll√≠t√°sa...")
            
            # √ñsszes m≈±velet megszak√≠t√°sa
            self.cancel_all_operations()
            
            # WorkerManager k√∂zponti le√°ll√≠t√°s
            self.worker_manager.shutdown()
            
            # User preferences ment√©se
            self.user_preferences.save()
            self.usage_tracker.save()
            
            # √Ållapot tiszt√≠t√°sa
            self.current_city_data = None
            self.current_weather_data = None
            self.active_search_query = None
            
            print("‚úÖ DEBUG: AppController le√°ll√≠tva (PROVIDER ROUTING support)")
            
        except Exception as e:
            print(f"‚ö†Ô∏è DEBUG: Controller le√°ll√≠t√°si hiba: {e}")
            import traceback
            traceback.print_exc()