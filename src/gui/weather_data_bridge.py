#!/usr/bin/env python3
"""
Weather Data Bridge - Multi-City Engine ‚Üí Folium Map Integration
Global Weather Analyzer projekt

F√°jl: src/gui/weather_data_bridge.py
C√©l: Multi-City Engine eredm√©nyek √°talak√≠t√°sa Folium t√©rk√©p form√°tumra
- AnalyticsResult ‚Üí Folium Weather Overlay Data
- Koordin√°t√°k + √©rt√©kek kinyer√©se
- 4 weather overlay t√≠pus t√°mogat√°s
- Performance optimaliz√°ci√≥ nagyobb adathalmazokhoz

üîß KRITIKUS BREAKTHROUGH:
A multi_city_engine.py m√°r tartalmaz MINDEN sz√ºks√©ges adatot:
- CityWeatherResult objektumok koordin√°t√°kkal
- Val√≥s weather √©rt√©kek (temperature, precipitation, wind)
- NONE-safe adatkezel√©s
- Teljes statisztik√°k

Ez a bridge √∂sszk√∂ti az Analytics Engine-t a Folium t√©rk√©ppel!
"""

import logging
from typing import Dict, List, Optional, Any, Tuple
from datetime import datetime, date
from dataclasses import dataclass

from ..data.models import AnalyticsResult, CityWeatherResult, AnalyticsQuestion
from ..data.enums import AnalyticsMetric

logger = logging.getLogger(__name__)


@dataclass
class WeatherOverlayData:
    """Weather overlay adat strukt√∫ra Folium t√©rk√©phez"""
    overlay_type: str  # 'temperature', 'precipitation', 'wind_speed', 'wind_gusts'
    data: Dict[str, Dict[str, Any]]  # city_name -> {coordinates, value, additional_info}
    metadata: Dict[str, Any]  # min/max √©rt√©kek, egys√©gek, sz√≠nsk√°la info
    

class WeatherDataBridge:
    """
    Weather Data Bridge - Analytics Engine ‚Üí Folium Map Integration
    
    Felel≈ëss√©gek:
    - AnalyticsResult ‚Üí Folium overlay format konverzi√≥
    - 4 weather t√≠pus t√°mogat√°sa (h≈ëm√©rs√©klet, csapad√©k, sz√©l, sz√©ll√∂k√©s)
    - Koordin√°t√°k + √©rt√©kek kinyer√©se
    - Metrika alap√∫ overlay t√≠pus automatikus felismer√©s
    - Min/max √©rt√©kek sz√°m√≠t√°sa sz√≠nsk√°l√°khoz
    """
    
    # Metrika ‚Üí Overlay t√≠pus mapping
    METRIC_TO_OVERLAY = {
        AnalyticsMetric.TEMPERATURE_2M_MAX: 'temperature',
        AnalyticsMetric.TEMPERATURE_2M_MIN: 'temperature', 
        AnalyticsMetric.TEMPERATURE_2M_MEAN: 'temperature',
        AnalyticsMetric.PRECIPITATION_SUM: 'precipitation',
        AnalyticsMetric.WINDSPEED_10M_MAX: 'wind_speed',
        AnalyticsMetric.WINDGUSTS_10M_MAX: 'wind_gusts',
        AnalyticsMetric.TEMPERATURE_RANGE: 'temperature'
    }
    
    # Overlay konfigur√°ci√≥k
    OVERLAY_CONFIGS = {
        'temperature': {
            'name': 'H≈ëm√©rs√©klet',
            'unit': '¬∞C',
            'color_scale': 'RdYlBu_r',  # K√©k (hideg) ‚Üí Piros (meleg)
            'default_range': (-20, 40),
            'icon': 'üå°Ô∏è'
        },
        'precipitation': {
            'name': 'Csapad√©k', 
            'unit': 'mm',
            'color_scale': 'Blues',  # Vil√°gosk√©k ‚Üí S√∂t√©tk√©k
            'default_range': (0, 50),
            'icon': 'üåßÔ∏è'
        },
        'wind_speed': {
            'name': 'Sz√©lsebess√©g',
            'unit': 'km/h', 
            'color_scale': 'Greens',  # Vil√°gosz√∂ld ‚Üí S√∂t√©tz√∂ld
            'default_range': (0, 60),
            'icon': 'üí®'
        },
        'wind_gusts': {
            'name': 'Sz√©ll√∂k√©sek',
            'unit': 'km/h',
            'color_scale': 'Oranges',  # Vil√°gos ‚Üí S√∂t√©t narancs
            'default_range': (0, 100), 
            'icon': 'üå™Ô∏è'
        }
    }
    
    def __init__(self):
        logger.info("üåâ Weather Data Bridge inicializ√°lva")
    
    def convert_analytics_to_weather_overlay(self, analytics_result: AnalyticsResult) -> Optional[WeatherOverlayData]:
        """
        üîß KRITIKUS MET√ìDUS: AnalyticsResult ‚Üí WeatherOverlayData konverzi√≥
        
        Ez a met√≥dus √°talak√≠tja a multi_city_engine.py eredm√©nyeit
        Folium t√©rk√©p √°ltal v√°rt form√°tumba.
        
        Args:
            analytics_result: Multi-City Engine eredm√©nye
            
        Returns:
            WeatherOverlayData vagy None hiba eset√©n
        """
        try:
            if not analytics_result or not analytics_result.city_results:
                logger.warning("‚ö†Ô∏è √úres analytics eredm√©ny")
                return None
            
            # Metrika alap√∫ overlay t√≠pus meghat√°roz√°sa
            metric = analytics_result.question.metric
            overlay_type = self.METRIC_TO_OVERLAY.get(metric)
            
            if not overlay_type:
                logger.error(f"‚ùå Ismeretlen metrika overlay konverzi√≥hoz: {metric}")
                return None
            
            logger.info(f"üîÑ Konverzi√≥: {metric} ‚Üí {overlay_type} ({len(analytics_result.city_results)} v√°ros)")
            
            # Weather data Dictionary l√©trehoz√°sa
            weather_data = {}
            values = []
            
            for city_result in analytics_result.city_results:
                if self._is_valid_city_result(city_result):
                    city_data = {
                        'coordinates': [city_result.latitude, city_result.longitude],
                        'value': float(city_result.value),
                        'city_name': city_result.city_name,
                        'country': city_result.country,
                        'country_code': city_result.country_code,
                        'population': city_result.population,
                        'rank': getattr(city_result, 'rank', 0),
                        'quality_score': city_result.quality_score
                    }
                    
                    weather_data[city_result.city_name] = city_data
                    values.append(float(city_result.value))
            
            if not weather_data:
                logger.error("‚ùå Nincs √©rv√©nyes v√°ros adat a konverzi√≥hoz")
                return None
            
            # Metadata l√©trehoz√°sa (min/max, sz√≠nsk√°la info)
            metadata = self._create_overlay_metadata(overlay_type, values, analytics_result)
            
            overlay_data = WeatherOverlayData(
                overlay_type=overlay_type,
                data=weather_data,
                metadata=metadata
            )
            
            logger.info(f"‚úÖ Weather overlay konverzi√≥ sikeres: {len(weather_data)} v√°ros, tartom√°ny: {metadata.get('value_min', 'N/A')}-{metadata.get('value_max', 'N/A')}")
            
            return overlay_data
            
        except Exception as e:
            logger.error(f"‚ùå Hiba az analytics‚Üíoverlay konverzi√≥ban: {e}", exc_info=True)
            return None
    
    def _is_valid_city_result(self, city_result: CityWeatherResult) -> bool:
        """Ellen≈ërzi hogy a v√°ros eredm√©ny √©rv√©nyes-e overlay-hez"""
        return (city_result.latitude is not None and 
                city_result.longitude is not None and
                city_result.value is not None and
                isinstance(city_result.value, (int, float)) and
                not (city_result.value == 0 and city_result.city_name != ""))  # 0 √©rt√©k csak akkor valid ha nem placeholder
    
    def _create_overlay_metadata(self, overlay_type: str, values: List[float], analytics_result: AnalyticsResult) -> Dict[str, Any]:
        """Overlay metadata l√©trehoz√°sa (sz√≠nsk√°la, tartom√°ny, stb.)"""
        config = self.OVERLAY_CONFIGS[overlay_type]
        
        # Min/max √©rt√©kek
        value_min = min(values) if values else 0
        value_max = max(values) if values else 1
        
        # Sz√≠nsk√°la tartom√°ny optimaliz√°l√°s
        if overlay_type == 'temperature':
            # H≈ëm√©rs√©kletn√©l szimmetrikus sk√°la a 0¬∞C k√∂r√ºl
            abs_max = max(abs(value_min), abs(value_max))
            scale_min = -abs_max if value_min < 0 else min(value_min, 0)
            scale_max = abs_max if value_max > 0 else max(value_max, 0)
        else:
            # Egy√©b metr–∏–∫√°kn√°l 0-t√≥l indul√≥ sk√°la
            scale_min = 0
            scale_max = value_max * 1.1  # 10% padding felfel√©
        
        metadata = {
            'overlay_type': overlay_type,
            'name': config['name'],
            'unit': config['unit'],
            'icon': config['icon'],
            'color_scale': config['color_scale'],
            'value_min': value_min,
            'value_max': value_max,
            'scale_min': scale_min,
            'scale_max': scale_max,
            'total_cities': len(values),
            'analytics_question': analytics_result.question.question_text,
            'execution_time': analytics_result.execution_time,
            'data_sources': [source.value for source in analytics_result.data_sources_used],
            'statistics': analytics_result.statistics,
            'generated_at': datetime.now().isoformat()
        }
        
        return metadata
    
    def get_overlay_legend_data(self, overlay_data: WeatherOverlayData) -> Dict[str, Any]:
        """
        Legend adatok gener√°l√°sa a Folium t√©rk√©phez
        
        Returns:
            Legend konfigur√°ci√≥s dictionary
        """
        metadata = overlay_data.metadata
        
        legend_data = {
            'title': f"{metadata['icon']} {metadata['name']}",
            'unit': metadata['unit'],
            'min_value': metadata['scale_min'],
            'max_value': metadata['scale_max'],
            'color_scale': metadata['color_scale'],
            'total_cities': metadata['total_cities'],
            'value_range': f"{metadata['value_min']:.1f} - {metadata['value_max']:.1f}",
            'question': metadata['analytics_question']
        }
        
        return legend_data
    
    def create_multiple_overlays_from_analytics(self, analytics_results: List[AnalyticsResult]) -> Dict[str, WeatherOverlayData]:
        """
        T√∂bb analytics eredm√©nyb≈ël t√∂bb overlay l√©trehoz√°sa
        
        Haszn√°lat: Ha egyszerre t√∂bb metrika eredm√©nye van (pl. h≈ëm√©rs√©klet + csapad√©k)
        """
        overlays = {}
        
        for result in analytics_results:
            overlay_data = self.convert_analytics_to_weather_overlay(result)
            if overlay_data:
                overlays[overlay_data.overlay_type] = overlay_data
        
        logger.info(f"‚úÖ M√∫ltiplex overlay konverzi√≥: {len(overlays)} overlay t√≠pus")
        return overlays
    
    def get_folium_heatmap_data(self, overlay_data: WeatherOverlayData) -> List[List[float]]:
        """
        Folium HeatMap plugin form√°tumra konvert√°l√°s
        
        Returns:
            [[lat, lon, value], [lat, lon, value], ...] form√°tum
        """
        heatmap_data = []
        
        for city_name, city_data in overlay_data.data.items():
            lat, lon = city_data['coordinates']
            value = city_data['value']
            heatmap_data.append([lat, lon, value])
        
        logger.debug(f"üó∫Ô∏è HeatMap data gener√°lva: {len(heatmap_data)} pont")
        return heatmap_data
    
    def get_folium_marker_data(self, overlay_data: WeatherOverlayData) -> List[Dict[str, Any]]:
        """
        Folium CircleMarker vagy egy√©b marker form√°tumra konvert√°l√°s
        
        Returns:
            Marker konfigur√°ci√≥s lista
        """
        marker_data = []
        metadata = overlay_data.metadata
        
        for city_name, city_data in overlay_data.data.items():
            marker_config = {
                'latitude': city_data['coordinates'][0],
                'longitude': city_data['coordinates'][1], 
                'value': city_data['value'],
                'city_name': city_name,
                'country': city_data['country'],
                'popup_text': f"{city_name}, {city_data['country']}<br>{city_data['value']:.1f} {metadata['unit']}",
                'tooltip_text': f"{city_name}: {city_data['value']:.1f} {metadata['unit']}",
                'marker_size': self._calculate_marker_size(city_data['value'], metadata),
                'marker_color': self._calculate_marker_color(city_data['value'], metadata),
                'rank': city_data.get('rank', 0)
            }
            
            marker_data.append(marker_config)
        
        logger.debug(f"üìç Marker data gener√°lva: {len(marker_data)} marker")
        return marker_data
    
    def _calculate_marker_size(self, value: float, metadata: Dict[str, Any]) -> int:
        """Marker m√©ret sz√°m√≠t√°sa √©rt√©k alapj√°n"""
        value_range = metadata['scale_max'] - metadata['scale_min']
        if value_range == 0:
            return 8
        
        normalized = (value - metadata['scale_min']) / value_range
        min_size, max_size = 4, 20
        return int(min_size + normalized * (max_size - min_size))
    
    def _calculate_marker_color(self, value: float, metadata: Dict[str, Any]) -> str:
        """Marker sz√≠n sz√°m√≠t√°sa √©rt√©k alapj√°n (egyszer≈± megold√°s)"""
        value_range = metadata['scale_max'] - metadata['scale_min']
        if value_range == 0:
            return '#FF0000'
        
        normalized = (value - metadata['scale_min']) / value_range
        
        # Egyszer≈± sz√≠n interpol√°ci√≥ (k√©k ‚Üí piros)
        if normalized < 0.33:
            return '#0000FF'  # K√©k
        elif normalized < 0.66:
            return '#FFFF00'  # S√°rga
        else:
            return '#FF0000'  # Piros


# üß™ TESTING & DEBUG
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
    
    print("üåâ Weather Data Bridge - Teszt m√≥d")
    bridge = WeatherDataBridge()
    
    # Mock AnalyticsResult l√©trehoz√°sa tesztel√©shez
    from ..data.models import AnalyticsQuestion
    from ..data.enums import QuestionType, RegionScope
    
    mock_question = AnalyticsQuestion(
        question_text="Hol volt ma a legmelegebb Magyarorsz√°gban?",
        question_type=QuestionType.MULTI_CITY,
        region_scope=RegionScope.COUNTRY,
        metric=AnalyticsMetric.TEMPERATURE_2M_MAX
    )
    
    mock_cities = [
        CityWeatherResult(
            city_name="Budapest", country="Hungary", country_code="HU",
            latitude=47.4979, longitude=19.0402, value=25.3,
            metric=AnalyticsMetric.TEMPERATURE_2M_MAX,
            date=datetime.now().date(), population=1750000, quality_score=0.9
        ),
        CityWeatherResult(
            city_name="Debrecen", country="Hungary", country_code="HU", 
            latitude=47.5316, longitude=21.6273, value=23.8,
            metric=AnalyticsMetric.TEMPERATURE_2M_MAX,
            date=datetime.now().date(), population=200000, quality_score=0.8
        )
    ]
    
    mock_result = AnalyticsResult(
        question=mock_question, city_results=mock_cities,
        execution_time=2.5, total_cities_found=165,
        data_sources_used=[], statistics={'mean': 24.55, 'max': 25.3, 'min': 23.8},
        provider_statistics={}
    )
    
    # Konverzi√≥ teszt
    overlay_data = bridge.convert_analytics_to_weather_overlay(mock_result)
    if overlay_data:
        print(f"‚úÖ Overlay konverzi√≥ sikeres: {overlay_data.overlay_type}")
        print(f"üìä V√°rosok: {len(overlay_data.data)}")
        print(f"üìä Tartom√°ny: {overlay_data.metadata['value_min']}-{overlay_data.metadata['value_max']} {overlay_data.metadata['unit']}")
        
        # HeatMap data teszt
        heatmap_data = bridge.get_folium_heatmap_data(overlay_data)
        print(f"üó∫Ô∏è HeatMap pontok: {len(heatmap_data)}")
        
        # Marker data teszt
        marker_data = bridge.get_folium_marker_data(overlay_data)
        print(f"üìç Marker konfigur√°ci√≥: {len(marker_data)}")
    else:
        print("‚ùå Overlay konverzi√≥ sikertelen")
