# Folium t√©rk√©p bet√∂lt√©si probl√©ma debug script
# M√°sold be ezt a Python console-ba vagy futtasd k√ºl√∂n f√°jlk√©nt

def debug_folium_map_issue():
    """
    üîç Folium t√©rk√©p bet√∂lt√©si probl√©m√°k diagnosztiz√°l√°sa
    """
    print("üîç FOLIUM T√âRK√âP DEBUG ELIND√çTVA...")
    
    # 1. Folium library ellen≈ërz√©s
    try:
        import folium
        print(f"‚úÖ Folium version: {folium.__version__}")
    except ImportError as e:
        print(f"‚ùå Folium hi√°nyzik: {e}")
        print("üì• Telep√≠tsd: pip install folium branca")
        return
    
    # 2. HTML f√°jl gener√°l√°s teszt
    try:
        import tempfile
        import os
        from datetime import datetime
        
        # Teszt t√©rk√©p gener√°l√°s
        test_map = folium.Map(location=[47.1625, 19.5033], zoom_start=7)
        
        # Temp f√°jl l√©trehoz√°s
        temp_dir = tempfile.gettempdir()
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        test_html_path = os.path.join(temp_dir, f"folium_test_{timestamp}.html")
        
        # Ment√©s
        test_map.save(test_html_path)
        
        # Ellen≈ërz√©s
        if os.path.exists(test_html_path):
            file_size = os.path.getsize(test_html_path)
            print(f"‚úÖ Teszt HTML gener√°lva: {test_html_path}")
            print(f"üìè F√°jl m√©ret: {file_size} bytes")
            
            if file_size > 1000:
                print("‚úÖ HTML f√°jl m√©ret megfelel≈ë")
            else:
                print("‚ùå HTML f√°jl t√∫l kicsi!")
                
        else:
            print("‚ùå HTML f√°jl nem j√∂tt l√©tre!")
            
    except Exception as e:
        print(f"‚ùå HTML gener√°l√°si hiba: {e}")
    
    # 3. WebEngine be√°ll√≠t√°sok ellen≈ërz√©s
    try:
        from PySide6.QtWebEngineWidgets import QWebEngineView
        from PySide6.QtWebEngineCore import QWebEngineSettings
        print("‚úÖ WebEngine modulok el√©rhet≈ëk")
    except ImportError as e:
        print(f"‚ùå WebEngine modulok hi√°nyoznak: {e}")
    
    # 4. Temp k√∂nyvt√°r ellen≈ërz√©s
    temp_dir = tempfile.gettempdir()
    print(f"üìÅ Temp k√∂nyvt√°r: {temp_dir}")
    
    # Folium HTML f√°jlok keres√©se
    html_files = []
    try:
        for file in os.listdir(temp_dir):
            if file.startswith('hungarian_folium_map_') and file.endswith('.html'):
                file_path = os.path.join(temp_dir, file)
                file_size = os.path.getsize(file_path)
                file_time = os.path.getmtime(file_path)
                html_files.append({
                    'name': file,
                    'path': file_path,
                    'size': file_size,
                    'time': datetime.fromtimestamp(file_time)
                })
        
        print(f"üó∫Ô∏è Folium HTML f√°jlok tal√°lva: {len(html_files)}")
        for file_info in sorted(html_files, key=lambda x: x['time'], reverse=True)[:3]:
            print(f"   üìÑ {file_info['name']} - {file_info['size']} bytes - {file_info['time']}")
            
    except Exception as e:
        print(f"‚ùå Temp k√∂nyvt√°r olvas√°si hiba: {e}")
    
    print("\nüîß JAVASOLT MEGOLD√ÅSOK:")
    print("1. ‚ö° Kattints a 'K√©nyszer√≠tett √öjrat√∂lt√©s' gombra")
    print("2. üîÑ Pr√≥b√°ld meg a 'Friss√≠t√©s' gombot")
    print("3. üè† Kattints az 'Alaphelyzet' gombra")
    print("4. üí• Ha semmi sem m≈±k√∂dik, pr√≥b√°ld a 'Nuclear Reset' opci√≥t (ha el√©rhet≈ë)")
    
    # 5. WebEngine specific debug
    print("\nüåê WEBENGINE DEBUG TAN√ÅCSOK:")
    print("- Ellen≈ërizd a console-t JavaScript hib√°k√©rt")
    print("- N√©zd meg, hogy van-e 'file://' protokoll korl√°toz√°s")
    print("- Pr√≥b√°ld meg m√°s browser engine-nel (ha el√©rhet≈ë)")

# Futtat√°s
if __name__ == "__main__":
    debug_folium_map_issue()
else:
    debug_folium_map_issue()