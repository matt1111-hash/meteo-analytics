#!/usr/bin/env python3
"""
Magyar Telep√ºl√©sek Adatb√°zis Integr√°tor - JSON alap√∫ felt√∂lt≈ë
Forr√°s: magyar_telepulesek_2024_min.json
C√©l: Teljes magyar telep√ºl√©si adatb√°zis l√©trehoz√°sa a projekt sz√°m√°ra.
"""

import json
import sqlite3
from pathlib import Path
from typing import Dict, List, Optional
import logging

# Logger be√°ll√≠t√°sa
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class HungarianSettlementsJSONImporter:
    """
    3178 magyar telep√ºl√©s adatainak beolvas√°sa JSON-b√≥l √©s bet√∂lt√©se SQLite adatb√°zisba.
    """
    
    def __init__(self, json_path: str = "magyar_telepulesek_2024_min.json", db_path: str = "src/data/hungarian_settlements.db"):
        self.json_path = Path(json_path)
        self.db_path = Path(db_path)
        # Biztos√≠tjuk, hogy a /src/data k√∂nyvt√°r l√©tezzen
        self.db_path.parent.mkdir(parents=True, exist_ok=True)

    def load_from_json(self) -> List[Dict]:
        """Adatok beolvas√°sa a megadott JSON f√°jlb√≥l."""
        if not self.json_path.exists():
            logger.error(f"‚ùå A forr√°sf√°jl nem tal√°lhat√≥: {self.json_path}")
            raise FileNotFoundError(f"A forr√°sf√°jl nem tal√°lhat√≥: {self.json_path}")
        
        with open(self.json_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
            logger.info(f"‚úÖ Sikeresen beolvasva {len(data)} telep√ºl√©s a JSON f√°jlb√≥l.")
            return data

    def create_database_schema(self):
        """Adatb√°zis s√©ma l√©trehoz√°sa a magyar telep√ºl√©sek adatai sz√°m√°ra."""
        create_table_sql = """
        CREATE TABLE IF NOT EXISTS hungarian_settlements (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            settlement_type TEXT,
            megye TEXT,
            jaras TEXT,
            terulet_hektar REAL,
            population INTEGER,
            lakasok_szama INTEGER,
            latitude REAL,
            longitude REAL,
            climate_zone TEXT,
            data_source TEXT DEFAULT 'JSON_2024',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        
        -- Indexek a gyorsabb keres√©shez
        CREATE INDEX IF NOT EXISTS idx_name ON hungarian_settlements (name);
        CREATE INDEX IF NOT EXISTS idx_megye ON hungarian_settlements (megye);
        CREATE INDEX IF NOT EXISTS idx_jaras ON hungarian_settlements (jaras);
        CREATE INDEX IF NOT EXISTS idx_population ON hungarian_settlements (population DESC);
        """
        
        with sqlite3.connect(self.db_path) as conn:
            conn.executescript(create_table_sql)
            logger.info(f"‚úÖ Adatb√°zis s√©ma l√©trehozva/ellen≈ërizve itt: {self.db_path}")

    def process_and_insert_data(self, settlements_data: List[Dict]):
        """JSON adatok feldolgoz√°sa √©s bet√∂lt√©se az adatb√°zisba."""
        processed_settlements = []
        for settlement in settlements_data:
            # Kihagyjuk az "√ñsszesen" sort, ha van ilyen
            if settlement.get("telepules") == "√ñsszesen":
                continue

            processed = {
                'name': settlement.get("telepules"),
                'settlement_type': settlement.get("jogallas"),
                'megye': settlement.get("megye"),
                'jaras': settlement.get("jaras_nev"),
                'terulet_hektar': settlement.get("terulet_ha"),
                'population': settlement.get("nepesseg"),
                'lakasok_szama': settlement.get("lakasok_szama"),
                # Koordin√°t√°k hely≈ërz≈ëvel, ahogy a r√©gi szkriptben is volt
                'latitude': 47.4979,
                'longitude': 19.0402,
                'climate_zone': self._determine_climate_zone(47.4979, 19.0402) # Egyel≈ëre ez is placeholder
            }
            processed_settlements.append(processed)

        self._batch_insert_settlements(processed_settlements)
        logger.info(f"‚úÖ {len(processed_settlements)} telep√ºl√©s sikeresen bet√∂ltve az adatb√°zisba.")

    def _batch_insert_settlements(self, settlements: List[Dict]):
        """Adatok k√∂tegelt besz√∫r√°sa az adatb√°zisba."""
        insert_sql = """
        INSERT INTO hungarian_settlements 
        (name, settlement_type, megye, jaras, terulet_hektar, population, lakasok_szama, latitude, longitude, climate_zone)
        VALUES (:name, :settlement_type, :megye, :jaras, :terulet_hektar, :population, :lakasok_szama, :latitude, :longitude, :climate_zone)
        """
        
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            # Megl√©v≈ë adatok t√∂rl√©se a tiszta import √©rdek√©ben
            cursor.execute("DELETE FROM hungarian_settlements;")
            logger.info("R√©gi adatok t√∂r√∂lve az adatb√°zisb√≥l az √∫j import el≈ëtt.")
            
            cursor.executemany(insert_sql, settlements)
            conn.commit()

    def _determine_climate_zone(self, lat: float, lon: float) -> str:
        """Egyszer≈±s√≠tett kl√≠ma-z√≥na besorol√°s (k√©s≈ëbb fejleszthet≈ë)."""
        if lat > 47.5:
            return "√âszaki-k√∂z√©phegys√©g"
        elif lon < 18.5 and lat > 46.5:
            return "Dun√°nt√∫l"  
        elif lon > 19.5 and lat < 47.0:
            return "Alf√∂ld"
        else:
            return "√Åtmeneti"

    def run_import(self):
        """A teljes import√°l√°si folyamat futtat√°sa."""
        logger.info("üá≠üá∫ Magyar Telep√ºl√©sek Adatb√°zis Gener√°tor Ind√≠t√°sa (JSON forr√°sb√≥l)...")
        # 1. JSON beolvas√°sa
        settlements = self.load_from_json()
        # 2. Adatb√°zis s√©ma l√©trehoz√°sa
        self.create_database_schema()
        # 3. Adatok feldolgoz√°sa √©s bet√∂lt√©se
        self.process_and_insert_data(settlements)
        logger.info("üéâ Az import√°l√°si folyamat sikeresen lezajlott.")

def main():
    """A szkript f≈ë bel√©p√©si pontja."""
    importer = HungarianSettlementsJSONImporter()
    importer.run_import()

if __name__ == "__main__":
    main()