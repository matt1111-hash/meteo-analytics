#!/usr/bin/env python3
"""
Magyar Telep√ºl√©sek Koordin√°ta-jav√≠t√≥ Script (PROFESSZION√ÅLIS v1.0)
Global Weather Analyzer projekt

F√°jl: scripts/fix_hungarian_coordinates.py
Hely: /home/tibor/PythonProjects/openmeteo_history/global_weather_analyzer/scripts/

C√©l: 3178 magyar telep√ºl√©s koordin√°t√°inak jav√≠t√°sa OpenStreetMap Nominatim API-val
KRITIKUS PROBL√âMA: Minden telep√ºl√©s Budapest koordin√°t√°in van (47.4979, 19.0402)
MEGOLD√ÅS: Geocoding minden telep√ºl√©shez + adatb√°zis friss√≠t√©s

FONTOS:
- OpenStreetMap Nominatim API (100% INGYENES)
- Rate limit: 1 request/second (strict betart√°s)
- Resume capability (megszak√≠t√°s eset√©n folytathat√≥)
- Professional error handling √©s logging
- Automatikus backup k√©sz√≠t√©s

Fut√°si id≈ë: ~53 perc (3178 telep√ºl√©s √ó 1 sec)
Siker v√°rhat√≥: 95%+ (OSM kiv√°l√≥ magyar pokr√≠t√°s)
"""

import sqlite3
import requests
import time
import logging
import json
from pathlib import Path
from typing import Dict, List, Optional, Tuple, Any
from datetime import datetime
import sys

# Logging inicializ√°l√°s - PROFESSZION√ÅLIS SZINT
log_dir = Path("../logs")
log_dir.mkdir(exist_ok=True)

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(log_dir / 'fix_hungarian_coordinates.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class HungarianCoordinatesFixer:
    """
    Magyar telep√ºl√©sek koordin√°ta-jav√≠t√≥ oszt√°ly
    
    PROFESSZION√ÅLIS FUNKCIONALIT√ÅS:
    - OpenStreetMap Nominatim API integr√°ci√≥
    - Rate limiting (1 req/sec) strict betart√°s
    - Resume capability megszak√≠t√°s eset√©n
    - Automatic backup √©s rollback
    - Comprehensive error handling
    - Progress tracking √©s statistics
    - Duplicate detection √©s validation
    """
    
    def __init__(self, db_path: str):
        """
        Inicializ√°l√°s professional valid√°ci√≥val
        
        Args:
            db_path: Magyar telep√ºl√©sek adatb√°zis el√©r√©si √∫tja
        """
        self.db_path = Path(db_path)
        
        if not self.db_path.exists():
            raise FileNotFoundError(f"Adatb√°zis nem tal√°lhat√≥: {self.db_path}")
        
        # Nominatim API konfigur√°ci√≥ (STRICT OpenStreetMap guidelines)
        self.nominatim_base_url = "https://nominatim.openstreetmap.org/search"
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Global Weather Analyzer/2.2.0 (Hungarian Coordinates Fixer)',
            'Accept': 'application/json',
            'Accept-Language': 'hu,en'
        })
        
        # Rate limiting (OpenStreetMap STRICT: 1 req/sec maximum)
        self.min_request_interval = 1.0  # 1 m√°sodperc
        self.last_request_time = 0.0
        
        # Progress tracking
        self.stats = {
            'total_settlements': 0,
            'processed': 0,
            'successful': 0,
            'failed': 0,
            'skipped': 0,
            'api_requests': 0,
            'start_time': 0.0,
            'errors': []
        }
        
        # Resume t√°mogat√°s
        self.resume_file = Path("coordinate_fix_progress.json")
        self.processed_settlements = set()
        
        logger.info("üöÄ HungarianCoordinatesFixer inicializ√°lva (Professional v1.0)")
        logger.info(f"üìÅ Adatb√°zis: {self.db_path}")
        logger.info(f"üåç API: {self.nominatim_base_url}")
        logger.info(f"‚è±Ô∏è Rate limit: {self.min_request_interval} sec/request")
    
    def create_backup(self) -> Path:
        """
        Automatikus adatb√°zis backup l√©trehoz√°sa
        
        Returns:
            Backup f√°jl el√©r√©si √∫tja
        """
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_path = self.db_path.with_suffix(f'.backup_{timestamp}.db')
        
        try:
            import shutil
            shutil.copy2(self.db_path, backup_path)
            logger.info(f"üì¶ Backup l√©trehozva: {backup_path}")
            return backup_path
        except Exception as e:
            logger.error(f"‚ùå Backup l√©trehoz√°si hiba: {e}")
            raise
    
    def load_resume_progress(self) -> None:
        """Resume progress bet√∂lt√©se megszak√≠t√°s eset√©n"""
        if self.resume_file.exists():
            try:
                with open(self.resume_file, 'r', encoding='utf-8') as f:
                    resume_data = json.load(f)
                    
                self.processed_settlements = set(resume_data.get('processed', []))
                self.stats.update(resume_data.get('stats', {}))
                
                logger.info(f"üîÑ Resume: {len(self.processed_settlements)} telep√ºl√©s m√°r feldolgozva")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Resume file olvas√°si hiba: {e}")
                self.processed_settlements = set()
    
    def save_resume_progress(self) -> None:
        """Resume progress ment√©se"""
        try:
            resume_data = {
                'processed': list(self.processed_settlements),
                'stats': self.stats,
                'timestamp': datetime.now().isoformat()
            }
            
            with open(self.resume_file, 'w', encoding='utf-8') as f:
                json.dump(resume_data, f, indent=2, ensure_ascii=False)
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Resume file ment√©si hiba: {e}")
    
    def get_settlements_to_fix(self) -> List[Dict[str, Any]]:
        """
        Jav√≠tand√≥ telep√ºl√©sek lek√©rdez√©se Budapest koordin√°t√°kkal
        
        Returns:
            Telep√ºl√©sek list√°ja ID-val, n√©vvel √©s megy√©vel
        """
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # Csak Budapest koordin√°t√°kkal rendelkez≈ë telep√ºl√©sek
                cursor.execute('''
                    SELECT id, name, megye, jaras, settlement_type
                    FROM hungarian_settlements 
                    WHERE latitude = 47.4979 AND longitude = 19.0402
                    ORDER BY name
                ''')
                
                settlements = []
                for row in cursor.fetchall():
                    settlement = {
                        'id': row[0],
                        'name': row[1],
                        'megye': row[2],
                        'jaras': row[3],
                        'type': row[4]
                    }
                    settlements.append(settlement)
                
                self.stats['total_settlements'] = len(settlements)
                logger.info(f"üìä Jav√≠tand√≥ telep√ºl√©sek: {len(settlements)}")
                
                return settlements
                
        except sqlite3.Error as e:
            logger.error(f"‚ùå Adatb√°zis lek√©rdez√©si hiba: {e}")
            raise
    
    def rate_limit_wait(self) -> None:
        """
        Professional rate limiting - OpenStreetMap strict compliance
        """
        current_time = time.time()
        time_since_last = current_time - self.last_request_time
        
        if time_since_last < self.min_request_interval:
            sleep_time = self.min_request_interval - time_since_last
            logger.debug(f"‚è≥ Rate limiting: v√°rakoz√°s {sleep_time:.2f} m√°sodperc")
            time.sleep(sleep_time)
        
        self.last_request_time = time.time()
    
    def geocode_settlement(self, settlement: Dict[str, Any]) -> Optional[Tuple[float, float]]:
        """
        Telep√ºl√©s geocoding OpenStreetMap Nominatim API-val
        
        Args:
            settlement: Telep√ºl√©s adatok (n√©v, megye)
            
        Returns:
            (latitude, longitude) tuple vagy None ha sikertelen
        """
        settlement_name = settlement['name']
        megye = settlement['megye']
        
        # K√ºl√∂nb√∂z≈ë keres√©si strat√©gi√°k (magyar specifikus)
        search_queries = [
            f"{settlement_name}, {megye}, Hungary",  # Legspecifikusabb
            f"{settlement_name}, Hungary",           # √Åltal√°nos
            f"{settlement_name}, Magyarorsz√°g"       # Magyar nyelv≈±
        ]
        
        for query in search_queries:
            try:
                # Rate limiting STRICT betart√°sa
                self.rate_limit_wait()
                
                params = {
                    'q': query,
                    'format': 'json',
                    'limit': 1,
                    'countrycodes': 'hu',  # Csak Magyarorsz√°g
                    'addressdetails': 1,
                    'dedupe': 1
                }
                
                logger.debug(f"üîç Geocoding: {query}")
                
                response = self.session.get(
                    self.nominatim_base_url,
                    params=params,
                    timeout=10
                )
                
                self.stats['api_requests'] += 1
                
                if response.status_code == 200:
                    results = response.json()
                    
                    if results and len(results) > 0:
                        result = results[0]
                        lat = float(result['lat'])
                        lon = float(result['lon'])
                        
                        # Koordin√°ta valid√°l√°s (Magyarorsz√°g boundaries)
                        if self.validate_hungarian_coordinates(lat, lon):
                            logger.debug(f"‚úÖ Siker: {settlement_name} -> {lat:.4f}, {lon:.4f}")
                            return (lat, lon)
                        else:
                            logger.warning(f"‚ö†Ô∏è Koordin√°ta k√≠v√ºl esik Magyarorsz√°gon: {lat}, {lon}")
                    
                elif response.status_code == 429:
                    logger.warning("‚ö†Ô∏è Rate limit hit, v√°runk 2 m√°sodpercet...")
                    time.sleep(2)
                    continue
                else:
                    logger.warning(f"‚ö†Ô∏è API hiba: {response.status_code}")
                    
            except requests.exceptions.Timeout:
                logger.warning(f"‚ö†Ô∏è Timeout: {query}")
                continue
            except requests.exceptions.RequestException as e:
                logger.warning(f"‚ö†Ô∏è Request hiba: {e}")
                continue
            except (KeyError, ValueError, TypeError) as e:
                logger.warning(f"‚ö†Ô∏è Response parsing hiba: {e}")
                continue
        
        # Minden keres√©si strat√©gia sikertelen
        logger.error(f"‚ùå Geocoding sikertelen: {settlement_name}, {megye}")
        return None
    
    def validate_hungarian_coordinates(self, lat: float, lon: float) -> bool:
        """
        Magyar koordin√°t√°k valid√°l√°sa (bounding box)
        
        Args:
            lat: F√∂ldrajzi sz√©less√©g
            lon: F√∂ldrajzi hossz√∫s√°g
            
        Returns:
            True ha Magyarorsz√°g ter√ºlet√©n van
        """
        # Magyarorsz√°g bounding box (approx)
        HU_BOUNDS = {
            'lat_min': 45.7,   # D√©li hat√°r
            'lat_max': 48.6,   # √âszaki hat√°r
            'lon_min': 16.1,   # Nyugati hat√°r
            'lon_max': 22.9    # Keleti hat√°r
        }
        
        return (HU_BOUNDS['lat_min'] <= lat <= HU_BOUNDS['lat_max'] and
                HU_BOUNDS['lon_min'] <= lon <= HU_BOUNDS['lon_max'])
    
    def update_settlement_coordinates(self, settlement_id: int, lat: float, lon: float) -> bool:
        """
        Telep√ºl√©s koordin√°t√°inak friss√≠t√©se az adatb√°zisban
        
        Args:
            settlement_id: Telep√ºl√©s ID
            lat: √öj f√∂ldrajzi sz√©less√©g
            lon: √öj f√∂ldrajzi hossz√∫s√°g
            
        Returns:
            True ha sikeres a friss√≠t√©s
        """
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                cursor.execute('''
                    UPDATE hungarian_settlements 
                    SET latitude = ?, longitude = ?, updated_at = CURRENT_TIMESTAMP
                    WHERE id = ?
                ''', (lat, lon, settlement_id))
                
                if cursor.rowcount > 0:
                    conn.commit()
                    return True
                else:
                    logger.error(f"‚ùå Nincs friss√≠tend≈ë rekord: ID {settlement_id}")
                    return False
                    
        except sqlite3.Error as e:
            logger.error(f"‚ùå Adatb√°zis friss√≠t√©si hiba: {e}")
            return False
    
    def process_settlements(self) -> None:
        """
        √ñsszes telep√ºl√©s feldolgoz√°sa professional orchestration-nal
        """
        logger.info("üîß Telep√ºl√©sek koordin√°ta-jav√≠t√°s√°nak kezd√©se...")
        
        # Resume progress bet√∂lt√©se
        self.load_resume_progress()
        
        # Jav√≠tand√≥ telep√ºl√©sek lek√©rdez√©se
        settlements = self.get_settlements_to_fix()
        
        if not settlements:
            logger.info("‚úÖ Nincs jav√≠tand√≥ telep√ºl√©s (minden koordin√°ta rendben)")
            return
        
        self.stats['start_time'] = time.time()
        
        # Progress inform√°ci√≥k
        total_to_process = len([s for s in settlements if s['id'] not in self.processed_settlements])
        logger.info(f"üéØ Feldolgozand√≥ telep√ºl√©sek: {total_to_process}")
        if len(self.processed_settlements) > 0:
            logger.info(f"üîÑ M√°r feldolgozott: {len(self.processed_settlements)}")
        
        estimated_time = total_to_process * self.min_request_interval / 60
        logger.info(f"‚è±Ô∏è Becs√ºlt id≈ë: {estimated_time:.1f} perc")
        
        processed_count = 0
        
        for settlement in settlements:
            settlement_id = settlement['id']
            settlement_name = settlement['name']
            
            # Skip ha m√°r feldolgozva (resume)
            if settlement_id in self.processed_settlements:
                self.stats['skipped'] += 1
                continue
            
            try:
                processed_count += 1
                progress = (processed_count / total_to_process) * 100
                
                logger.info(f"üîç [{processed_count}/{total_to_process}] ({progress:.1f}%) {settlement_name}")
                
                # Geocoding v√©grehajt√°sa
                coordinates = self.geocode_settlement(settlement)
                
                if coordinates:
                    lat, lon = coordinates
                    
                    # Adatb√°zis friss√≠t√©se
                    if self.update_settlement_coordinates(settlement_id, lat, lon):
                        self.stats['successful'] += 1
                        logger.info(f"  ‚úÖ Friss√≠tve: {lat:.6f}, {lon:.6f}")
                    else:
                        self.stats['failed'] += 1
                        logger.error(f"  ‚ùå Adatb√°zis friss√≠t√©s sikertelen")
                else:
                    self.stats['failed'] += 1
                    logger.error(f"  ‚ùå Geocoding sikertelen")
                    
                    # Hiba ment√©se r√©szletes elemz√©shez
                    self.stats['errors'].append({
                        'settlement': settlement_name,
                        'megye': settlement['megye'],
                        'error': 'geocoding_failed'
                    })
                
                # Progress tracking update
                self.stats['processed'] += 1
                self.processed_settlements.add(settlement_id)
                
                # Resume progress ment√©se minden 10. telep√ºl√©s ut√°n
                if processed_count % 10 == 0:
                    self.save_resume_progress()
                    elapsed = time.time() - self.stats['start_time']
                    remaining = (total_to_process - processed_count) * self.min_request_interval
                    logger.info(f"üìä Progress: {self.stats['successful']} siker, {self.stats['failed']} hiba")
                    logger.info(f"‚è±Ô∏è H√°tral√©v≈ë id≈ë: {remaining/60:.1f} perc")
                
            except KeyboardInterrupt:
                logger.info("‚ö†Ô∏è Megszak√≠t√°s! Progress ment√©se...")
                self.save_resume_progress()
                raise
            except Exception as e:
                logger.error(f"‚ùå V√°ratlan hiba {settlement_name}-n√©l: {e}")
                self.stats['failed'] += 1
                self.stats['processed'] += 1
                continue
        
        # Final progress ment√©se
        self.save_resume_progress()
    
    def generate_final_report(self) -> None:
        """Final report gener√°l√°sa"""
        elapsed_time = time.time() - self.stats['start_time']
        success_rate = (self.stats['successful'] / max(self.stats['processed'], 1)) * 100
        
        logger.info("=" * 80)
        logger.info("üèÜ MAGYAR TELEP√úL√âSEK KOORDIN√ÅTA-JAV√çT√ÅS BEFEJEZVE!")
        logger.info("=" * 80)
        logger.info(f"üìä V√âGEREDM√âNY:")
        logger.info(f"   √ñsszes telep√ºl√©s: {self.stats['total_settlements']}")
        logger.info(f"   Feldolgozott: {self.stats['processed']}")
        logger.info(f"   Sikeres: {self.stats['successful']}")
        logger.info(f"   Sikertelen: {self.stats['failed']}")
        logger.info(f"   √Åtugrott: {self.stats['skipped']}")
        logger.info(f"   Sikeress√©gi ar√°ny: {success_rate:.1f}%")
        logger.info("")
        logger.info(f"üåç API STATISZTIK√ÅK:")
        logger.info(f"   Nominatim k√©r√©sek: {self.stats['api_requests']}")
        logger.info(f"   √Åtlagos v√°laszid≈ë: {elapsed_time/max(self.stats['api_requests'], 1):.2f} sec")
        logger.info("")
        logger.info(f"‚è±Ô∏è ID≈êSTATISZTIK√ÅK:")
        logger.info(f"   Teljes fut√°si id≈ë: {elapsed_time/60:.1f} perc")
        logger.info(f"   √Åtlagos feldolgoz√°si id≈ë: {elapsed_time/max(self.stats['processed'], 1):.2f} sec/telep√ºl√©s")
        logger.info("")
        
        if self.stats['errors']:
            logger.info(f"‚ùå HIB√ÅS TELEP√úL√âSEK (els≈ë 10):")
            for i, error in enumerate(self.stats['errors'][:10], 1):
                logger.info(f"   {i}. {error['settlement']} ({error['megye']})")
            
            if len(self.stats['errors']) > 10:
                logger.info(f"   ... √©s tov√°bbi {len(self.stats['errors']) - 10} hiba")
        
        logger.info("=" * 80)
        
        # Resume file t√∂rl√©se ha siker√ºlt
        if success_rate > 80:  # 80% feletti siker eset√©n
            if self.resume_file.exists():
                self.resume_file.unlink()
                logger.info("üóëÔ∏è Resume file t√∂r√∂lve (sikeres befejez√©s)")
    
    def validate_results(self) -> None:
        """Jav√≠tott koordin√°t√°k valid√°l√°sa"""
        logger.info("üîç Jav√≠tott koordin√°t√°k valid√°l√°sa...")
        
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # Budapest koordin√°t√°kkal m√©g mindig rendelkez≈ë telep√ºl√©sek
                cursor.execute('''
                    SELECT COUNT(*) FROM hungarian_settlements 
                    WHERE latitude = 47.4979 AND longitude = 19.0402
                ''')
                remaining_budapest = cursor.fetchone()[0]
                
                # Egyedi koordin√°t√°k sz√°ma
                cursor.execute('''
                    SELECT COUNT(DISTINCT CONCAT(latitude, longitude)) 
                    FROM hungarian_settlements
                ''')
                unique_coords = cursor.fetchone()[0]
                
                # Magyar hat√°ron bel√ºli koordin√°t√°k
                cursor.execute('''
                    SELECT COUNT(*) FROM hungarian_settlements 
                    WHERE latitude BETWEEN 45.7 AND 48.6 
                    AND longitude BETWEEN 16.1 AND 22.9
                ''')
                valid_hungarian_coords = cursor.fetchone()[0]
                
                logger.info(f"üìä VALID√ÅCI√ì EREDM√âNYEK:")
                logger.info(f"   Budapest koordin√°t√°kon: {remaining_budapest}")
                logger.info(f"   Egyedi koordin√°t√°k: {unique_coords}")
                logger.info(f"   Magyar hat√°ron bel√ºl: {valid_hungarian_coords}")
                
                if remaining_budapest == 0:
                    logger.info("üéâ TELJES SIKER! Nincs t√∂bb Budapest koordin√°ta!")
                elif remaining_budapest < 100:
                    logger.info(f"‚úÖ SZINTE K√âSZ! Csak {remaining_budapest} maradt")
                else:
                    logger.warning(f"‚ö†Ô∏è R√âSZLEGES SIKER: {remaining_budapest} telep√ºl√©s m√©g jav√≠t√°sra szorul")
                    
        except sqlite3.Error as e:
            logger.error(f"‚ùå Valid√°ci√≥ hiba: {e}")
    
    def run(self) -> int:
        """
        Teljes koordin√°ta-jav√≠t√°si folyamat futtat√°sa
        
        Returns:
            Exit k√≥d (0=success, 1=error)
        """
        try:
            logger.info("üöÄ Magyar telep√ºl√©sek koordin√°ta-jav√≠t√°s kezd√©se...")
            
            # Backup l√©trehoz√°sa
            self.create_backup()
            
            # Telep√ºl√©sek feldolgoz√°sa
            self.process_settlements()
            
            # Eredm√©nyek valid√°l√°sa
            self.validate_results()
            
            # Final report
            self.generate_final_report()
            
            logger.info("üéØ Koordin√°ta-jav√≠t√°s sikeresen befejezve!")
            return 0
            
        except KeyboardInterrupt:
            logger.info("‚ö†Ô∏è Felhaszn√°l√≥i megszak√≠t√°s")
            logger.info("üí° A folyamat k√©s≈ëbb folytathat√≥ ugyanazzal a paranccsal")
            return 1
        except Exception as e:
            logger.error(f"‚ùå Kritikus hiba: {e}")
            logger.exception("Full stacktrace:")
            return 1


def main() -> int:
    """
    F≈ëprogram - parancssori futtat√°s
    
    Returns:
        Exit k√≥d (0=success, 1=error)
    """
    try:
        # Adatb√°zis el√©r√©si √∫tvonal
        db_path = "../data/hungarian_settlements.db"
        
        if not Path(db_path).exists():
            logger.error(f"‚ùå Adatb√°zis nem tal√°lhat√≥: {Path(db_path).absolute()}")
            logger.error("üí° Ellen≈ërizd az el√©r√©si utat!")
            return 1
        
        # Fixer l√©trehoz√°sa √©s futtat√°sa
        fixer = HungarianCoordinatesFixer(db_path)
        return fixer.run()
        
    except Exception as e:
        logger.error(f"‚ùå Inicializ√°l√°si hiba: {e}")
        return 1


if __name__ == "__main__":
    print("üåç Magyar Telep√ºl√©sek Koordin√°ta-jav√≠t√≥ v1.0")
    print("=" * 50)
    print("FIGYELEM: Ez a script kb. 53 percig fog futni!")
    print("Rate limit: 1 request/second (OpenStreetMap policy)")
    print("Resume t√°mogat√°s: megszak√≠t√°s eset√©n folytathat√≥")
    print("=" * 50)
    
    confirm = input("Folytatod a jav√≠t√°st? (igen/nem): ").lower().strip()
    if confirm in ['igen', 'i', 'yes', 'y']:
        exit(main())
    else:
        print("‚ùå Megszak√≠tva.")
        exit(0)
