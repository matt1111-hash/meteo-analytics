#!/usr/bin/env python3
"""
Magyar Telep√ºl√©sek Adatb√°zis Integr√°tor - 3200+ Telep√ºl√©s (KSH HIVATALOS)
Forr√°s: KSH Helys√©gn√©vt√°r 2024 (hnt_letoltes_2024.xlsx)
C√©l: Teljes magyar telep√ºl√©si lefedetts√©g dinamikus param√©terrendszerrel

FELHASZN√ÅLT OSZLOPOK (user v√°laszt√°s alapj√°n):
‚úÖ A: Helys√©g megnevez√©se
‚úÖ C: Helys√©g jog√°ll√°sa  
‚úÖ D: V√°rmegye megnevez√©se
‚úÖ F: J√°r√°s neve
‚úÖ G: J√°r√°s sz√©khelye
‚úÖ J: Ter√ºlet (hekt√°r)
‚úÖ K: Lak√≥-n√©pess√©g
‚úÖ L: Lak√°sok sz√°ma

‚ùå KIHAGYOTT OSZLOPOK:
‚ùå B: KSH k√≥dja (nem k√©rt)
‚ùå E: J√°r√°s k√≥dja (nem k√©rt)
‚ùå H: Polg√°rmesteri hivatal adatok (nem k√©rt)
‚ùå I: Polg√°rmesteri hivatal adatok (nem k√©rt)

KIEG√âSZ√çT√âS:
+ Koordin√°t√°k OpenStreetMap Nominatim API-b√≥l
+ Automatikus kl√≠maanalitikai besorol√°s
+ NUTS r√©gi√≥k meghat√°roz√°sa
"""

import pandas as pd
import sqlite3
import requests
from pathlib import Path
from typing import Dict, List, Optional, Tuple
import logging
from datetime import datetime

logger = logging.getLogger(__name__)

class HungarianSettlementsDatabase:
    """3200+ magyar telep√ºl√©s adatb√°zis kezel≈ë"""
    
    def __init__(self, db_path: str = "data/hungarian_settlements.db"):
        self.db_path = Path(db_path)
        self.settlements_data: Optional[pd.DataFrame] = None
        
    def download_settlements_data(self) -> pd.DataFrame:
        """Magyar telep√ºl√©sek bet√∂lt√©se KSH Helys√©gn√©vt√°r-b√≥l (HELYI F√ÅJL)"""
        
        # Helyi KSH f√°jl el√©r√©si √∫tja
        local_ksh_file = Path("hnt_letoltes_2024.xlsx")
        
        # Backup: online let√∂lt√©s ha nincs helyi f√°jl
        online_url = "https://www.ksh.hu/docs/helysegnevtar/hnt_letoltes_2024.xlsx"
        
        try:
            if local_ksh_file.exists():
                logger.info(f"üèõÔ∏è Helyi KSH f√°jl bet√∂lt√©se: {local_ksh_file}")
                df = pd.read_excel(
                    local_ksh_file, 
                    sheet_name="Helys√©gek 2024.01.01.",
                    header=2,  # 3. sor a header (0-indexed: 0,1,2)
                    dtype={
                        'Helys√©g KSH k√≥dja': str,
                        'V√°rm. KSH k√≥dja': str,
                        'J√°r√°s KSH k√≥dja': str
                    }
                )
                logger.info(f"‚úÖ KSH helyi f√°jl sikeres: {len(df)} telep√ºl√©s")
                
            else:
                logger.info(f"üì• Helyi f√°jl nincs, online let√∂lt√©s: {online_url}")
                df = pd.read_excel(
                    online_url, 
                    sheet_name="Helys√©gek 2024.01.01.",
                    header=2,  # 3. sor a header (0-indexed)
                    dtype={
                        'Helys√©g KSH k√≥dja': str,
                        'V√°rm. KSH k√≥dja': str,
                        'J√°r√°s KSH k√≥dja': str
                    }
                )
                logger.info(f"‚úÖ KSH online let√∂lt√©s sikeres: {len(df)} telep√ºl√©s")
                
        except Exception as e:
            logger.error(f"‚ùå KSH f√°jl bet√∂lt√©si hiba: {e}")
            raise Exception(f"KSH Helys√©gn√©vt√°r nem √©rhet≈ë el: {e}")
        
        # Oszlopnevek debuggol√°sa
        logger.info(f"üìã Tal√°lt oszlopnevek: {list(df.columns)[:5]}...")
        
        # Alapvet≈ë adattiszt√≠t√°s
        df = df.dropna(subset=['Helys√©g megnevez√©se'])  # √úres n√©vtelen sorok kihagy√°sa
        
        logger.info(f"üìä Feldolgozand√≥ telep√ºl√©sek: {len(df)}")
        
        self.settlements_data = df
        return df
    
    def create_database_schema(self):
        """Adatb√°zis s√©ma l√©trehoz√°sa magyar telep√ºl√©sekhez"""
        
        create_table_sql = """
        CREATE TABLE IF NOT EXISTS hungarian_settlements (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            
            -- Alapadatok (A,C oszlopok)
            name TEXT NOT NULL,                    -- A: Helys√©g megnevez√©se
            settlement_type TEXT,                  -- C: Helys√©g jog√°ll√°sa
            postal_code TEXT,                     -- K√ºl√∂n p√≥tland√≥
            
            -- K√∂zigazgat√°si besorol√°s (D,F,G oszlopok)
            jaras TEXT,                           -- F: J√°r√°s neve
            jaras_szekhelye TEXT,                 -- G: J√°r√°s sz√©khelye
            megye TEXT NOT NULL,                  -- D: V√°rmegye megnevez√©se
            regio TEXT,                           -- NUTS r√©gi√≥ (sz√°m√≠tott)
            
            -- Koordin√°t√°k (WGS84) - OSM-b≈ël
            latitude REAL NOT NULL,               -- Sz√©less√©g
            longitude REAL NOT NULL,              -- Hossz√∫s√°g
            
            -- Statisztikai adatok (J,K,L oszlopok)
            population INTEGER,                   -- K: Lak√≥-n√©pess√©g
            terulet_hektar INTEGER,              -- J: Ter√ºlet (hekt√°r)
            lakasok_szama INTEGER,               -- L: Lak√°sok sz√°ma
            
            -- Meteorol√≥giai integr√°ci√≥
            meteostat_station_id TEXT,           -- Legk√∂zelebbi Meteostat √°llom√°s
            weather_data_quality INTEGER,        -- Id≈ëj√°r√°si adatok min≈ës√©ge (1-10)
            elevation REAL,                      -- Tengerszint feletti magass√°g
            
            -- Kl√≠maanalitikai besorol√°s
            climate_zone TEXT,                   -- Kl√≠maz√≥na (Alf√∂ld/Dun√°nt√∫l/stb.)
            region_priority INTEGER,             -- Elemz√©si priorit√°s
            
            -- Metaadatok
            data_source TEXT DEFAULT 'KSH_2024', -- Adatforr√°s
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        
        -- Indexek a gyors keres√©shez
        CREATE INDEX IF NOT EXISTS idx_megye ON hungarian_settlements (megye);
        CREATE INDEX IF NOT EXISTS idx_jaras ON hungarian_settlements (jaras);  
        CREATE INDEX IF NOT EXISTS idx_jaras_szekhelye ON hungarian_settlements (jaras_szekhelye);
        CREATE INDEX IF NOT EXISTS idx_regio ON hungarian_settlements (regio);
        CREATE INDEX IF NOT EXISTS idx_coordinates ON hungarian_settlements (latitude, longitude);
        CREATE INDEX IF NOT EXISTS idx_population ON hungarian_settlements (population DESC);
        CREATE INDEX IF NOT EXISTS idx_settlement_type ON hungarian_settlements (settlement_type);
        CREATE INDEX IF NOT EXISTS idx_climate_zone ON hungarian_settlements (climate_zone);
        CREATE INDEX IF NOT EXISTS idx_terulet ON hungarian_settlements (terulet_hektar DESC);
        """
        
        with sqlite3.connect(self.db_path) as conn:
            conn.executescript(create_table_sql)
            logger.info("‚úÖ Magyar telep√ºl√©s adatb√°zis s√©ma l√©trehozva")
    
    def process_and_insert_settlements(self, df: pd.DataFrame):
        """KSH Helys√©gn√©vt√°r adatok feldolgoz√°sa √©s besz√∫r√°sa (A,C,D,F,G,J,K,L oszlopok)"""
        
        processed_settlements = []
        
        logger.info("üìä KSH Helys√©gn√©vt√°r feldolgoz√°sa:")
        logger.info(f"√ñsszes oszlop: {list(df.columns)}")
        logger.info("üìã Haszn√°lt oszlopok: A,C,D,F,G,J,K,L (B,E,H,I kihagyva)")
        
        for idx, row in df.iterrows():
            # KSH oszlopok mapping (A,C,D,F,G,J,K,L)
            settlement_name = row.get('Helys√©g megnevez√©se', '')  # A oszlop
            settlement_type = row.get('Helys√©g jog√°ll√°sa', '')    # C oszlop
            megye = row.get('V√°rmegye megnevez√©se', '')           # D oszlop
            jaras_neve = row.get('J√°r√°s neve', '')                # F oszlop
            jaras_szekhelye = row.get('J√°r√°s sz√©khelye', '')      # G oszlop
            terulet_ha = row.get('Ter√ºlet (hekt√°r)', 0)           # J oszlop  
            population = row.get('Lak√≥-n√©pess√©g', 0)              # K oszlop
            lakasok_szama = row.get('Lak√°sok sz√°ma', 0)           # L oszlop
            
            # √úres vagy √©rv√©nytelen nevek kihagy√°sa
            if not settlement_name or pd.isna(settlement_name):
                logger.debug(f"√úres telep√ºl√©sn√©v kihagyva: sor {idx}")
                continue
            
            # Koordin√°t√°k beszerz√©se - GYORS M√ìD (OSM kihagyva)
            # TODO: K√ºl√∂n script koordin√°t√°k p√≥tl√°s√°hoz k√©s≈ëbb
            lat, lon = 47.4979, 19.0402  # Budapest default (minden telep√ºl√©sn√©l)
            
            # Debug: els≈ë 10 telep√ºl√©sn√©l jelezz√ºk hogy default koordin√°ta
            if len(processed_settlements) < 10:
                logger.info(f"üìç {settlement_name}: default Budapest koordin√°ta haszn√°lva")
            
            # Kl√≠maanalitikai besorol√°s automatikus
            climate_zone = self._determine_climate_zone(lat, lon)
            
            # R√©gi√≥ priorit√°s meghat√°roz√°sa
            region_priority = self._calculate_region_priority(megye, population)
            
            settlement = {
                'name': settlement_name,
                'settlement_type': self._normalize_ksh_settlement_type(settlement_type),
                'ksh_code': '',  # B oszlop kihagyva
                'postal_code': '',  # K√ºl√∂n kell p√≥tolni
                'jaras': jaras_neve,
                'jaras_szekhelye': jaras_szekhelye,
                'megye': megye,
                'regio': self._determine_nuts_region(megye),
                'latitude': lat,
                'longitude': lon,
                'population': int(population) if pd.notna(population) and population > 0 else None,
                'terulet_hektar': int(terulet_ha) if pd.notna(terulet_ha) and terulet_ha > 0 else None,
                'lakasok_szama': int(lakasok_szama) if pd.notna(lakasok_szama) and lakasok_szama > 0 else None,
                'climate_zone': climate_zone,
                'region_priority': region_priority,
                'weather_data_quality': 8,  # Alap√©rtelmezett j√≥ min≈ës√©g
            }
            
            processed_settlements.append(settlement)
            
            # Progress feedback minden 100. telep√ºl√©sn√©l
            if len(processed_settlements) % 100 == 0:
                logger.info(f"üìç Feldolgozva: {len(processed_settlements)} telep√ºl√©s")
        
        # Batch insert SQLite-ba
        self._batch_insert_settlements(processed_settlements)
        logger.info(f"‚úÖ {len(processed_settlements)} KSH telep√ºl√©s feldolgozva √©s besz√∫rva")
    
    def _determine_climate_zone(self, lat: float, lon: float) -> str:
        """Automatikus kl√≠maanalitikai besorol√°s koordin√°t√°k alapj√°n"""
        
        # Egyszer≈±s√≠tett f√∂ldrajzi besorol√°s
        if lat > 47.5:
            return "√âszaki-k√∂z√©phegys√©g"
        elif lon < 18.5 and lat > 46.5:
            return "Dun√°nt√∫l"  
        elif lon > 19.5 and lat < 47.0:
            return "Alf√∂ld"
        elif 47.0 <= lat <= 47.8 and 18.8 <= lon <= 19.3:
            return "Budapest-agglomer√°ci√≥"
        else:
            return "Dun√°nt√∫li-dombs√°g"
    
    def _calculate_region_priority(self, megye: str, population: int) -> int:
        """Elemz√©si priorit√°s sz√°m√≠t√°sa"""
        
        priority = 5  # Alap√©rtelmezett
        
        # F≈ëv√°ros √©s k√∂rny√©ke
        if megye == "Budapest":
            priority = 10
        elif megye == "Pest":
            priority = 9
            
        # Nagy megy√©k
        elif megye in ["B√°cs-Kiskun", "Hajd√∫-Bihar", "Csongr√°d-Csan√°d"]:
            priority = 8
            
        # Lakoss√°gsz√°m alapj√°n
        if population and population > 100000:
            priority += 2
        elif population and population > 50000:
            priority += 1
            
        return min(priority, 10)  # Maximum 10
    
    def _get_coordinates_from_osm(self, settlement_name: str, megye: str) -> Tuple[float, float]:
        """Koordin√°t√°k lek√©r√©se OpenStreetMap Nominatim API-b√≥l"""
        
        try:
            # Nominatim API URL
            base_url = "https://nominatim.openstreetmap.org/search"
            
            # Keres√©si query: "telep√ºl√©sn√©v, megye, Hungary"
            query = f"{settlement_name}, {megye}, Hungary"
            
            params = {
                'q': query,
                'format': 'json',
                'limit': 1,
                'countrycodes': 'hu',
                'addressdetails': 1
            }
            
            # API k√©r√©s (rate limiting betart√°s√°val)
            import requests
            import time
            
            time.sleep(0.1)  # 100ms k√©sleltet√©s API rate limit miatt
            
            response = requests.get(base_url, params=params, timeout=5)
            response.raise_for_status()
            
            data = response.json()
            
            if data and len(data) > 0:
                lat = float(data[0]['lat'])
                lon = float(data[0]['lon'])
                
                # Magyarorsz√°gi koordin√°t√°k ellen≈ërz√©se (kb. 45.5-49¬∞N, 16-23¬∞E)
                if 45.5 <= lat <= 49.0 and 16.0 <= lon <= 23.0:
                    return lat, lon
                    
        except Exception as e:
            logger.debug(f"OSM API hiba ({settlement_name}): {e}")
        
        # Hiba eset√©n alap√©rtelmezett magyar koordin√°ta (budapest k√∂rny√©ke)
        return 0.0, 0.0
    
    def _determine_nuts_region(self, megye: str) -> str:
        """NUTS r√©gi√≥ meghat√°roz√°sa megye alapj√°n"""
        
        nuts_mapping = {
            # K√∂z√©p-Magyarorsz√°g (NUTS HU10)
            "Budapest": "K√∂z√©p-Magyarorsz√°g",
            "Pest": "K√∂z√©p-Magyarorsz√°g",
            
            # K√∂z√©p-Dun√°nt√∫l (NUTS HU21)  
            "Fej√©r": "K√∂z√©p-Dun√°nt√∫l",
            "Kom√°rom-Esztergom": "K√∂z√©p-Dun√°nt√∫l",
            "Veszpr√©m": "K√∂z√©p-Dun√°nt√∫l",
            
            # Nyugat-Dun√°nt√∫l (NUTS HU22)
            "Gy≈ër-Moson-Sopron": "Nyugat-Dun√°nt√∫l", 
            "Vas": "Nyugat-Dun√°nt√∫l",
            "Zala": "Nyugat-Dun√°nt√∫l",
            
            # D√©l-Dun√°nt√∫l (NUTS HU23)
            "Baranya": "D√©l-Dun√°nt√∫l",
            "Somogy": "D√©l-Dun√°nt√∫l", 
            "Tolna": "D√©l-Dun√°nt√∫l",
            
            # √âszak-Magyarorsz√°g (NUTS HU31)
            "Borsod-Aba√∫j-Zempl√©n": "√âszak-Magyarorsz√°g",
            "Heves": "√âszak-Magyarorsz√°g",
            "N√≥gr√°d": "√âszak-Magyarorsz√°g",
            
            # √âszak-Alf√∂ld (NUTS HU32)
            "Hajd√∫-Bihar": "√âszak-Alf√∂ld",
            "J√°sz-Nagykun-Szolnok": "√âszak-Alf√∂ld", 
            "Szabolcs-Szatm√°r-Bereg": "√âszak-Alf√∂ld",
            
            # D√©l-Alf√∂ld (NUTS HU33)
            "B√°cs-Kiskun": "D√©l-Alf√∂ld",
            "B√©k√©s": "D√©l-Alf√∂ld",
            "Csongr√°d-Csan√°d": "D√©l-Alf√∂ld"
        }
        
        return nuts_mapping.get(megye, "Ismeretlen r√©gi√≥")
    
    def _normalize_ksh_settlement_type(self, jogallas) -> str:
        """KSH jog√°ll√°s normaliz√°l√°sa"""
        
        # NaN/float ellen≈ërz√©s
        if not jogallas or pd.isna(jogallas):
            return "ismeretlen"
        
        # String-√© konvert√°l√°s biztons√°gi okokb√≥l    
        jogallas_str = str(jogallas).strip()
        
        if not jogallas_str:
            return "ismeretlen"
            
        jogallas_lower = jogallas_str.lower()
        
        if "f≈ëv√°ros" in jogallas_lower:
            return "f≈ëv√°ros"
        elif "megyei jog√∫ v√°ros" in jogallas_lower:
            return "megyei jog√∫ v√°ros"
        elif "v√°ros" in jogallas_lower:
            return "v√°ros"
        elif "nagyk√∂zs√©g" in jogallas_lower:
            return "nagyk√∂zs√©g"
        elif "k√∂zs√©g" in jogallas_lower:
            return "k√∂zs√©g"
        else:
            return "egy√©b"
    
    def _batch_insert_settlements(self, settlements: List[Dict]):
        """Batch besz√∫r√°s optimaliz√°ltan (A,C,D,F,G,J,K,L oszlopok)"""
        
        insert_sql = """
        INSERT OR REPLACE INTO hungarian_settlements 
        (name, settlement_type, postal_code, jaras, jaras_szekhelye, megye, regio,
         latitude, longitude, population, terulet_hektar, lakasok_szama, 
         climate_zone, region_priority, weather_data_quality)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        """
        
        values = [
            (
                s['name'], s['settlement_type'], s['postal_code'], 
                s['jaras'], s['jaras_szekhelye'], s['megye'], s['regio'],
                s['latitude'], s['longitude'], s['population'], 
                s['terulet_hektar'], s['lakasok_szama'],
                s['climate_zone'], s['region_priority'], s['weather_data_quality']
            )
            for s in settlements
        ]
        
        with sqlite3.connect(self.db_path) as conn:
            conn.executemany(insert_sql, values)
            conn.commit()
    
    def get_statistics(self) -> Dict:
        """Adatb√°zis statisztik√°k"""
        
        with sqlite3.connect(self.db_path) as conn:
            stats = {}
            
            # √ñsszes telep√ºl√©s
            stats['total_settlements'] = conn.execute(
                "SELECT COUNT(*) FROM hungarian_settlements"
            ).fetchone()[0]
            
            # Megy√©nk√©nti bont√°s
            stats['by_county'] = dict(conn.execute(
                "SELECT megye, COUNT(*) FROM hungarian_settlements GROUP BY megye ORDER BY COUNT(*) DESC"
            ).fetchall())
            
            # Telep√ºl√©s t√≠pus szerint
            stats['by_type'] = dict(conn.execute(
                "SELECT settlement_type, COUNT(*) FROM hungarian_settlements GROUP BY settlement_type"
            ).fetchall())
            
            # Kl√≠maz√≥na szerint
            stats['by_climate_zone'] = dict(conn.execute(
                "SELECT climate_zone, COUNT(*) FROM hungarian_settlements GROUP BY climate_zone"
            ).fetchall())
            
            # Legnagyobb telep√ºl√©sek (friss√≠tett mez≈ëkkel)
            stats['largest_settlements'] = conn.execute(
                """SELECT name, megye, population, terulet_hektar, lakasok_szama 
                   FROM hungarian_settlements 
                   WHERE population IS NOT NULL 
                   ORDER BY population DESC LIMIT 10"""
            ).fetchall()
            
            # Ter√ºleti statisztik√°k
            stats['largest_by_area'] = conn.execute(
                """SELECT name, megye, terulet_hektar
                   FROM hungarian_settlements 
                   WHERE terulet_hektar IS NOT NULL 
                   ORDER BY terulet_hektar DESC LIMIT 5"""
            ).fetchall()
            
            # Lak√°s√°llom√°ny statisztik√°k
            stats['most_housing'] = conn.execute(
                """SELECT name, megye, lakasok_szama, population
                   FROM hungarian_settlements 
                   WHERE lakasok_szama IS NOT NULL 
                   ORDER BY lakasok_szama DESC LIMIT 5"""
            ).fetchall()
            
        return stats

class HungarianSettlementsManager:
    """Magyar telep√ºl√©s kezel≈ë - UI integr√°ci√≥hoz"""
    
    def __init__(self, db_path: str = "data/hungarian_settlements.db"):
        self.db_path = db_path
        
    def search_settlements(self, query: str = "", 
                         megye: str = "", 
                         settlement_type: str = "",
                         min_population: int = 0) -> List[Dict]:
        """Telep√ºl√©sek keres√©se rugalmas felt√©telekkel (friss√≠tett oszlopokkal)"""
        
        sql = """
        SELECT name, megye, jaras, jaras_szekhelye, settlement_type, 
               latitude, longitude, population, terulet_hektar, lakasok_szama,
               climate_zone, region_priority
        FROM hungarian_settlements 
        WHERE 1=1
        """
        params = []
        
        if query:
            sql += " AND name LIKE ?"
            params.append(f"%{query}%")
            
        if megye:
            sql += " AND megye = ?"
            params.append(megye)
            
        if settlement_type:
            sql += " AND settlement_type = ?"
            params.append(settlement_type)
            
        if min_population > 0:
            sql += " AND population >= ?"
            params.append(min_population)
            
        sql += " ORDER BY region_priority DESC, population DESC LIMIT 100"
        
        with sqlite3.connect(self.db_path) as conn:
            conn.row_factory = sqlite3.Row
            results = conn.execute(sql, params).fetchall()
            
        return [dict(row) for row in results]
    
    def get_settlements_by_region(self, climate_zone: str) -> List[Dict]:
        """Telep√ºl√©sek kl√≠maz√≥na szerint (friss√≠tett oszlopokkal)"""
        
        with sqlite3.connect(self.db_path) as conn:
            conn.row_factory = sqlite3.Row
            results = conn.execute(
                """SELECT name, latitude, longitude, population, terulet_hektar, 
                          lakasok_szama, megye, jaras, jaras_szekhelye
                   FROM hungarian_settlements 
                   WHERE climate_zone = ? 
                   ORDER BY population DESC""",
                (climate_zone,)
            ).fetchall()
            
        return [dict(row) for row in results]
    
    def get_counties(self) -> List[str]:
        """Megy√©k list√°ja"""
        
        with sqlite3.connect(self.db_path) as conn:
            results = conn.execute(
                "SELECT DISTINCT megye FROM hungarian_settlements ORDER BY megye"
            ).fetchall()
            
        return [row[0] for row in results]
    
    def get_climate_zones(self) -> List[str]:
        """Kl√≠maz√≥n√°k list√°ja"""
        
        with sqlite3.connect(self.db_path) as conn:
            results = conn.execute(
                "SELECT DISTINCT climate_zone FROM hungarian_settlements ORDER BY climate_zone"
            ).fetchall()
            
        return [row[0] for row in results]

def main():
    """Magyar telep√ºl√©sek adatb√°zis l√©trehoz√°sa √©s felt√∂lt√©se"""
    
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler('hungarian_settlements.log'),
            logging.StreamHandler()
        ]
    )
    
    logger.info("üá≠üá∫ Magyar Telep√ºl√©sek Adatb√°zis Gener√°tor v2.0 - KSH HIVATALOS")
    
    # Adatb√°zis inicializ√°l√°s
    db = HungarianSettlementsDatabase()
    
    try:
        # 1. KSH Excel f√°jl bet√∂lt√©se  
        logger.info("üì• KSH Helys√©gn√©vt√°r bet√∂lt√©se...")
        df = db.download_settlements_data()
        
        # 2. Gyors adatelemz√©s (A,C,D,F,G,J,K,L oszlopok)
        logger.info("üìä KSH adatok el≈ëzetes elemz√©se...")
        print(f"\nüìã Oszlopnevek (els≈ë 5): {list(df.columns)[:5]}...")
        print(f"üìç Telep√ºl√©sek sz√°ma: {len(df)}")
        
        # Csak akkor √≠rjuk ki ha megvannak az oszlopok
        if 'V√°rmegye megnevez√©se' in df.columns:
            print(f"üèõÔ∏è Megy√©k: {df['V√°rmegye megnevez√©se'].nunique()} db")
        if 'Helys√©g jog√°ll√°sa' in df.columns:
            print(f"üèòÔ∏è Jog√°ll√°sok: {df['Helys√©g jog√°ll√°sa'].value_counts().to_dict()}")
        
        # Statisztik√°k a megtartott oszlopokr√≥l
        if 'Lak√≥-n√©pess√©g' in df.columns:
            total_population = df['Lak√≥-n√©pess√©g'].sum()
            print(f"üë• √ñsszes lakoss√°g: {total_population:,} f≈ë")
            
        if 'Ter√ºlet (hekt√°r)' in df.columns:
            total_area = df['Ter√ºlet (hekt√°r)'].sum() 
            print(f"üó∫Ô∏è √ñsszes ter√ºlet: {total_area:,} hekt√°r")
            
        if 'Lak√°sok sz√°ma' in df.columns:
            total_housing = df['Lak√°sok sz√°ma'].sum()
            print(f"üè† √ñsszes lak√°s: {total_housing:,} db")
        
        # 3. Adatb√°zis s√©ma l√©trehoz√°sa
        logger.info("üóÉÔ∏è Adatb√°zis s√©ma l√©trehoz√°sa...")
        db.create_database_schema()
        
        # 4. Adatok feldolgoz√°sa √©s besz√∫r√°sa (KOORDIN√ÅT√ÅK N√âLK√úL - GYORS)
        logger.info("‚öôÔ∏è Adatok feldolgoz√°sa...")
        logger.warning("üìç FIGYELEM: Koordin√°t√°k Budapest default √©rt√©kkel (47.4979, 19.0402)")
        logger.warning("üîß TODO: K√ºl√∂n script koordin√°t√°k p√≥tl√°s√°hoz k√©s≈ëbb!")
        
        user_input = input("ü§î Folytatod Budapest default koordin√°t√°kkal? (y/n): ")
        if user_input.lower() != 'y':
            logger.info("‚ùå Feldolgoz√°s megszak√≠tva a user √°ltal")
            return
            
        db.process_and_insert_settlements(df)
        
        # 5. Statisztik√°k
        logger.info("üìä V√©gs≈ë statisztik√°k gener√°l√°sa...")
        stats = db.get_statistics()
        
        print("\nüéâ MAGYAR TELEP√úL√âSEK ADATB√ÅZIS K√âSZ!")
        print(f"üìç √ñsszes telep√ºl√©s: {stats['total_settlements']}")
        print("üèõÔ∏è Top 5 megye:")
        for megye, count in list(stats['by_county'].items())[:5]:
            print(f"   ‚Ä¢ {megye}: {count} telep√ºl√©s")
            
        print("üèòÔ∏è Telep√ºl√©s t√≠pusok:")
        for tipus, count in stats['by_type'].items():
            print(f"   ‚Ä¢ {tipus}: {count} db")
            
        print("üåç NUTS r√©gi√≥k:")
        for regio, count in stats['by_climate_zone'].items():
            print(f"   ‚Ä¢ {regio}: {count} telep√ºl√©s")
            
        print("üèÜ Legnagyobb telep√ºl√©sek:")
        for name, megye, population, terulet, lakasok in stats['largest_settlements'][:5]:
            terulet_str = f", {terulet} ha" if terulet else ""
            lakasok_str = f", {lakasok} lak√°s" if lakasok else ""
            print(f"   ‚Ä¢ {name} ({megye}): {population:,} f≈ë{terulet_str}{lakasok_str}")
        
        print("üó∫Ô∏è Legnagyobb ter√ºlet≈± telep√ºl√©sek:")
        for name, megye, terulet in stats['largest_by_area'][:3]:
            print(f"   ‚Ä¢ {name} ({megye}): {terulet:,} hekt√°r")
        
        print("üè† Legt√∂bb lak√°s:")
        for name, megye, lakasok, population in stats['most_housing'][:3]:
            if population and population > 0:
                arany = round(lakasok / population, 2)
                print(f"   ‚Ä¢ {name} ({megye}): {lakasok:,} lak√°s ({arany} lak√°s/f≈ë)")
            else:
                print(f"   ‚Ä¢ {name} ({megye}): {lakasok:,} lak√°s")
        
        # 6. Gyors teszt
        manager = HungarianSettlementsManager(db.db_path)
        budapest_results = manager.search_settlements(query="Budapest")
        print(f"\nüß™ Teszt - 'Budapest' keres√©s: {len(budapest_results)} tal√°lat")
        
        if budapest_results:
            bp = budapest_results[0]
            print(f"   üìç {bp['name']}: {bp['latitude']:.4f}, {bp['longitude']:.4f}")
            
        logger.info("‚úÖ Magyar telep√ºl√©sek adatb√°zis sikeresen l√©trehozva!")
        print("\nüöÄ Az adatb√°zis k√©szen √°ll a Magyar MVP haszn√°lat√°ra!")
        
    except Exception as e:
        logger.error(f"‚ùå Hiba: {e}")
        raise

def quick_test():
    """Gyors teszt a l√©tez≈ë adatb√°zissal"""
    
    print("üß™ Magyar Telep√ºl√©sek Adatb√°zis Gyorsteszt")
    
    try:
        manager = HungarianSettlementsManager()
        
        # Statisztik√°k
        counties = manager.get_counties()
        zones = manager.get_climate_zones()
        
        print(f"üèõÔ∏è Megy√©k sz√°ma: {len(counties)}")
        print(f"üåç Kl√≠maz√≥n√°k sz√°ma: {len(zones)}")
        
        # Keres√©si teszt (friss√≠tett oszlopokkal)
        budapest = manager.search_settlements(query="Budapest", min_population=1000000)
        print(f"üìç Budapest keres√©s: {len(budapest)} tal√°lat")
        
        if budapest:
            bp = budapest[0]
            print(f"   üìç {bp['name']}: {bp['latitude']:.4f}, {bp['longitude']:.4f}")
            print(f"   üë• N√©pess√©g: {bp['population']:,} f≈ë")
            if bp.get('terulet_hektar'):
                print(f"   üó∫Ô∏è Ter√ºlet: {bp['terulet_hektar']:,} ha")
            if bp.get('lakasok_szama'):
                print(f"   üè† Lak√°sok: {bp['lakasok_szama']:,} db")
        
        # Nagy v√°rosok (friss√≠tett mez≈ëkkel)
        major_cities = manager.search_settlements(min_population=100000)
        print(f"üèôÔ∏è 100k+ lakos√∫ v√°rosok: {len(major_cities)}")
        
        if major_cities:
            print("   Top 3 legnagyobb:")
            for city in major_cities[:3]:
                terulet_info = f", {city['terulet_hektar']} ha" if city.get('terulet_hektar') else ""
                print(f"   ‚Ä¢ {city['name']}: {city['population']:,} f≈ë{terulet_info}")
        
        print("‚úÖ Adatb√°zis m≈±k√∂d≈ëk√©pes!")
        
    except Exception as e:
        print(f"‚ùå Teszt hiba: {e}")

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1 and sys.argv[1] == "test":
        quick_test()
    else:
        main()
